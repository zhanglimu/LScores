/**
 * @license
 * Copyright 厦门乾元盛世科技有限公司 All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file.
 */
import { ApplicationRef, Component, ComponentFactoryResolver, ContentChild, ContentChildren, Directive, ElementRef, EventEmitter, Host, HostBinding, HostListener, Inject, Injectable, Injector, Input, NgModule, NgZone, Optional, Output, Renderer2, ViewChild, ViewChildren, ViewEncapsulation, animate, forwardRef, state, style, transition, trigger } from '@angular/core';
import { COMPOSITION_BUFFER_MODE, DefaultValueAccessor, FormsModule, NG_VALUE_ACCESSOR, NgControl, NgForm } from '@angular/forms';
import { DOCUMENT, DomSanitizer, ɵgetDOM } from '@angular/platform-browser';
import { Subject } from 'rxjs/Subject';
import { debounceTime, distinctUntilChanged } from 'rxjs/operators';
import { CommonModule } from '@angular/common';

/**
 * @license
 * Copyright 厦门乾元盛世科技有限公司 All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file.
 */
class WeUIFormControl extends DefaultValueAccessor {
    /**
     * @param {?} __renderer
     * @param {?} __elementRef
     * @param {?} __compositionMode
     */
    constructor(__renderer, __elementRef, __compositionMode) {
        super(__renderer, __elementRef, __compositionMode);
        this.__renderer = __renderer;
        this.__elementRef = __elementRef;
        this.__compositionMode = __compositionMode;
        /**
         * 是否禁用
         */
        this.disabled = false;
        /**
         * The internal data model
         */
        this._value = '';
        this._cls_cell = true;
        this._cls_control = true;
        this.id = WeUIFormControl.registerControl();
    }
    /**
     * The value of the input ngModel (model -> view)
     * @return {?}
     */
    get innerValue() {
        return this._value;
    }
    /**
     * The value of the input ngModel (view -> model)
     * @param {?} newValue
     * @return {?}
     */
    set innerValue(newValue) {
        if (this._value !== newValue) {
            this._value = newValue;
            // view -> model -> outside world (ie. NgModel on this control)
            this.onChange(newValue);
        }
    }
    /**
     * 注册控件
     * @return {?}
     */
    static registerControl() {
        return 'weui-control-' + (++WeUIFormControl.count).toString();
    }
    /**
     * Write a new value to the element. (From ControlValueAccessor interface)
     * @param {?} value
     * @return {?}
     */
    writeValue(value) {
        this._value = value;
    }
    /**
     * 设置禁用状态 (From ControlValueAccessor interface)
     * @param {?} isDisabled
     * @return {?}
     */
    setDisabledState(isDisabled) {
        this.disabled = isDisabled;
    }
}
/**
 * 计数器
 */
WeUIFormControl.count = 0;
WeUIFormControl.decorators = [
    { type: Component, args: [{
                selector: 'WeUIFormControl',
                template: ``
            },] },
];
/**
 * @nocollapse
 */
WeUIFormControl.ctorParameters = () => [
    { type: Renderer2, decorators: [{ type: Inject, args: [Renderer2,] },] },
    { type: ElementRef, decorators: [{ type: Inject, args: [ElementRef,] },] },
    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [COMPOSITION_BUFFER_MODE,] },] },
];
WeUIFormControl.propDecorators = {
    'id': [{ type: Input },],
    'name': [{ type: Input },],
    'label': [{ type: Input },],
    'disabled': [{ type: Input },],
    'value': [{ type: Input },],
    '_cls_cell': [{ type: HostBinding, args: ['class.weui-cell',] },],
    '_cls_control': [{ type: HostBinding, args: ['class.weui-control',] },],
};

/**
 * @license
 * Copyright 厦门乾元盛世科技有限公司 All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file.
 */
/**
 * 徽章
 */
class WeUIBadge {
    constructor() {
        /**
         * 颜色，取值：default、primary、warn等。默认为default。<br>
         * 自定义的颜色名称与色值，可以定义在 工程根目录/src/theme/variables.scss 文件中的 $colors 对象。
         */
        this.color = 'default';
    }
}
WeUIBadge.decorators = [
    { type: Component, args: [{
                selector: 'weui-badge',
                template: `
        <span class="weui-badge weui-badge_{{color}}"
             [ngClass]="{'weui-badge_dot': dot !== undefined && dot !== null}"><ng-content></ng-content></span>`
            },] },
];
/**
 * @nocollapse
 */
WeUIBadge.ctorParameters = () => [];
WeUIBadge.propDecorators = {
    'color': [{ type: Input },],
    'dot': [{ type: Input },],
};

/**
 * @license
 * Copyright 厦门乾元盛世科技有限公司 All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file.
 */
class WeUIButton {
    constructor() {
        /**
         * 颜色，取值：default、primary、warn等。默认为default。<br>
         * 自定义的颜色名称与色值，可以定义在 工程根目录/src/theme/variables.scss 文件中的 $colors 对象。
         */
        this.color = 'default';
        /**
         * 正在加载
         */
        this.loading = false;
        /**
         * 禁用样式
         */
        this.disabled = false;
    }
    /**
     * @return {?}
     */
    getColorStyle() {
        return 'weui-btn_' + (this.plain !== undefined ? 'plain-' : '') + this.color;
    }
}
WeUIButton.decorators = [
    { type: Component, args: [{
                selector: 'weui-button',
                template: `
        <a href="javascript:;" class="weui-btn {{getColorStyle()}}"
            [ngClass]="{
                'weui-btn_disabled': disabled && plain == undefined,
                'weui-btn_plain-disabled': disabled && plain !== undefined,
                'weui-btn_loading': loading,
                'weui-btn_mini': mini !== undefined
            }">
            <i class="weui-loading" *ngIf="loading"></i>
            <ng-content></ng-content>
        </a>
    `
            },] },
];
/**
 * @nocollapse
 */
WeUIButton.ctorParameters = () => [];
WeUIButton.propDecorators = {
    'color': [{ type: Input },],
    'plain': [{ type: Input },],
    'mini': [{ type: Input },],
    'loading': [{ type: Input },],
    'disabled': [{ type: Input },],
};

/**
 * @license
 * Copyright 厦门乾元盛世科技有限公司 All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file.
 */
class WeUISubmit {
    constructor() {
        /**
         * 颜色，取值：default、primary、warn等。默认为default。<br>
         * 自定义的颜色名称与色值，可以定义在 工程根目录/src/theme/variables.scss 文件中的 $colors 对象。
         */
        this.color = 'default';
        /**
         * 按钮类型
         */
        this.type = 'submit';
        /**
         * 正在加载
         */
        this.loading = false;
        /**
         * 禁用样式
         */
        this.disabled = false;
    }
    /**
     * @return {?}
     */
    getColorStyle() {
        return 'weui-btn_' + (this.plain !== undefined ? 'plain-' : '') + this.color;
    }
}
WeUISubmit.decorators = [
    { type: Component, args: [{
                selector: 'weui-submit',
                template: `
        <button [attr.type]="type" class="weui-btn {{getColorStyle()}}"
            [ngClass]="{
                'weui-btn_disabled': disabled && plain == undefined,
                'weui-btn_plain-disabled': disabled && plain !== undefined,
                'weui-btn_loading': loading,
                'weui-btn_mini': mini !== undefined
            }">
            <i class="weui-loading" *ngIf="loading"></i>
            <ng-content></ng-content>
        </button>
    `
            },] },
];
/**
 * @nocollapse
 */
WeUISubmit.ctorParameters = () => [];
WeUISubmit.propDecorators = {
    'color': [{ type: Input },],
    'type': [{ type: Input },],
    'plain': [{ type: Input },],
    'mini': [{ type: Input },],
    'loading': [{ type: Input },],
    'disabled': [{ type: Input },],
};

/**
 * @license
 * Copyright 厦门乾元盛世科技有限公司 All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file.
 */
const WEUI_FORM_CONTROL_VALUE_ACCESSOR = {
    provide: NG_VALUE_ACCESSOR,
    useExisting: forwardRef(() => WeUICheckbox),
    multi: true
};
class WeUICheckbox extends WeUIFormControl {
    /**
     * @param {?} renderer
     * @param {?} elementRef
     * @param {?} compositionMode
     */
    constructor(renderer, elementRef, compositionMode) {
        super(renderer, elementRef, compositionMode);
        this.renderer = renderer;
        this.elementRef = elementRef;
        this.compositionMode = compositionMode;
        /**
         * 是否已选中
         */
        this.checked = false;
        /**
         * 选中的值
         */
        this.values = [];
        /**
         * 扩展样式
         */
        this._cls_check_label = true;
        this.value = 'on'; // default value
    }
    /**
     * The value of the input ngModel。 (view -> model)
     * @param {?} checked
     * @return {?}
     */
    set innerValue(checked) {
        this._value = checked || false;
        const /** @type {?} */ index = this.values.indexOf(this.value);
        if (checked) {
            if (index === -1) {
                this.values.push(this.value);
            }
        }
        else {
            if (index >= 0) {
                this.values.splice(index, 1);
            }
        }
        // view -> model -> outside world (ie. NgModel on this control)
        this.onChange(this.values);
        // console.log('innerValue: id=' + this.id + ', name=' + this.name
        //  + ', values=' + JSON.stringify(this.values) + ', checked=' + this._value);
    }
    /**
     * Write a new value to the element. (From ControlValueAccessor interface)
     * @param {?} value
     * @return {?}
     */
    writeValue(value) {
        if (value !== null) {
            this.values = value;
        }
        this.checked = this.values.indexOf(this.value) >= 0;
        super.writeValue(this.checked);
        // console.log('writeValue: id=' + this.id + ', name=' + this.name
        //  + ', values=' + JSON.stringify(this.values) + ', checked=' + this._value);
    }
}
WeUICheckbox.decorators = [
    { type: Component, args: [{
                selector: 'weui-checkbox',
                providers: [WEUI_FORM_CONTROL_VALUE_ACCESSOR],
                template: `
        <label class="weui-check__label" [for]="id" (click)="onTouched()">
            <div class="weui-cell__hd">
                <input type="checkbox" class="weui-check"
                    [attr.id]="id" [attr.name]="name" [value]="value"
                    [checked]="checked" [(ngModel)]="innerValue">
                <i class="weui-icon-checked"></i>
            </div>
            <div class="weui-cell__bd">
                {{label}}<ng-content></ng-content>
            </div>
        </label>
    `
            },] },
];
/**
 * @nocollapse
 */
WeUICheckbox.ctorParameters = () => [
    { type: Renderer2, },
    { type: ElementRef, },
    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [COMPOSITION_BUFFER_MODE,] },] },
];
WeUICheckbox.propDecorators = {
    '_cls_check_label': [{ type: HostBinding, args: ['class.weui-check__label',] },],
};

/**
 * @license
 * Copyright 厦门乾元盛世科技有限公司 All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file.
 */
/**
 * 菜单选项
 */

/**
 * 多列选择器
 * 参考了 {\@link https://github.com/weui/weui.js/blob/master/src/picker/picker.js}的实现
 */
class WeUIPicker {
    constructor() {
        /**
         * \@i18n
         */
        this.defaults = {
            cancelText: '取消',
            confirmText: '确定'
        };
        /**
         * 多列菜单列表，内容任意，其中<code>label</code>用于显示，<code>value</code>表示值，<code>disabled</code>表示不可选择项。<br>
         * 注意：列的个数不宜超过3个。
         */
        this.menus = [];
        /**
         * 当前选择的值（每列对应一个值）
         */
        this.value = [];
        /**
         * \@i18n 取消
         */
        this.cancelText = this.defaults.cancelText;
        /**
         * \@i18n 确定
         */
        this.confirmText = this.defaults.confirmText;
        /**
         * 关闭事件
         */
        this.close = new EventEmitter();
        /**
         * 已显示否
         */
        this.shown = false;
        /**
         * 已显示否
         */
        this.hidden = true;
    }
    /**
     * 单列菜单列表，内容任意，其中<code>label</code>用于显示，<code>value</code>表示值，<code>disabled</code>表示不可选择项。
     * @param {?} menu
     * @return {?}
     */
    set menu(menu) {
        if (menu !== undefined && menu !== null && menu.length) {
            this.menus = [menu];
        }
    }
    ;
    /**
     * 用于控制控件的可视化
     * @return {?}
     */
    get hideCls() {
        return this.hidden;
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onAnimationEnd(event) {
        if (event.animationName === 'slideDown') {
            this.hidden = true;
            this.close.emit();
        }
    }
    /**
     * 显示菜单
     * @return {?}
     */
    show() {
        this.hidden = false;
        this.shown = true;
        return new Promise((resolve, reject) => {
            this.resolve = resolve;
        });
    }
    /**
     * 隐藏菜单
     * @return {?}
     */
    hide() {
        this.shown = false;
    }
    /**
     * 某列数据修改时触发
     *
     * @param {?} option 该列数据的选择项
     * @param {?} index  该列在组内的索引
     * @return {?}
     */
    onChange(option, index) {
        if (option) {
            this.value[index] = option;
        }
    }
    /**
     * 点击【确定】按钮时，通过Promise.resolve()输出最终值
     * @return {?}
     */
    onConfirm() {
        this.resolve(this.value);
        this.hide();
    }
    /**
     * 点击【取消】按钮时，关闭Picker
     * @return {?}
     */
    onCancel() {
        this.hide();
    }
}
WeUIPicker.decorators = [
    { type: Component, args: [{
                selector: 'weui-picker',
                template: `
        <div class="weui-mask" (click)="onCancel()"
            [ngClass]="{'weui-animate-fade-in': shown, 'weui-animate-fade-out': !shown}"></div>
        <div class="weui-picker"
            [ngClass]="{'weui-animate-slide-up': shown, 'weui-animate-slide-down': !shown}"
            (animationend)="onAnimationEnd($event)">
            <div class="weui-picker__hd">
                <a href="javascript:;" class="weui-picker__action" (click)="onCancel()">{{cancelText}}  </a>
                <a href="javascript:;" class="weui-picker__action" (click)="onConfirm()">{{confirmText}}</a>
            </div>
            <div class="weui-picker__bd">
                <weui-picker-group tappable class="weui-picker__group"
                    *ngFor="let options of menus; let i = index;"
                    [options]="options" [value]="value[i]" (change)="onChange($event, i)"></weui-picker-group>
            </div>
        </div>
    `,
                exportAs: 'weuiPicker'
            },] },
];
/**
 * @nocollapse
 */
WeUIPicker.ctorParameters = () => [];
WeUIPicker.propDecorators = {
    'menu': [{ type: Input },],
    'menus': [{ type: Input },],
    'value': [{ type: Input },],
    'cancelText': [{ type: Input },],
    'confirmText': [{ type: Input },],
    'hideCls': [{ type: HostBinding, args: ['class.weui-hide',] },],
    'close': [{ type: Output },],
};

/**
 * @license
 * Copyright 厦门乾元盛世科技有限公司 All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file.
 */
/**
 * 获取Window窗口的高度
 */
const getWindowHeight = () => {
    return window.innerHeight;
};
class WeUIPickerGroup {
    constructor() {
        /**
         * 默认参数
         */
        this.defaults = {
            offset: 3,
            rowHeight: 34,
            bodyHeight: 7 * 34,
            inertiaTime: 150,
            slideDuration: 300 // 惯性滑动的动画时间，表现为最终可视化的效果
        };
        /**
         * 当前列表组的选项
         */
        this.options = [];
        /**
         * 修改事件
         */
        this.change = new EventEmitter();
        /**
         * 选项滚动的距离，用于设置translate3d的Y值
         */
        this.distance = 0;
        /**
         * 选项惯性滚动的时间
         */
        this.duration = 0;
    }
    /**
     * @return {?}
     */
    get translate3d() {
        return `translate3d(0, ${this.distance}px, 0)`;
    }
    /**
     * @return {?}
     */
    get transition() {
        return `all ${this.duration}ms`;
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        setTimeout(() => {
            this.init();
        }, 1);
    }
    /**
     * @return {?}
     */
    forceChange() {
        this.init();
    }
    /**
     * @param {?} event
     * @return {?}
     */
    _start(event) {
        this.startY = event.changedTouches[0].pageY;
        this.startTime = +new Date();
    }
    /**
     * @param {?} event
     * @return {?}
     */
    _move(event) {
        const /** @type {?} */ endTime = +new Date();
        this.endY = event.changedTouches[0].pageY;
        // 计算滑动的速度: 距离 / 时间
        const /** @type {?} */ _distance = this.endY - (this.startY || 0);
        this.speed = _distance / (endTime - this.startTime);
        // 重新设置开始时间、开始位置
        this.startTime = endTime;
        this.startY = this.endY;
        this.duration = 0; // ms
        this.distance += _distance; // 内容移动的距离
        // console.log(`速度=${this.speed} px/ms`);
        event.preventDefault();
    }
    /**
     * @param {?} event
     * @return {?}
     */
    _end(event) {
        if (!this.startY) {
            return;
        }
        this.endY = event.changedTouches[0].pageY;
        /**
         * 思路:
         * 根据最后一次touchmove事件的速度(speed)，判断是否执行惯性滑动；
         * 如果speed大于1、小于5，则根据速度乘以惯性滑动的时间(如150ms)，计算出应该滑动的距离；
         * 如果speed大于5，则按照屏幕的高度(减去列表高度的一半)，作为该滑动的距离。
         */
        const _speed = Math.abs(this.speed);
        if (_speed >= 5) {
            const /** @type {?} */ windowY = getWindowHeight() - (this.defaults.bodyHeight / 2);
            this.stop(windowY - this.endY);
        }
        else if (_speed >= 1) {
            const /** @type {?} */ diff = this.speed * this.defaults.inertiaTime; // 滑行 150ms,这里直接影响“灵敏度”
            this.stop(diff);
        }
        else {
            this.stop(0);
        }
        this.startY = null;
    }
    /**
     * @return {?}
     */
    init() {
        let /** @type {?} */ index = 0;
        if (this.value) {
            const /** @type {?} */ len = this.options && this.options.length || 0;
            for (; index < len; index++) {
                const /** @type {?} */ option = this.options[index];
                if (this.value === option.value || this.value['value'] === option.value) {
                    this.onChange(option, index);
                    this.distance = (this.defaults.offset - index) * this.defaults.rowHeight;
                    return; // 已找到匹配选项，直接返回
                }
            }
            console.warn('Picker has not match defaultValue:', this.value);
        }
        // 没有传入value，或者 有value但是没有匹配的选项
        index = this._getDefaultIndex(this.options);
        this.onChange(this.options[index], index);
        this.distance = this._getDefaultTranslate(this.defaults.offset, this.defaults.rowHeight, this.options);
    }
    /**
     * 当touch事件结束时，根据惯性滑动计算当前在哪个选项，以及列表滚动的最终距离
     *
     * @param {?} diff 惯性滑动的距离
     * @return {?}
     */
    stop(diff) {
        let /** @type {?} */ dist = this.distance + diff;
        // 移动到最接近的那一行
        dist = Math.round(dist / this.defaults.rowHeight) * this.defaults.rowHeight;
        const /** @type {?} */ max = this._getMax(this.defaults.offset, this.defaults.rowHeight);
        const /** @type {?} */ min = this._getMin(this.defaults.offset, this.defaults.rowHeight, this.options.length);
        // console.log(`移动距离: dist=${dist}px`);
        // 不要超过最大值或者最小值
        dist = Math.max(Math.min(dist, max), min);
        // 如果是 disabled 的就跳过
        let /** @type {?} */ index = this.defaults.offset - dist / this.defaults.rowHeight;
        while (!!this.options[index] && this.options[index].disabled) {
            diff > 0 ? ++index : --index;
        }
        dist = (this.defaults.offset - index) * this.defaults.rowHeight;
        this.duration = this.defaults.slideDuration; // ms
        this.distance = dist; // px
        // 触发选择事件
        this.onChange(this.options[index], index);
    }
    /**
     * 选择某个选项时触发
     *
     * @param {?} option 选中的选项
     * @param {?=} index  该选项在列表中的索引
     * @return {?}
     */
    onChange(option, index) {
        this.change.emit(option);
    }
    /**
     * get max translate
     *
     * @param {?} offset
     * @param {?} rowHeight
     * @return {?}
     */
    _getMax(offset, rowHeight) {
        return offset * rowHeight;
    }
    /**
     * get min translate
     *
     * @param {?} offset
     * @param {?} rowHeight
     * @param {?} length
     * @return {?}
     */
    _getMin(offset, rowHeight, length) {
        return -(rowHeight * (length - offset - 1));
    }
    /**
     * get index of middle item
     *
     * @param {?} options
     * @return {?}
     */
    _getDefaultIndex(options) {
        let /** @type {?} */ current = Math.floor(options.length / 2);
        let /** @type {?} */ count = 0;
        while (!!options[current] && options[current].disabled) {
            current = ++current % options.length;
            count++;
            if (count > options.length) {
                throw new Error('No selectable item.');
            }
        }
        return current;
    }
    /**
     * @param {?} offset
     * @param {?} rowHeight
     * @param {?} options
     * @return {?}
     */
    _getDefaultTranslate(offset, rowHeight, options) {
        const /** @type {?} */ currentIndex = this._getDefaultIndex(options);
        return (offset - currentIndex) * rowHeight;
    }
}
WeUIPickerGroup.decorators = [
    { type: Component, args: [{
                selector: 'weui-picker-group',
                template: `
        <div class="weui-picker__mask"></div>
        <div class="weui-picker__indicator"></div>
        <div class="weui-picker__content" [ngStyle]="{
                '-webkit-transform': translate3d, 'transform': translate3d,
                '-webkit-transition': transition, 'transition': transition
            }">
            <div class="weui-picker__item" *ngFor="let option of options"
                [ngClass]="{'weui-picker__item_disabled': option.disabled}">{{option.label}}</div>
        </div>
    `
            },] },
];
/**
 * @nocollapse
 */
WeUIPickerGroup.ctorParameters = () => [];
WeUIPickerGroup.propDecorators = {
    'options': [{ type: Input },],
    'value': [{ type: Input },],
    'change': [{ type: Output },],
    '_start': [{ type: HostListener, args: ['touchstart', ['$event'],] },],
    '_move': [{ type: HostListener, args: ['touchmove', ['$event'],] },],
    '_end': [{ type: HostListener, args: ['touchend', ['$event'],] },],
};

/**
 * 支持的格式：(1) 纯数字；(2)范围: min-max；(3)叠加：mum/step
 */
const regex = /^(\d+)(?:-(\d+))?(?:\/(\d+))?$/g;
/**
 * 日[1-31]、月[1-12]、周[0-6]（周日-周六）的取值范围
 */
const constraints = [[1, 31], [1, 12], [0, 6]];
/**
 * Schedule
 */
class Schedule {
    /**
     * 构造
     * @param {?} fields [[日..], [月..], [周..]]
     * @param {?} _start 起始日期
     * @param {?} _end   终止日期
     */
    constructor(fields, _start, _end) {
        this.fields = fields;
        this._start = _start;
        this._end = _end;
        /**
         * dayOfMonth
         * @type {Array}
         */
        this._dates = fields[0];
        /**
         * month
         * @type {Array}
         */
        this._months = fields[1];
        /**
         * dayOfWeek
         * @type {Array}
         */
        this._days = fields[2];
        /**
         * cursor
         * @type {Date}
         * @private
         */
        this._pointer = _start;
    }
    /**
     * @return {?}
     */
    _findNext() {
        let /** @type {?} */ next;
        while (true) {
            if (this._end.getTime() - this._pointer.getTime() < 0) {
                throw new Error(`out of range, end is ${this._end}, current is ${this._pointer}`);
            }
            const /** @type {?} */ month = this._pointer.getMonth();
            const /** @type {?} */ date = this._pointer.getDate();
            const /** @type {?} */ day = this._pointer.getDay();
            if (this._months.indexOf(month + 1) === -1) {
                this._pointer.setMonth(month + 1);
                this._pointer.setDate(1);
                continue;
            }
            if (this._dates.indexOf(date) === -1) {
                this._pointer.setDate(date + 1);
                continue;
            }
            if (this._days.indexOf(day) === -1) {
                this._pointer.setDate(date + 1);
                continue;
            }
            next = new Date(this._pointer.getTime());
            break;
        }
        return next;
    }
    /**
     * fetch next data
     * @return {?}
     */
    next() {
        const /** @type {?} */ value = this._findNext();
        // move next date
        this._pointer.setDate(this._pointer.getDate() + 1);
        return {
            value: value,
            done: !this.hasNext()
        };
    }
    /**
     * has next
     * @return {?}
     */
    hasNext() {
        try {
            this._findNext();
            return true;
        }
        catch (e) {
            return false;
        }
    }
}
/**
 * 解析表达式，并获得合法的数字的列表，如合法的月份数
 *
 * @param {?} field 日期cron表达式中通过空格分割后的某一部分(日、月、周)的内容
 * @param {?} _constraints 取值约束，如日期为[1,31]
 * @return {?} number[]
 */
function parseField(field, _constraints) {
    const /** @type {?} */ low = _constraints[0];
    const /** @type {?} */ high = _constraints[1];
    const /** @type {?} */ result = [];
    // * 号等于最低到最高
    field = field.replace(/\*/g, low + '-' + high);
    // 处理 1,2,5-9 这种情况
    const /** @type {?} */ fields = field.split(',');
    const /** @type {?} */ len = fields.length;
    for (let /** @type {?} */ i = 0; i < len; i++) {
        const /** @type {?} */ f = fields[i];
        if (f.match(regex)) {
            f.replace(regex, ($0, _lower, _upper, _step) => {
                // ref to `cron-parser`
                const /** @type {?} */ step = parseInt(_step, 10) || 1;
                // Positive integer higher than constraints[0]
                const /** @type {?} */ lower = Math.min(Math.max(low, Math.abs(+_lower)), high);
                // Positive integer lower than constraints[1]
                const /** @type {?} */ upper = _upper ? Math.min(high, Math.abs(+_upper)) : high;
                // Count from the lower barrier to the upper
                let /** @type {?} */ pointer = lower;
                do {
                    result.push(pointer);
                    pointer += step;
                } while (pointer <= upper);
                return '';
            });
        }
    }
    return result;
}
/**
 * 解析表达式，并返回Schedule对象
 *
 * @param {?} expr  cron表达式，形如: 日期 月份 周。例如：* * * 或 1,2,5-9 1-6 0-6 或 1/2 * * 等
 * @param {?} start 开始日期
 * @param {?} end   介绍日期
 * @return {?}
 */
function parse(expr, start, end) {
    const /** @type {?} */ atoms = expr.replace(/^\s\s*|\s\s*$/g, '').split(/\s+/);
    const /** @type {?} */ fields = [];
    atoms.forEach((atom, index) => {
        const /** @type {?} */ constraint = constraints[index];
        fields.push(parseField(atom, constraint));
    });
    return new Schedule(fields, start, end);
}

/**
 * @license
 * Copyright 厦门乾元盛世科技有限公司 All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file.
 */
/**
 * 求下一轮的数值
 *
 * @param {?} expr cron 表达式
 * @param {?=} year 年份
 * @param {?=} month 月份，取值范围为：1-12
 * @return {?}
 */
function nexts(expr, year, month) {
    const /** @type {?} */ result = [];
    const /** @type {?} */ atoms = expr.replace(/^\s\s*|\s\s*$/g, '').split(/\s+/);
    // (1) 根据“年” 求可用的“月”
    if (!month) {
        const /** @type {?} */ months = parseField(atoms[1], [1, 12]);
        for (let /** @type {?} */ m = 1; m <= 12; m++) {
            result.push({
                label: m + '月',
                value: m,
                disabled: months.indexOf(m) === -1
            });
        }
        return result;
    }
    // (2) 根据“年、月” 求可用的“日”
    const /** @type {?} */ today = new Date();
    const /** @type {?} */ _year = year || today.getFullYear();
    const /** @type {?} */ maxDate = getActualMaximumDate(_year, month);
    const /** @type {?} */ startDt = new Date(_year, month - 1, 1);
    const /** @type {?} */ endDt = new Date(_year, month - 1, maxDate);
    const /** @type {?} */ interval = parse(expr, startDt, endDt);
    const /** @type {?} */ available = [];
    let /** @type {?} */ obj;
    do {
        obj = interval.next();
        available.push(obj.value.getDate());
    } while (!obj.done);
    for (let /** @type {?} */ i = 1; i <= maxDate; i++) {
        result.push({
            label: i + '日',
            value: i,
            disabled: available.indexOf(i) === -1
        });
    }
    return result;
}
/**
 * 根据年、月求当月的最大日期
 *
 * @param {?} year 年份
 * @param {?} month 月份，取值：1-12（1月-12月）
 * @return {?}
 */
function getActualMaximumDate(year, month) {
    const /** @type {?} */ calendar = new Date(year, month - 1, 31);
    while (calendar.getMonth() !== month - 1) {
        calendar.setDate(calendar.getDate() - 1);
    }
    return calendar.getDate();
}
/**
 * 日期选择器
 */
class WeUIDatePicker extends WeUIPicker {
    constructor() {
        super();
        /**
         * cron 表达式，三位，分别是 dayOfMonth[1-31]，month[1-12] 和 dayOfWeek[0-6]（周日-周六）。<br>
         * 格式: 日期 月份 周。例如：* * * 或 1,2,5-9 1-6 0-6 或 1/2 * * 等。默认：* * *。
         */
        this.cron = '* * *';
    }
    /**
     * 开始日期/年份。取值：<ul>
     * <li>(1)字符串：符合ISO 8601日期格式的字符串，如：2013-01-18 或者 20130118；</li>
     * <li>(2)数值：表示年份，如：2011，则默认加"-01-01"在年份之后 </li>
     * <li>(3)Date：JavaScript Date对象 </li>
     * </ul>
     * @param {?} start
     * @return {?}
     */
    set start(start) {
        this._startDate = this._parseDate(start, '-01-01');
    }
    /**
     * 结束日期/年份。取值：<ul>
     * <li>(1)字符串：符合ISO 8601日期格式的字符串，如：2013-01-18 或者 20130118；</li>
     * <li>(2)数值：表示年份，如：2011，则默认加"-12-31"在年份之后 </li>
     * <li>(3)Date：JavaScript Date对象 </li>
     * </ul>
     * @param {?} end
     * @return {?}
     */
    set end(end) {
        this._endDate = this._parseDate(end, '-12-31');
    }
    /**
     * @param {?} value
     * @param {?} sub
     * @return {?}
     */
    _parseDate(value, sub) {
        if (typeof value === 'string') {
            if (value.length === 4) {
                value = value + sub;
            }
            if (/^(\d{4})-(\d{2})-(\d{2})$/.test(value) || /^(\d{4})(\d{2})(\d{2})$/.test(value)) {
                return new Date(+RegExp.$1, +RegExp.$2 - 1, +RegExp.$3);
            }
        }
        if (typeof value === 'number') {
            return new Date(value + sub);
        }
        return value; // 默认为Date对象
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        // 设置初始值
        const /** @type {?} */ now = new Date();
        const /** @type {?} */ thisYear = now.getFullYear();
        if (!this._startDate) {
            this.start = thisYear - 10;
        }
        if (!this._endDate) {
            this.end = thisYear + 10;
        }
        if (this._startDate.getTime() > this._endDate.getTime()) {
            [this._startDate, this._endDate] = [this._endDate, this._startDate];
        }
        // 年份列表
        const /** @type {?} */ years = [];
        const /** @type {?} */ endYear = this._endDate.getFullYear();
        for (let /** @type {?} */ year = this._startDate.getFullYear(); year <= endYear; year++) {
            years.push({
                label: year + '年',
                value: year
            });
        }
        // 渲染数据列表
        this.menus = [years, [], []];
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        const /** @type {?} */ monthPicker = this._groups.find((group, index) => {
            return index === 1;
        });
        const /** @type {?} */ datePicker = this._groups.find((group, index) => {
            return index === 2;
        });
        if (monthPicker) {
            this.monthPicker = monthPicker;
        }
        if (datePicker) {
            this.datePicker = datePicker;
        }
        // 更新月份、日期列表
        this._updateMonthPickerList();
    }
    /**
     * 选择年或月，触发子列表的变更
     *
     * @param {?} option 被选择的选项
     * @param {?} index 哪个列（索引）
     * @return {?}
     */
    onChange(option, index) {
        if (!option) {
            return; // 未选择任何值，不触发子列表的变更
        }
        super.onChange(option, index);
        // 变更“年份”时，修改月份列表；如果月份的值为2月，则也修改日期列表
        if (index === 0) {
            this._updateMonthPickerList();
        }
        // 变更“月份”时，修改日期列表
        if (index === 1) {
            this._updateDatePickerList();
        }
    }
    /**
     * @return {?}
     */
    _updateMonthPickerList() {
        if (!this.monthPicker) {
            return;
        }
        if (!this.value || !this.value.length || !this.value[0]) {
            return;
        }
        const /** @type {?} */ year = this.value[0].value;
        const /** @type {?} */ months = nexts(this.cron, year);
        const /** @type {?} */ options = this.monthPicker.options;
        if (months.length !== options.length) {
            this.monthPicker.options = months;
            this.monthPicker.forceChange();
        }
        // 强制日期列表更新
        this._updateDatePickerList();
    }
    /**
     * @return {?}
     */
    _updateDatePickerList() {
        if (!this.datePicker) {
            return;
        }
        const /** @type {?} */ year = this.value[0].value;
        const /** @type {?} */ month = this.value[1].value;
        const /** @type {?} */ dates = nexts(this.cron, year, month);
        this.value[2] = null; // 清空值
        this.datePicker.options = dates;
        this.datePicker.forceChange();
    }
}
WeUIDatePicker.decorators = [
    { type: Component, args: [{
                selector: 'weui-date-picker',
                template: `
        <div class="weui-mask" (click)="onCancel()"
            [ngClass]="{'weui-animate-fade-in': shown, 'weui-animate-fade-out': !shown}"></div>
        <div class="weui-picker"
            [ngClass]="{'weui-animate-slide-up': shown, 'weui-animate-slide-down': !shown}"
            (animationend)="onAnimationEnd($event)">
            <div class="weui-picker__hd">
                <a href="javascript:;" class="weui-picker__action" (click)="onCancel()">{{cancelText}}  </a>
                <a href="javascript:;" class="weui-picker__action" (click)="onConfirm()">{{confirmText}}</a>
            </div>
            <div class="weui-picker__bd">
                <weui-picker-group tappable class="weui-picker__group"
                    *ngFor="let options of menus; let i = index;"
                    [options]="options" [value]="value[i]" (change)="onChange($event, i)"></weui-picker-group>
            </div>
        </div>
    `,
                exportAs: 'weuiDatePicker'
            },] },
];
/**
 * @nocollapse
 */
WeUIDatePicker.ctorParameters = () => [];
WeUIDatePicker.propDecorators = {
    'cron': [{ type: Input },],
    'start': [{ type: Input },],
    'end': [{ type: Input },],
    '_groups': [{ type: ViewChildren, args: [WeUIPickerGroup,] },],
};

/**
 * @license
 * Copyright 厦门乾元盛世科技有限公司 All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file.
 */
/**
 * 页脚
 */
class WeUIFooter {
    constructor() {
        /**
         * 固定在底部
         */
        this.fixedAtBottom = false;
        /**
         * 基本样式
         */
        this._cls_footer = true;
    }
    /**
     * 固定在底部样式
     * @return {?}
     */
    get fixedBottomCls() {
        return this.fixedAtBottom;
    }
}
WeUIFooter.decorators = [
    { type: Component, args: [{
                selector: 'weui-footer',
                template: '<ng-content></ng-content>'
            },] },
];
/**
 * @nocollapse
 */
WeUIFooter.ctorParameters = () => [];
WeUIFooter.propDecorators = {
    'fixedAtBottom': [{ type: Input },],
    '_cls_footer': [{ type: HostBinding, args: ['class.weui-footer',] },],
    'fixedBottomCls': [{ type: HostBinding, args: ['class.weui-footer_fixed-bottom',] },],
};
class WeUIFooterText {
    /**
     * @param {?} _renderer
     * @param {?} _elementRef
     * @param {?} _container
     */
    constructor(_renderer, _elementRef, _container) {
        this._renderer = _renderer;
        this._elementRef = _elementRef;
        this._container = _container;
        if (_container !== null) {
            _renderer.addClass(_elementRef.nativeElement, 'weui-footer__text');
        }
    }
}
WeUIFooterText.decorators = [
    { type: Directive, args: [{
                // tslint:disable-next-line:directive-selector
                selector: 'weui-footer-text,[weui-footer-text]'
            },] },
];
/**
 * @nocollapse
 */
WeUIFooterText.ctorParameters = () => [
    { type: Renderer2, },
    { type: ElementRef, },
    { type: WeUIFooter, decorators: [{ type: Optional }, { type: Host },] },
];
class WeUIFooterLinks {
    /**
     * @param {?} _renderer
     * @param {?} _elementRef
     * @param {?} _container
     */
    constructor(_renderer, _elementRef, _container) {
        this._renderer = _renderer;
        this._elementRef = _elementRef;
        this._container = _container;
        if (_container !== null) {
            _renderer.addClass(_elementRef.nativeElement, 'weui-footer__links');
        }
    }
}
WeUIFooterLinks.decorators = [
    { type: Directive, args: [{
                // tslint:disable-next-line:directive-selector
                selector: 'weui-footer-links,[weui-footer-links]'
            },] },
];
/**
 * @nocollapse
 */
WeUIFooterLinks.ctorParameters = () => [
    { type: Renderer2, },
    { type: ElementRef, },
    { type: WeUIFooter, decorators: [{ type: Optional }, { type: Host },] },
];
class WeUIFooterLink {
    /**
     * @param {?} _renderer
     * @param {?} _elementRef
     * @param {?} _container
     */
    constructor(_renderer, _elementRef, _container) {
        this._renderer = _renderer;
        this._elementRef = _elementRef;
        this._container = _container;
        if (_container !== null) {
            _renderer.addClass(_elementRef.nativeElement, 'weui-footer__link');
        }
    }
}
WeUIFooterLink.decorators = [
    { type: Directive, args: [{
                // tslint:disable-next-line:directive-selector
                selector: 'a'
            },] },
];
/**
 * @nocollapse
 */
WeUIFooterLink.ctorParameters = () => [
    { type: Renderer2, },
    { type: ElementRef, },
    { type: WeUIFooterLinks, decorators: [{ type: Optional }, { type: Host },] },
];

/**
 * @license
 * Copyright 厦门乾元盛世科技有限公司 All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file.
 */
class WeUIGallery {
    constructor() {
        /**
         * 是否显示删除按钮
         */
        this.canDelete = true;
        /**
         * 删除事件
         */
        this.delete = new EventEmitter();
        /**
         * 已显示否
         */
        this.shown = false;
        this._show = false;
    }
    /**
     * 删除照片
     * @param {?} event
     * @return {?}
     */
    deleteImage(event) {
        this.delete.emit(this.image);
        event.preventDefault();
    }
    /**
     * 显示图片
     * @return {?}
     */
    show() {
        this._show = true;
        setTimeout(() => {
            this.shown = true;
        }, 10);
    }
    /**
     * 隐藏图片
     * @return {?}
     */
    hide() {
        this.shown = false;
        setTimeout(() => {
            this._show = false;
        }, 200);
    }
}
WeUIGallery.decorators = [
    { type: Component, args: [{
                selector: 'weui-gallery',
                template: `
        <div class="weui-gallery weui-transition-opacity" [ngClass]="{'weui-block': _show, 'weui-fadeIn': shown}">
            <span class="weui-gallery__img" [style.background-image]="image?.fileURL"></span>
            <div class="weui-gallery__opr" *ngIf="canDelete">
                <a href="javascript:;" class="weui-gallery__del" (click)="deleteImage($event)">
                    <i class="weui-icon-delete weui-icon_gallery-delete"></i>
                </a>
            </div>
        </div>
    `
            },] },
];
/**
 * @nocollapse
 */
WeUIGallery.ctorParameters = () => [];
WeUIGallery.propDecorators = {
    'image': [{ type: Input },],
    'canDelete': [{ type: Input },],
    'delete': [{ type: Output },],
};

/**
 * @license
 * Copyright 厦门乾元盛世科技有限公司 All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file.
 */
const WEUI_INPUT_CONTROL_VALUE_ACCESSOR = {
    provide: NG_VALUE_ACCESSOR,
    useExisting: forwardRef(() => WeUIInput),
    multi: true
};
class WeUIInput extends WeUIFormControl {
    /**
     * @param {?} renderer
     * @param {?} elementRef
     * @param {?} compositionMode
     */
    constructor(renderer, elementRef, compositionMode) {
        super(renderer, elementRef, compositionMode);
        this.renderer = renderer;
        this.elementRef = elementRef;
        this.compositionMode = compositionMode;
        /**
         * 控件类型：text, number, tel, email, password, date, datetime-local等
         */
        this.type = 'text';
        /**
         * 是否必填
         */
        this.required = false;
        /**
         * 是否只读
         */
        this.readonly = false;
        /**
         * autocomplete 属性规定输入字段是否应该启用自动完成功能。默认为on。<br>
         * 自动完成允许浏览器预测对字段的输入。当用户在字段开始键入时，浏览器基于之前键入过的值，应该显示出在字段中填写的选项。
         */
        this.autocomplete = true;
        /**
         * 是否监听输入长度
         */
        this.countChars = false;
        /**
         * 输入域无效时显示告警图标，默认为true
         */
        this.showWarnIcon = true;
        /**
         * 行数，当类型是textarea时
         */
        this.rows = 3;
        /**
         * \@output {event} Expression to call when the input no longer has focus
         */
        this.blur = new EventEmitter();
        /**
         * \@output {event} Expression to call when the input has focus
         */
        this.focus = new EventEmitter();
        /**
         * 扩展样式，如：weui-cell_example
         */
        this._cls_check_label = true;
    }
    /**
     * 扩展样式，如：weui-cell_example
     * @return {?}
     */
    get warnCls() {
        return this.shouldWarn();
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        const /** @type {?} */ changed = changes['baseCls'];
        if (changed) {
            const /** @type {?} */ _el = (this.elementRef.nativeElement);
            if (changed.previousValue) {
                _el.classList.remove(`weui-cell_${changed.previousValue}`);
            }
            if (changed.currentValue) {
                _el.classList.add(`weui-cell_${changed.currentValue}`);
            }
        }
    }
    /**
     * @return {?}
     */
    shouldWarn() {
        return this.state.invalid === true &&
            (this.state.touched === true || this.state.dirty === true);
    }
    /**
     * @return {?}
     */
    shouldShowWarnIcon() {
        return this.showWarnIcon && this.shouldWarn();
    }
    /**
     * @param {?} ev
     * @return {?}
     */
    onBlur(ev) {
        this.onTouched(); // set your control to 'touched'
        this.blur.emit(ev);
    }
    /**
     * @param {?} ev
     * @return {?}
     */
    onFocus(ev) {
        this.focus.emit(ev);
    }
    /**
     * 统计字符总长度
     * @return {?}
     */
    getCharCount() {
        return (this._value && this._value.length) || 0;
    }
    /**
     * 当事件keyup、change时，当字数大于等于maxLength后，禁止输入
     * @param {?} event
     * @return {?}
     */
    onKeyboardEvent(event) {
        const /** @type {?} */ maxLen = parseInt(this.maxlength, 10);
        if (!isNaN(maxLen) && this.getCharCount() >= maxLen) {
            if (event.keyCode !== 46 && event.keyCode !== 8) {
                event.preventDefault(); // 禁止输入
            }
        }
    }
}
WeUIInput.decorators = [
    { type: Component, args: [{
                selector: 'weui-input',
                template: `
        <div class="weui-cell__hd">
            {{label}}<ng-content select="label"></ng-content>
        </div>
        <div class="weui-cell__bd">
            <div class="weui-input-area" *ngIf="type !== 'textarea'">
                <input #input class="weui-input" [type]="type"
                    [attr.id]="id" [attr.name]="name" [placeholder]="placeholder"
                    [attr.maxlength]="maxlength" [attr.minlength]="minlength" [pattern]="pattern"
                    [attr.max]="max" [attr.min]="min" [required]="required" [readonly]="readonly"
                    [disabled]="disabled" [autocomplete]="autocomplete ? 'on' : 'off'"
                    [(ngModel)]="innerValue"
                    (blur)="onBlur($event)" (focus)="onFocus($event)"
                    (keydown)="onKeyboardEvent($event)" (keyup)="onKeyboardEvent($event)" />
                <div *ngIf="maxlength && countChars" class="weui-text-counter">
                    <span>{{getCharCount()}}</span>/{{maxlength}}
                </div>
            </div>

            <div class="weui-input-area" *ngIf="type == 'textarea'">
                <textarea #textarea class="weui-textarea"
                    [placeholder]="placeholder" [rows]="rows"
                    [required]="required" [readonly]="readonly"
                    [attr.minlength]="minlength" [attr.maxlength]="maxlength"
                    [(ngModel)]="innerValue"
                    (keydown)="onKeyboardEvent($event)" (keyup)="onKeyboardEvent($event)"></textarea>
                <div *ngIf="maxlength && countChars" class="weui-textarea-counter">
                    <span>{{getCharCount()}}</span>/{{maxlength}}
                </div>
            </div>
        </div>
        <div class="weui-cell__ft">
            <ng-content select="[weui-last]"></ng-content>
            <i class="weui-icon-warn" *ngIf="shouldShowWarnIcon()"></i>
        </div>
    `,
                providers: [WEUI_INPUT_CONTROL_VALUE_ACCESSOR],
                encapsulation: ViewEncapsulation.None
            },] },
];
/**
 * @nocollapse
 */
WeUIInput.ctorParameters = () => [
    { type: Renderer2, },
    { type: ElementRef, },
    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [COMPOSITION_BUFFER_MODE,] },] },
];
WeUIInput.propDecorators = {
    'type': [{ type: Input },],
    'pattern': [{ type: Input },],
    'placeholder': [{ type: Input },],
    'maxlength': [{ type: Input },],
    'minlength': [{ type: Input },],
    'max': [{ type: Input },],
    'min': [{ type: Input },],
    'required': [{ type: Input },],
    'readonly': [{ type: Input },],
    'autocomplete': [{ type: Input },],
    'countChars': [{ type: Input },],
    'baseCls': [{ type: Input },],
    'showWarnIcon': [{ type: Input },],
    'rows': [{ type: Input },],
    'blur': [{ type: Output },],
    'focus': [{ type: Output },],
    'state': [{ type: ContentChild, args: [NgControl,] },],
    '_cls_check_label': [{ type: HostBinding, args: ['class.weui-check__label',] },],
    'warnCls': [{ type: HostBinding, args: ['class.weui-cell_warn',] },],
};

/**
 * @license
 * Copyright 厦门乾元盛世科技有限公司 All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file.
 */
class WeUIItems {
    /**
     * @param {?} _renderer
     * @param {?} _elementRef
     */
    constructor(_renderer, _elementRef) {
        this._renderer = _renderer;
        this._elementRef = _elementRef;
        this._cls_cells = true;
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        const /** @type {?} */ changed = changes['baseCls'];
        if (changed) {
            const /** @type {?} */ _el = (this._elementRef.nativeElement);
            if (changed.previousValue) {
                _el.classList.remove(`weui-cells_${changed.previousValue}`);
            }
            if (changed.currentValue) {
                _el.classList.add(`weui-cells_${changed.currentValue}`);
            }
        }
    }
}
WeUIItems.decorators = [
    { type: Component, args: [{
                selector: 'weui-items',
                template: `<ng-content></ng-content>`
            },] },
];
/**
 * @nocollapse
 */
WeUIItems.ctorParameters = () => [
    { type: Renderer2, },
    { type: ElementRef, },
];
WeUIItems.propDecorators = {
    'baseCls': [{ type: Input },],
    '_cls_cells': [{ type: HostBinding, args: ['class.weui-cells',] },],
};

/**
 * @license
 * Copyright 厦门乾元盛世科技有限公司 All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file.
 */
class WeUIItem {
    /**
     * @param {?} _renderer
     * @param {?} _elementRef
     */
    constructor(_renderer, _elementRef) {
        this._renderer = _renderer;
        this._elementRef = _elementRef;
        this._cls_cell = true;
        this._cls_item = true;
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        const /** @type {?} */ changed = changes['baseCls'];
        if (changed) {
            const /** @type {?} */ _el = (this._elementRef.nativeElement);
            if (changed.previousValue) {
                _el.classList.remove(`weui-cell_${changed.previousValue}`);
            }
            if (changed.currentValue) {
                _el.classList.add(`weui-cell_${changed.currentValue}`);
            }
        }
    }
    /**
     * @param {?} cls
     * @return {?}
     */
    addClass(cls) {
        this._renderer.addClass(this._elementRef.nativeElement, cls);
    }
}
WeUIItem.decorators = [
    { type: Component, args: [{
                selector: 'weui-item',
                template: `
        <div class="weui-cell__hd">
            <ng-content select="[weui-start]"></ng-content>
        </div>
        <div class="weui-cell__bd">
            <ng-content select="[weui-content]"></ng-content>
            <ng-content></ng-content>
        </div>
        <div class="weui-cell__ft">
            <ng-content select="[weui-last]"></ng-content>
        </div>
    `
            },] },
];
/**
 * @nocollapse
 */
WeUIItem.ctorParameters = () => [
    { type: Renderer2, },
    { type: ElementRef, },
];
WeUIItem.propDecorators = {
    'baseCls': [{ type: Input },],
    '_cls_cell': [{ type: HostBinding, args: ['class.weui-cell',] },],
    '_cls_item': [{ type: HostBinding, args: ['class.weui-item',] },],
};

/**
 * @license
 * Copyright 厦门乾元盛世科技有限公司 All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file.
 */
class WeUILink {
    /**
     * @param {?} _renderer
     * @param {?} _elementRef
     * @param {?} sanitizer
     */
    constructor(_renderer, _elementRef, sanitizer) {
        this._renderer = _renderer;
        this._elementRef = _elementRef;
        this.sanitizer = sanitizer;
        /**
         * 不显示最右边的箭头。默认为false，即：显示箭头。
         */
        this.noPushArrow = false;
        this._cls_cell = true;
        this._cls_item = true;
        this._cls_cell_access = true;
    }
    /**
     * 链接
     * @param {?} _href
     * @return {?}
     */
    set href(_href) {
        this._href = this.sanitizer.bypassSecurityTrustUrl(_href);
    }
    /**
     * @return {?}
     */
    get _cls_cell_access_noarrow() {
        return this.noPushArrow;
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        const /** @type {?} */ changed = changes['baseCls'];
        if (changed) {
            const /** @type {?} */ _el = (this._elementRef.nativeElement);
            if (changed.previousValue) {
                _el.classList.remove(`weui-cell_${changed.previousValue}`);
            }
            if (changed.currentValue) {
                _el.classList.add(`weui-cell_${changed.currentValue}`);
            }
        }
    }
}
WeUILink.decorators = [
    { type: Component, args: [{
                selector: 'weui-link',
                template: `
        <a class="weui-cell_access" [href]="_href">
            <div class="weui-cell__hd">
                <ng-content select="[weui-start]"></ng-content>
            </div>
            <div class="weui-cell__bd">
                <ng-content select="[weui-content]"></ng-content>
                <ng-content></ng-content>
            </div>
            <div class="weui-cell__ft">
                <ng-content select="[weui-last]"></ng-content>
            </div>
        </a>
    `
            },] },
];
/**
 * @nocollapse
 */
WeUILink.ctorParameters = () => [
    { type: Renderer2, },
    { type: ElementRef, },
    { type: DomSanitizer, },
];
WeUILink.propDecorators = {
    'noPushArrow': [{ type: Input },],
    'baseCls': [{ type: Input },],
    'href': [{ type: Input },],
    '_cls_cell': [{ type: HostBinding, args: ['class.weui-cell',] },],
    '_cls_item': [{ type: HostBinding, args: ['class.weui-item',] },],
    '_cls_cell_access': [{ type: HostBinding, args: ['class.weui-cell_access',] },],
    '_cls_cell_access_noarrow': [{ type: HostBinding, args: ['class.weui-cell_access-noarrow',] },],
};

/**
 * @license
 * Copyright 厦门乾元盛世科技有限公司 All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file.
 */
/**
 * 加载更多
 */
class WeUILoadmore {
    constructor() {
        /**
         * 正在加载
         */
        this.loading = false;
    }
}
WeUILoadmore.decorators = [
    { type: Component, args: [{
                selector: 'weui-loadmore',
                template: `
        <div class="weui-loadmore" [ngClass]="{
                'weui-loadmore_line': line !== undefined && line !== null,
                'weui-loadmore_dot': dot !== undefined && dot !== null }">
            <i class="weui-loading" *ngIf="loading"></i>
            <span class="weui-loadmore__tips"><ng-content></ng-content></span>
        </div>
    `
            },] },
];
/**
 * @nocollapse
 */
WeUILoadmore.ctorParameters = () => [];
WeUILoadmore.propDecorators = {
    'line': [{ type: Input },],
    'dot': [{ type: Input },],
    'loading': [{ type: Input },],
};

/**
 * @license
 * Copyright 厦门乾元盛世科技有限公司 All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file.
 */
class WeUINavBarItem {
    /**
     * @param {?} navbar
     */
    constructor(navbar) {
        this.navbar = navbar;
        /**
         * 设置基本样式
         */
        this.barItemCls = true;
        this._activated = false;
    }
    /**
     * 设置激活样式
     * @return {?}
     */
    get activatedCls() {
        return this._activated;
    }
    /**
     * 点击触发激活
     *
     * @param {?} event 点击事件
     * @return {?}
     */
    onClick(event) {
        if (this.navbar) {
            this.navbar.activate(this);
        }
    }
    /**
     * 由父级控件传入
     *
     * @param {?} activated 激活状态
     * @return {?}
     */
    activated(activated) {
        this._activated = activated;
    }
    /**
     * @return {?}
     */
    isActivated() {
        return this._activated;
    }
}
WeUINavBarItem.decorators = [
    { type: Directive, args: [{
                // tslint:disable-next-line:directive-selector
                selector: 'weui-navbar-item,[weui-navbar-item]'
            },] },
];
/**
 * @nocollapse
 */
WeUINavBarItem.ctorParameters = () => [
    { type: WeUINavBar, decorators: [{ type: Optional }, { type: Host }, { type: Inject, args: [forwardRef(() => WeUINavBar),] },] },
];
WeUINavBarItem.propDecorators = {
    'value': [{ type: Input },],
    'barItemCls': [{ type: HostBinding, args: ['class.weui-navbar__item',] },],
    'activatedCls': [{ type: HostBinding, args: ['class.weui-bar__item_on',] },],
    'onClick': [{ type: HostListener, args: ['click', ['$event'],] },],
};

/**
 * @license
 * Copyright 厦门乾元盛世科技有限公司 All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file.
 */
class WeUINavBar {
    constructor() {
        /**
         * 初始激活的子对象
         */
        this.activeIndex = 0;
        /**
         * 设置基本样式
         */
        this.barCls = true;
        /**
         * 激活事件
         */
        this.activated = new EventEmitter();
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        this.activateAt(this.activeIndex);
    }
    /**
     * @param {?} index
     * @return {?}
     */
    getAt(index) {
        return (this.items.find((item, i) => i === index));
    }
    /**
     * @param {?} item
     * @return {?}
     */
    activate(item) {
        this._activated = item;
        this.items.forEach(child => {
            child.activated(child === item);
        });
        this.activated.emit(item);
    }
    /**
     * @param {?} index
     * @return {?}
     */
    activateAt(index) {
        const /** @type {?} */ item = this.getAt(index);
        if (item) {
            this.activate(item);
        }
    }
    /**
     * @param {?} item
     * @return {?}
     */
    isActivated(item) {
        return item.isActivated();
    }
}
WeUINavBar.decorators = [
    { type: Component, args: [{
                selector: 'weui-navbar',
                template: `<ng-content></ng-content>`
            },] },
];
/**
 * @nocollapse
 */
WeUINavBar.ctorParameters = () => [];
WeUINavBar.propDecorators = {
    'activeIndex': [{ type: Input },],
    'barCls': [{ type: HostBinding, args: ['class.weui-navbar',] },],
    'items': [{ type: ContentChildren, args: [WeUINavBarItem,] },],
    'activated': [{ type: Output },],
};

/**
 * @license
 * Copyright 厦门乾元盛世科技有限公司 All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file.
 */
class WeUIProgressBar {
    constructor() {
        /**
         * 颜色，取值：default、primary、warn等。默认为default。<br>
         * 自定义的颜色名称与色值，可以定义在 工程根目录/src/theme/variables.scss 文件中的 $colors 对象。
         */
        this.color = 'default';
        /**
         * Value of the progressbar. Defaults to zero.
         */
        this.value = 0;
        /**
         * 是否可终止 (若为true，则显示关闭按钮)
         */
        this.canTerminate = true;
        /**
         * 终止事件
         */
        this.terminate = new EventEmitter();
    }
    /**
     * @return {?}
     */
    onTerminate() {
        this.terminate.emit(this);
    }
}
WeUIProgressBar.decorators = [
    { type: Component, args: [{
                selector: 'weui-progress-bar',
                template: `
        <div class="weui-progress weui-progress_{{color}}">
            <div class="weui-progress__bar">
                <div class="weui-progress__inner-bar" [style.width]="value + '%'"></div>
            </div>
            <a href="javascript:;" class="weui-progress__opr" *ngIf="canTerminate" (click)="onTerminate()">
                <i class="weui-icon-cancel"></i>
            </a>
        </div>
    `
            },] },
];
/**
 * @nocollapse
 */
WeUIProgressBar.ctorParameters = () => [];
WeUIProgressBar.propDecorators = {
    'color': [{ type: Input },],
    'value': [{ type: Input },],
    'canTerminate': [{ type: Input },],
    'terminate': [{ type: Output },],
};

/**
 * @license
 * Copyright 厦门乾元盛世科技有限公司 All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file.
 */
const WEUI_FORM_CONTROL_VALUE_ACCESSOR$1 = {
    provide: NG_VALUE_ACCESSOR,
    useExisting: forwardRef(() => WeUIRadio),
    multi: true
};
class WeUIRadio extends WeUIFormControl {
    /**
     * @param {?} renderer
     * @param {?} elementRef
     * @param {?} compositionMode
     */
    constructor(renderer, elementRef, compositionMode) {
        super(renderer, elementRef, compositionMode);
        this.renderer = renderer;
        this.elementRef = elementRef;
        this.compositionMode = compositionMode;
        /**
         * 基本样式
         */
        this._cls_check_label = true;
    }
}
WeUIRadio.decorators = [
    { type: Component, args: [{
                selector: 'weui-radio',
                providers: [WEUI_FORM_CONTROL_VALUE_ACCESSOR$1],
                template: `
        <label class="weui-check__label" [for]="id" (click)="onTouched()">
            <div class="weui-cell__bd">
                {{label}}<ng-content></ng-content>
            </div>
            <div class="weui-cell__ft">
                <input type="radio" class="weui-check"
                    [attr.id]="id" [attr.name]="name" [value]="value"
                    [disabled]="disabled" [(ngModel)]="innerValue">
                <span class="weui-icon-checked"></span>
            </div>
        </label>
    `
            },] },
];
/**
 * @nocollapse
 */
WeUIRadio.ctorParameters = () => [
    { type: Renderer2, },
    { type: ElementRef, },
    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [COMPOSITION_BUFFER_MODE,] },] },
];
WeUIRadio.propDecorators = {
    '_cls_check_label': [{ type: HostBinding, args: ['class.weui-check__label',] },],
};

/**
 * @license
 * Copyright 厦门乾元盛世科技有限公司 All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file.
 */
class WeUISearchBar {
    constructor() {
        /**
         * \@i18n
         */
        this.defaults = {
            cancelText: '取消',
            searchText: '搜索'
        };
        /**
         * 是否必填
         */
        this.required = true;
        /**
         * \@i18n
         * placeholder 规定帮助用户填写输入字段的提示。
         */
        this.placeholder = this.defaults.searchText;
        /**
         * \@i18n 取消
         */
        this.cancelText = this.defaults.cancelText;
        /**
         * 输入事件
         */
        this.search = new EventEmitter();
        this.focusing = false;
        this.value = '';
        this.searchTerms = new Subject();
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this._searchTermsChangesSubscription = this.searchTerms
            .pipe(debounceTime(300), // wait for 300ms pause in events
        distinctUntilChanged() // ignore if next search term is same as previous
        )
            .subscribe((term) => {
            this.search.emit(term);
        });
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        if (this._searchTermsChangesSubscription) {
            this._searchTermsChangesSubscription.unsubscribe();
        }
    }
    /**
     * @return {?}
     */
    doFocus() {
        this.searchBox.nativeElement.focus();
    }
    /**
     * @return {?}
     */
    onFocus() {
        this.focusing = true;
    }
    /**
     * @return {?}
     */
    onBlur() {
        if (!this.value.length) {
            this.focusing = false;
        }
    }
    /**
     * @return {?}
     */
    onCancel() {
        this.value = '';
        this.onBlur();
        this.search.emit('');
    }
    /**
     * @param {?} term
     * @return {?}
     */
    push(term) {
        this.searchTerms.next(term);
    }
    /**
     * @return {?}
     */
    clear() {
        this.value = '';
        this.doFocus();
    }
}
WeUISearchBar.decorators = [
    { type: Component, args: [{
                selector: 'weui-searchbar',
                template: `
        <div class="weui-search-bar" [ngClass]="{'weui-search-bar_focusing': focusing}">
            <form class="weui-search-bar__form">
                <div class="weui-search-bar__box">
                    <i class="weui-icon-search"></i>
                    <input #searchBox type="search" name="search" class="weui-search-bar__input"
                        [placeholder]="placeholder" [required]="required"
                        (focus)="onFocus()" (blur)="onBlur()" [(ngModel)]="value" (keyup)="push(searchBox.value)" />
                    <a href="javascript:" class="weui-icon-clear" (click)="clear()"></a>
                </div>
                <label class="weui-search-bar__label" (click)="doFocus()">
                    <i class="weui-icon-search"></i>
                    <span>{{placeholder}}</span>
                </label>
            </form>
            <a href="javascript:" class="weui-search-bar__cancel-btn" (click)="onCancel()">{{cancelText}}</a>
        </div>
    `
            },] },
];
/**
 * @nocollapse
 */
WeUISearchBar.ctorParameters = () => [];
WeUISearchBar.propDecorators = {
    'required': [{ type: Input },],
    'placeholder': [{ type: Input },],
    'cancelText': [{ type: Input },],
    'search': [{ type: Output },],
    'searchBox': [{ type: ViewChild, args: ['searchBox',] },],
};

/**
 * @license
 * Copyright 厦门乾元盛世科技有限公司 All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file.
 */
class WeUISelect {
    /**
     * @param {?} _renderer
     * @param {?} _elementRef
     * @param {?} _container
     */
    constructor(_renderer, _elementRef, _container) {
        this._renderer = _renderer;
        this._elementRef = _elementRef;
        this._container = _container;
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        if (!this._container) {
            return;
        }
        const /** @type {?} */ nativeEl = (this._elementRef.nativeElement);
        this._renderer.addClass(nativeEl, 'weui-select');
        this._container.addClass('weui-cell_select');
        const /** @type {?} */ parentEl = nativeEl.parentElement;
        if (parentEl && parentEl.classList.contains('weui-cell__hd')) {
            this._container.addClass('weui-cell_select-before');
        }
        if (parentEl && parentEl.classList.contains('weui-cell__bd')) {
            this._container.addClass('weui-cell_select-after');
        }
    }
}
WeUISelect.decorators = [
    { type: Directive, args: [{
                // tslint:disable-next-line:directive-selector
                selector: 'select'
            },] },
];
/**
 * @nocollapse
 */
WeUISelect.ctorParameters = () => [
    { type: Renderer2, },
    { type: ElementRef, },
    { type: WeUIItem, decorators: [{ type: Optional }, { type: Host },] },
];

/**
 * @license
 * Copyright 厦门乾元盛世科技有限公司 All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file.
 */
const WEUI_FORM_CONTROL_VALUE_ACCESSOR$2 = {
    provide: NG_VALUE_ACCESSOR,
    useExisting: forwardRef(() => WeUISlider),
    multi: true
};
class WeUISlider extends DefaultValueAccessor {
    /**
     * @param {?} renderer
     * @param {?} elementRef
     * @param {?} compositionMode
     */
    constructor(renderer, elementRef, compositionMode) {
        super(renderer, elementRef, compositionMode);
        this.renderer = renderer;
        this.elementRef = elementRef;
        this.compositionMode = compositionMode;
        /**
         * 颜色，取值：default、primary、warn等。默认为default。<br>
         * 自定义的颜色名称与色值，可以定义在 工程根目录/src/theme/variables.scss 文件中的 $colors 对象。
         */
        this.color = 'default';
        /**
         * 显示值（在最后）
         */
        this.showValue = true;
        /**
         * 禁用样式
         */
        this.disabled = false;
        /**
         * 最小值
         */
        this.min = 0;
        /**
         * 最大值
         */
        this.max = 100;
        /**
         * 取值
         */
        this.value = 0;
        /**
         * 滑动比例（取值：0-100）
         */
        this.percent = 0;
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onTouchStart(event) {
        if (this.disabled) {
            return;
        }
        this.totalLen = this.sliderInner.nativeElement.clientWidth;
        this.start = this.percent * this.totalLen / 100;
        this.startX = event.targetTouches[0].clientX;
        this.onTouched();
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onTouchMove(event) {
        if (this.disabled) {
            return;
        }
        const /** @type {?} */ dist = event.targetTouches[0].clientX - this.startX;
        let /** @type {?} */ end = this.start + dist;
        end = end < 0 ? 0 : end > this.totalLen ? this.totalLen : end;
        this.percent = end * 100 / this.totalLen;
        this.value = Math.round(this.min + (this.max - this.min) * this.percent / 100);
        event.preventDefault();
        this.onChange(this.value);
    }
    /**
     * Write a new value to the element. (From ControlValueAccessor interface)
     * @param {?} value
     * @return {?}
     */
    writeValue(value) {
        if (value !== undefined && value !== null) {
            value = Math.min(Math.max(value, this.min), this.max);
            this.value = value;
            this.percent = (value + this.min) * 100 / this.max;
        }
    }
    /**
     * 设置禁用状态 (From ControlValueAccessor interface)
     * @param {?} isDisabled
     * @return {?}
     */
    setDisabledState(isDisabled) {
        this.disabled = isDisabled;
    }
}
WeUISlider.decorators = [
    { type: Component, args: [{
                selector: 'weui-slider',
                template: `
        <div class="weui-slider-box weui-slider_{{color}}">
            <ng-content select="[weui-start]"></ng-content>
            <div class="weui-slider">
                <div #sliderInner class="weui-slider__inner">
                    <div [style.width]="percent + '%'" class="weui-slider__track"></div>
                    <div [style.left]="percent + '%'" class="weui-slider__handler"
                        (touchstart)="onTouchStart($event)" (touchmove)="onTouchMove($event)"></div>
                </div>
            </div>
            <ng-content select="[weui-last]"></ng-content>
            <div class="weui-slider-box__value" *ngIf="showValue">{{value}}</div>
        </div>
    `,
                providers: [WEUI_FORM_CONTROL_VALUE_ACCESSOR$2]
            },] },
];
/**
 * @nocollapse
 */
WeUISlider.ctorParameters = () => [
    { type: Renderer2, },
    { type: ElementRef, },
    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [COMPOSITION_BUFFER_MODE,] },] },
];
WeUISlider.propDecorators = {
    'color': [{ type: Input },],
    'showValue': [{ type: Input },],
    'disabled': [{ type: Input },],
    'min': [{ type: Input },],
    'max': [{ type: Input },],
    'sliderInner': [{ type: ViewChild, args: ['sliderInner',] },],
};

/**
 * @license
 * Copyright 厦门乾元盛世科技有限公司 All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file.
 */
const WEUI_FORM_CONTROL_VALUE_ACCESSOR$3 = {
    provide: NG_VALUE_ACCESSOR,
    useExisting: forwardRef(() => WeUISwitch),
    multi: true
};
class WeUISwitch extends WeUIFormControl {
    /**
     * @param {?} renderer
     * @param {?} elementRef
     * @param {?} compositionMode
     */
    constructor(renderer, elementRef, compositionMode) {
        super(renderer, elementRef, compositionMode);
        this.renderer = renderer;
        this.elementRef = elementRef;
        this.compositionMode = compositionMode;
        /**
         * 是否已选中
         */
        this.checked = false;
        /**
         * 基本样式
         */
        this._cls_cell_switch = true;
        this.value = 'on'; // default value
    }
    /**
     * The value of the input ngModel。 (view -> model)
     * @param {?} checked
     * @return {?}
     */
    set innerValue(checked) {
        if (this._value !== checked) {
            this._value = checked || false;
            // view -> model -> outside world (ie. NgModel on this control)
            this.onChange(this._value ? this.value : '');
        }
    }
    /**
     * Write a new value to the element. (From ControlValueAccessor interface)
     * @param {?} value
     * @return {?}
     */
    writeValue(value) {
        this.checked = this.value === value;
        super.writeValue(this.checked);
    }
}
WeUISwitch.decorators = [
    { type: Component, args: [{
                selector: 'weui-switch',
                template: `
        <div class="weui-cell__bd">
            {{label}}<ng-content select="label"></ng-content>
        </div>
        <div class="weui-cell__ft">
            <label [for]="id" class="weui-switch-cp">
                <input type="checkbox" class="weui-switch-cp__input"
                    [attr.id]="id" [attr.name]="name" [value]="value" [checked]="checked" [(ngModel)]="innerValue" />
                <div class="weui-switch-cp__box"></div>
            </label>
        </div>
    `,
                providers: [WEUI_FORM_CONTROL_VALUE_ACCESSOR$3]
            },] },
];
/**
 * @nocollapse
 */
WeUISwitch.ctorParameters = () => [
    { type: Renderer2, },
    { type: ElementRef, },
    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [COMPOSITION_BUFFER_MODE,] },] },
];
WeUISwitch.propDecorators = {
    '_cls_cell_switch': [{ type: HostBinding, args: ['class.weui-cell_switch',] },],
};

/**
 * @license
 * Copyright 厦门乾元盛世科技有限公司 All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file.
 */
class WeUITabBarItem {
    /**
     * @param {?} tabbar
     */
    constructor(tabbar) {
        this.tabbar = tabbar;
        /**
         * 设置基本样式
         */
        this.barItemCls = true;
        this._activated = false;
    }
    /**
     * 设置激活样式
     * @return {?}
     */
    get activatedCls() {
        return this._activated;
    }
    /**
     * 点击触发激活
     *
     * @param {?} event 点击事件
     * @return {?}
     */
    onClick(event) {
        if (this.tabbar) {
            this.tabbar.activate(this);
        }
    }
    /**
     * 由父级控件传入
     *
     * @param {?} activated 激活状态
     * @return {?}
     */
    activated(activated) {
        this._activated = activated;
    }
    /**
     * @return {?}
     */
    isActivated() {
        return this._activated;
    }
}
WeUITabBarItem.decorators = [
    { type: Directive, args: [{
                // tslint:disable-next-line:directive-selector
                selector: 'weui-tabbar-item,[weui-tabbar-item]'
            },] },
];
/**
 * @nocollapse
 */
WeUITabBarItem.ctorParameters = () => [
    { type: WeUITabBar, decorators: [{ type: Optional }, { type: Host }, { type: Inject, args: [forwardRef(() => WeUITabBar),] },] },
];
WeUITabBarItem.propDecorators = {
    'value': [{ type: Input },],
    'barItemCls': [{ type: HostBinding, args: ['class.weui-tabbar__item',] },],
    'activatedCls': [{ type: HostBinding, args: ['class.weui-bar__item_on',] },],
    'onClick': [{ type: HostListener, args: ['click', ['$event'],] },],
};

/**
 * @license
 * Copyright 厦门乾元盛世科技有限公司 All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file.
 */
class WeUITabBar {
    constructor() {
        /**
         * 初始激活的子对象
         */
        this.activeIndex = 0;
        /**
         * 设置基本样式
         */
        this.barCls = true;
        /**
         * 激活事件
         */
        this.activated = new EventEmitter();
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        setTimeout(() => {
            this.activateAt(this.activeIndex);
        }, 1);
    }
    /**
     * @param {?} index
     * @return {?}
     */
    getAt(index) {
        return (this.items.find((item, i) => i === index));
    }
    /**
     * @param {?} item
     * @return {?}
     */
    activate(item) {
        this._activated = item;
        this.items.forEach(child => {
            child.activated(child === item);
        });
        this.activated.emit(item);
    }
    /**
     * @param {?} index
     * @return {?}
     */
    activateAt(index) {
        const /** @type {?} */ item = this.getAt(index);
        if (item) {
            this.activate(item);
        }
    }
    /**
     * @param {?} item
     * @return {?}
     */
    isActivated(item) {
        return item.isActivated();
    }
}
WeUITabBar.decorators = [
    { type: Component, args: [{
                selector: 'weui-tabbar',
                template: `<ng-content></ng-content>`
            },] },
];
/**
 * @nocollapse
 */
WeUITabBar.ctorParameters = () => [];
WeUITabBar.propDecorators = {
    'activeIndex': [{ type: Input },],
    'barCls': [{ type: HostBinding, args: ['class.weui-tabbar',] },],
    'items': [{ type: ContentChildren, args: [WeUITabBarItem,] },],
    'activated': [{ type: Output },],
};

/**
 * @license
 * Copyright 厦门乾元盛世科技有限公司 All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file.
 */
class WeUITips {
    constructor() {
        /**
         * 设置基本样式
         */
        this._cls_tips = true;
    }
}
WeUITips.decorators = [
    { type: Component, args: [{
                selector: 'weui-tips',
                template: `<ng-content></ng-content>`
            },] },
];
/**
 * @nocollapse
 */
WeUITips.ctorParameters = () => [];
WeUITips.propDecorators = {
    '_cls_tips': [{ type: HostBinding, args: ['class.weui-cells__tips',] },],
};

/**
 * @license
 * Copyright 厦门乾元盛世科技有限公司 All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file.
 */
class WeUITitle {
    constructor() {
        /**
         * 设置基本样式
         */
        this._cls_title = true;
    }
}
WeUITitle.decorators = [
    { type: Component, args: [{
                selector: 'weui-title',
                template: `<ng-content></ng-content>`
            },] },
];
/**
 * @nocollapse
 */
WeUITitle.ctorParameters = () => [];
WeUITitle.propDecorators = {
    '_cls_title': [{ type: HostBinding, args: ['class.weui-cells__title',] },],
};

/**
 * @license
 * Copyright 厦门乾元盛世科技有限公司 All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file.
 */
/**
 * 文件信息
 */
class WeUIFile {
    /**
     * @param {?} file
     * @param {?=} fileURL
     */
    constructor(file, fileURL) {
        /**
         * 此文件的上传进度
         */
        this.progress = 0;
        /**
         * 是否正在上传
         */
        this.isUploading = false;
        /**
         * 是否已经上传
         */
        this.isUploaded = false;
        this.file = file;
        this.fileURL = fileURL;
    }
    /**
     * 是否存在错误
     * @return {?}
     */
    hasError() {
        return !!this.error;
    }
    /**
     * @return {?}
     */
    hasMessage() {
        return this.hasError() || (this.progress > 0 && this.progress < 100);
    }
    /**
     * 重置状态<br>
     * 上传进度设置为0，错误消息为null，isUploading和isUploaded均设置为false。
     * @return {?}
     */
    reset() {
        this.progress = 0;
        this.error = null;
        this.isUploading = false;
        this.isUploaded = false;
    }
}
class WeUIUploader {
    /**
     * @param {?} renderer
     * @param {?} elementRef
     * @param {?} sanitizer
     */
    constructor(renderer, elementRef, sanitizer) {
        this.renderer = renderer;
        this.elementRef = elementRef;
        this.sanitizer = sanitizer;
        this.files = [];
    }
    /**
     * 获取列表中的文件
     * @return {?}
     */
    getFiles() {
        return this.files;
    }
    /**
     * 文件总数
     * @return {?}
     */
    getFileCount() {
        return this.files.length;
    }
    /**
     * 已上传文件数
     * @return {?}
     */
    getUploadedFileCount() {
        return this.files.filter((file) => file.isUploaded).length;
    }
    /**
     * 选择图片文件
     * @param {?} event
     * @return {?}
     */
    onSelect(event) {
        const /** @type {?} */ picker = (event.target);
        const /** @type {?} */ files = picker && picker.files;
        if (!files) {
            return;
        }
        const /** @type {?} */ length = files.length;
        for (let /** @type {?} */ i = 0; i < length; i++) {
            const /** @type {?} */ file = files.item(i);
            const /** @type {?} */ url = 'url(' + window.URL.createObjectURL(file) + ')';
            const /** @type {?} */ safeUrl = this.sanitizer.bypassSecurityTrustStyle(url);
            this.files.push(new WeUIFile(file, safeUrl));
        }
    }
    /**
     * 预览图片
     * @param {?} file
     * @return {?}
     */
    preview(file) {
        this.image = file;
        if (this.gallery) {
            this.gallery.show();
        }
    }
    /**
     * 退出预览
     * @return {?}
     */
    fadeOut() {
        if (this.gallery) {
            this.gallery.hide();
        }
    }
    /**
     * 删除文件
     * @param {?} file
     * @return {?}
     */
    onDelete(file) {
        const /** @type {?} */ index = this.files.indexOf(file);
        if (index >= 0) {
            this.files.splice(index, 1);
        }
    }
}
WeUIUploader.decorators = [
    { type: Component, args: [{
                selector: 'weui-uploader',
                template: `
        <div class="weui-uploader">
            <div class="weui-uploader__hd">
                <p class="weui-uploader__title">图片上传</p>
                <div class="weui-uploader__info">{{getUploadedFileCount()}}/{{getFileCount()}}</div>
            </div>
            <div class="weui-uploader__bd">
                <ul class="weui-uploader__files">
                    <li class="weui-uploader__file" *ngFor="let file of files"
                        [style.background-image]="file.fileURL"
                        [ngClass]="{'weui-uploader__file_status': file.hasMessage()}"
                        (click)="preview(file)">
                        <div class="weui-uploader__file-content" *ngIf="file.hasMessage()">
                            <div class="weui-uploader__file-progress"
                                *ngIf="file.isUploading && file.progress && !file.hasError()">{{file.progress}}%</div>
                            <i class="weui-icon-warn" *ngIf="file.hasError()"></i>
                        </div>
                    </li>
                </ul>
                <div class="weui-uploader__input-box">
                    <input class="weui-uploader__input" type="file" accept="image/*" multiple (change)="onSelect($event)" />
                </div>
            </div>
        </div>
        <weui-gallery [image]="image" [canDelete]="true" (delete)="onDelete($event)" (click)="fadeOut()"></weui-gallery>
    `
            },] },
];
/**
 * @nocollapse
 */
WeUIUploader.ctorParameters = () => [
    { type: Renderer2, },
    { type: ElementRef, },
    { type: DomSanitizer, },
];
WeUIUploader.propDecorators = {
    'gallery': [{ type: ViewChild, args: [forwardRef(() => WeUIGallery),] },],
};

/**
 * @license
 * Copyright 厦门乾元盛世科技有限公司 All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file.
 */
class WeUIActionSheet {
    constructor() {
        /**
         * \@i18n
         */
        this.defaults = {
            cancelText: '取消'
        };
        /**
         * ActionSheet菜单，列表，内容任意，其中<code>text</code>用于显示
         */
        this.menu = [];
        /**
         * ActionSheet弹出模式，取值：ios(Ios模式) - 从底部上弹，md(Android模式) - 弹出在窗口中间。默认为ios。
         */
        this.mode = 'ios';
        /**
         * \@i18n 取消
         */
        this.cancelText = this.defaults.cancelText;
        /**
         * 隐藏对象
         */
        this.close = new EventEmitter();
        /**
         * 已显示否
         */
        this.shown = false;
        this._show = false;
    }
    /**
     * 安卓模式下的特殊样式
     * @return {?}
     */
    get androidCls() {
        return this.mode === 'md';
    }
    /**
     * 用于控制控件的可视化
     * @return {?}
     */
    get hideCls() {
        return !this._show;
    }
    /**
     * 用于控制动画的触发(trigger)
     * @return {?}
     */
    get visibility() {
        return this.shown ? 'show' : 'hide';
    }
    /**
     * 显示菜单
     * @return {?}
     */
    show() {
        this._show = true;
        setTimeout(() => {
            this.shown = true;
        }, 10);
        return new Promise((resolve, reject) => {
            this.resolve = resolve;
        });
    }
    /**
     * 隐藏菜单
     * @return {?}
     */
    hide() {
        this.shown = false;
        setTimeout(() => {
            this._show = false;
            this.close.emit();
        }, 200);
    }
    /**
     * 选择某个菜单，执行Promise.resolve()方法，并将选中的menu作为参数；最后，关闭ActionSheet
     *
     * @param {?} menu 被选择的菜单
     * @return {?}
     */
    onSelect(menu) {
        this.resolve(menu);
        this.hide();
    }
}
WeUIActionSheet.decorators = [
    { type: Component, args: [{
                selector: 'weui-actionsheet',
                template: `
        <div class="weui-mask" [@visibility]="visibility" (click)="hide()"></div>
        <div class="weui-actionsheet"
            [ngClass]="{'weui-actionsheet_toggle': shown && mode == 'ios'}">
            <div class="weui-actionsheet__menu">
                <div class="weui-actionsheet__cell" *ngFor="let m of menu" (click)="onSelect(m)">{{m.text}}</div>
            </div>
            <div class="weui-actionsheet__action" *ngIf="mode == 'ios'">
                <div class="weui-actionsheet__cell" (click)="hide()">{{cancelText}}</div>
            </div>
        </div>
    `,
                animations: [trigger('visibility', [
                        state('show', style({ opacity: 1 })),
                        state('hide', style({ opacity: 0 })),
                        transition('hide <=> show', [animate(200)])
                    ])]
            },] },
];
/**
 * @nocollapse
 */
WeUIActionSheet.ctorParameters = () => [];
WeUIActionSheet.propDecorators = {
    'menu': [{ type: Input },],
    'mode': [{ type: Input },],
    'cancelText': [{ type: Input },],
    'close': [{ type: Output },],
    'androidCls': [{ type: HostBinding, args: ['class.weui-skin_android',] },],
    'hideCls': [{ type: HostBinding, args: ['class.weui-hide',] },],
};

/**
 * @license
 * Copyright 厦门乾元盛世科技有限公司 All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file.
 */
class WeUIDialog {
    constructor() {
        /**
         * \@i18n
         */
        this.defaults = {
            btnNOText: '取消',
            btnOKText: '确定'
        };
        /**
         * ActionSheet弹出模式，取值：ios(Ios模式) - 从底部上弹，md(Android模式) - 弹出在窗口中间。默认为ios。
         */
        this.mode = 'ios';
        /**
         * \@i18n 取消
         */
        this.btnNOText = this.defaults.btnNOText;
        /**
         * \@i18n 确定
         */
        this.btnOKText = this.defaults.btnOKText;
        /**
         * 是否显示“取消”按钮
         */
        this.showNOButton = true;
        /**
         * 隐藏对象
         */
        this.close = new EventEmitter();
        /**
         * 已显示否
         */
        this.shown = false;
    }
    /**
     * 用于控制动画的触发(trigger)
     * @return {?}
     */
    get visibility() {
        return this.shown ? 'show' : 'hide';
    }
    /**
     * 显示对话框
     * @return {?}
     */
    show() {
        this.shown = true;
        return new Promise((resolve, reject) => {
            this.resolve = resolve;
            this.reject = reject;
        });
    }
    /**
     * 隐藏对话框
     * @return {?}
     */
    hide() {
        this.shown = false;
        this.close.emit();
    }
    /**
     * 点击【取消】，执行Promise.reject()方法；然后，关闭对话框
     * @param {?} event
     * @return {?}
     */
    negativeClick(event) {
        this.reject();
        this.hide();
    }
    /**
     * 点击【确定】，执行Promise.resolve()方法；然后，关闭对话框
     * @param {?} event
     * @return {?}
     */
    positiveClick(event) {
        this.resolve();
        this.hide();
    }
    /**
     * @return {?}
     */
    getIcon() {
        if (this.icon) {
            return this.icon;
        }
        if (this.type) {
            return ({
                info: 'weui-icon-info',
                success: 'weui-icon-success',
                error: 'weui-icon-cancel',
                warning: 'weui-icon-warn',
                confirm: 'weui-icon-waiting',
                'default': 'weui-icon-info-circle',
            })[this.type];
        }
        return null;
    }
    /**
     * @return {?}
     */
    getIconClass() {
        const /** @type {?} */ icon = this.getIcon();
        return {
            [`weui-dialog-icon`]: 1,
            [`weui-dialog-icon-${this.type}`]: this.type,
            [`${icon}`]: icon,
            [`${this.iconCls}`]: this.iconCls
        };
    }
    /**
     * @return {?}
     */
    getWrapperClass() {
        return {
            [`weui-dialog__wrapper`]: 1,
            [`weui-dialog__wrapper_with_icon`]: this.getIcon(),
        };
    }
}
WeUIDialog.decorators = [
    { type: Component, args: [{
                selector: 'weui-dialog',
                template: `
        <div class="weui-mask"></div>
        <div class="weui-dialog" [ngClass]="{'weui-skin_android': mode == 'md'}">
            <div [ngClass]="getWrapperClass()">
                <i [ngClass]="getIconClass()" *ngIf="getIcon()"></i>
                <div class="weui-dialog__wrapper_inner">
                    <div class="weui-dialog__hd"><strong class="weui-dialog__title">{{title}}</strong></div>
                    <div class="weui-dialog__bd">
                        {{content}}
                    </div>
                </div>
            </div>
            <div class="weui-dialog__ft">
                <a href="javascript:;" (click)="negativeClick($event)" *ngIf="showNOButton"
                    class="weui-dialog__btn weui-dialog__btn_default">{{btnNOText || defaults.btnNOText}}</a>
                <a href="javascript:;" (click)="positiveClick($event)"
                    class="weui-dialog__btn weui-dialog__btn_primary">{{btnOKText || defaults.btnOKText}}</a>
            </div>
        </div>
    `,
                animations: [trigger('visibility', [
                        state('show', style({ opacity: 1, display: 'block' })),
                        state('hide', style({ opacity: 0, display: 'none' })),
                        transition('hide <=> show', [animate(200)])
                    ])]
            },] },
];
/**
 * @nocollapse
 */
WeUIDialog.ctorParameters = () => [];
WeUIDialog.propDecorators = {
    'mode': [{ type: Input },],
    'title': [{ type: Input },],
    'content': [{ type: Input },],
    'type': [{ type: Input },],
    'icon': [{ type: Input },],
    'iconCls': [{ type: Input },],
    'btnNOText': [{ type: Input },],
    'btnOKText': [{ type: Input },],
    'showNOButton': [{ type: Input },],
    'close': [{ type: Output },],
    'visibility': [{ type: HostBinding, args: ['@visibility',] },],
};

/**
 * @license
 * Copyright 厦门乾元盛世科技有限公司 All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file.
 */
/**
 * Toast - 弹出式提示
 */
class WeUIToast {
    /**
     * @param {?} renderer
     * @param {?} elementRef
     */
    constructor(renderer, elementRef) {
        this.renderer = renderer;
        this.elementRef = elementRef;
        /**
         * \@i18n
         */
        this.defaults = {
            loadingText: '数据加载中',
            successText: '操作成功'
        };
        /**
         * 状态：正在加载
         */
        this.loading = false;
        /**
         * 状态：操作成功
         */
        this.success = true;
        /**
         * 隐藏对象
         */
        this.close = new EventEmitter();
        /**
         * 已显示否
         */
        this.shown = false;
    }
    /**
     * 样式控制
     * @return {?}
     */
    get hideCls() {
        return !this.shown;
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        const /** @type {?} */ status = changes['status'];
        if (status) {
            if (status.currentValue === 'loading') {
                this.success = !(this.loading = true);
            }
            if (status.currentValue === 'success') {
                this.loading = !(this.success = true);
            }
        }
    }
    /**
     * 显示
     * @return {?}
     */
    show() {
        this.shown = true;
        if (this.success) {
            setTimeout(() => { this.hide(); }, 2000);
        }
    }
    /**
     * 隐藏
     * @return {?}
     */
    hide() {
        this.shown = false;
        this.close.emit();
    }
}
WeUIToast.decorators = [
    { type: Component, args: [{
                selector: 'weui-toast',
                template: `
        <div class="weui-mask_transparent"></div>
        <div class="weui-toast">
            <i class="weui-icon-success-no-circle weui-icon_toast" *ngIf="success"></i>
            <p class="weui-toast__content" *ngIf="success">{{ content || defaults.successText}}</p>
            <i class="weui-loading weui-icon_toast" *ngIf="loading"></i>
            <p class="weui-toast__content" *ngIf="loading">{{ content || defaults.loadingText}}</p>
        </div>
    `
            },] },
];
/**
 * @nocollapse
 */
WeUIToast.ctorParameters = () => [
    { type: Renderer2, },
    { type: ElementRef, },
];
WeUIToast.propDecorators = {
    'content': [{ type: Input },],
    'status': [{ type: Input },],
    'loading': [{ type: Input },],
    'success': [{ type: Input },],
    'close': [{ type: Output },],
    'hideCls': [{ type: HostBinding, args: ['class.weui-hide',] },],
};

/**
 * @license
 * Copyright 厦门乾元盛世科技有限公司 All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file.
 */
/**
 * TopTips - 顶部提示
 */
class WeUITopTips {
    constructor() {
        /**
         * 隐藏对象
         */
        this.close = new EventEmitter();
        /**
         * 已显示否
         */
        this.shown = false;
    }
    /**
     * 样式控制
     * @return {?}
     */
    get display() {
        return this.shown ? 'block' : 'none';
    }
    /**
     * 显示
     * @return {?}
     */
    show() {
        this.shown = true;
        setTimeout(() => { this.hide(); }, 2000);
    }
    /**
     * 隐藏
     * @return {?}
     */
    hide() {
        this.shown = false;
        this.close.emit();
    }
}
WeUITopTips.decorators = [
    { type: Component, args: [{
                selector: 'weui-toptips',
                template: '<div class="weui-toptips weui-toptips_warn" [ngStyle]="{display: display}">{{content}}</div>'
            },] },
];
/**
 * @nocollapse
 */
WeUITopTips.ctorParameters = () => [];
WeUITopTips.propDecorators = {
    'content': [{ type: Input },],
    'close': [{ type: Output },],
};

/**
 * Next overlay unique ID.
 */
let nextUniqueId = 0;

/**
 * 浮层通用接口
 */
class Layer {
    /**
     * @param {?} _componentFactoryResolver
     * @param {?} _appRef
     * @param {?} _injector
     * @param {?} _ngZone
     */
    constructor(_componentFactoryResolver, _appRef, _injector, _ngZone) {
        this._componentFactoryResolver = _componentFactoryResolver;
        this._appRef = _appRef;
        this._injector = _injector;
        this._ngZone = _ngZone;
    }
    /**
     * Creates the DOM element for an overlay and appends it to the document.
     * @return {?} Newly-created pane element
     */
    _createDivElement() {
        const /** @type {?} */ div = document.createElement('div');
        div.id = `weui-overlay-${nextUniqueId++}`;
        div.classList.add('weui-overlay-pane');
        document.body.appendChild(div);
        return div;
    }
    /**
     * @template T
     * @param {?} component
     * @return {?}
     */
    _createCompInstance(component) {
        const /** @type {?} */ componentFactory = this._componentFactoryResolver.resolveComponentFactory(component);
        const /** @type {?} */ componentRef = componentFactory.create(this._injector);
        this._appRef.attachView(componentRef.hostView);
        // At this point the component has been instantiated, so we move it to the location in the DOM
        // where we want it to be rendered.
        const /** @type {?} */ _hostDomElement = this._createDivElement();
        _hostDomElement.appendChild(this._getComponentRootNode(componentRef));
        return componentRef;
    }
    /**
     * @return {?}
     */
    _createDialog() {
        const /** @type {?} */ componentRef = this._createCompInstance(WeUIDialog);
        componentRef.instance.close.subscribe(() => {
            componentRef.destroy();
        });
        return componentRef.instance;
    }
    /**
     * 显示Success
     *
     * @param {?} message  消息
     * @param {?=} title    标题(可选)
     * @return {?}
     */
    success(message, title) {
        return this.showAlert(message, title, 'success');
    }
    /**
     * 显示Info
     *
     * @param {?} message  消息
     * @param {?=} title    标题(可选)
     * @return {?}
     */
    info(message, title) {
        return this.showAlert(message, title, 'info');
    }
    /**
     * 显示Error
     *
     * @param {?} message  消息
     * @param {?=} title    标题(可选)
     * @return {?}
     */
    error(message, title) {
        return this.showAlert(message, title, 'error');
    }
    /**
     * 显示Warning
     *
     * @param {?} message  消息
     * @param {?=} title    标题(可选)
     * @return {?}
     */
    warning(message, title) {
        return this.showAlert(message, title, 'warning');
    }
    /**
     * 显示Alert
     *
     * @param {?} message  消息
     * @param {?=} title    标题(可选)
     * @param {?=} type     告警等级
     * @return {?}
     */
    showAlert(message, title, type) {
        const /** @type {?} */ dialog = this._createDialog();
        dialog.showNOButton = false;
        if (typeof message === 'object') {
            for (const /** @type {?} */ key in message) {
                if (message.hasOwnProperty(key) && typeof message[key] !== 'undefined') {
                    dialog[key] = message[key];
                }
            }
        }
        else {
            dialog.content = message;
            dialog.title = title || '';
            dialog.type = type || null;
        }
        return dialog.show();
    }
    /**
     * 显示Confirm，默认带两个按钮（取消、确定）
     *
     * @param {?} message  消息，或者自定义对话框属性对象
     * @param {?=} title    标题
     * @return {?}
     */
    showConfirm(message, title) {
        const /** @type {?} */ dialog = this._createDialog();
        if (typeof message === 'object') {
            for (const /** @type {?} */ key in message) {
                if (message.hasOwnProperty(key) && typeof message[key] !== 'undefined') {
                    dialog[key] = message[key];
                }
            }
        }
        else {
            dialog.content = message;
            dialog.title = title || '';
        }
        return dialog.show();
    }
    /**
     * @return {?}
     */
    _createToast() {
        const /** @type {?} */ componentRef = this._createCompInstance(WeUIToast);
        componentRef.instance.close.subscribe(() => {
            componentRef.destroy();
        });
        return componentRef.instance;
    }
    /**
     * 显示Loading Toast
     *
     * @param {?=} message  消息，默认为“数据加载中”
     * @return {?}
     */
    showLoading(message) {
        const /** @type {?} */ toast = this._createToast();
        if (message) {
            toast.content = message;
        }
        toast.success = !(toast.loading = true);
        toast.show();
        return toast;
    }
    /**
     * 显示成功Success Toast
     *
     * @param {?=} message  消息，默认为“操作成功”
     * @return {?}
     */
    showSuccess(message) {
        const /** @type {?} */ toast = this._createToast();
        if (message) {
            toast.content = message;
        }
        toast.loading = !(toast.success = true);
        toast.show();
        return toast;
    }
    /**
     * 在顶部显示错误消息
     *
     * @param {?} message  错误消息
     * @return {?}
     */
    showError(message) {
        const /** @type {?} */ componentRef = this._createCompInstance(WeUITopTips);
        componentRef.instance.close.subscribe(() => {
            componentRef.destroy();
        });
        const /** @type {?} */ tip = componentRef.instance;
        if (message) {
            tip.content = message;
        }
        tip.show();
    }
    /**
     * @return {?}
     */
    _createActionSheet() {
        const /** @type {?} */ componentRef = this._createCompInstance(WeUIActionSheet);
        componentRef.instance.close.subscribe(() => {
            componentRef.destroy();
        });
        return componentRef.instance;
    }
    /**
     * 显示ActionSheet菜单
     *
     * @param {?} menus
     * @param {?=} btnCancelText 取消按钮文本，默认为“取消”
     * @return {?}
     */
    showActionsheet(menus, btnCancelText) {
        const /** @type {?} */ actionsheet = this._createActionSheet();
        actionsheet.menu = menus;
        if (btnCancelText) {
            actionsheet.cancelText = btnCancelText;
        }
        return actionsheet.show();
    }
    /**
     * Gets the root HTMLElement for an instantiated component.
     * @param {?} componentRef
     * @return {?}
     */
    _getComponentRootNode(componentRef) {
        return (((componentRef.hostView)).rootNodes[0]);
    }
}
Layer.decorators = [
    { type: Injectable },
];
/**
 * @nocollapse
 */
Layer.ctorParameters = () => [
    { type: ComponentFactoryResolver, },
    { type: ApplicationRef, },
    { type: Injector, },
    { type: NgZone, },
];

/**
 * @license
 * Copyright 厦门乾元盛世科技有限公司 All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file.
 */
let seed = 0;
const now = Date.now();
/**
 * @return {?}
 */
function getUuid() {
    return `_picker_${now}_${seed++}`;
}
/**
 * Picker服务
 */
class WeUIPickerService {
    /**
     * @param {?} _componentFactoryResolver
     * @param {?} _appRef
     * @param {?} _injector
     * @param {?} _ngZone
     * @param {?} doc
     */
    constructor(_componentFactoryResolver, _appRef, _injector, _ngZone, doc) {
        this._componentFactoryResolver = _componentFactoryResolver;
        this._appRef = _appRef;
        this._injector = _injector;
        this._ngZone = _ngZone;
        this.doc = doc;
    }
    /**
     * 显示单列Picker
     *
     * @param {?} menu  菜单选项
     * @return {?}
     */
    showPicker(menu) {
        const /** @type {?} */ picker = this.createPicker(WeUIPicker, { menu });
        return picker.show();
    }
    /**
     * 显示多列Picker
     *
     * @param {?} menus  菜单选项（多列）
     * @return {?}
     */
    showMultiPicker(menus) {
        const /** @type {?} */ picker = this.createPicker(WeUIPicker, { menus });
        return picker.show();
    }
    /**
     * 显示日期Picker
     *
     * @param {?=} config  配置项
     * @return {?}
     */
    showDatePicker(config) {
        const /** @type {?} */ picker = this.createPicker(WeUIDatePicker, config);
        return picker.show();
    }
    /**
     * @param {?} component
     * @param {?} config
     * @return {?}
     */
    createPicker(component, config) {
        const /** @type {?} */ componentRef = this._createComponent(component);
        const /** @type {?} */ instance = componentRef.instance;
        instance.close.subscribe(() => {
            componentRef.destroy();
            componentRef['_container'].remove();
        });
        if (config) {
            Object.assign(instance, config);
        }
        this.afterCreate(instance);
        return instance;
    }
    /**
     * this method is called before thild component's ngAfterViewInit
     * @param {?} instance
     * @return {?}
     */
    afterCreate(instance) {
    }
    /**
     * @template T
     * @param {?} component
     * @return {?}
     */
    _createComponent(component) {
        const /** @type {?} */ componentFactory = this._componentFactoryResolver.resolveComponentFactory(component);
        const /** @type {?} */ componentRef = componentFactory.create(this._injector);
        this._appRef.attachView(componentRef.hostView);
        // At this point the component has been instantiated, so we move it to the location in the DOM
        // where we want it to be rendered.
        const /** @type {?} */ _hostDomElement = this._getContainer();
        _hostDomElement.appendChild(this._getComponentRootNode(componentRef));
        componentRef['_container'] = _hostDomElement;
        return componentRef;
    }
    /**
     * Gets the root HTMLElement for an instantiated component.
     * @param {?} componentRef
     * @return {?}
     */
    _getComponentRootNode(componentRef) {
        return (((componentRef.hostView)).rootNodes[0]);
    }
    /**
     * @return {?}
     */
    _getContainer() {
        const /** @type {?} */ div = ɵgetDOM().createElement('div');
        div.id = getUuid();
        div.classList.add('weui-overlay');
        ɵgetDOM().appendChild(this.doc.body, div);
        return div;
    }
}
WeUIPickerService.decorators = [
    { type: Injectable },
];
/**
 * @nocollapse
 */
WeUIPickerService.ctorParameters = () => [
    { type: ComponentFactoryResolver, },
    { type: ApplicationRef, },
    { type: Injector, },
    { type: NgZone, },
    { type: Document, decorators: [{ type: Inject, args: [DOCUMENT,] },] },
];

/**
 * @license
 * Let'say COFFEE © 2017-2018
 * Copyright 厦门美乐味餐饮管理有限公司 All Rights Reserved.
 */
/**
 * @param {?} obj
 * @return {?}
 */
function isPresent(obj) {
    return obj !== undefined && obj !== null;
}
class FormValidation {
    /**
     * @param {?} _element
     * @param {?} _form
     */
    constructor(_element, _form) {
        this._element = _element;
        this._form = _form;
        /**
         * 自定义错误消息
         */
        this.messages = {};
        /**
         * 验证结果，例如: [{username: '必须填写'}, {password: '输入非法'}]
         */
        this.formErrors = [];
        this.defaultValidationMessages = {
            required: '该项为必填项',
            email: '请输入有效的电子邮件',
            url: '请输入有效的网址',
            date: '请输入有效的日期',
            dateISO: '请输入有效的日期 (YYYY-MM-DD)',
            number: '请输入正确的数字',
            digits: '只可输入数字',
            alphanumeric: '只可输入字母、数字及下划线',
            maxlength: '最多 {0} 个字符',
            minlength: '最少 {0} 个字符',
            rangelength: '请输入长度为 {0} 至 {1} 之间的字符',
            range: '请输入 {0} 至 {1} 之间的数值',
            max: '请输入不大于 {0} 的数值',
            min: '请输入不小于 {0} 的数值'
        };
        if (_form && _form.ngSubmit) {
            _form.ngSubmit.subscribe(this.onSubmit.bind(this));
        }
    }
    /**
     * @return {?}
     */
    showByName() {
        return isPresent(this.name) && this.name.length > 0;
    }
    /**
     * Form验证后，自动执行消息提示匹配
     * @return {?}
     */
    onSubmit() {
        this.validate();
    }
    /**
     * 验证表单，结果存入formErrors
     *
     * @return {?} 验证结果: true-success, false-fail
     */
    validate() {
        const /** @type {?} */ formErrors = [];
        const /** @type {?} */ form = this._form;
        if (!form) {
            return false;
        }
        for (const /** @type {?} */ field in form.controls) {
            if (form.controls.hasOwnProperty(field)) {
                const /** @type {?} */ control = form.controls[field];
                const /** @type {?} */ errors = control && control.errors || {};
                if (control && control.invalid && (control.dirty || form.submitted)) {
                    const /** @type {?} */ messages = (this.messages && this.messages[field]) || {};
                    if (errors['required']) {
                        formErrors.push({
                            name: field,
                            message: messages['required'] || this.defaultValidationMessages['required']
                        });
                        continue; // 默认先验证必填消息
                    }
                    for (const /** @type {?} */ key in errors) {
                        if (errors.hasOwnProperty(key)) {
                            formErrors.push({
                                name: field,
                                message: messages[key] || this.defaultValidationMessages[key]
                            });
                            continue; // 若一个输入框存在多个验证器，即使存在多个错误消息，也仅取一条错误消息
                        }
                    }
                }
            }
        }
        this.formErrors = formErrors;
        return form.valid === true;
    }
    /**
     * 是否已submitted
     * @return {?}
     */
    get submitted() {
        return this._form && this._form.submitted;
    }
    /**
     * 是否验证通过
     * @return {?}
     */
    get valid() {
        return this._form && this._form.valid === true;
    }
    /**
     * 是否验证不通过
     * @return {?}
     */
    get invalid() {
        return this._form && this._form.invalid === true;
    }
    /**
     * 是否存在错误
     * @param {?=} name
     * @return {?}
     */
    hasError(name) {
        if (name) {
            return this.getError(name) !== null;
        }
        return this.formErrors.length > 0;
    }
    /**
     * 当存在多个错误消息时，用此方法获取其中的第一个非空错误显示
     * @return {?}
     */
    firstError() {
        const /** @type {?} */ err = this.formErrors[0];
        return (err && err.message) || null;
    }
    /**
     * 获取控件的一个错误
     *
     * @param {?} name 控件name
     * @return {?} 控件错误消息，或者空(没有错误)
     */
    getError(name) {
        const /** @type {?} */ len = this.formErrors.length;
        for (let /** @type {?} */ i = 0; i < len; i++) {
            const /** @type {?} */ err = this.formErrors[i];
            if (err.hasOwnProperty(name)) {
                return err[name];
            }
        }
        return null;
    }
}
FormValidation.decorators = [
    { type: Component, args: [{
                selector: 'form-validation',
                template: `
        <div class="error" *ngIf="showByName() && hasError(name)">
            {{getError(name)}}
        </div>
        <div class="error" *ngIf="!showByName() && hasError()">
            {{firstError()}}
        </div>
    `
            },] },
];
/**
 * @nocollapse
 */
FormValidation.ctorParameters = () => [
    { type: ElementRef, },
    { type: NgForm, },
];
FormValidation.propDecorators = {
    'messages': [{ type: Input },],
    'name': [{ type: Input },],
};

/**
 * @license
 * Copyright 厦门乾元盛世科技有限公司 All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file.
 */
/**
 * Import Angular
 */
/** Import WeUI Components */
/**
 * Import WeUI Overlay Entry Components
 */
/**
 * \@name WeUIModule
 * \@description
 * WeUIModule is an NgModule that provides weui-style TypeScript/JavaScript components.
 * @author fbchen 2017-03-08
 */
class WeUIModule {
}
WeUIModule.decorators = [
    { type: NgModule, args: [{
                imports: [
                    CommonModule,
                    FormsModule
                ],
                declarations: [
                    WeUIFormControl,
                    WeUIButton,
                    WeUISubmit,
                    WeUIInput,
                    WeUIRadio,
                    WeUICheckbox,
                    WeUISwitch,
                    WeUISelect,
                    WeUISlider,
                    WeUIGallery,
                    WeUIUploader,
                    WeUIItems,
                    WeUIItem,
                    WeUILink,
                    WeUITitle,
                    WeUITips,
                    WeUIBadge,
                    WeUIFooter,
                    WeUIFooterText,
                    WeUIFooterLinks,
                    WeUIFooterLink,
                    WeUILoadmore,
                    WeUIProgressBar,
                    WeUIActionSheet,
                    WeUIDialog,
                    WeUIToast,
                    WeUITopTips,
                    WeUIPicker,
                    WeUIDatePicker,
                    WeUIPickerGroup,
                    WeUISearchBar,
                    WeUINavBar,
                    WeUINavBarItem,
                    WeUITabBar,
                    WeUITabBarItem,
                    FormValidation
                ],
                exports: [
                    WeUIFormControl,
                    WeUIButton,
                    WeUISubmit,
                    WeUIInput,
                    WeUIRadio,
                    WeUICheckbox,
                    WeUISwitch,
                    WeUISelect,
                    WeUISlider,
                    WeUIGallery,
                    WeUIUploader,
                    WeUIItems,
                    WeUIItem,
                    WeUILink,
                    WeUITitle,
                    WeUITips,
                    WeUIBadge,
                    WeUIFooter,
                    WeUIFooterText,
                    WeUIFooterLinks,
                    WeUIFooterLink,
                    WeUILoadmore,
                    WeUIProgressBar,
                    WeUIActionSheet,
                    WeUIDialog,
                    WeUIToast,
                    WeUITopTips,
                    WeUIPicker,
                    WeUIDatePicker,
                    WeUISearchBar,
                    WeUINavBar,
                    WeUINavBarItem,
                    WeUITabBar,
                    WeUITabBarItem,
                    FormValidation
                ],
                entryComponents: [
                    WeUIActionSheet,
                    WeUIDialog,
                    WeUIToast,
                    WeUITopTips,
                    WeUIPicker,
                    WeUIDatePicker
                ],
                providers: [
                    Layer,
                    WeUIPickerService
                ]
            },] },
];
/**
 * @nocollapse
 */
WeUIModule.ctorParameters = () => [];

/**
 * @license
 * Copyright 厦门乾元盛世科技有限公司 All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file.
 */
/**
 * @module
 * @description
 * Entry point for all public APIs of the weui package.
 */

/**
 * @license
 * Copyright 厦门乾元盛世科技有限公司 All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file.
 */
/**
 * @module
 * @description
 * Entry point for all public APIs of the weui package.
 */

// This file only reexports content of the `src` folder. Keep it that way.

/**
 * Generated bundle index. Do not edit.
 */

export { WeUIFormControl, WeUIBadge, WeUIButton, WeUISubmit, WeUICheckbox, WeUIDatePicker, WeUIFooter, WeUIFooterText, WeUIFooterLinks, WeUIFooterLink, WeUIGallery, WeUIInput, WeUIItems, WeUIItem, WeUILink, WeUILoadmore, WeUINavBar, WeUINavBarItem, WeUIPicker, WeUIPickerGroup, WeUIProgressBar, WeUIRadio, WeUISearchBar, WeUISelect, WeUISlider, WeUISwitch, WeUITabBar, WeUITabBarItem, WeUITips, WeUITitle, WeUIUploader, WeUIFile, WeUIActionSheet, WeUIDialog, WeUIToast, WeUITopTips, Layer, WeUIPickerService, FormValidation, WeUIModule };
//# sourceMappingURL=index.js.map
