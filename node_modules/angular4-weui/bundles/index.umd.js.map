{"version":3,"file":"index.umd.js","sources":["../../../../src/app/weui/src/navbar/weui.navbar.item.ts","../../../../src/app/weui/src/navbar/weui.navbar.ts","../../../../src/app/weui/src/progress/weui.progress.ts","../../../../src/app/weui/src/input/weui.radio.ts","../../../../src/app/weui/src/searchbar/weui.searchbar.ts","../../../../src/app/weui/src/input/weui.select.ts","../../../../src/app/weui/src/slider/weui.slider.ts","../../../../src/app/weui/src/input/weui.switch.ts","../../../../src/app/weui/src/tabbar/weui.tabbar.item.ts","../../../../src/app/weui/src/tabbar/weui.tabbar.ts","../../../../src/app/weui/src/list/weui.tips.ts","../../../../src/app/weui/src/list/weui.title.ts","../../../../src/app/weui/src/uploader/weui.uploader.ts","../../../../src/app/weui/src/actionsheet/weui.actionsheet.ts","../../../../src/app/weui/src/dialog/weui.dialog.ts","../../../../src/app/weui/src/toast/weui.toast.ts","../../../../src/app/weui/src/toptips/weui.toptip.ts","../../../../src/app/weui/src/overlay/layer.ts","../../../../src/app/weui/src/picker/weui.picker.service.ts","../../../../src/app/weui/src/validation/form.validation.ts","../../../../src/app/weui/src/weui.module.ts","../../../../node_modules/src/operators/windowTime.ts","../../../../node_modules/src/operators/windowToggle.ts","../../../../node_modules/src/operators/windowWhen.ts","../../../../node_modules/src/operators/withLatestFrom.ts","../../../../node_modules/src/operators/zip.ts","../../../../node_modules/src/operators/index.ts","../../../../src/app/weui/src/input/weui.form.control.ts","../../../../src/app/weui/src/badge/weui.badge.ts","../../../../src/app/weui/src/button/weui.button.ts","../../../../src/app/weui/src/button/weui.submit.ts","../../../../src/app/weui/src/input/weui.checkbox.ts","../../../../src/app/weui/src/picker/weui.picker.ts","../../../../src/app/weui/src/picker/weui-picker-group.ts","../../../../src/app/weui/src/picker/cron.ts","../../../../src/app/weui/src/picker/weui.date.picker.ts","../../../../src/app/weui/src/footer/weui.footer.ts","../../../../src/app/weui/src/gallery/weui.gallery.ts","../../../../src/app/weui/src/input/weui.input.ts","../../../../src/app/weui/src/list/weui.items.ts","../../../../src/app/weui/src/list/weui.item.ts","../../../../src/app/weui/src/list/weui.link.ts","../../../../src/app/weui/src/loadmore/weui.loadmore.ts","../../../../node_modules/src/operators/scan.ts","../../../../node_modules/src/operators/takeLast.ts","../../../../node_modules/src/operators/mergeMapTo.ts","../../../../node_modules/src/operators/mergeScan.ts","../../../../node_modules/src/operators/onErrorResumeNext.ts","../../../../node_modules/src/operators/pairwise.ts","../../../../node_modules/src/BehaviorSubject.ts","../../../../node_modules/src/AsyncSubject.ts","../../../../node_modules/src/scheduler/QueueAction.ts","../../../../node_modules/src/scheduler/QueueScheduler.ts","../../../../node_modules/src/scheduler/queue.ts","../../../../node_modules/src/ReplaySubject.ts","../../../../node_modules/src/observable/race.ts","../../../../node_modules/src/operators/repeat.ts","../../../../node_modules/src/operators/repeatWhen.ts","../../../../node_modules/src/operators/retry.ts","../../../../node_modules/src/operators/retryWhen.ts","../../../../node_modules/src/operators/sample.ts","../../../../node_modules/src/operators/sampleTime.ts","../../../../node_modules/src/operators/sequenceEqual.ts","../../../../node_modules/src/operators/single.ts","../../../../node_modules/src/operators/skip.ts","../../../../node_modules/src/operators/skipLast.ts","../../../../node_modules/src/operators/skipUntil.ts","../../../../node_modules/src/operators/skipWhile.ts","../../../../node_modules/src/operators/switchMap.ts","../../../../node_modules/src/operators/switchMapTo.ts","../../../../node_modules/src/operators/take.ts","../../../../node_modules/src/operators/takeUntil.ts","../../../../node_modules/src/operators/takeWhile.ts","../../../../node_modules/src/operators/tap.ts","../../../../node_modules/src/operators/throttle.ts","../../../../node_modules/src/operators/throttleTime.ts","../../../../node_modules/src/operators/timeInterval.ts","../../../../node_modules/src/util/TimeoutError.ts","../../../../node_modules/src/operators/timeout.ts","../../../../node_modules/src/operators/timeoutWith.ts","../../../../node_modules/src/operators/window.ts","../../../../node_modules/src/operators/windowCount.ts","../../../../node_modules/src/operators/bufferToggle.ts","../../../../node_modules/src/operators/bufferWhen.ts","../../../../node_modules/src/operators/catchError.ts","../../../../node_modules/src/operators/combineLatest.ts","../../../../node_modules/src/observable/IteratorObservable.ts","../../../../node_modules/src/observable/ArrayLikeObservable.ts","../../../../node_modules/src/Notification.ts","../../../../node_modules/src/operators/observeOn.ts","../../../../node_modules/src/observable/FromObservable.ts","../../../../node_modules/src/operators/count.ts","../../../../node_modules/src/operators/debounce.ts","../../../../node_modules/src/operators/debounceTime.ts","../../../../node_modules/src/operators/defaultIfEmpty.ts","../../../../node_modules/src/operators/delay.ts","../../../../node_modules/src/operators/delayWhen.ts","../../../../node_modules/src/operators/dematerialize.ts","../../../../node_modules/src/util/Set.ts","../../../../node_modules/src/operators/distinct.ts","../../../../node_modules/src/operators/distinctUntilChanged.ts","../../../../node_modules/src/util/ArgumentOutOfRangeError.ts","../../../../node_modules/src/operators/elementAt.ts","../../../../node_modules/src/operators/every.ts","../../../../node_modules/src/operators/exhaust.ts","../../../../node_modules/src/operators/exhaustMap.ts","../../../../node_modules/src/operators/expand.ts","../../../../node_modules/src/operators/filter.ts","../../../../node_modules/src/operators/finalize.ts","../../../../node_modules/src/operators/find.ts","../../../../node_modules/src/util/EmptyError.ts","../../../../node_modules/src/util/MapPolyfill.ts","../../../../node_modules/src/operators/first.ts","../../../../node_modules/src/util/Map.ts","../../../../node_modules/src/util/FastMap.ts","../../../../node_modules/src/operators/groupBy.ts","../../../../node_modules/src/operators/ignoreElements.ts","../../../../node_modules/src/operators/isEmpty.ts","../../../../node_modules/src/operators/last.ts","../../../../node_modules/src/operators/mapTo.ts","../../../../node_modules/src/operators/materialize.ts","../../../../packages/forms/src/directives/template_driven_errors.ts","../../../../packages/forms/src/directives/ng_model_group.ts","../../../../packages/forms/src/directives/ng_model.ts","../../../../packages/forms/src/directives/reactive_errors.ts","../../../../packages/forms/src/directives/reactive_directives/form_control_directive.ts","../../../../packages/forms/src/directives/reactive_directives/form_group_directive.ts","../../../../packages/forms/src/directives/reactive_directives/form_group_name.ts","../../../../packages/forms/src/directives/reactive_directives/form_control_name.ts","../../../../packages/forms/src/directives/validators.ts","../../../../packages/forms/src/form_builder.ts","../../../../packages/forms/src/directives/ng_no_validate_directive.ts","../../../../packages/forms/src/directives.ts","../../../../packages/forms/src/form_providers.ts","../../../../node_modules/src/operators/audit.ts","../../../../node_modules/src/scheduler/Action.ts","../../../../node_modules/src/scheduler/AsyncAction.ts","../../../../node_modules/src/Scheduler.ts","../../../../node_modules/src/scheduler/AsyncScheduler.ts","../../../../node_modules/src/scheduler/async.ts","../../../../node_modules/src/util/isNumeric.ts","../../../../node_modules/src/util/isDate.ts","../../../../node_modules/src/observable/TimerObservable.ts","../../../../node_modules/src/operators/buffer.ts","../../../../node_modules/src/operators/bufferCount.ts","../../../../node_modules/src/operators/bufferTime.ts","../../../../packages/forms/src/directives/number_value_accessor.ts","../../../../packages/forms/src/directives/ng_control.ts","../../../../packages/forms/src/directives/radio_control_value_accessor.ts","../../../../packages/forms/src/directives/range_value_accessor.ts","../../../../packages/forms/src/directives/select_control_value_accessor.ts","../../../../packages/forms/src/directives/select_multiple_control_value_accessor.ts","../../../../packages/forms/src/directives/shared.ts","../../../../packages/forms/src/directives/abstract_form_group_directive.ts","../../../../packages/forms/src/directives/ng_control_status.ts","../../../../packages/forms/src/model.ts","../../../../packages/forms/src/directives/ng_form.ts","../../../../packages/forms/src/directives/error_examples.ts","../../../../packages/platform-browser/src/browser/browser_adapter.ts","../../../../packages/platform-browser/src/browser/location/browser_platform_location.ts","../../../../packages/platform-browser/src/browser/meta.ts","../../../../packages/platform-browser/src/browser/server-transition.ts","../../../../packages/platform-browser/src/browser/testability.ts","../../../../packages/platform-browser/src/browser/title.ts","../../../../packages/platform-browser/src/dom/debug/ng_probe.ts","../../../../packages/platform-browser/src/dom/events/event_manager.ts","../../../../packages/platform-browser/src/dom/shared_styles_host.ts","../../../../packages/platform-browser/src/dom/dom_renderer.ts","../../../../packages/platform-browser/src/dom/events/dom_events.ts","../../../../packages/platform-browser/src/dom/events/hammer_gestures.ts","../../../../packages/platform-browser/src/dom/events/key_events.ts","../../../../packages/platform-browser/src/security/url_sanitizer.ts","../../../../packages/platform-browser/src/security/html_sanitizer.ts","../../../../packages/platform-browser/src/security/dom_sanitization_service.ts","../../../../packages/platform-browser/src/browser.ts","../../../../packages/forms/src/directives/abstract_control_directive.ts","../../../../packages/forms/src/directives/control_container.ts","../../../../packages/forms/src/validators.ts","../../../../packages/forms/src/directives/checkbox_value_accessor.ts","../../../../packages/forms/src/directives/default_value_accessor.ts","../../../../packages/forms/src/directives/normalize_validator.ts","../../../../packages/common/src/directives/ng_class.ts","../../../../packages/common/src/directives/ng_component_outlet.ts","../../../../packages/common/src/directives/ng_for_of.ts","../../../../packages/common/src/directives/ng_if.ts","../../../../packages/common/src/directives/ng_switch.ts","../../../../packages/common/src/directives/ng_plural.ts","../../../../packages/common/src/directives/ng_style.ts","../../../../packages/common/src/directives/ng_template_outlet.ts","../../../../packages/common/src/directives/index.ts","../../../../packages/common/src/pipes/async_pipe.ts","../../../../packages/common/src/pipes/case_conversion_pipes.ts","../../../../packages/common/src/pipes/intl.ts","../../../../packages/common/src/pipes/number_pipe.ts","../../../../packages/common/src/pipes/date_pipe.ts","../../../../packages/common/src/pipes/i18n_plural_pipe.ts","../../../../packages/common/src/pipes/i18n_select_pipe.ts","../../../../packages/common/src/pipes/json_pipe.ts","../../../../packages/common/src/pipes/slice_pipe.ts","../../../../packages/common/src/pipes/index.ts","../../../../packages/common/src/common_module.ts","../../../../packages/platform-browser/src/dom/dom_adapter.ts","../../../../packages/platform-browser/src/browser/generic_browser_adapter.ts","../../../../packages/core/src/change_detection/differs/default_iterable_differ.ts","../../../../packages/core/src/change_detection/differs/default_keyvalue_differ.ts","../../../../packages/core/src/change_detection/differs/iterable_differs.ts","../../../../packages/core/src/change_detection/differs/keyvalue_differs.ts","../../../../packages/core/src/change_detection/change_detection.ts","../../../../packages/core/src/platform_core_providers.ts","../../../../packages/core/src/i18n/tokens.ts","../../../../packages/core/src/application_module.ts","../../../../packages/core/src/security.ts","../../../../packages/core/src/view/types.ts","../../../../packages/core/src/view/errors.ts","../../../../packages/core/src/view/util.ts","../../../../packages/core/src/view/refs.ts","../../../../packages/core/src/view/provider.ts","../../../../packages/core/src/view/view.ts","../../../../packages/core/src/view/services.ts","../../../../packages/core/src/view/entrypoint.ts","../../../../packages/core/src/view/index.ts","../../../../node_modules/src/observable/ForkJoinObservable.ts","../../../../node_modules/src/observable/forkJoin.ts","../../../../node_modules/src/observable/PromiseObservable.ts","../../../../node_modules/src/observable/fromPromise.ts","../../../../node_modules/src/operators/map.ts","../../../../node_modules/src/operator/map.ts","../../../../packages/common/src/location/platform_location.ts","../../../../packages/common/src/location/location_strategy.ts","../../../../packages/common/src/location/location.ts","../../../../packages/common/src/location/hash_location_strategy.ts","../../../../packages/common/src/location/path_location_strategy.ts","../../../../packages/common/src/location/index.ts","../../../../packages/common/src/localization.ts","../../../../packages/core/src/di/reflective_injector.ts","../../../../packages/core/src/application_init.ts","../../../../packages/core/src/application_tokens.ts","../../../../packages/core/src/console.ts","../../../../packages/core/src/linker/compiler.ts","../../../../packages/core/src/linker/component_factory.ts","../../../../packages/core/src/linker/component_factory_resolver.ts","../../../../packages/core/src/profile/wtf_impl.ts","../../../../packages/core/src/linker/ng_module_factory.ts","../../../../packages/core/src/event_emitter.ts","../../../../packages/core/src/zone/ng_zone.ts","../../../../packages/core/src/testability/testability.ts","../../../../packages/core/src/application_ref.ts","../../../../packages/core/src/render/api.ts","../../../../packages/core/src/linker/element_ref.ts","../../../../packages/core/src/linker/query_list.ts","../../../../packages/core/src/linker/system_js_ng_module_factory_loader.ts","../../../../packages/core/src/linker/template_ref.ts","../../../../packages/core/src/linker/view_container_ref.ts","../../../../packages/core/src/linker/view_ref.ts","../../../../packages/core/src/debug/debug_node.ts","../../../../packages/core/src/change_detection/change_detection_util.ts","../../../../node_modules/_tslib@1.8.0@tslib/tslib.es6.js","../../../../node_modules/src/util/root.ts","../../../../node_modules/src/util/tryCatch.ts","../../../../node_modules/src/util/isFunction.ts","../../../../node_modules/src/util/isArray.ts","../../../../node_modules/src/util/isObject.ts","../../../../node_modules/src/util/errorObject.ts","../../../../node_modules/src/util/UnsubscriptionError.ts","../../../../node_modules/src/Subscription.ts","../../../../node_modules/src/Observer.ts","../../../../node_modules/src/symbol/rxSubscriber.ts","../../../../node_modules/src/Subscriber.ts","../../../../node_modules/src/util/toSubscriber.ts","../../../../node_modules/src/symbol/observable.ts","../../../../node_modules/src/util/noop.ts","../../../../node_modules/src/util/pipe.ts","../../../../node_modules/src/Observable.ts","../../../../node_modules/src/observable/ScalarObservable.ts","../../../../node_modules/src/observable/EmptyObservable.ts","../../../../node_modules/src/util/isScheduler.ts","../../../../node_modules/src/observable/ArrayObservable.ts","../../../../node_modules/src/util/isArrayLike.ts","../../../../node_modules/src/util/isPromise.ts","../../../../node_modules/src/symbol/iterator.ts","../../../../node_modules/src/InnerSubscriber.ts","../../../../node_modules/src/util/subscribeToResult.ts","../../../../node_modules/src/OuterSubscriber.ts","../../../../node_modules/src/operators/mergeMap.ts","../../../../node_modules/src/util/identity.ts","../../../../node_modules/src/operators/mergeAll.ts","../../../../node_modules/src/operators/merge.ts","../../../../node_modules/src/operator/merge.ts","../../../../node_modules/src/observable/merge.ts","../../../../node_modules/src/util/ObjectUnsubscribedError.ts","../../../../node_modules/src/SubjectSubscription.ts","../../../../node_modules/src/Subject.ts","../../../../node_modules/src/operators/refCount.ts","../../../../node_modules/src/observable/ConnectableObservable.ts","../../../../node_modules/src/operators/multicast.ts","../../../../node_modules/src/operators/share.ts","../../../../node_modules/src/operator/share.ts","../../../../packages/core/src/di/injection_token.ts","../../../../packages/core/src/util.ts","../../../../packages/core/src/util/decorators.ts","../../../../packages/core/src/change_detection/constants.ts","../../../../packages/core/src/metadata/view.ts","../../../../packages/core/src/version.ts","../../../../packages/core/src/di/injector.ts","../../../../packages/core/src/errors.ts","../../../../packages/core/src/error_handler.ts","../../../../packages/core/src/di/reflective_key.ts","../../../../packages/core/src/type.ts","../../../../packages/core/src/reflection/reflection_capabilities.ts","../../../../packages/core/src/reflection/reflector.ts","../../../../packages/core/src/reflection/reflection.ts","../../../../packages/core/src/di/reflective_provider.ts","../../../../packages/core/src/view/text.ts","../../../../packages/common/src/cookie.ts","../../../../packages/platform-browser/src/dom/dom_tokens.ts","../../../../packages/platform-browser/src/dom/util.ts","../../../../packages/platform-browser/src/security/style_sanitizer.ts","../../../../packages/forms/src/directives/control_value_accessor.ts","../../../../packages/core/src/metadata/di.ts","../../../../packages/core/src/di/forward_ref.ts","../../../../packages/core/src/di/reflective_errors.ts","../../../../packages/core/src/di.ts","../../../../packages/core/src/zone.ts","../../../../packages/core/src/view/element.ts","../../../../packages/core/src/view/ng_module.ts","../../../../packages/core/src/view/view_attach.ts","../../../../packages/core/src/view/query.ts","../../../../packages/core/src/view/ng_content.ts","../../../../packages/core/src/view/pure_expression.ts"],"sourcesContent":["/**\n * @license\n * Copyright 厦门乾元盛世科技有限公司 All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file.\n */\n\n\nimport { Directive, Host, Input, HostBinding, HostListener, Optional } from '@angular/core';\nimport { Inject, forwardRef } from '@angular/core';\n\nimport { WeUINavBar } from './weui.navbar';\nexport class WeUINavBarItem {\n/**\n * 任意值，当激活时传递给父级控件\n */\nvalue: any;\n/**\n * 设置基本样式\n */\nbarItemCls = true;\n/**\n * 设置激活样式\n * @return {?}\n */\nget activatedCls(): boolean {\n        return this._activated;\n    }\nprivate _activated = false;\n/**\n * 点击触发激活\n * \n * @param {?} event 点击事件\n * @return {?}\n */\nonClick(event: Event): void {\n        if (this.navbar) {\n            this.navbar.activate(this);\n        }\n    }\n/**\n * @param {?} navbar\n */\nconstructor(\nprivate navbar: WeUINavBar) {\n\n    }\n/**\n * 由父级控件传入\n * \n * @param {?} activated 激活状态\n * @return {?}\n */\nactivated(activated: boolean): void {\n        this._activated = activated;\n    }\n/**\n * @return {?}\n */\nisActivated(): boolean {\n        return this._activated;\n    }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n    // tslint:disable-next-line:directive-selector\n    selector: 'weui-navbar-item,[weui-navbar-item]'\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: WeUINavBar, decorators: [{ type: Optional }, { type: Host }, { type: Inject, args: [forwardRef(() => WeUINavBar), ] }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'value': [{ type: Input },],\n'barItemCls': [{ type: HostBinding, args: ['class.weui-navbar__item', ] },],\n'activatedCls': [{ type: HostBinding, args: ['class.weui-bar__item_on', ] },],\n'onClick': [{ type: HostListener, args: ['click', ['$event'], ] },],\n};\n}\n\nfunction WeUINavBarItem_tsickle_Closure_declarations() {\n/** @type {?} */\nWeUINavBarItem.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nWeUINavBarItem.ctorParameters;\n/** @type {?} */\nWeUINavBarItem.propDecorators;\n/**\n * 任意值，当激活时传递给父级控件\n * @type {?}\n */\nWeUINavBarItem.prototype.value;\n/**\n * 设置基本样式\n * @type {?}\n */\nWeUINavBarItem.prototype.barItemCls;\n/** @type {?} */\nWeUINavBarItem.prototype._activated;\n/** @type {?} */\nWeUINavBarItem.prototype.navbar;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright 厦门乾元盛世科技有限公司 All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file.\n */\n\n\nimport { Component, Input, Output, EventEmitter, HostBinding, AfterViewInit, ContentChildren, QueryList } from '@angular/core';\nimport { WeUINavBarItem } from './weui.navbar.item';\nexport class WeUINavBar implements AfterViewInit {\n/**\n * 初始激活的子对象\n */\nactiveIndex = 0;\n/**\n * 设置基本样式\n */\nbarCls = true;\n/**\n * 内部子对象\n */\nitems: QueryList<WeUINavBarItem>;\n/**\n * 激活事件\n */\nactivated = new EventEmitter<WeUINavBarItem>();\nprivate _activated: any;\nconstructor() {\n\n    }\n/**\n * @return {?}\n */\nngAfterViewInit(): void {\n        this.activateAt(this.activeIndex);\n    }\n/**\n * @param {?} index\n * @return {?}\n */\ngetAt(index: number): WeUINavBarItem {\n        return /** @type {?} */(( this.items.find((item: WeUINavBarItem, i: number) => i === index) as WeUINavBarItem));\n    }\n/**\n * @param {?} item\n * @return {?}\n */\nactivate(item: any): void {\n        this._activated = item;\n        this.items.forEach(child => {\n            child.activated(child === item);\n        });\n\n        this.activated.emit(item);\n    }\n/**\n * @param {?} index\n * @return {?}\n */\nactivateAt(index: number): void {\n        const /** @type {?} */ item = this.getAt(index);\n        if (item) {\n            this.activate(item);\n        }\n    }\n/**\n * @param {?} item\n * @return {?}\n */\nisActivated(item: WeUINavBarItem): boolean {\n        return item.isActivated();\n    }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n    selector: 'weui-navbar',\n    template: `<ng-content></ng-content>`\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'activeIndex': [{ type: Input },],\n'barCls': [{ type: HostBinding, args: ['class.weui-navbar', ] },],\n'items': [{ type: ContentChildren, args: [WeUINavBarItem, ] },],\n'activated': [{ type: Output },],\n};\n}\n\nfunction WeUINavBar_tsickle_Closure_declarations() {\n/** @type {?} */\nWeUINavBar.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nWeUINavBar.ctorParameters;\n/** @type {?} */\nWeUINavBar.propDecorators;\n/**\n * 初始激活的子对象\n * @type {?}\n */\nWeUINavBar.prototype.activeIndex;\n/**\n * 设置基本样式\n * @type {?}\n */\nWeUINavBar.prototype.barCls;\n/**\n * 内部子对象\n * @type {?}\n */\nWeUINavBar.prototype.items;\n/**\n * 激活事件\n * @type {?}\n */\nWeUINavBar.prototype.activated;\n/** @type {?} */\nWeUINavBar.prototype._activated;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright 厦门乾元盛世科技有限公司 All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file.\n */\n\n\nimport { Component, Input, Output, EventEmitter } from '@angular/core';\nexport class WeUIProgressBar {\n/**\n * 颜色，取值：default、primary、warn等。默认为default。<br>\n * 自定义的颜色名称与色值，可以定义在 工程根目录/src/theme/variables.scss 文件中的 $colors 对象。\n */\ncolor = 'default';\n/**\n * Value of the progressbar. Defaults to zero.\n */\nvalue = 0;\n/**\n * 是否可终止 (若为true，则显示关闭按钮)\n */\ncanTerminate = true;\n/**\n * 终止事件\n */\nterminate = new EventEmitter<WeUIProgressBar>();\nconstructor() {\n\n    }\n/**\n * @return {?}\n */\nonTerminate(): void {\n        this.terminate.emit(this);\n    }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n    selector: 'weui-progress-bar',\n    template: `\n        <div class=\"weui-progress weui-progress_{{color}}\">\n            <div class=\"weui-progress__bar\">\n                <div class=\"weui-progress__inner-bar\" [style.width]=\"value + '%'\"></div>\n            </div>\n            <a href=\"javascript:;\" class=\"weui-progress__opr\" *ngIf=\"canTerminate\" (click)=\"onTerminate()\">\n                <i class=\"weui-icon-cancel\"></i>\n            </a>\n        </div>\n    `\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'color': [{ type: Input },],\n'value': [{ type: Input },],\n'canTerminate': [{ type: Input },],\n'terminate': [{ type: Output },],\n};\n}\n\nfunction WeUIProgressBar_tsickle_Closure_declarations() {\n/** @type {?} */\nWeUIProgressBar.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nWeUIProgressBar.ctorParameters;\n/** @type {?} */\nWeUIProgressBar.propDecorators;\n/**\n * 颜色，取值：default、primary、warn等。默认为default。<br>\n * 自定义的颜色名称与色值，可以定义在 工程根目录/src/theme/variables.scss 文件中的 $colors 对象。\n * @type {?}\n */\nWeUIProgressBar.prototype.color;\n/**\n * Value of the progressbar. Defaults to zero.\n * @type {?}\n */\nWeUIProgressBar.prototype.value;\n/**\n * 是否可终止 (若为true，则显示关闭按钮)\n * @type {?}\n */\nWeUIProgressBar.prototype.canTerminate;\n/**\n * 终止事件\n * @type {?}\n */\nWeUIProgressBar.prototype.terminate;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright 厦门乾元盛世科技有限公司 All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file.\n */\n\n\nimport { Component, HostBinding, Renderer2, ElementRef, forwardRef, Optional, Inject } from '@angular/core';\nimport { NG_VALUE_ACCESSOR, COMPOSITION_BUFFER_MODE } from '@angular/forms';\n\nimport { WeUIFormControl } from './weui.form.control';\n\n\nconst /** @type {?} */ WEUI_FORM_CONTROL_VALUE_ACCESSOR: any = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => WeUIRadio),\n    multi: true\n};\nexport class WeUIRadio extends WeUIFormControl {\n/**\n * 基本样式\n */\n_cls_check_label = true;\n/**\n * @param {?} renderer\n * @param {?} elementRef\n * @param {?} compositionMode\n */\nconstructor(\nprivate renderer: Renderer2,\nprivate elementRef: ElementRef,\nprivate compositionMode: boolean) {\n        super(renderer, elementRef, compositionMode);\n    }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n    selector: 'weui-radio',\n    providers: [WEUI_FORM_CONTROL_VALUE_ACCESSOR],\n    template: `\n        <label class=\"weui-check__label\" [for]=\"id\" (click)=\"onTouched()\">\n            <div class=\"weui-cell__bd\">\n                {{label}}<ng-content></ng-content>\n            </div>\n            <div class=\"weui-cell__ft\">\n                <input type=\"radio\" class=\"weui-check\"\n                    [attr.id]=\"id\" [attr.name]=\"name\" [value]=\"value\"\n                    [disabled]=\"disabled\" [(ngModel)]=\"innerValue\">\n                <span class=\"weui-icon-checked\"></span>\n            </div>\n        </label>\n    `\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Renderer2, },\n{type: ElementRef, },\n{type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [COMPOSITION_BUFFER_MODE, ] }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'_cls_check_label': [{ type: HostBinding, args: ['class.weui-check__label', ] },],\n};\n}\n\nfunction WeUIRadio_tsickle_Closure_declarations() {\n/** @type {?} */\nWeUIRadio.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nWeUIRadio.ctorParameters;\n/** @type {?} */\nWeUIRadio.propDecorators;\n/**\n * 基本样式\n * @type {?}\n */\nWeUIRadio.prototype._cls_check_label;\n/** @type {?} */\nWeUIRadio.prototype.renderer;\n/** @type {?} */\nWeUIRadio.prototype.elementRef;\n/** @type {?} */\nWeUIRadio.prototype.compositionMode;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright 厦门乾元盛世科技有限公司 All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file.\n */\n\n\nimport { Component, Input, Output, EventEmitter, OnInit, OnDestroy, ElementRef, ViewChild } from '@angular/core';\nimport { Subject } from 'rxjs/Subject';\nimport { Subscription } from 'rxjs/Subscription';\nimport { debounceTime, distinctUntilChanged } from 'rxjs/operators';\nexport class WeUISearchBar implements OnInit, OnDestroy {\n/**\n * \\@i18n\n */\ndefaults: any = {\n        cancelText: '取消',\n        searchText: '搜索'\n    };\n/**\n * 是否必填\n */\nrequired = true;\n/**\n * \\@i18n \n * placeholder 规定帮助用户填写输入字段的提示。\n */\nplaceholder: string = this.defaults.searchText;\n/**\n * \\@i18n 取消\n */\ncancelText: string = this.defaults.cancelText;\n/**\n * 输入事件\n */\nsearch = new EventEmitter<string>();\n\n    // 输入控件\n     searchBox: ElementRef;\npublic focusing = false;\npublic value = '';\nprivate searchTerms = new Subject<string>();\nprivate _searchTermsChangesSubscription: Subscription;\nconstructor() {\n\n    }\n/**\n * @return {?}\n */\nngOnInit(): void {\n        this._searchTermsChangesSubscription = this.searchTerms\n            .pipe(\n                debounceTime(300),     // wait for 300ms pause in events\n                distinctUntilChanged() // ignore if next search term is same as previous\n            )\n            .subscribe((term: string) => {\n                this.search.emit(term);\n            });\n    }\n/**\n * @return {?}\n */\nngOnDestroy(): void {\n        if (this._searchTermsChangesSubscription) {\n            this._searchTermsChangesSubscription.unsubscribe();\n        }\n    }\n/**\n * @return {?}\n */\ndoFocus(): void {\n        this.searchBox.nativeElement.focus();\n    }\n/**\n * @return {?}\n */\nonFocus(): void {\n        this.focusing = true;\n    }\n/**\n * @return {?}\n */\nonBlur(): void {\n        if (!this.value.length) {\n            this.focusing = false;\n        }\n    }\n/**\n * @return {?}\n */\nonCancel(): void {\n        this.value = '';\n        this.onBlur();\n        this.search.emit('');\n    }\n/**\n * @param {?} term\n * @return {?}\n */\npush(term: string): void {\n        this.searchTerms.next(term);\n    }\n/**\n * @return {?}\n */\nclear(): void {\n        this.value = '';\n        this.doFocus();\n    }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n    selector: 'weui-searchbar',\n    template: `\n        <div class=\"weui-search-bar\" [ngClass]=\"{'weui-search-bar_focusing': focusing}\">\n            <form class=\"weui-search-bar__form\">\n                <div class=\"weui-search-bar__box\">\n                    <i class=\"weui-icon-search\"></i>\n                    <input #searchBox type=\"search\" name=\"search\" class=\"weui-search-bar__input\"\n                        [placeholder]=\"placeholder\" [required]=\"required\"\n                        (focus)=\"onFocus()\" (blur)=\"onBlur()\" [(ngModel)]=\"value\" (keyup)=\"push(searchBox.value)\" />\n                    <a href=\"javascript:\" class=\"weui-icon-clear\" (click)=\"clear()\"></a>\n                </div>\n                <label class=\"weui-search-bar__label\" (click)=\"doFocus()\">\n                    <i class=\"weui-icon-search\"></i>\n                    <span>{{placeholder}}</span>\n                </label>\n            </form>\n            <a href=\"javascript:\" class=\"weui-search-bar__cancel-btn\" (click)=\"onCancel()\">{{cancelText}}</a>\n        </div>\n    `\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'required': [{ type: Input },],\n'placeholder': [{ type: Input },],\n'cancelText': [{ type: Input },],\n'search': [{ type: Output },],\n'searchBox': [{ type: ViewChild, args: ['searchBox', ] },],\n};\n}\n\nfunction WeUISearchBar_tsickle_Closure_declarations() {\n/** @type {?} */\nWeUISearchBar.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nWeUISearchBar.ctorParameters;\n/** @type {?} */\nWeUISearchBar.propDecorators;\n/**\n * \\@i18n\n * @type {?}\n */\nWeUISearchBar.prototype.defaults;\n/**\n * 是否必填\n * @type {?}\n */\nWeUISearchBar.prototype.required;\n/**\n * \\@i18n \n * placeholder 规定帮助用户填写输入字段的提示。\n * @type {?}\n */\nWeUISearchBar.prototype.placeholder;\n/**\n * \\@i18n 取消\n * @type {?}\n */\nWeUISearchBar.prototype.cancelText;\n/**\n * 输入事件\n * @type {?}\n */\nWeUISearchBar.prototype.search;\n/** @type {?} */\nWeUISearchBar.prototype.searchBox;\n/** @type {?} */\nWeUISearchBar.prototype.focusing;\n/** @type {?} */\nWeUISearchBar.prototype.value;\n/** @type {?} */\nWeUISearchBar.prototype.searchTerms;\n/** @type {?} */\nWeUISearchBar.prototype._searchTermsChangesSubscription;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright 厦门乾元盛世科技有限公司 All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file.\n */\n\n\nimport { Directive, Host, Renderer2, ElementRef, Optional, AfterViewInit } from '@angular/core';\nimport { WeUIItem } from '../list/weui.item';\nexport class WeUISelect implements AfterViewInit {\n/**\n * @param {?} _renderer\n * @param {?} _elementRef\n * @param {?} _container\n */\nconstructor(\nprivate _renderer: Renderer2,\nprivate _elementRef: ElementRef,\nprivate _container: WeUIItem) {\n\n    }\n/**\n * @return {?}\n */\nngAfterViewInit(): void {\n        if (!this._container) {\n            return;\n        }\n\n        const /** @type {?} */ nativeEl = /** @type {?} */(( this._elementRef.nativeElement as HTMLElement));\n        this._renderer.addClass(nativeEl, 'weui-select');\n        this._container.addClass('weui-cell_select');\n\n        const /** @type {?} */ parentEl = nativeEl.parentElement;\n        if (parentEl && parentEl.classList.contains('weui-cell__hd')) {\n            this._container.addClass('weui-cell_select-before');\n        }\n        if (parentEl && parentEl.classList.contains('weui-cell__bd')) {\n            this._container.addClass('weui-cell_select-after');\n        }\n    }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n    // tslint:disable-next-line:directive-selector\n    selector: 'select'\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Renderer2, },\n{type: ElementRef, },\n{type: WeUIItem, decorators: [{ type: Optional }, { type: Host }, ]},\n];\n}\n\nfunction WeUISelect_tsickle_Closure_declarations() {\n/** @type {?} */\nWeUISelect.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nWeUISelect.ctorParameters;\n/** @type {?} */\nWeUISelect.prototype._renderer;\n/** @type {?} */\nWeUISelect.prototype._elementRef;\n/** @type {?} */\nWeUISelect.prototype._container;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright 厦门乾元盛世科技有限公司 All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file.\n */\n\n\nimport { Component, Input, Renderer2, ElementRef, ViewChild, forwardRef, Optional, Inject } from '@angular/core';\nimport { DefaultValueAccessor, NG_VALUE_ACCESSOR, COMPOSITION_BUFFER_MODE } from '@angular/forms';\n\n\nconst /** @type {?} */ WEUI_FORM_CONTROL_VALUE_ACCESSOR: any = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => WeUISlider),\n    multi: true\n};\nexport class WeUISlider extends DefaultValueAccessor {\n/**\n * 颜色，取值：default、primary、warn等。默认为default。<br>\n * 自定义的颜色名称与色值，可以定义在 工程根目录/src/theme/variables.scss 文件中的 $colors 对象。\n */\ncolor = 'default';\n/**\n * 显示值（在最后）\n */\nshowValue = true;\n/**\n * 禁用样式\n */\ndisabled = false;\n/**\n * 最小值\n */\nmin = 0;\n/**\n * 最大值\n */\nmax = 100;\n\n    // 内部组件\n     sliderInner: ElementRef;\n/**\n * 取值\n */\npublic value = 0;\n/**\n * 滑动比例（取值：0-100）\n */\npublic percent = 0;\nprivate totalLen: number;\nprivate start: number;\nprivate startX: number;\n/**\n * @param {?} renderer\n * @param {?} elementRef\n * @param {?} compositionMode\n */\nconstructor(\nprivate renderer: Renderer2,\nprivate elementRef: ElementRef,\nprivate compositionMode: boolean) {\n        super(renderer, elementRef, compositionMode);\n    }\n/**\n * @param {?} event\n * @return {?}\n */\nonTouchStart(event: TouchEvent): void {\n        if (this.disabled) {\n            return;\n        }\n\n        this.totalLen = this.sliderInner.nativeElement.clientWidth;\n        this.start = this.percent * this.totalLen / 100;\n        this.startX = event.targetTouches[0].clientX;\n        this.onTouched();\n    }\n/**\n * @param {?} event\n * @return {?}\n */\nonTouchMove(event: TouchEvent): void {\n        if (this.disabled) {\n            return;\n        }\n\n        const /** @type {?} */ dist = event.targetTouches[0].clientX - this.startX;\n        let /** @type {?} */ end = this.start + dist;\n        end = end < 0 ? 0 : end > this.totalLen ? this.totalLen : end;\n        this.percent = end * 100 / this.totalLen;\n        this.value = Math.round(this.min + (this.max - this.min) * this.percent / 100);\n\n        event.preventDefault();\n        this.onChange(this.value);\n    }\n/**\n * Write a new value to the element. (From ControlValueAccessor interface)\n * @param {?} value\n * @return {?}\n */\nwriteValue(value: number): void {\n        if (value !== undefined && value !== null) {\n            value = Math.min(Math.max(value, this.min), this.max);\n            this.value = value;\n            this.percent = (value + this.min) * 100 / this.max;\n        }\n    }\n/**\n * 设置禁用状态 (From ControlValueAccessor interface)\n * @param {?} isDisabled\n * @return {?}\n */\nsetDisabledState(isDisabled: boolean): void {\n        this.disabled = isDisabled;\n    }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n    selector: 'weui-slider',\n    template: `\n        <div class=\"weui-slider-box weui-slider_{{color}}\">\n            <ng-content select=\"[weui-start]\"></ng-content>\n            <div class=\"weui-slider\">\n                <div #sliderInner class=\"weui-slider__inner\">\n                    <div [style.width]=\"percent + '%'\" class=\"weui-slider__track\"></div>\n                    <div [style.left]=\"percent + '%'\" class=\"weui-slider__handler\"\n                        (touchstart)=\"onTouchStart($event)\" (touchmove)=\"onTouchMove($event)\"></div>\n                </div>\n            </div>\n            <ng-content select=\"[weui-last]\"></ng-content>\n            <div class=\"weui-slider-box__value\" *ngIf=\"showValue\">{{value}}</div>\n        </div>\n    `,\n    providers: [WEUI_FORM_CONTROL_VALUE_ACCESSOR]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Renderer2, },\n{type: ElementRef, },\n{type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [COMPOSITION_BUFFER_MODE, ] }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'color': [{ type: Input },],\n'showValue': [{ type: Input },],\n'disabled': [{ type: Input },],\n'min': [{ type: Input },],\n'max': [{ type: Input },],\n'sliderInner': [{ type: ViewChild, args: ['sliderInner', ] },],\n};\n}\n\nfunction WeUISlider_tsickle_Closure_declarations() {\n/** @type {?} */\nWeUISlider.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nWeUISlider.ctorParameters;\n/** @type {?} */\nWeUISlider.propDecorators;\n/**\n * 颜色，取值：default、primary、warn等。默认为default。<br>\n * 自定义的颜色名称与色值，可以定义在 工程根目录/src/theme/variables.scss 文件中的 $colors 对象。\n * @type {?}\n */\nWeUISlider.prototype.color;\n/**\n * 显示值（在最后）\n * @type {?}\n */\nWeUISlider.prototype.showValue;\n/**\n * 禁用样式\n * @type {?}\n */\nWeUISlider.prototype.disabled;\n/**\n * 最小值\n * @type {?}\n */\nWeUISlider.prototype.min;\n/**\n * 最大值\n * @type {?}\n */\nWeUISlider.prototype.max;\n/** @type {?} */\nWeUISlider.prototype.sliderInner;\n/**\n * 取值\n * @type {?}\n */\nWeUISlider.prototype.value;\n/**\n * 滑动比例（取值：0-100）\n * @type {?}\n */\nWeUISlider.prototype.percent;\n/** @type {?} */\nWeUISlider.prototype.totalLen;\n/** @type {?} */\nWeUISlider.prototype.start;\n/** @type {?} */\nWeUISlider.prototype.startX;\n/** @type {?} */\nWeUISlider.prototype.renderer;\n/** @type {?} */\nWeUISlider.prototype.elementRef;\n/** @type {?} */\nWeUISlider.prototype.compositionMode;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright 厦门乾元盛世科技有限公司 All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file.\n */\n\n\nimport { Component, HostBinding, Renderer2, ElementRef, forwardRef, Optional, Inject } from '@angular/core';\nimport { NG_VALUE_ACCESSOR, COMPOSITION_BUFFER_MODE } from '@angular/forms';\n\nimport { WeUIFormControl } from './weui.form.control';\n\n\nconst /** @type {?} */ WEUI_FORM_CONTROL_VALUE_ACCESSOR: any = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => WeUISwitch),\n    multi: true\n};\nexport class WeUISwitch extends WeUIFormControl {\n/**\n * 是否已选中\n */\npublic checked = false;\n/**\n * The value of the input ngModel。 (view -> model)\n * @param {?} checked\n * @return {?}\n */\nset innerValue(checked: boolean) {\n        if (this._value !== checked) {\n            this._value = checked || false;\n            // view -> model -> outside world (ie. NgModel on this control)\n            this.onChange(this._value ? this.value : '');\n        }\n    }\n/**\n * Write a new value to the element. (From ControlValueAccessor interface)\n * @param {?} value\n * @return {?}\n */\nwriteValue(value: any): void {\n        this.checked = this.value === value;\n        super.writeValue(this.checked);\n    }\n/**\n * 基本样式\n */\n_cls_cell_switch = true;\n/**\n * @param {?} renderer\n * @param {?} elementRef\n * @param {?} compositionMode\n */\nconstructor(\nprivate renderer: Renderer2,\nprivate elementRef: ElementRef,\nprivate compositionMode: boolean) {\n        super(renderer, elementRef, compositionMode);\n        this.value = 'on'; // default value\n    }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n    selector: 'weui-switch',\n    template: `\n        <div class=\"weui-cell__bd\">\n            {{label}}<ng-content select=\"label\"></ng-content>\n        </div>\n        <div class=\"weui-cell__ft\">\n            <label [for]=\"id\" class=\"weui-switch-cp\">\n                <input type=\"checkbox\" class=\"weui-switch-cp__input\"\n                    [attr.id]=\"id\" [attr.name]=\"name\" [value]=\"value\" [checked]=\"checked\" [(ngModel)]=\"innerValue\" />\n                <div class=\"weui-switch-cp__box\"></div>\n            </label>\n        </div>\n    `,\n    providers: [WEUI_FORM_CONTROL_VALUE_ACCESSOR]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Renderer2, },\n{type: ElementRef, },\n{type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [COMPOSITION_BUFFER_MODE, ] }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'_cls_cell_switch': [{ type: HostBinding, args: ['class.weui-cell_switch', ] },],\n};\n}\n\nfunction WeUISwitch_tsickle_Closure_declarations() {\n/** @type {?} */\nWeUISwitch.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nWeUISwitch.ctorParameters;\n/** @type {?} */\nWeUISwitch.propDecorators;\n/**\n * 是否已选中\n * @type {?}\n */\nWeUISwitch.prototype.checked;\n/**\n * 基本样式\n * @type {?}\n */\nWeUISwitch.prototype._cls_cell_switch;\n/** @type {?} */\nWeUISwitch.prototype.renderer;\n/** @type {?} */\nWeUISwitch.prototype.elementRef;\n/** @type {?} */\nWeUISwitch.prototype.compositionMode;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright 厦门乾元盛世科技有限公司 All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file.\n */\n\n\nimport { Directive, Input, Host, HostBinding, HostListener, Optional } from '@angular/core';\nimport { Inject, forwardRef } from '@angular/core';\n\nimport { WeUITabBar } from './weui.tabbar';\nexport class WeUITabBarItem {\n/**\n * 任意值，当激活时传递给父级控件\n */\nvalue: any;\n/**\n * 设置基本样式\n */\nbarItemCls = true;\n/**\n * 设置激活样式\n * @return {?}\n */\nget activatedCls(): boolean {\n        return this._activated;\n    }\nprivate _activated = false;\n/**\n * 点击触发激活\n * \n * @param {?} event 点击事件\n * @return {?}\n */\nonClick(event: Event): void {\n        if (this.tabbar) {\n            this.tabbar.activate(this);\n        }\n    }\n/**\n * @param {?} tabbar\n */\nconstructor(\nprivate tabbar: WeUITabBar) {\n\n    }\n/**\n * 由父级控件传入\n * \n * @param {?} activated 激活状态\n * @return {?}\n */\nactivated(activated: boolean): void {\n        this._activated = activated;\n    }\n/**\n * @return {?}\n */\nisActivated(): boolean {\n        return this._activated;\n    }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n    // tslint:disable-next-line:directive-selector\n    selector: 'weui-tabbar-item,[weui-tabbar-item]'\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: WeUITabBar, decorators: [{ type: Optional }, { type: Host }, { type: Inject, args: [forwardRef(() => WeUITabBar), ] }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'value': [{ type: Input },],\n'barItemCls': [{ type: HostBinding, args: ['class.weui-tabbar__item', ] },],\n'activatedCls': [{ type: HostBinding, args: ['class.weui-bar__item_on', ] },],\n'onClick': [{ type: HostListener, args: ['click', ['$event'], ] },],\n};\n}\n\nfunction WeUITabBarItem_tsickle_Closure_declarations() {\n/** @type {?} */\nWeUITabBarItem.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nWeUITabBarItem.ctorParameters;\n/** @type {?} */\nWeUITabBarItem.propDecorators;\n/**\n * 任意值，当激活时传递给父级控件\n * @type {?}\n */\nWeUITabBarItem.prototype.value;\n/**\n * 设置基本样式\n * @type {?}\n */\nWeUITabBarItem.prototype.barItemCls;\n/** @type {?} */\nWeUITabBarItem.prototype._activated;\n/** @type {?} */\nWeUITabBarItem.prototype.tabbar;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright 厦门乾元盛世科技有限公司 All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file.\n */\n\n\nimport { Component, Input, Output, EventEmitter, HostBinding, AfterViewInit, ContentChildren, QueryList } from '@angular/core';\n\nimport { WeUITabBarItem } from './weui.tabbar.item';\nexport class WeUITabBar implements AfterViewInit {\n/**\n * 初始激活的子对象\n */\nactiveIndex = 0;\n/**\n * 设置基本样式\n */\nbarCls = true;\n/**\n * 内部子对象\n */\nitems: QueryList<WeUITabBarItem>;\n/**\n * 激活事件\n */\nactivated = new EventEmitter<WeUITabBarItem>();\nprivate _activated: any;\nconstructor() {\n\n    }\n/**\n * @return {?}\n */\nngAfterViewInit(): void {\n        setTimeout(() => {\n            this.activateAt(this.activeIndex);\n        }, 1);\n    }\n/**\n * @param {?} index\n * @return {?}\n */\ngetAt(index: number): WeUITabBarItem {\n        return /** @type {?} */(( this.items.find((item: WeUITabBarItem, i: number) => i === index) as WeUITabBarItem));\n    }\n/**\n * @param {?} item\n * @return {?}\n */\nactivate(item: any): void {\n        this._activated = item;\n        this.items.forEach(child => {\n            child.activated(child === item);\n        });\n\n        this.activated.emit(item);\n    }\n/**\n * @param {?} index\n * @return {?}\n */\nactivateAt(index: number): void {\n        const /** @type {?} */ item = this.getAt(index);\n        if (item) {\n            this.activate(item);\n        }\n    }\n/**\n * @param {?} item\n * @return {?}\n */\nisActivated(item: WeUITabBarItem): boolean {\n        return item.isActivated();\n    }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n    selector: 'weui-tabbar',\n    template: `<ng-content></ng-content>`\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'activeIndex': [{ type: Input },],\n'barCls': [{ type: HostBinding, args: ['class.weui-tabbar', ] },],\n'items': [{ type: ContentChildren, args: [WeUITabBarItem, ] },],\n'activated': [{ type: Output },],\n};\n}\n\nfunction WeUITabBar_tsickle_Closure_declarations() {\n/** @type {?} */\nWeUITabBar.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nWeUITabBar.ctorParameters;\n/** @type {?} */\nWeUITabBar.propDecorators;\n/**\n * 初始激活的子对象\n * @type {?}\n */\nWeUITabBar.prototype.activeIndex;\n/**\n * 设置基本样式\n * @type {?}\n */\nWeUITabBar.prototype.barCls;\n/**\n * 内部子对象\n * @type {?}\n */\nWeUITabBar.prototype.items;\n/**\n * 激活事件\n * @type {?}\n */\nWeUITabBar.prototype.activated;\n/** @type {?} */\nWeUITabBar.prototype._activated;\n}\n\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright 厦门乾元盛世科技有限公司 All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file.\n */\n\n\nimport { Component, HostBinding } from '@angular/core';\nexport class WeUITips {\n/**\n * 设置基本样式\n */\n_cls_tips = true;\nconstructor() {\n\n    }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n    selector: 'weui-tips',\n    template: `<ng-content></ng-content>`\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'_cls_tips': [{ type: HostBinding, args: ['class.weui-cells__tips', ] },],\n};\n}\n\nfunction WeUITips_tsickle_Closure_declarations() {\n/** @type {?} */\nWeUITips.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nWeUITips.ctorParameters;\n/** @type {?} */\nWeUITips.propDecorators;\n/**\n * 设置基本样式\n * @type {?}\n */\nWeUITips.prototype._cls_tips;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright 厦门乾元盛世科技有限公司 All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file.\n */\n\n\nimport { Component, HostBinding } from '@angular/core';\nexport class WeUITitle {\n/**\n * 设置基本样式\n */\n_cls_title = true;\nconstructor() {\n\n    }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n    selector: 'weui-title',\n    template: `<ng-content></ng-content>`\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'_cls_title': [{ type: HostBinding, args: ['class.weui-cells__title', ] },],\n};\n}\n\nfunction WeUITitle_tsickle_Closure_declarations() {\n/** @type {?} */\nWeUITitle.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nWeUITitle.ctorParameters;\n/** @type {?} */\nWeUITitle.propDecorators;\n/**\n * 设置基本样式\n * @type {?}\n */\nWeUITitle.prototype._cls_title;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright 厦门乾元盛世科技有限公司 All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file.\n */\n\n\nimport { Component, Renderer2, ElementRef, ViewChild, forwardRef } from '@angular/core';\nimport { DomSanitizer } from '@angular/platform-browser';\n\nimport { WeUIGallery } from '../gallery/weui.gallery';\n/**\n * 文件信息\n */\nexport class WeUIFile {\n/**\n * 所选文件\n */\nfile?: File;\n/**\n * 文件URL\n */\nfileURL?: any;\n/**\n * 此文件的上传进度\n */\nprogress = 0;\n/**\n * 错误消息\n */\nerror: string | Error | null;\n/**\n * 是否正在上传\n */\nisUploading = false;\n/**\n * 是否已经上传\n */\nisUploaded = false;\n/**\n * 是否存在错误\n * @return {?}\n */\nhasError(): boolean {\n        return !!this.error;\n    }\n/**\n * @return {?}\n */\nhasMessage(): boolean {\n        return this.hasError() || (this.progress > 0 && this.progress < 100);\n    }\n/**\n * 重置状态<br>\n * 上传进度设置为0，错误消息为null，isUploading和isUploaded均设置为false。\n * @return {?}\n */\nreset(): void {\n        this.progress = 0;\n        this.error = null;\n        this.isUploading = false;\n        this.isUploaded = false;\n    }\n/**\n * @param {?} file\n * @param {?=} fileURL\n */\nconstructor(file: File, fileURL?: any) {\n        this.file = file;\n        this.fileURL = fileURL;\n    }\n}\n\nfunction WeUIFile_tsickle_Closure_declarations() {\n/**\n * 所选文件\n * @type {?}\n */\nWeUIFile.prototype.file;\n/**\n * 文件URL\n * @type {?}\n */\nWeUIFile.prototype.fileURL;\n/**\n * 此文件的上传进度\n * @type {?}\n */\nWeUIFile.prototype.progress;\n/**\n * 错误消息\n * @type {?}\n */\nWeUIFile.prototype.error;\n/**\n * 是否正在上传\n * @type {?}\n */\nWeUIFile.prototype.isUploading;\n/**\n * 是否已经上传\n * @type {?}\n */\nWeUIFile.prototype.isUploaded;\n}\n\nexport class WeUIUploader {\n/**\n * 图片预览控件\n */\ngallery: WeUIGallery;\npublic files: WeUIFile[] = [];\n/**\n * 预览时用\n */\npublic image: WeUIFile;\n/**\n * @param {?} renderer\n * @param {?} elementRef\n * @param {?} sanitizer\n */\nconstructor(\nprivate renderer: Renderer2,\nprivate elementRef: ElementRef,\nprivate sanitizer: DomSanitizer) {\n\n    }\n/**\n * 获取列表中的文件\n * @return {?}\n */\ngetFiles(): WeUIFile[] {\n        return this.files;\n    }\n/**\n * 文件总数\n * @return {?}\n */\ngetFileCount(): number {\n        return this.files.length;\n    }\n/**\n * 已上传文件数\n * @return {?}\n */\ngetUploadedFileCount(): number {\n        return this.files.filter((file: WeUIFile) => file.isUploaded).length;\n    }\n/**\n * 选择图片文件\n * @param {?} event\n * @return {?}\n */\nonSelect(event: Event): void {\n        const /** @type {?} */ picker = /** @type {?} */(( event.target as HTMLInputElement));\n        const /** @type {?} */ files = picker && picker.files;\n        if (!files) {\n            return;\n        }\n\n        const /** @type {?} */ length = files.length;\n        for (let /** @type {?} */ i = 0; i < length; i++) {\n            const /** @type {?} */ file: File = files.item(i);\n            const /** @type {?} */ url: string = 'url(' + window.URL.createObjectURL(file) + ')';\n            const /** @type {?} */ safeUrl = this.sanitizer.bypassSecurityTrustStyle(url);\n            this.files.push(new WeUIFile(file, safeUrl));\n        }\n    }\n/**\n * 预览图片\n * @param {?} file\n * @return {?}\n */\npreview(file: WeUIFile): void {\n        this.image = file;\n        if (this.gallery) {\n            this.gallery.show();\n        }\n    }\n/**\n * 退出预览\n * @return {?}\n */\nfadeOut(): void {\n        if (this.gallery) {\n            this.gallery.hide();\n        }\n    }\n/**\n * 删除文件\n * @param {?} file\n * @return {?}\n */\nonDelete(file: WeUIFile): void {\n        const /** @type {?} */ index = this.files.indexOf(file);\n        if (index >= 0) {\n            this.files.splice(index, 1);\n        }\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n    selector: 'weui-uploader',\n    template: `\n        <div class=\"weui-uploader\">\n            <div class=\"weui-uploader__hd\">\n                <p class=\"weui-uploader__title\">图片上传</p>\n                <div class=\"weui-uploader__info\">{{getUploadedFileCount()}}/{{getFileCount()}}</div>\n            </div>\n            <div class=\"weui-uploader__bd\">\n                <ul class=\"weui-uploader__files\">\n                    <li class=\"weui-uploader__file\" *ngFor=\"let file of files\"\n                        [style.background-image]=\"file.fileURL\"\n                        [ngClass]=\"{'weui-uploader__file_status': file.hasMessage()}\"\n                        (click)=\"preview(file)\">\n                        <div class=\"weui-uploader__file-content\" *ngIf=\"file.hasMessage()\">\n                            <div class=\"weui-uploader__file-progress\"\n                                *ngIf=\"file.isUploading && file.progress && !file.hasError()\">{{file.progress}}%</div>\n                            <i class=\"weui-icon-warn\" *ngIf=\"file.hasError()\"></i>\n                        </div>\n                    </li>\n                </ul>\n                <div class=\"weui-uploader__input-box\">\n                    <input class=\"weui-uploader__input\" type=\"file\" accept=\"image/*\" multiple (change)=\"onSelect($event)\" />\n                </div>\n            </div>\n        </div>\n        <weui-gallery [image]=\"image\" [canDelete]=\"true\" (delete)=\"onDelete($event)\" (click)=\"fadeOut()\"></weui-gallery>\n    `\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Renderer2, },\n{type: ElementRef, },\n{type: DomSanitizer, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'gallery': [{ type: ViewChild, args: [forwardRef(() => WeUIGallery), ] },],\n};\n}\n\nfunction WeUIUploader_tsickle_Closure_declarations() {\n/** @type {?} */\nWeUIUploader.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nWeUIUploader.ctorParameters;\n/** @type {?} */\nWeUIUploader.propDecorators;\n/**\n * 图片预览控件\n * @type {?}\n */\nWeUIUploader.prototype.gallery;\n/** @type {?} */\nWeUIUploader.prototype.files;\n/**\n * 预览时用\n * @type {?}\n */\nWeUIUploader.prototype.image;\n/** @type {?} */\nWeUIUploader.prototype.renderer;\n/** @type {?} */\nWeUIUploader.prototype.elementRef;\n/** @type {?} */\nWeUIUploader.prototype.sanitizer;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright 厦门乾元盛世科技有限公司 All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file.\n */\n\n\nimport { Component, Input, Output, HostBinding, EventEmitter } from '@angular/core';\nimport { animate, state, style, transition, trigger } from '@angular/core';\nexport class WeUIActionSheet {\n/**\n * \\@i18n\n */\ndefaults: any = {\n        cancelText: '取消'\n    };\n/**\n * ActionSheet菜单，列表，内容任意，其中<code>text</code>用于显示\n */\nmenu: { text?: string, [key: string]: any }[] = [];\n/**\n * ActionSheet弹出模式，取值：ios(Ios模式) - 从底部上弹，md(Android模式) - 弹出在窗口中间。默认为ios。\n */\nmode = 'ios';\n/**\n * \\@i18n 取消\n */\ncancelText: string = this.defaults.cancelText;\n/**\n * 隐藏对象\n */\nclose = new EventEmitter<any>();\n/**\n * 安卓模式下的特殊样式\n * @return {?}\n */\nget androidCls(): boolean {\n        return this.mode === 'md';\n    }\n/**\n * 用于控制控件的可视化\n * @return {?}\n */\nget hideCls(): boolean {\n        return !this._show;\n    }\n/**\n * 用于控制动画的触发(trigger)\n * @return {?}\n */\nget visibility(): string {\n        return this.shown ? 'show' : 'hide';\n    }\n/**\n * 已显示否\n */\npublic shown = false;\npublic _show = false;\n/**\n * 用户操作反馈\n */\nprivate resolve: (value?: any) => void;\nconstructor() {\n\n    }\n/**\n * 显示菜单\n * @return {?}\n */\nshow(): Promise<any> {\n        this._show = true;\n        setTimeout(() => { // 解决transition动画与display冲突的问题\n            this.shown = true;\n        }, 10);\n\n        return new Promise<any>((resolve, reject) => {\n            this.resolve = resolve;\n        });\n    }\n/**\n * 隐藏菜单\n * @return {?}\n */\nhide(): void {\n        this.shown = false;\n        setTimeout(() => {\n            this._show = false;\n            this.close.emit();\n        }, 200);\n    }\n/**\n * 选择某个菜单，执行Promise.resolve()方法，并将选中的menu作为参数；最后，关闭ActionSheet\n * \n * @param {?} menu 被选择的菜单\n * @return {?}\n */\nonSelect(menu: { text?: string, [key: string]: any }): void {\n        this.resolve(menu);\n        this.hide();\n    }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n    selector: 'weui-actionsheet',\n    template: `\n        <div class=\"weui-mask\" [@visibility]=\"visibility\" (click)=\"hide()\"></div>\n        <div class=\"weui-actionsheet\"\n            [ngClass]=\"{'weui-actionsheet_toggle': shown && mode == 'ios'}\">\n            <div class=\"weui-actionsheet__menu\">\n                <div class=\"weui-actionsheet__cell\" *ngFor=\"let m of menu\" (click)=\"onSelect(m)\">{{m.text}}</div>\n            </div>\n            <div class=\"weui-actionsheet__action\" *ngIf=\"mode == 'ios'\">\n                <div class=\"weui-actionsheet__cell\" (click)=\"hide()\">{{cancelText}}</div>\n            </div>\n        </div>\n    `,\n    animations: [trigger('visibility', [\n        state('show', style({ opacity: 1 })),\n        state('hide', style({ opacity: 0 })),\n        transition('hide <=> show', [animate(200)])\n    ])]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'menu': [{ type: Input },],\n'mode': [{ type: Input },],\n'cancelText': [{ type: Input },],\n'close': [{ type: Output },],\n'androidCls': [{ type: HostBinding, args: ['class.weui-skin_android', ] },],\n'hideCls': [{ type: HostBinding, args: ['class.weui-hide', ] },],\n};\n}\n\nfunction WeUIActionSheet_tsickle_Closure_declarations() {\n/** @type {?} */\nWeUIActionSheet.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nWeUIActionSheet.ctorParameters;\n/** @type {?} */\nWeUIActionSheet.propDecorators;\n/**\n * \\@i18n\n * @type {?}\n */\nWeUIActionSheet.prototype.defaults;\n/**\n * ActionSheet菜单，列表，内容任意，其中<code>text</code>用于显示\n * @type {?}\n */\nWeUIActionSheet.prototype.menu;\n/**\n * ActionSheet弹出模式，取值：ios(Ios模式) - 从底部上弹，md(Android模式) - 弹出在窗口中间。默认为ios。\n * @type {?}\n */\nWeUIActionSheet.prototype.mode;\n/**\n * \\@i18n 取消\n * @type {?}\n */\nWeUIActionSheet.prototype.cancelText;\n/**\n * 隐藏对象\n * @type {?}\n */\nWeUIActionSheet.prototype.close;\n/**\n * 已显示否\n * @type {?}\n */\nWeUIActionSheet.prototype.shown;\n/** @type {?} */\nWeUIActionSheet.prototype._show;\n/**\n * 用户操作反馈\n * @type {?}\n */\nWeUIActionSheet.prototype.resolve;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright 厦门乾元盛世科技有限公司 All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file.\n */\n\n\nimport { Component, Input, Output, HostBinding, EventEmitter } from '@angular/core';\nimport { animate, state, style, transition, trigger } from '@angular/core';\nexport class WeUIDialog {\n/**\n * \\@i18n\n */\ndefaults: any = {\n       btnNOText: '取消',\n       btnOKText: '确定'\n    };\n/**\n * ActionSheet弹出模式，取值：ios(Ios模式) - 从底部上弹，md(Android模式) - 弹出在窗口中间。默认为ios。\n */\nmode = 'ios';\n/**\n * 标题\n */\ntitle: string;\n/**\n * 内容\n */\ncontent: string;\n/**\n * 类型，可选：info, success, error, warning, default\n */\ntype: string | null;\n/**\n * 自定义图标\n */\nicon: string;\n/**\n * 自定义图标样式\n */\niconCls: string;\n/**\n * \\@i18n 取消\n */\nbtnNOText: string = this.defaults.btnNOText;\n/**\n * \\@i18n 确定\n */\nbtnOKText: string = this.defaults.btnOKText;\n/**\n * 是否显示“取消”按钮\n */\nshowNOButton = true;\n/**\n * 隐藏对象\n */\nclose = new EventEmitter<any>();\n/**\n * 用于控制动画的触发(trigger)\n * @return {?}\n */\nget visibility(): string {\n        return this.shown ? 'show' : 'hide';\n    }\n/**\n * 已显示否\n */\nprivate shown = false;\n/**\n * 用户操作反馈\n */\nprivate resolve: (value?: any) => void;\n/**\n * 用户操作反馈\n */\nprivate reject: (value?: any) => void;\nconstructor() {\n\n    }\n/**\n * 显示对话框\n * @return {?}\n */\nshow(): Promise<any> {\n        this.shown = true;\n\n        return new Promise<any>((resolve, reject) => {\n            this.resolve = resolve;\n            this.reject = reject;\n        });\n    }\n/**\n * 隐藏对话框\n * @return {?}\n */\nhide(): void {\n        this.shown = false;\n        this.close.emit();\n    }\n/**\n * 点击【取消】，执行Promise.reject()方法；然后，关闭对话框\n * @param {?} event\n * @return {?}\n */\nnegativeClick(event: MouseEvent): void {\n        this.reject();\n        this.hide();\n    }\n/**\n * 点击【确定】，执行Promise.resolve()方法；然后，关闭对话框\n * @param {?} event\n * @return {?}\n */\npositiveClick(event: MouseEvent): void {\n        this.resolve();\n        this.hide();\n    }\n/**\n * @return {?}\n */\ngetIcon(): string | null {\n        if (this.icon) {\n            return this.icon;\n        }\n        if (this.type) {\n            return ({\n                info: 'weui-icon-info',\n                success: 'weui-icon-success',\n                error: 'weui-icon-cancel',\n                warning: 'weui-icon-warn',\n                confirm: 'weui-icon-waiting',\n                'default': 'weui-icon-info-circle',\n            })[this.type];\n        }\n        return null;\n    }\n/**\n * @return {?}\n */\ngetIconClass(): any {\n        const /** @type {?} */ icon = this.getIcon();\n        return {\n            [`weui-dialog-icon`]: 1,\n            [`weui-dialog-icon-${this.type}`]: this.type,\n            [`${icon}`]: icon,\n            [`${this.iconCls}`]: this.iconCls\n        };\n    }\n/**\n * @return {?}\n */\ngetWrapperClass(): any {\n        return {\n            [`weui-dialog__wrapper`]: 1,\n            [`weui-dialog__wrapper_with_icon`]: this.getIcon(),\n        };\n    }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n    selector: 'weui-dialog',\n    template: `\n        <div class=\"weui-mask\"></div>\n        <div class=\"weui-dialog\" [ngClass]=\"{'weui-skin_android': mode == 'md'}\">\n            <div [ngClass]=\"getWrapperClass()\">\n                <i [ngClass]=\"getIconClass()\" *ngIf=\"getIcon()\"></i>\n                <div class=\"weui-dialog__wrapper_inner\">\n                    <div class=\"weui-dialog__hd\"><strong class=\"weui-dialog__title\">{{title}}</strong></div>\n                    <div class=\"weui-dialog__bd\">\n                        {{content}}\n                    </div>\n                </div>\n            </div>\n            <div class=\"weui-dialog__ft\">\n                <a href=\"javascript:;\" (click)=\"negativeClick($event)\" *ngIf=\"showNOButton\"\n                    class=\"weui-dialog__btn weui-dialog__btn_default\">{{btnNOText || defaults.btnNOText}}</a>\n                <a href=\"javascript:;\" (click)=\"positiveClick($event)\"\n                    class=\"weui-dialog__btn weui-dialog__btn_primary\">{{btnOKText || defaults.btnOKText}}</a>\n            </div>\n        </div>\n    `,\n    animations: [trigger('visibility', [\n        state('show', style({ opacity: 1, display: 'block' })),\n        state('hide', style({ opacity: 0, display: 'none' })),\n        transition('hide <=> show', [animate(200)])\n    ])]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'mode': [{ type: Input },],\n'title': [{ type: Input },],\n'content': [{ type: Input },],\n'type': [{ type: Input },],\n'icon': [{ type: Input },],\n'iconCls': [{ type: Input },],\n'btnNOText': [{ type: Input },],\n'btnOKText': [{ type: Input },],\n'showNOButton': [{ type: Input },],\n'close': [{ type: Output },],\n'visibility': [{ type: HostBinding, args: ['@visibility', ] },],\n};\n}\n\nfunction WeUIDialog_tsickle_Closure_declarations() {\n/** @type {?} */\nWeUIDialog.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nWeUIDialog.ctorParameters;\n/** @type {?} */\nWeUIDialog.propDecorators;\n/**\n * \\@i18n\n * @type {?}\n */\nWeUIDialog.prototype.defaults;\n/**\n * ActionSheet弹出模式，取值：ios(Ios模式) - 从底部上弹，md(Android模式) - 弹出在窗口中间。默认为ios。\n * @type {?}\n */\nWeUIDialog.prototype.mode;\n/**\n * 标题\n * @type {?}\n */\nWeUIDialog.prototype.title;\n/**\n * 内容\n * @type {?}\n */\nWeUIDialog.prototype.content;\n/**\n * 类型，可选：info, success, error, warning, default\n * @type {?}\n */\nWeUIDialog.prototype.type;\n/**\n * 自定义图标\n * @type {?}\n */\nWeUIDialog.prototype.icon;\n/**\n * 自定义图标样式\n * @type {?}\n */\nWeUIDialog.prototype.iconCls;\n/**\n * \\@i18n 取消\n * @type {?}\n */\nWeUIDialog.prototype.btnNOText;\n/**\n * \\@i18n 确定\n * @type {?}\n */\nWeUIDialog.prototype.btnOKText;\n/**\n * 是否显示“取消”按钮\n * @type {?}\n */\nWeUIDialog.prototype.showNOButton;\n/**\n * 隐藏对象\n * @type {?}\n */\nWeUIDialog.prototype.close;\n/**\n * 已显示否\n * @type {?}\n */\nWeUIDialog.prototype.shown;\n/**\n * 用户操作反馈\n * @type {?}\n */\nWeUIDialog.prototype.resolve;\n/**\n * 用户操作反馈\n * @type {?}\n */\nWeUIDialog.prototype.reject;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright 厦门乾元盛世科技有限公司 All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file.\n */\n\n\nimport { Component, Input, Output, EventEmitter, HostBinding, OnChanges } from '@angular/core';\nimport { SimpleChange, SimpleChanges, Renderer2, ElementRef } from '@angular/core';\n/**\n * Toast - 弹出式提示\n */\nexport class WeUIToast implements OnChanges {\n/**\n * \\@i18n\n */\ndefaults: any = {\n        loadingText: '数据加载中',\n        successText: '操作成功'\n    };\n/**\n * 内容\n */\ncontent: string;\n/**\n * 状态，取值：loading, success\n */\nstatus: string;\n/**\n * 状态：正在加载\n */\nloading = false;\n/**\n * 状态：操作成功\n */\nsuccess = true;\n/**\n * 隐藏对象\n */\nclose = new EventEmitter<any>();\n/**\n * 样式控制\n * @return {?}\n */\nget hideCls(): boolean {\n        return !this.shown;\n    }\n/**\n * 已显示否\n */\nprivate shown = false;\n/**\n * @param {?} renderer\n * @param {?} elementRef\n */\nconstructor(\nprivate renderer: Renderer2,\nprivate elementRef: ElementRef) {\n\n    }\n/**\n * @param {?} changes\n * @return {?}\n */\nngOnChanges(changes: SimpleChanges): void {\n        const /** @type {?} */ status: SimpleChange = changes['status'];\n        if (status) {\n            if (status.currentValue === 'loading') {\n                this.success = !(this.loading = true);\n            }\n            if (status.currentValue === 'success') {\n                this.loading = !(this.success = true);\n            }\n        }\n    }\n/**\n * 显示\n * @return {?}\n */\nshow(): void {\n        this.shown = true;\n        if (this.success) {\n            setTimeout(() => { this.hide(); }, 2000);\n        }\n    }\n/**\n * 隐藏\n * @return {?}\n */\nhide(): void {\n        this.shown = false;\n        this.close.emit();\n    }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n    selector: 'weui-toast',\n    template: `\n        <div class=\"weui-mask_transparent\"></div>\n        <div class=\"weui-toast\">\n            <i class=\"weui-icon-success-no-circle weui-icon_toast\" *ngIf=\"success\"></i>\n            <p class=\"weui-toast__content\" *ngIf=\"success\">{{ content || defaults.successText}}</p>\n            <i class=\"weui-loading weui-icon_toast\" *ngIf=\"loading\"></i>\n            <p class=\"weui-toast__content\" *ngIf=\"loading\">{{ content || defaults.loadingText}}</p>\n        </div>\n    `\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Renderer2, },\n{type: ElementRef, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'content': [{ type: Input },],\n'status': [{ type: Input },],\n'loading': [{ type: Input },],\n'success': [{ type: Input },],\n'close': [{ type: Output },],\n'hideCls': [{ type: HostBinding, args: ['class.weui-hide', ] },],\n};\n}\n\nfunction WeUIToast_tsickle_Closure_declarations() {\n/** @type {?} */\nWeUIToast.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nWeUIToast.ctorParameters;\n/** @type {?} */\nWeUIToast.propDecorators;\n/**\n * \\@i18n\n * @type {?}\n */\nWeUIToast.prototype.defaults;\n/**\n * 内容\n * @type {?}\n */\nWeUIToast.prototype.content;\n/**\n * 状态，取值：loading, success\n * @type {?}\n */\nWeUIToast.prototype.status;\n/**\n * 状态：正在加载\n * @type {?}\n */\nWeUIToast.prototype.loading;\n/**\n * 状态：操作成功\n * @type {?}\n */\nWeUIToast.prototype.success;\n/**\n * 隐藏对象\n * @type {?}\n */\nWeUIToast.prototype.close;\n/**\n * 已显示否\n * @type {?}\n */\nWeUIToast.prototype.shown;\n/** @type {?} */\nWeUIToast.prototype.renderer;\n/** @type {?} */\nWeUIToast.prototype.elementRef;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright 厦门乾元盛世科技有限公司 All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file.\n */\n\n\nimport { Component, Input, Output, EventEmitter } from '@angular/core';\n/**\n * TopTips - 顶部提示\n */\nexport class WeUITopTips {\n/**\n * 内容\n */\ncontent: string;\n/**\n * 隐藏对象\n */\nclose = new EventEmitter<any>();\n/**\n * 样式控制\n * @return {?}\n */\nget display(): string {\n        return this.shown ? 'block' : 'none';\n    }\n/**\n * 已显示否\n */\nprivate shown = false;\nconstructor() {\n\n    }\n/**\n * 显示\n * @return {?}\n */\nshow(): void {\n        this.shown = true;\n        setTimeout(() => { this.hide(); }, 2000);\n    }\n/**\n * 隐藏\n * @return {?}\n */\nhide(): void {\n        this.shown = false;\n        this.close.emit();\n    }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n    selector: 'weui-toptips',\n    template: '<div class=\"weui-toptips weui-toptips_warn\" [ngStyle]=\"{display: display}\">{{content}}</div>'\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'content': [{ type: Input },],\n'close': [{ type: Output },],\n};\n}\n\nfunction WeUITopTips_tsickle_Closure_declarations() {\n/** @type {?} */\nWeUITopTips.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nWeUITopTips.ctorParameters;\n/** @type {?} */\nWeUITopTips.propDecorators;\n/**\n * 内容\n * @type {?}\n */\nWeUITopTips.prototype.content;\n/**\n * 隐藏对象\n * @type {?}\n */\nWeUITopTips.prototype.close;\n/**\n * 已显示否\n * @type {?}\n */\nWeUITopTips.prototype.shown;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { ComponentFactoryResolver, ComponentRef, EmbeddedViewRef, Injectable, ApplicationRef, Injector, NgZone, Type } from '@angular/core';\n\nimport { WeUIDialog } from '../dialog/weui.dialog';\nimport { WeUIToast } from '../toast/weui.toast';\nimport { WeUITopTips } from '../toptips/weui.toptip';\nimport { WeUIActionSheet } from '../actionsheet/weui.actionsheet';\n/**\n * Next overlay unique ID.\n */\nlet nextUniqueId = 0;\n\nexport interface DialogProps {\n    mode?: string;\n    title?: string;\n    content?: string;\n    btnNOText?: string;\n    btnOKText?: string;\n    showNOButton?: boolean;\n    type?: string | null;\n    icon?: string;\n    iconCls?: string;\n};\n/**\n * 浮层通用接口\n */\nexport class Layer {\n/**\n * @param {?} _componentFactoryResolver\n * @param {?} _appRef\n * @param {?} _injector\n * @param {?} _ngZone\n */\nconstructor(\nprivate _componentFactoryResolver: ComponentFactoryResolver,\nprivate _appRef: ApplicationRef,\nprivate _injector: Injector,\nprivate _ngZone: NgZone) {\n\n    }\n/**\n * Creates the DOM element for an overlay and appends it to the document.\n * @return {?} Newly-created pane element\n */\nprivate _createDivElement(): HTMLElement {\n        const /** @type {?} */ div: HTMLDivElement = document.createElement('div');\n        div.id = `weui-overlay-${nextUniqueId++}`;\n        div.classList.add('weui-overlay-pane');\n        document.body.appendChild(div);\n\n        return div;\n    }\n/**\n * @template T\n * @param {?} component\n * @return {?}\n */\nprivate _createCompInstance<T>(component: Type<T>): ComponentRef<T> {\n        const /** @type {?} */ componentFactory = this._componentFactoryResolver.resolveComponentFactory(component);\n        const /** @type {?} */ componentRef: ComponentRef<T> = componentFactory.create(this._injector);\n        this._appRef.attachView(componentRef.hostView);\n\n        // At this point the component has been instantiated, so we move it to the location in the DOM\n        // where we want it to be rendered.\n        const /** @type {?} */ _hostDomElement = this._createDivElement();\n        _hostDomElement.appendChild(this._getComponentRootNode(componentRef));\n\n        return componentRef;\n    }\n/**\n * @return {?}\n */\nprivate _createDialog(): WeUIDialog {\n        const /** @type {?} */ componentRef = this._createCompInstance(WeUIDialog);\n        componentRef.instance.close.subscribe(() => {\n            componentRef.destroy();\n        });\n        return componentRef.instance;\n    }\n/**\n * 显示Success\n * \n * @param {?} message  消息\n * @param {?=} title    标题(可选)\n * @return {?}\n */\npublic success(message: string, title?: string): Promise<any> {\n        return this.showAlert(message, title, 'success');\n    }\n/**\n * 显示Info\n * \n * @param {?} message  消息\n * @param {?=} title    标题(可选)\n * @return {?}\n */\npublic info(message: string, title?: string): Promise<any> {\n        return this.showAlert(message, title, 'info');\n    }\n/**\n * 显示Error\n * \n * @param {?} message  消息\n * @param {?=} title    标题(可选)\n * @return {?}\n */\npublic error(message: string, title?: string): Promise<any> {\n        return this.showAlert(message, title, 'error');\n    }\n/**\n * 显示Warning\n * \n * @param {?} message  消息\n * @param {?=} title    标题(可选)\n * @return {?}\n */\npublic warning(message: string, title?: string): Promise<any> {\n        return this.showAlert(message, title, 'warning');\n    }\n/**\n * 显示Alert\n * \n * @param {?} message  消息\n * @param {?=} title    标题(可选)\n * @param {?=} type     告警等级\n * @return {?}\n */\npublic showAlert(message: string | DialogProps, title?: string, type?: string): Promise<any> {\n        const /** @type {?} */ dialog: WeUIDialog = this._createDialog();\n        dialog.showNOButton = false;\n        if (typeof message === 'object') {\n            for (const /** @type {?} */ key in message) {\n                if (message.hasOwnProperty(key) && typeof message[key] !== 'undefined') {\n                    dialog[key] = message[key];\n                }\n            }\n        } else {\n            dialog.content = message;\n            dialog.title = title || '';\n            dialog.type = type || null;\n        }\n        return dialog.show();\n    }\n/**\n * 显示Confirm，默认带两个按钮（取消、确定）\n * \n * @param {?} message  消息，或者自定义对话框属性对象\n * @param {?=} title    标题\n * @return {?}\n */\npublic showConfirm(message: string | DialogProps, title?: string): Promise<any> {\n        const /** @type {?} */ dialog: WeUIDialog = this._createDialog();\n\n        if (typeof message === 'object') {\n            for (const /** @type {?} */ key in message) {\n                if (message.hasOwnProperty(key) && typeof message[key] !== 'undefined') {\n                    dialog[key] = message[key];\n                }\n            }\n        } else {\n            dialog.content = message;\n            dialog.title = title || '';\n        }\n\n        return dialog.show();\n    }\n/**\n * @return {?}\n */\nprivate _createToast(): WeUIToast {\n        const /** @type {?} */ componentRef = this._createCompInstance(WeUIToast);\n        componentRef.instance.close.subscribe(() => {\n            componentRef.destroy();\n        });\n        return componentRef.instance;\n    }\n/**\n * 显示Loading Toast\n * \n * @param {?=} message  消息，默认为“数据加载中”\n * @return {?}\n */\npublic showLoading(message?: string): WeUIToast {\n        const /** @type {?} */ toast: WeUIToast = this._createToast();\n        if (message) {\n            toast.content = message;\n        }\n        toast.success = !(toast.loading = true);\n        toast.show();\n        return toast;\n    }\n/**\n * 显示成功Success Toast\n * \n * @param {?=} message  消息，默认为“操作成功”\n * @return {?}\n */\npublic showSuccess(message?: string): WeUIToast {\n        const /** @type {?} */ toast: WeUIToast = this._createToast();\n        if (message) {\n            toast.content = message;\n        }\n        toast.loading = !(toast.success = true);\n        toast.show();\n        return toast;\n    }\n/**\n * 在顶部显示错误消息\n * \n * @param {?} message  错误消息\n * @return {?}\n */\npublic showError(message: string): void {\n        const /** @type {?} */ componentRef = this._createCompInstance(WeUITopTips);\n        componentRef.instance.close.subscribe(() => {\n            componentRef.destroy();\n        });\n\n        const /** @type {?} */ tip: WeUITopTips = componentRef.instance;\n        if (message) {\n            tip.content = message;\n        }\n        tip.show();\n    }\n/**\n * @return {?}\n */\nprivate _createActionSheet(): WeUIActionSheet {\n        const /** @type {?} */ componentRef = this._createCompInstance(WeUIActionSheet);\n        componentRef.instance.close.subscribe(() => {\n            componentRef.destroy();\n        });\n        return componentRef.instance;\n    }\n/**\n * 显示ActionSheet菜单\n * \n * @param {?} menus\n * @param {?=} btnCancelText 取消按钮文本，默认为“取消”\n * @return {?}\n */\npublic showActionsheet(menus: { text?: string, [key: string]: any }[], btnCancelText?: string): Promise<any> {\n        const /** @type {?} */ actionsheet: WeUIActionSheet = this._createActionSheet();\n        actionsheet.menu = menus;\n        if (btnCancelText) {\n            actionsheet.cancelText = btnCancelText;\n        }\n        return actionsheet.show();\n    }\n/**\n * Gets the root HTMLElement for an instantiated component.\n * @param {?} componentRef\n * @return {?}\n */\nprivate _getComponentRootNode(componentRef: ComponentRef<any>): HTMLElement {\n        return /** @type {?} */(( ( /** @type {?} */((componentRef.hostView as EmbeddedViewRef<any>))).rootNodes[0] as HTMLElement));\n    }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ComponentFactoryResolver, },\n{type: ApplicationRef, },\n{type: Injector, },\n{type: NgZone, },\n];\n}\n\nfunction Layer_tsickle_Closure_declarations() {\n/** @type {?} */\nLayer.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nLayer.ctorParameters;\n/** @type {?} */\nLayer.prototype._componentFactoryResolver;\n/** @type {?} */\nLayer.prototype._appRef;\n/** @type {?} */\nLayer.prototype._injector;\n/** @type {?} */\nLayer.prototype._ngZone;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright 厦门乾元盛世科技有限公司 All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file.\n */\n\n\nimport { Injectable, Inject } from '@angular/core';\nimport { ComponentFactoryResolver, ComponentRef, EmbeddedViewRef, ApplicationRef, Injector, NgZone, Type } from '@angular/core';\nimport { ɵgetDOM as getDOM, DOCUMENT } from '@angular/platform-browser';\n\nimport { WeUIPicker, PickerOption } from './weui.picker';\nimport { WeUIDatePicker } from './weui.date.picker';\n\nlet /** @type {?} */ seed = 0;\nconst /** @type {?} */ now = Date.now();\n/**\n * @return {?}\n */\nfunction getUuid() {\n    return `_picker_${now}_${seed++}`;\n}\n/**\n * Picker服务\n */\nexport class WeUIPickerService {\n/**\n * @param {?} _componentFactoryResolver\n * @param {?} _appRef\n * @param {?} _injector\n * @param {?} _ngZone\n * @param {?} doc\n */\nconstructor(\nprivate _componentFactoryResolver: ComponentFactoryResolver,\nprivate _appRef: ApplicationRef,\nprivate _injector: Injector,\nprivate _ngZone: NgZone,\nprivate doc: Document) {\n\n    }\n/**\n * 显示单列Picker\n * \n * @param {?} menu  菜单选项\n * @return {?}\n */\npublic showPicker(menu: PickerOption[]): Promise<any> {\n        const /** @type {?} */ picker = this.createPicker(WeUIPicker, { menu });\n        return picker.show();\n    }\n/**\n * 显示多列Picker\n * \n * @param {?} menus  菜单选项（多列）\n * @return {?}\n */\npublic showMultiPicker(menus: PickerOption[][]): Promise<any> {\n        const /** @type {?} */ picker = this.createPicker(WeUIPicker, { menus });\n        return picker.show();\n    }\n/**\n * 显示日期Picker\n * \n * @param {?=} config  配置项\n * @return {?}\n */\npublic showDatePicker(config?: any): Promise<any> {\n        const /** @type {?} */ picker = this.createPicker(WeUIDatePicker, config);\n        return picker.show();\n    }\n/**\n * @param {?} component\n * @param {?} config\n * @return {?}\n */\nprivate createPicker(component: Type<WeUIPicker>, config: any): WeUIPicker {\n        const /** @type {?} */ componentRef = this._createComponent(component);\n        const /** @type {?} */ instance: WeUIPicker = componentRef.instance;\n        instance.close.subscribe(() => {\n            componentRef.destroy();\n            componentRef['_container'].remove();\n        });\n        if (config) {\n            Object.assign(instance, config);\n        }\n        this.afterCreate(instance);\n        return instance;\n    }\n/**\n * this method is called before thild component's ngAfterViewInit\n * @param {?} instance\n * @return {?}\n */\nprotected afterCreate(instance: any): void {\n\n    }\n/**\n * @template T\n * @param {?} component\n * @return {?}\n */\nprivate _createComponent<T>(component: Type<T>): ComponentRef<T> {\n        const /** @type {?} */ componentFactory = this._componentFactoryResolver.resolveComponentFactory(component);\n        const /** @type {?} */ componentRef: ComponentRef<T> = componentFactory.create(this._injector);\n        this._appRef.attachView(componentRef.hostView);\n\n        // At this point the component has been instantiated, so we move it to the location in the DOM\n        // where we want it to be rendered.\n        const /** @type {?} */ _hostDomElement = this._getContainer();\n        _hostDomElement.appendChild(this._getComponentRootNode(componentRef));\n        componentRef['_container'] = _hostDomElement;\n        return componentRef;\n    }\n/**\n * Gets the root HTMLElement for an instantiated component.\n * @param {?} componentRef\n * @return {?}\n */\nprivate _getComponentRootNode(componentRef: ComponentRef<any>): HTMLElement {\n        return /** @type {?} */(( ( /** @type {?} */((componentRef.hostView as EmbeddedViewRef<any>))).rootNodes[0] as HTMLElement));\n    }\n/**\n * @return {?}\n */\nprivate _getContainer(): HTMLElement {\n        const /** @type {?} */ div: HTMLElement = getDOM().createElement('div');\n        div.id = getUuid();\n        div.classList.add('weui-overlay');\n        getDOM().appendChild(this.doc.body, div);\n        return div;\n    }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ComponentFactoryResolver, },\n{type: ApplicationRef, },\n{type: Injector, },\n{type: NgZone, },\n{type: Document, decorators: [{ type: Inject, args: [DOCUMENT, ] }, ]},\n];\n}\n\nfunction WeUIPickerService_tsickle_Closure_declarations() {\n/** @type {?} */\nWeUIPickerService.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nWeUIPickerService.ctorParameters;\n/** @type {?} */\nWeUIPickerService.prototype._componentFactoryResolver;\n/** @type {?} */\nWeUIPickerService.prototype._appRef;\n/** @type {?} */\nWeUIPickerService.prototype._injector;\n/** @type {?} */\nWeUIPickerService.prototype._ngZone;\n/** @type {?} */\nWeUIPickerService.prototype.doc;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Let'say COFFEE © 2017-2018\n * Copyright 厦门美乐味餐饮管理有限公司 All Rights Reserved.\n */\n\n\n\nimport { Component, Input, ElementRef } from '@angular/core';\nimport { NgForm } from '@angular/forms';\n/**\n * @param {?} obj\n * @return {?}\n */\nfunction isPresent(obj: any): boolean {\n    return obj !== undefined && obj !== null;\n}\n\n/**\n * 控件与提示信息，例如：<code>\n * {\n *     username: {\n *         required: '用户名不能为空',\n *         maxlength: '请输入小于10位长度的字符',\n *         ......\n *     }\n * }\n * </code>\n */\nexport interface FieldMessages {\n    [key: string]: {\n        [key: string]: string\n    };\n}\nexport class FormValidation {\n/**\n * 自定义错误消息\n */\nmessages: FieldMessages = {};\n/**\n * 控件名称\n */\nname: string;\n/**\n * 验证结果，例如: [{username: '必须填写'}, {password: '输入非法'}]\n */\nprotected formErrors: { name: string, message: string }[] = [];\n\n    protected defaultValidationMessages = {\n        required: '该项为必填项',\n        email: '请输入有效的电子邮件',\n        url: '请输入有效的网址',\n        date: '请输入有效的日期',\n        dateISO: '请输入有效的日期 (YYYY-MM-DD)',\n        number: '请输入正确的数字',\n        digits: '只可输入数字',\n        alphanumeric: '只可输入字母、数字及下划线',\n        maxlength: '最多 {0} 个字符',\n        minlength: '最少 {0} 个字符',\n        rangelength: '请输入长度为 {0} 至 {1} 之间的字符',\n        range: '请输入 {0} 至 {1} 之间的数值',\n        max: '请输入不大于 {0} 的数值',\n        min: '请输入不小于 {0} 的数值'\n    };\n/**\n * @param {?} _element\n * @param {?} _form\n */\nconstructor(\nprivate _element: ElementRef,\nprivate _form: NgForm) {\n        if (_form && _form.ngSubmit) {\n            _form.ngSubmit.subscribe(this.onSubmit.bind(this));\n        }\n    }\n/**\n * @return {?}\n */\nshowByName(): boolean {\n        return isPresent(this.name) && this.name.length > 0;\n    }\n/**\n * Form验证后，自动执行消息提示匹配\n * @return {?}\n */\nonSubmit(): void {\n        this.validate();\n    }\n/**\n * 验证表单，结果存入formErrors\n * \n * @return {?} 验证结果: true-success, false-fail\n */\npublic validate(): boolean {\n        const /** @type {?} */ formErrors = [];\n        const /** @type {?} */ form = this._form;\n        if (!form) {\n            return false;\n        }\n\n        for (const /** @type {?} */ field in form.controls) {\n            if (form.controls.hasOwnProperty(field)) {\n                const /** @type {?} */ control = form.controls[field];\n                const /** @type {?} */ errors = control && control.errors || {};\n\n                if (control && control.invalid && (control.dirty || form.submitted)) {\n                    const /** @type {?} */ messages = (this.messages && this.messages[field]) || {};\n                    if (errors['required']) {\n                        formErrors.push({\n                            name: field,\n                            message: messages['required'] || this.defaultValidationMessages['required']\n                        });\n                        continue; // 默认先验证必填消息\n                    }\n\n                    for (const /** @type {?} */ key in errors) {\n                        if (errors.hasOwnProperty(key)) {\n                            formErrors.push({\n                                name: field,\n                                message: messages[key] || this.defaultValidationMessages[key]\n                            });\n                            continue; // 若一个输入框存在多个验证器，即使存在多个错误消息，也仅取一条错误消息\n                        }\n                    }\n                }\n            }\n        }\n        this.formErrors = formErrors;\n        return form.valid === true;\n    }\n/**\n * 是否已submitted\n * @return {?}\n */\npublic get submitted(): boolean {\n        return this._form && this._form.submitted;\n    }\n/**\n * 是否验证通过\n * @return {?}\n */\npublic get valid(): boolean {\n        return this._form && this._form.valid === true;\n    }\n/**\n * 是否验证不通过\n * @return {?}\n */\npublic get invalid(): boolean {\n        return this._form && this._form.invalid === true;\n    }\n/**\n * 是否存在错误\n * @param {?=} name\n * @return {?}\n */\npublic hasError(name?: string): boolean {\n        if (name) {\n            return this.getError(name) !== null;\n        }\n\n        return this.formErrors.length > 0;\n    }\n/**\n * 当存在多个错误消息时，用此方法获取其中的第一个非空错误显示\n * @return {?}\n */\npublic firstError(): string | null {\n        const /** @type {?} */ err = this.formErrors[0];\n        return (err && err.message) || null;\n    }\n/**\n * 获取控件的一个错误\n * \n * @param {?} name 控件name\n * @return {?} 控件错误消息，或者空(没有错误)\n */\npublic getError(name: string): string | null {\n        const /** @type {?} */ len = this.formErrors.length;\n        for (let /** @type {?} */ i = 0; i < len; i++) {\n            const /** @type {?} */ err = this.formErrors[i];\n            if (err.hasOwnProperty(name)) {\n                return err[name];\n            }\n        }\n\n        return null;\n    }\n\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n    selector: 'form-validation',\n    template: `\n        <div class=\"error\" *ngIf=\"showByName() && hasError(name)\">\n            {{getError(name)}}\n        </div>\n        <div class=\"error\" *ngIf=\"!showByName() && hasError()\">\n            {{firstError()}}\n        </div>\n    `\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: NgForm, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'messages': [{ type: Input },],\n'name': [{ type: Input },],\n};\n}\n\nfunction FormValidation_tsickle_Closure_declarations() {\n/** @type {?} */\nFormValidation.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nFormValidation.ctorParameters;\n/** @type {?} */\nFormValidation.propDecorators;\n/**\n * 自定义错误消息\n * @type {?}\n */\nFormValidation.prototype.messages;\n/**\n * 控件名称\n * @type {?}\n */\nFormValidation.prototype.name;\n/**\n * 验证结果，例如: [{username: '必须填写'}, {password: '输入非法'}]\n * @type {?}\n */\nFormValidation.prototype.formErrors;\n/** @type {?} */\nFormValidation.prototype.defaultValidationMessages;\n/** @type {?} */\nFormValidation.prototype._element;\n/** @type {?} */\nFormValidation.prototype._form;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright 厦门乾元盛世科技有限公司 All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file.\n */\n\n/**\n * Import Angular\n */\n\nimport { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\n\n/** Import WeUI Components */\n\nimport { WeUIFormControl } from './input/weui.form.control';\nimport { WeUIBadge } from './badge/weui.badge';\nimport { WeUIButton } from './button/weui.button';\nimport { WeUISubmit } from './button/weui.submit';\nimport { WeUICheckbox } from './input/weui.checkbox';\nimport { WeUIDatePicker } from './picker/weui.date.picker';\nimport { WeUIFooter, WeUIFooterText, WeUIFooterLinks, WeUIFooterLink } from './footer/weui.footer';\nimport { WeUIGallery } from './gallery/weui.gallery';\nimport { WeUIInput } from './input/weui.input';\nimport { WeUIItems } from './list/weui.items';\nimport { WeUIItem } from './list/weui.item';\nimport { WeUILink } from './list/weui.link';\nimport { WeUILoadmore } from './loadmore/weui.loadmore';\nimport { WeUINavBar } from './navbar/weui.navbar';\nimport { WeUINavBarItem } from './navbar/weui.navbar.item';\nimport { WeUIPicker } from './picker/weui.picker';\nimport { WeUIPickerGroup } from './picker/weui-picker-group';\nimport { WeUIProgressBar } from './progress/weui.progress';\nimport { WeUIRadio } from './input/weui.radio';\nimport { WeUISearchBar } from './searchbar/weui.searchbar';\nimport { WeUISelect } from './input/weui.select';\nimport { WeUISlider } from './slider/weui.slider';\nimport { WeUISwitch } from './input/weui.switch';\nimport { WeUITabBar } from './tabbar/weui.tabbar';\nimport { WeUITabBarItem } from './tabbar/weui.tabbar.item';\nimport { WeUITips } from './list/weui.tips';\nimport { WeUITitle } from './list/weui.title';\nimport { WeUIUploader } from './uploader/weui.uploader';\nimport { FormValidation } from './validation/form.validation';\n\n/**\n * Import WeUI Overlay Entry Components\n */\n\nimport { WeUIActionSheet } from './actionsheet/weui.actionsheet';\nimport { WeUIDialog } from './dialog/weui.dialog';\nimport { WeUIToast } from './toast/weui.toast';\nimport { WeUITopTips } from './toptips/weui.toptip';\nimport { Layer } from './overlay/layer';\nimport { WeUIPickerService } from './picker/weui.picker.service';\n/**\n * \\@name WeUIModule\n * \\@description \n * WeUIModule is an NgModule that provides weui-style TypeScript/JavaScript components.\n * @author fbchen 2017-03-08\n */\nexport class WeUIModule {\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n    imports: [\n        CommonModule,\n        FormsModule\n    ],\n    declarations: [\n        WeUIFormControl,\n        WeUIButton,\n        WeUISubmit,\n        WeUIInput,\n        WeUIRadio,\n        WeUICheckbox,\n        WeUISwitch,\n        WeUISelect,\n        WeUISlider,\n        WeUIGallery,\n        WeUIUploader,\n        WeUIItems,\n        WeUIItem,\n        WeUILink,\n        WeUITitle,\n        WeUITips,\n        WeUIBadge,\n        WeUIFooter,\n        WeUIFooterText,\n        WeUIFooterLinks,\n        WeUIFooterLink,\n        WeUILoadmore,\n        WeUIProgressBar,\n        WeUIActionSheet,\n        WeUIDialog,\n        WeUIToast,\n        WeUITopTips,\n        WeUIPicker,\n        WeUIDatePicker,\n        WeUIPickerGroup,\n        WeUISearchBar,\n        WeUINavBar,\n        WeUINavBarItem,\n        WeUITabBar,\n        WeUITabBarItem,\n        FormValidation\n    ],\n    exports: [\n        WeUIFormControl,\n        WeUIButton,\n        WeUISubmit,\n        WeUIInput,\n        WeUIRadio,\n        WeUICheckbox,\n        WeUISwitch,\n        WeUISelect,\n        WeUISlider,\n        WeUIGallery,\n        WeUIUploader,\n        WeUIItems,\n        WeUIItem,\n        WeUILink,\n        WeUITitle,\n        WeUITips,\n        WeUIBadge,\n        WeUIFooter,\n        WeUIFooterText,\n        WeUIFooterLinks,\n        WeUIFooterLink,\n        WeUILoadmore,\n        WeUIProgressBar,\n        WeUIActionSheet,\n        WeUIDialog,\n        WeUIToast,\n        WeUITopTips,\n        WeUIPicker,\n        WeUIDatePicker,\n        WeUISearchBar,\n        WeUINavBar,\n        WeUINavBarItem,\n        WeUITabBar,\n        WeUITabBarItem,\n        FormValidation\n    ],\n    entryComponents: [\n        WeUIActionSheet,\n        WeUIDialog,\n        WeUIToast,\n        WeUITopTips,\n        WeUIPicker,\n        WeUIDatePicker\n    ],\n    providers: [\n        Layer,\n        WeUIPickerService\n    ]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction WeUIModule_tsickle_Closure_declarations() {\n/** @type {?} */\nWeUIModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nWeUIModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { IScheduler } from '../Scheduler';\nimport { Action } from '../scheduler/Action';\nimport { Subject } from '../Subject';\nimport { Operator } from '../Operator';\nimport { async } from '../scheduler/async';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { Subscription } from '../Subscription';\nimport { isNumeric } from '../util/isNumeric';\nimport { isScheduler } from '../util/isScheduler';\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Branch out the source Observable values as a nested Observable periodically\n * in time.\n *\n * <span class=\"informal\">It's like {@link bufferTime}, but emits a nested\n * Observable instead of an array.</span>\n *\n * <img src=\"./img/windowTime.png\" width=\"100%\">\n *\n * Returns an Observable that emits windows of items it collects from the source\n * Observable. The output Observable starts a new window periodically, as\n * determined by the `windowCreationInterval` argument. It emits each window\n * after a fixed timespan, specified by the `windowTimeSpan` argument. When the\n * source Observable completes or encounters an error, the output Observable\n * emits the current window and propagates the notification from the source\n * Observable. If `windowCreationInterval` is not provided, the output\n * Observable starts a new window when the previous window of duration\n * `windowTimeSpan` completes. If `maxWindowCount` is provided, each window\n * will emit at most fixed number of values. Window will complete immediately\n * after emitting last value and next one still will open as specified by\n * `windowTimeSpan` and `windowCreationInterval` arguments.\n *\n * @example <caption>In every window of 1 second each, emit at most 2 click events</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.windowTime(1000)\n *   .map(win => win.take(2)) // each window has at most 2 emissions\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @example <caption>Every 5 seconds start a window 1 second long, and emit at most 2 click events per window</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.windowTime(1000, 5000)\n *   .map(win => win.take(2)) // each window has at most 2 emissions\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @example <caption>Same as example above but with maxWindowCount instead of take</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.windowTime(1000, 5000, 2) // each window has still at most 2 emissions\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n\n * @see {@link window}\n * @see {@link windowCount}\n * @see {@link windowToggle}\n * @see {@link windowWhen}\n * @see {@link bufferTime}\n *\n * @param {number} windowTimeSpan The amount of time to fill each window.\n * @param {number} [windowCreationInterval] The interval at which to start new\n * windows.\n * @param {number} [maxWindowSize=Number.POSITIVE_INFINITY] Max number of\n * values each window can emit before completion.\n * @param {Scheduler} [scheduler=async] The scheduler on which to schedule the\n * intervals that determine window boundaries.\n * @return {Observable<Observable<T>>} An observable of windows, which in turn\n * are Observables.\n * @method windowTime\n * @owner Observable\n */\nexport function windowTime<T>(windowTimeSpan: number,\n                              scheduler?: IScheduler): OperatorFunction<T, Observable<T>>;\nexport function windowTime<T>(windowTimeSpan: number,\n                              windowCreationInterval: number,\n                              scheduler?: IScheduler): OperatorFunction<T, Observable<T>>;\nexport function windowTime<T>(windowTimeSpan: number,\n                              windowCreationInterval: number,\n                              maxWindowSize: number,\n                              scheduler?: IScheduler): OperatorFunction<T, Observable<T>>;\n\nexport function windowTime<T>(windowTimeSpan: number): OperatorFunction<T, Observable<T>> {\n  let scheduler: IScheduler = async;\n  let windowCreationInterval: number = null;\n  let maxWindowSize: number = Number.POSITIVE_INFINITY;\n\n  if (isScheduler(arguments[3])) {\n    scheduler = arguments[3];\n  }\n\n  if (isScheduler(arguments[2])) {\n    scheduler = arguments[2];\n  } else if (isNumeric(arguments[2])) {\n    maxWindowSize = arguments[2];\n  }\n\n  if (isScheduler(arguments[1])) {\n    scheduler = arguments[1];\n  } else if (isNumeric(arguments[1])) {\n    windowCreationInterval = arguments[1];\n  }\n\n  return function windowTimeOperatorFunction(source: Observable<T>) {\n    return source.lift(new WindowTimeOperator<T>(windowTimeSpan, windowCreationInterval, maxWindowSize, scheduler));\n  };\n}\n\nclass WindowTimeOperator<T> implements Operator<T, Observable<T>> {\n\n  constructor(private windowTimeSpan: number,\n              private windowCreationInterval: number | null,\n              private maxWindowSize: number,\n              private scheduler: IScheduler) {\n  }\n\n  call(subscriber: Subscriber<Observable<T>>, source: any): any {\n    return source.subscribe(new WindowTimeSubscriber(\n      subscriber, this.windowTimeSpan, this.windowCreationInterval, this.maxWindowSize, this.scheduler\n    ));\n  }\n}\n\ninterface CreationState<T> {\n  windowTimeSpan: number;\n  windowCreationInterval: number;\n  subscriber: WindowTimeSubscriber<T>;\n  scheduler: IScheduler;\n}\n\ninterface TimeSpanOnlyState<T> {\n    window: CountedSubject<T>;\n    windowTimeSpan: number;\n    subscriber: WindowTimeSubscriber<T>;\n  }\n\ninterface CloseWindowContext<T> {\n  action: Action<CreationState<T>>;\n  subscription: Subscription;\n}\n\ninterface CloseState<T> {\n  subscriber: WindowTimeSubscriber<T>;\n  window: CountedSubject<T>;\n  context: CloseWindowContext<T>;\n}\n\nclass CountedSubject<T> extends Subject<T> {\n  private _numberOfNextedValues: number = 0;\n\n  next(value?: T): void {\n    this._numberOfNextedValues++;\n    super.next(value);\n  }\n\n  get numberOfNextedValues(): number {\n    return this._numberOfNextedValues;\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass WindowTimeSubscriber<T> extends Subscriber<T> {\n  private windows: CountedSubject<T>[] = [];\n\n  constructor(protected destination: Subscriber<Observable<T>>,\n              private windowTimeSpan: number,\n              private windowCreationInterval: number | null,\n              private maxWindowSize: number,\n              private scheduler: IScheduler) {\n    super(destination);\n\n    const window = this.openWindow();\n    if (windowCreationInterval !== null && windowCreationInterval >= 0) {\n      const closeState: CloseState<T> = { subscriber: this, window, context: <any>null };\n      const creationState: CreationState<T> = { windowTimeSpan, windowCreationInterval, subscriber: this, scheduler };\n      this.add(scheduler.schedule(dispatchWindowClose, windowTimeSpan, closeState));\n      this.add(scheduler.schedule(dispatchWindowCreation, windowCreationInterval, creationState));\n    } else {\n      const timeSpanOnlyState: TimeSpanOnlyState<T> = { subscriber: this, window, windowTimeSpan };\n      this.add(scheduler.schedule(dispatchWindowTimeSpanOnly, windowTimeSpan, timeSpanOnlyState));\n    }\n  }\n\n  protected _next(value: T): void {\n    const windows = this.windows;\n    const len = windows.length;\n    for (let i = 0; i < len; i++) {\n      const window = windows[i];\n      if (!window.closed) {\n        window.next(value);\n        if (window.numberOfNextedValues >= this.maxWindowSize) {\n          this.closeWindow(window);\n        }\n      }\n    }\n  }\n\n  protected _error(err: any): void {\n    const windows = this.windows;\n    while (windows.length > 0) {\n      windows.shift().error(err);\n    }\n    this.destination.error(err);\n  }\n\n  protected _complete(): void {\n    const windows = this.windows;\n    while (windows.length > 0) {\n      const window = windows.shift();\n      if (!window.closed) {\n        window.complete();\n      }\n    }\n    this.destination.complete();\n  }\n\n  public openWindow(): CountedSubject<T> {\n    const window = new CountedSubject<T>();\n    this.windows.push(window);\n    const destination = this.destination;\n    destination.next(window);\n    return window;\n  }\n\n  public closeWindow(window: CountedSubject<T>): void {\n    window.complete();\n    const windows = this.windows;\n    windows.splice(windows.indexOf(window), 1);\n  }\n}\n\nfunction dispatchWindowTimeSpanOnly<T>(this: Action<TimeSpanOnlyState<T>>, state: TimeSpanOnlyState<T>): void {\n  const { subscriber, windowTimeSpan, window } = state;\n  if (window) {\n    subscriber.closeWindow(window);\n  }\n  state.window = subscriber.openWindow();\n  this.schedule(state, windowTimeSpan);\n}\n\nfunction dispatchWindowCreation<T>(this: Action<CreationState<T>>, state: CreationState<T>): void {\n  const { windowTimeSpan, subscriber, scheduler, windowCreationInterval } = state;\n  const window = subscriber.openWindow();\n  const action = this;\n  let context: CloseWindowContext<T> = { action, subscription: <any>null };\n  const timeSpanState: CloseState<T> = { subscriber, window, context };\n  context.subscription = scheduler.schedule(dispatchWindowClose, windowTimeSpan, timeSpanState);\n  action.add(context.subscription);\n  action.schedule(state, windowCreationInterval);\n}\n\nfunction dispatchWindowClose<T>(state: CloseState<T>): void {\n  const { subscriber, window, context } = state;\n  if (context && context.action && context.subscription) {\n    context.action.remove(context.subscription);\n  }\n  subscriber.closeWindow(window);\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { Subject } from '../Subject';\nimport { Subscription } from '../Subscription';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Branch out the source Observable values as a nested Observable starting from\n * an emission from `openings` and ending when the output of `closingSelector`\n * emits.\n *\n * <span class=\"informal\">It's like {@link bufferToggle}, but emits a nested\n * Observable instead of an array.</span>\n *\n * <img src=\"./img/windowToggle.png\" width=\"100%\">\n *\n * Returns an Observable that emits windows of items it collects from the source\n * Observable. The output Observable emits windows that contain those items\n * emitted by the source Observable between the time when the `openings`\n * Observable emits an item and when the Observable returned by\n * `closingSelector` emits an item.\n *\n * @example <caption>Every other second, emit the click events from the next 500ms</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var openings = Rx.Observable.interval(1000);\n * var result = clicks.windowToggle(openings, i =>\n *   i % 2 ? Rx.Observable.interval(500) : Rx.Observable.empty()\n * ).mergeAll();\n * result.subscribe(x => console.log(x));\n *\n * @see {@link window}\n * @see {@link windowCount}\n * @see {@link windowTime}\n * @see {@link windowWhen}\n * @see {@link bufferToggle}\n *\n * @param {Observable<O>} openings An observable of notifications to start new\n * windows.\n * @param {function(value: O): Observable} closingSelector A function that takes\n * the value emitted by the `openings` observable and returns an Observable,\n * which, when it emits (either `next` or `complete`), signals that the\n * associated window should complete.\n * @return {Observable<Observable<T>>} An observable of windows, which in turn\n * are Observables.\n * @method windowToggle\n * @owner Observable\n */\nexport function windowToggle<T, O>(openings: Observable<O>,\n                                   closingSelector: (openValue: O) => Observable<any>): OperatorFunction<T, Observable<T>> {\n  return (source: Observable<T>) => source.lift(new WindowToggleOperator<T, O>(openings, closingSelector));\n}\n\nclass WindowToggleOperator<T, O> implements Operator<T, Observable<T>> {\n\n  constructor(private openings: Observable<O>,\n              private closingSelector: (openValue: O) => Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<Observable<T>>, source: any): any {\n    return source.subscribe(new WindowToggleSubscriber(\n      subscriber, this.openings, this.closingSelector\n    ));\n  }\n}\n\ninterface WindowContext<T> {\n  window: Subject<T>;\n  subscription: Subscription;\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass WindowToggleSubscriber<T, O> extends OuterSubscriber<T, any> {\n  private contexts: WindowContext<T>[] = [];\n  private openSubscription: Subscription;\n\n  constructor(destination: Subscriber<Observable<T>>,\n              private openings: Observable<O>,\n              private closingSelector: (openValue: O) => Observable<any>) {\n    super(destination);\n    this.add(this.openSubscription = subscribeToResult(this, openings, openings));\n  }\n\n  protected _next(value: T) {\n    const { contexts } = this;\n    if (contexts) {\n      const len = contexts.length;\n      for (let i = 0; i < len; i++) {\n        contexts[i].window.next(value);\n      }\n    }\n  }\n\n  protected _error(err: any) {\n\n    const { contexts } = this;\n    this.contexts = null;\n\n    if (contexts) {\n      const len = contexts.length;\n      let index = -1;\n\n      while (++index < len) {\n        const context = contexts[index];\n        context.window.error(err);\n        context.subscription.unsubscribe();\n      }\n    }\n\n    super._error(err);\n  }\n\n  protected _complete() {\n    const { contexts } = this;\n    this.contexts = null;\n    if (contexts) {\n      const len = contexts.length;\n      let index = -1;\n      while (++index < len) {\n        const context = contexts[index];\n        context.window.complete();\n        context.subscription.unsubscribe();\n      }\n    }\n    super._complete();\n  }\n\n  protected _unsubscribe() {\n    const { contexts } = this;\n    this.contexts = null;\n    if (contexts) {\n      const len = contexts.length;\n      let index = -1;\n      while (++index < len) {\n        const context = contexts[index];\n        context.window.unsubscribe();\n        context.subscription.unsubscribe();\n      }\n    }\n  }\n\n  notifyNext(outerValue: any, innerValue: any,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, any>): void {\n\n    if (outerValue === this.openings) {\n\n      const { closingSelector } = this;\n      const closingNotifier = tryCatch(closingSelector)(innerValue);\n\n      if (closingNotifier === errorObject) {\n        return this.error(errorObject.e);\n      } else {\n        const window = new Subject<T>();\n        const subscription = new Subscription();\n        const context = { window, subscription };\n        this.contexts.push(context);\n        const innerSubscription = subscribeToResult(this, closingNotifier, context);\n\n        if (innerSubscription.closed) {\n          this.closeWindow(this.contexts.length - 1);\n        } else {\n          (<any> innerSubscription).context = context;\n          subscription.add(innerSubscription);\n        }\n\n        this.destination.next(window);\n\n      }\n    } else {\n      this.closeWindow(this.contexts.indexOf(outerValue));\n    }\n  }\n\n  notifyError(err: any): void {\n    this.error(err);\n  }\n\n  notifyComplete(inner: Subscription): void {\n    if (inner !== this.openSubscription) {\n      this.closeWindow(this.contexts.indexOf((<any> inner).context));\n    }\n  }\n\n  private closeWindow(index: number): void {\n    if (index === -1) {\n      return;\n    }\n\n    const { contexts } = this;\n    const context = contexts[index];\n    const { window, subscription } = context;\n    contexts.splice(index, 1);\n    window.complete();\n    subscription.unsubscribe();\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { Subject } from '../Subject';\nimport { Subscription } from '../Subscription';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Branch out the source Observable values as a nested Observable using a\n * factory function of closing Observables to determine when to start a new\n * window.\n *\n * <span class=\"informal\">It's like {@link bufferWhen}, but emits a nested\n * Observable instead of an array.</span>\n *\n * <img src=\"./img/windowWhen.png\" width=\"100%\">\n *\n * Returns an Observable that emits windows of items it collects from the source\n * Observable. The output Observable emits connected, non-overlapping windows.\n * It emits the current window and opens a new one whenever the Observable\n * produced by the specified `closingSelector` function emits an item. The first\n * window is opened immediately when subscribing to the output Observable.\n *\n * @example <caption>Emit only the first two clicks events in every window of [1-5] random seconds</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks\n *   .windowWhen(() => Rx.Observable.interval(1000 + Math.random() * 4000))\n *   .map(win => win.take(2)) // each window has at most 2 emissions\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @see {@link window}\n * @see {@link windowCount}\n * @see {@link windowTime}\n * @see {@link windowToggle}\n * @see {@link bufferWhen}\n *\n * @param {function(): Observable} closingSelector A function that takes no\n * arguments and returns an Observable that signals (on either `next` or\n * `complete`) when to close the previous window and start a new one.\n * @return {Observable<Observable<T>>} An observable of windows, which in turn\n * are Observables.\n * @method windowWhen\n * @owner Observable\n */\nexport function windowWhen<T>(closingSelector: () => Observable<any>): OperatorFunction<T, Observable<T>> {\n  return function windowWhenOperatorFunction(source: Observable<T>) {\n    return source.lift(new WindowOperator<T>(closingSelector));\n  };\n}\n\nclass WindowOperator<T> implements Operator<T, Observable<T>> {\n  constructor(private closingSelector: () => Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<Observable<T>>, source: any): any {\n    return source.subscribe(new WindowSubscriber(subscriber, this.closingSelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass WindowSubscriber<T> extends OuterSubscriber<T, any> {\n  private window: Subject<T>;\n  private closingNotification: Subscription;\n\n  constructor(protected destination: Subscriber<Observable<T>>,\n              private closingSelector: () => Observable<any>) {\n    super(destination);\n    this.openWindow();\n  }\n\n  notifyNext(outerValue: T, innerValue: any,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, any>): void {\n    this.openWindow(innerSub);\n  }\n\n  notifyError(error: any, innerSub: InnerSubscriber<T, any>): void {\n    this._error(error);\n  }\n\n  notifyComplete(innerSub: InnerSubscriber<T, any>): void {\n    this.openWindow(innerSub);\n  }\n\n  protected _next(value: T): void {\n    this.window.next(value);\n  }\n\n  protected _error(err: any): void {\n    this.window.error(err);\n    this.destination.error(err);\n    this.unsubscribeClosingNotification();\n  }\n\n  protected _complete(): void {\n    this.window.complete();\n    this.destination.complete();\n    this.unsubscribeClosingNotification();\n  }\n\n  private unsubscribeClosingNotification(): void {\n    if (this.closingNotification) {\n      this.closingNotification.unsubscribe();\n    }\n  }\n\n  private openWindow(innerSub: InnerSubscriber<T, any> = null): void {\n    if (innerSub) {\n      this.remove(innerSub);\n      innerSub.unsubscribe();\n    }\n\n    const prevWindow = this.window;\n    if (prevWindow) {\n      prevWindow.complete();\n    }\n\n    const window = this.window = new Subject<T>();\n    this.destination.next(window);\n\n    const closingNotifier = tryCatch(this.closingSelector)();\n    if (closingNotifier === errorObject) {\n      const err = errorObject.e;\n      this.destination.error(err);\n      this.window.error(err);\n    } else {\n      this.add(this.closingNotification = subscribeToResult(this, closingNotifier));\n    }\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable, ObservableInput } from '../Observable';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function withLatestFrom<T, R>(project: (v1: T) => R): OperatorFunction<T, R>;\nexport function withLatestFrom<T, T2, R>(v2: ObservableInput<T2>, project: (v1: T, v2: T2) => R): OperatorFunction<T, R>;\nexport function withLatestFrom<T, T2, T3, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, project: (v1: T, v2: T2, v3: T3) => R): OperatorFunction<T, R>;\nexport function withLatestFrom<T, T2, T3, T4, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, project: (v1: T, v2: T2, v3: T3, v4: T4) => R): OperatorFunction<T, R>;\nexport function withLatestFrom<T, T2, T3, T4, T5, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5) => R): OperatorFunction<T, R>;\nexport function withLatestFrom<T, T2, T3, T4, T5, T6, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6) => R): OperatorFunction<T, R> ;\nexport function withLatestFrom<T, T2>(v2: ObservableInput<T2>): OperatorFunction<T, [T, T2]>;\nexport function withLatestFrom<T, T2, T3>(v2: ObservableInput<T2>, v3: ObservableInput<T3>): OperatorFunction<T, [T, T2, T3]>;\nexport function withLatestFrom<T, T2, T3, T4>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>): OperatorFunction<T, [T, T2, T3, T4]>;\nexport function withLatestFrom<T, T2, T3, T4, T5>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>): OperatorFunction<T, [T, T2, T3, T4, T5]>;\nexport function withLatestFrom<T, T2, T3, T4, T5, T6>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>): OperatorFunction<T, [T, T2, T3, T4, T5, T6]> ;\nexport function withLatestFrom<T, R>(...observables: Array<ObservableInput<any> | ((...values: Array<any>) => R)>): OperatorFunction<T, R>;\nexport function withLatestFrom<T, R>(array: ObservableInput<any>[]): OperatorFunction<T, R>;\nexport function withLatestFrom<T, R>(array: ObservableInput<any>[], project: (...values: Array<any>) => R): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Combines the source Observable with other Observables to create an Observable\n * whose values are calculated from the latest values of each, only when the\n * source emits.\n *\n * <span class=\"informal\">Whenever the source Observable emits a value, it\n * computes a formula using that value plus the latest values from other input\n * Observables, then emits the output of that formula.</span>\n *\n * <img src=\"./img/withLatestFrom.png\" width=\"100%\">\n *\n * `withLatestFrom` combines each value from the source Observable (the\n * instance) with the latest values from the other input Observables only when\n * the source emits a value, optionally using a `project` function to determine\n * the value to be emitted on the output Observable. All input Observables must\n * emit at least one value before the output Observable will emit a value.\n *\n * @example <caption>On every click event, emit an array with the latest timer event plus the click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var timer = Rx.Observable.interval(1000);\n * var result = clicks.withLatestFrom(timer);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link combineLatest}\n *\n * @param {ObservableInput} other An input Observable to combine with the source\n * Observable. More than one input Observables may be given as argument.\n * @param {Function} [project] Projection function for combining values\n * together. Receives all values in order of the Observables passed, where the\n * first parameter is a value from the source Observable. (e.g.\n * `a.withLatestFrom(b, c, (a1, b1, c1) => a1 + b1 + c1)`). If this is not\n * passed, arrays will be emitted on the output Observable.\n * @return {Observable} An Observable of projected values from the most recent\n * values from each input Observable, or an array of the most recent values from\n * each input Observable.\n * @method withLatestFrom\n * @owner Observable\n */\nexport function withLatestFrom<T, R>(...args: Array<ObservableInput<any> | ((...values: Array<any>) => R)>): OperatorFunction<T, R> {\n  return (source: Observable<T>) => {\n    let project: any;\n    if (typeof args[args.length - 1] === 'function') {\n      project = args.pop();\n    }\n    const observables = <Observable<any>[]>args;\n    return source.lift(new WithLatestFromOperator(observables, project));\n  };\n}\n\nclass WithLatestFromOperator<T, R> implements Operator<T, R> {\n  constructor(private observables: Observable<any>[],\n              private project?: (...values: any[]) => Observable<R>) {\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new WithLatestFromSubscriber(subscriber, this.observables, this.project));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass WithLatestFromSubscriber<T, R> extends OuterSubscriber<T, R> {\n  private values: any[];\n  private toRespond: number[] = [];\n\n  constructor(destination: Subscriber<R>,\n              private observables: Observable<any>[],\n              private project?: (...values: any[]) => Observable<R>) {\n    super(destination);\n    const len = observables.length;\n    this.values = new Array(len);\n\n    for (let i = 0; i < len; i++) {\n      this.toRespond.push(i);\n    }\n\n    for (let i = 0; i < len; i++) {\n      let observable = observables[i];\n      this.add(subscribeToResult<T, R>(this, observable, <any>observable, i));\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.values[outerIndex] = innerValue;\n    const toRespond = this.toRespond;\n    if (toRespond.length > 0) {\n      const found = toRespond.indexOf(outerIndex);\n      if (found !== -1) {\n        toRespond.splice(found, 1);\n      }\n    }\n  }\n\n  notifyComplete() {\n    // noop\n  }\n\n  protected _next(value: T) {\n    if (this.toRespond.length === 0) {\n      const args = [value, ...this.values];\n      if (this.project) {\n        this._tryProject(args);\n      } else {\n        this.destination.next(args);\n      }\n    }\n  }\n\n  private _tryProject(args: any[]) {\n    let result: any;\n    try {\n      result = this.project.apply(this, args);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.destination.next(result);\n  }\n}\n","import { Observable, ObservableInput } from '../Observable';\nimport { ArrayObservable } from '../observable/ArrayObservable';\nimport { isArray } from '../util/isArray';\nimport { Operator } from '../Operator';\nimport { PartialObserver } from '../Observer';\nimport { Subscriber } from '../Subscriber';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { iterator as Symbol_iterator } from '../symbol/iterator';\nimport { OperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function zip<T, R>(project: (v1: T) => R): OperatorFunction<T, R>;\nexport function zip<T, T2, R>(v2: ObservableInput<T2>, project: (v1: T, v2: T2) => R): OperatorFunction<T, R>;\nexport function zip<T, T2, T3, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, project: (v1: T, v2: T2, v3: T3) => R): OperatorFunction<T, R>;\nexport function zip<T, T2, T3, T4, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, project: (v1: T, v2: T2, v3: T3, v4: T4) => R): OperatorFunction<T, R>;\nexport function zip<T, T2, T3, T4, T5, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5) => R): OperatorFunction<T, R>;\nexport function zip<T, T2, T3, T4, T5, T6, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6) => R): OperatorFunction<T, R> ;\nexport function zip<T, T2>(v2: ObservableInput<T2>): OperatorFunction<T, [T, T2]>;\nexport function zip<T, T2, T3>(v2: ObservableInput<T2>, v3: ObservableInput<T3>): OperatorFunction<T, [T, T2, T3]>;\nexport function zip<T, T2, T3, T4>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>): OperatorFunction<T, [T, T2, T3, T4]>;\nexport function zip<T, T2, T3, T4, T5>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>): OperatorFunction<T, [T, T2, T3, T4, T5]>;\nexport function zip<T, T2, T3, T4, T5, T6>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>): OperatorFunction<T, [T, T2, T3, T4, T5, T6]> ;\nexport function zip<T, R>(...observables: Array<ObservableInput<T> | ((...values: Array<T>) => R)>): OperatorFunction<T, R>;\nexport function zip<T, R>(array: Array<ObservableInput<T>>): OperatorFunction<T, R>;\nexport function zip<T, TOther, R>(array: Array<ObservableInput<TOther>>, project: (v1: T, ...values: Array<TOther>) => R): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * @param observables\n * @return {Observable<R>}\n * @method zip\n * @owner Observable\n */\nexport function zip<T, R>(...observables: Array<ObservableInput<any> | ((...values: Array<any>) => R)>): OperatorFunction<T, R> {\n  return function zipOperatorFunction(source: Observable<T>) {\n    return source.lift.call(zipStatic<R>(source, ...observables));\n  };\n}\n\n/* tslint:disable:max-line-length */\nexport function zipStatic<T, T2>(v1: ObservableInput<T>, v2: ObservableInput<T2>): Observable<[T, T2]>;\nexport function zipStatic<T, T2, T3>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>): Observable<[T, T2, T3]>;\nexport function zipStatic<T, T2, T3, T4>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>): Observable<[T, T2, T3, T4]>;\nexport function zipStatic<T, T2, T3, T4, T5>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>): Observable<[T, T2, T3, T4, T5]>;\nexport function zipStatic<T, T2, T3, T4, T5, T6>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>): Observable<[T, T2, T3, T4, T5, T6]>;\n\nexport function zipStatic<T, R>(v1: ObservableInput<T>, project: (v1: T) => R): Observable<R>;\nexport function zipStatic<T, T2, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, project: (v1: T, v2: T2) => R): Observable<R>;\nexport function zipStatic<T, T2, T3, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, project: (v1: T, v2: T2, v3: T3) => R): Observable<R>;\nexport function zipStatic<T, T2, T3, T4, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, project: (v1: T, v2: T2, v3: T3, v4: T4) => R): Observable<R>;\nexport function zipStatic<T, T2, T3, T4, T5, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5) => R): Observable<R>;\nexport function zipStatic<T, T2, T3, T4, T5, T6, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6) => R): Observable<R>;\n\nexport function zipStatic<T>(array: ObservableInput<T>[]): Observable<T[]>;\nexport function zipStatic<R>(array: ObservableInput<any>[]): Observable<R>;\nexport function zipStatic<T, R>(array: ObservableInput<T>[], project: (...values: Array<T>) => R): Observable<R>;\nexport function zipStatic<R>(array: ObservableInput<any>[], project: (...values: Array<any>) => R): Observable<R>;\n\nexport function zipStatic<T>(...observables: Array<ObservableInput<T>>): Observable<T[]>;\nexport function zipStatic<T, R>(...observables: Array<ObservableInput<T> | ((...values: Array<T>) => R)>): Observable<R>;\nexport function zipStatic<R>(...observables: Array<ObservableInput<any> | ((...values: Array<any>) => R)>): Observable<R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Combines multiple Observables to create an Observable whose values are calculated from the values, in order, of each\n * of its input Observables.\n *\n * If the latest parameter is a function, this function is used to compute the created value from the input values.\n * Otherwise, an array of the input values is returned.\n *\n * @example <caption>Combine age and name from different sources</caption>\n *\n * let age$ = Observable.of<number>(27, 25, 29);\n * let name$ = Observable.of<string>('Foo', 'Bar', 'Beer');\n * let isDev$ = Observable.of<boolean>(true, true, false);\n *\n * Observable\n *     .zip(age$,\n *          name$,\n *          isDev$,\n *          (age: number, name: string, isDev: boolean) => ({ age, name, isDev }))\n *     .subscribe(x => console.log(x));\n *\n * // outputs\n * // { age: 27, name: 'Foo', isDev: true }\n * // { age: 25, name: 'Bar', isDev: true }\n * // { age: 29, name: 'Beer', isDev: false }\n *\n * @param observables\n * @return {Observable<R>}\n * @static true\n * @name zip\n * @owner Observable\n */\nexport function zipStatic<T, R>(...observables: Array<ObservableInput<any> | ((...values: Array<any>) => R)>): Observable<R> {\n  const project = <((...ys: Array<any>) => R)> observables[observables.length - 1];\n  if (typeof project === 'function') {\n    observables.pop();\n  }\n  return new ArrayObservable(observables).lift(new ZipOperator(project));\n}\n\nexport class ZipOperator<T, R> implements Operator<T, R> {\n\n  project: (...values: Array<any>) => R;\n\n  constructor(project?: (...values: Array<any>) => R) {\n    this.project = project;\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new ZipSubscriber(subscriber, this.project));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class ZipSubscriber<T, R> extends Subscriber<T> {\n  private values: any;\n  private project: (...values: Array<any>) => R;\n  private iterators: LookAheadIterator<any>[] = [];\n  private active = 0;\n\n  constructor(destination: Subscriber<R>,\n              project?: (...values: Array<any>) => R,\n              values: any = Object.create(null)) {\n    super(destination);\n    this.project = (typeof project === 'function') ? project : null;\n    this.values = values;\n  }\n\n  protected _next(value: any) {\n    const iterators = this.iterators;\n    if (isArray(value)) {\n      iterators.push(new StaticArrayIterator(value));\n    } else if (typeof value[Symbol_iterator] === 'function') {\n      iterators.push(new StaticIterator(value[Symbol_iterator]()));\n    } else {\n      iterators.push(new ZipBufferIterator(this.destination, this, value));\n    }\n  }\n\n  protected _complete() {\n    const iterators = this.iterators;\n    const len = iterators.length;\n\n    if (len === 0) {\n      this.destination.complete();\n      return;\n    }\n\n    this.active = len;\n    for (let i = 0; i < len; i++) {\n      let iterator: ZipBufferIterator<any, any> = <any>iterators[i];\n      if (iterator.stillUnsubscribed) {\n        this.add(iterator.subscribe(iterator, i));\n      } else {\n        this.active--; // not an observable\n      }\n    }\n  }\n\n  notifyInactive() {\n    this.active--;\n    if (this.active === 0) {\n      this.destination.complete();\n    }\n  }\n\n  checkIterators() {\n    const iterators = this.iterators;\n    const len = iterators.length;\n    const destination = this.destination;\n\n    // abort if not all of them have values\n    for (let i = 0; i < len; i++) {\n      let iterator = iterators[i];\n      if (typeof iterator.hasValue === 'function' && !iterator.hasValue()) {\n        return;\n      }\n    }\n\n    let shouldComplete = false;\n    const args: any[] = [];\n    for (let i = 0; i < len; i++) {\n      let iterator = iterators[i];\n      let result = iterator.next();\n\n      // check to see if it's completed now that you've gotten\n      // the next value.\n      if (iterator.hasCompleted()) {\n        shouldComplete = true;\n      }\n\n      if (result.done) {\n        destination.complete();\n        return;\n      }\n\n      args.push(result.value);\n    }\n\n    if (this.project) {\n      this._tryProject(args);\n    } else {\n      destination.next(args);\n    }\n\n    if (shouldComplete) {\n      destination.complete();\n    }\n  }\n\n  protected _tryProject(args: any[]) {\n    let result: any;\n    try {\n      result = this.project.apply(this, args);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.destination.next(result);\n  }\n}\n\ninterface LookAheadIterator<T> extends Iterator<T> {\n  hasValue(): boolean;\n  hasCompleted(): boolean;\n}\n\nclass StaticIterator<T> implements LookAheadIterator<T> {\n  private nextResult: IteratorResult<T>;\n\n  constructor(private iterator: Iterator<T>) {\n    this.nextResult = iterator.next();\n  }\n\n  hasValue() {\n    return true;\n  }\n\n  next(): IteratorResult<T> {\n    const result = this.nextResult;\n    this.nextResult = this.iterator.next();\n    return result;\n  }\n\n  hasCompleted() {\n    const nextResult = this.nextResult;\n    return nextResult && nextResult.done;\n  }\n}\n\nclass StaticArrayIterator<T> implements LookAheadIterator<T> {\n  private index = 0;\n  private length = 0;\n\n  constructor(private array: T[]) {\n    this.length = array.length;\n  }\n\n  [Symbol_iterator]() {\n    return this;\n  }\n\n  next(value?: any): IteratorResult<T> {\n    const i = this.index++;\n    const array = this.array;\n    return i < this.length ? { value: array[i], done: false } : { value: null, done: true };\n  }\n\n  hasValue() {\n    return this.array.length > this.index;\n  }\n\n  hasCompleted() {\n    return this.array.length === this.index;\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass ZipBufferIterator<T, R> extends OuterSubscriber<T, R> implements LookAheadIterator<T> {\n  stillUnsubscribed = true;\n  buffer: T[] = [];\n  isComplete = false;\n\n  constructor(destination: PartialObserver<T>,\n              private parent: ZipSubscriber<T, R>,\n              private observable: Observable<T>) {\n    super(destination);\n  }\n\n  [Symbol_iterator]() {\n    return this;\n  }\n\n  // NOTE: there is actually a name collision here with Subscriber.next and Iterator.next\n  //    this is legit because `next()` will never be called by a subscription in this case.\n  next(): IteratorResult<T> {\n    const buffer = this.buffer;\n    if (buffer.length === 0 && this.isComplete) {\n      return { value: null, done: true };\n    } else {\n      return { value: buffer.shift(), done: false };\n    }\n  }\n\n  hasValue() {\n    return this.buffer.length > 0;\n  }\n\n  hasCompleted() {\n    return this.buffer.length === 0 && this.isComplete;\n  }\n\n  notifyComplete() {\n    if (this.buffer.length > 0) {\n      this.isComplete = true;\n      this.parent.notifyInactive();\n    } else {\n      this.destination.complete();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: any,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.buffer.push(innerValue);\n    this.parent.checkIterators();\n  }\n\n  subscribe(value: any, index: number) {\n    return subscribeToResult<any, any>(this, this.observable, this, index);\n  }\n}\n","export { audit } from './audit';\nexport { auditTime } from './auditTime';\nexport { buffer } from './buffer';\nexport { bufferCount } from './bufferCount';\nexport { bufferTime } from './bufferTime';\nexport { bufferToggle } from './bufferToggle';\nexport { bufferWhen } from './bufferWhen';\nexport { catchError } from './catchError';\nexport { combineAll } from './combineAll';\nexport { combineLatest } from './combineLatest';\nexport { concat } from './concat';\nexport { concatAll } from './concatAll';\nexport { concatMap } from './concatMap';\nexport { concatMapTo } from './concatMapTo';\nexport { count } from './count';\nexport { debounce } from './debounce';\nexport { debounceTime } from './debounceTime';\nexport { defaultIfEmpty } from './defaultIfEmpty';\nexport { delay } from './delay';\nexport { delayWhen } from './delayWhen';\nexport { dematerialize } from './dematerialize';\nexport { distinct } from './distinct';\nexport { distinctUntilChanged } from './distinctUntilChanged';\nexport { distinctUntilKeyChanged } from './distinctUntilKeyChanged';\nexport { elementAt } from './elementAt';\nexport { every } from './every';\nexport { exhaust } from './exhaust';\nexport { exhaustMap } from './exhaustMap';\nexport { expand } from './expand';\nexport { filter } from './filter';\nexport { finalize } from './finalize';\nexport { find } from './find';\nexport { findIndex } from './findIndex';\nexport { first } from './first';\nexport { groupBy } from './groupBy';\nexport { ignoreElements } from './ignoreElements';\nexport { isEmpty } from './isEmpty';\nexport { last } from './last';\nexport { map } from './map';\nexport { mapTo } from './mapTo';\nexport { materialize } from './materialize';\nexport { max } from './max';\nexport { merge } from './merge';\nexport { mergeAll } from './mergeAll';\nexport { mergeMap } from './mergeMap';\nexport { mergeMap as flatMap } from './mergeMap';\nexport { mergeMapTo } from './mergeMapTo';\nexport { mergeScan } from './mergeScan';\nexport { min } from './min';\nexport { multicast } from './multicast';\nexport { observeOn } from './observeOn';\nexport { onErrorResumeNext } from './onErrorResumeNext';\nexport { pairwise } from './pairwise';\nexport { partition } from './partition';\nexport { pluck } from './pluck';\nexport { publish } from './publish';\nexport { publishBehavior } from './publishBehavior';\nexport { publishLast } from './publishLast';\nexport { publishReplay } from './publishReplay';\nexport { race } from './race';\nexport { reduce } from './reduce';\nexport { repeat } from './repeat';\nexport { repeatWhen } from './repeatWhen';\nexport { retry } from './retry';\nexport { retryWhen } from './retryWhen';\nexport { refCount } from './refCount';\nexport { sample } from './sample';\nexport { sampleTime } from './sampleTime';\nexport { scan } from './scan';\nexport { sequenceEqual } from './sequenceEqual';\nexport { share } from './share';\nexport { shareReplay } from './shareReplay';\nexport { single } from './single';\nexport { skip } from './skip';\nexport { skipLast } from './skipLast';\nexport { skipUntil } from './skipUntil';\nexport { skipWhile } from './skipWhile';\nexport { startWith } from './startWith';\n/**\n * TODO(https://github.com/ReactiveX/rxjs/issues/2900): Add back subscribeOn once it can be\n * treeshaken. Currently if this export is added back, it\n * forces apps to bring in asap scheduler along with\n * Immediate, root, and other supporting code.\n */\n// export { subscribeOn } from './subscribeOn';\nexport { switchAll } from './switchAll';\nexport { switchMap } from './switchMap';\nexport { switchMapTo } from './switchMapTo';\nexport { take } from './take';\nexport { takeLast } from './takeLast';\nexport { takeUntil } from './takeUntil';\nexport { takeWhile } from './takeWhile';\nexport { tap } from './tap';\nexport { throttle } from './throttle';\nexport { throttleTime } from './throttleTime';\nexport { timeInterval } from './timeInterval';\nexport { timeout } from './timeout';\nexport { timeoutWith } from './timeoutWith';\nexport { timestamp } from './timestamp';\nexport { toArray } from './toArray';\nexport { window } from './window';\nexport { windowCount } from './windowCount';\nexport { windowTime } from './windowTime';\nexport { windowToggle } from './windowToggle';\nexport { windowWhen } from './windowWhen';\nexport { withLatestFrom } from './withLatestFrom';\nexport { zip } from './zip';\nexport { zipAll } from './zipAll';\n","/**\n * @license\n * Copyright 厦门乾元盛世科技有限公司 All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file.\n */\n\n\nimport { Component, Input, Renderer2, ElementRef, Inject, Optional, HostBinding } from '@angular/core';\nimport { DefaultValueAccessor } from '@angular/forms';\nimport { COMPOSITION_BUFFER_MODE } from '@angular/forms';\nexport /*abstract*/ class WeUIFormControl extends DefaultValueAccessor {\n/**\n * 计数器\n */\npublic static count = 0;\n/**\n * 控件ID\n */\nid: string;\n/**\n * 控件name\n */\nname: string;\n/**\n * 控件 label\n */\nlabel: string;\n/**\n * 是否禁用\n */\ndisabled = false;\n/**\n * value 属性为 input 元素设定值。<br>\n * \n * 对于不同的输入类型，value 属性的用法也不同：<ul>\n * <li> type=\"button\", \"reset\", \"submit\" - 定义按钮上的显示的文本 </li>\n * <li> type=\"text\", \"password\", \"hidden\" - 定义输入字段的初始值 </li>\n * <li> type=\"checkbox\", \"radio\", \"image\" - 定义与输入相关联的值 </li>\n * </ul>\n * \n * <p>注释：&lt;input type=\"checkbox\"&gt; 和 &lt;input type=\"radio\"&gt; 中必须设置 <code>value</code> 属性。</p>\n * <p>注释：value 属性无法与 <input type=\"file\"> 一同使用。</p>\n */\nvalue: any;\n/**\n * The internal data model\n */\nprotected _value: any = '';\n/**\n * The value of the input ngModel (model -> view)\n * @return {?}\n */\npublic get innerValue() {\n        return this._value;\n    }\n/**\n * The value of the input ngModel (view -> model)\n * @param {?} newValue\n * @return {?}\n */\npublic set innerValue(newValue: any) {\n        if (this._value !== newValue) {\n            this._value = newValue;\n            // view -> model -> outside world (ie. NgModel on this control)\n            this.onChange(newValue);\n        }\n    }\n/**\n * 注册控件\n * @return {?}\n */\npublic static registerControl(): string {\n        return 'weui-control-' + (++WeUIFormControl.count).toString();\n    }\n\n     _cls_cell = true;\n     _cls_control = true;\n/**\n * @param {?} __renderer\n * @param {?} __elementRef\n * @param {?} __compositionMode\n */\nconstructor(\nprivate __renderer: Renderer2,\nprivate __elementRef: ElementRef,\nprivate __compositionMode: boolean) {\n        super(__renderer, __elementRef, __compositionMode);\n        this.id = WeUIFormControl.registerControl();\n    }\n/**\n * Write a new value to the element. (From ControlValueAccessor interface)\n * @param {?} value\n * @return {?}\n */\nwriteValue(value: any): void {\n        this._value = value;\n    }\n/**\n * 设置禁用状态 (From ControlValueAccessor interface)\n * @param {?} isDisabled\n * @return {?}\n */\nsetDisabledState(isDisabled: boolean): void {\n        this.disabled = isDisabled;\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n    selector: 'WeUIFormControl',\n    template: ``\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Renderer2, decorators: [{ type: Inject, args: [Renderer2, ] }, ]},\n{type: ElementRef, decorators: [{ type: Inject, args: [ElementRef, ] }, ]},\n{type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [COMPOSITION_BUFFER_MODE, ] }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'id': [{ type: Input },],\n'name': [{ type: Input },],\n'label': [{ type: Input },],\n'disabled': [{ type: Input },],\n'value': [{ type: Input },],\n'_cls_cell': [{ type: HostBinding, args: ['class.weui-cell', ] },],\n'_cls_control': [{ type: HostBinding, args: ['class.weui-control', ] },],\n};\n}\n\nfunction WeUIFormControl_tsickle_Closure_declarations() {\n/**\n * 计数器\n * @type {?}\n */\nWeUIFormControl.count;\n/** @type {?} */\nWeUIFormControl.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nWeUIFormControl.ctorParameters;\n/** @type {?} */\nWeUIFormControl.propDecorators;\n/**\n * 控件ID\n * @type {?}\n */\nWeUIFormControl.prototype.id;\n/**\n * 控件name\n * @type {?}\n */\nWeUIFormControl.prototype.name;\n/**\n * 控件 label\n * @type {?}\n */\nWeUIFormControl.prototype.label;\n/**\n * 是否禁用\n * @type {?}\n */\nWeUIFormControl.prototype.disabled;\n/**\n * value 属性为 input 元素设定值。<br>\n * \n * 对于不同的输入类型，value 属性的用法也不同：<ul>\n * <li> type=\"button\", \"reset\", \"submit\" - 定义按钮上的显示的文本 </li>\n * <li> type=\"text\", \"password\", \"hidden\" - 定义输入字段的初始值 </li>\n * <li> type=\"checkbox\", \"radio\", \"image\" - 定义与输入相关联的值 </li>\n * </ul>\n * \n * <p>注释：&lt;input type=\"checkbox\"&gt; 和 &lt;input type=\"radio\"&gt; 中必须设置 <code>value</code> 属性。</p>\n * <p>注释：value 属性无法与 <input type=\"file\"> 一同使用。</p>\n * @type {?}\n */\nWeUIFormControl.prototype.value;\n/**\n * The internal data model\n * @type {?}\n */\nWeUIFormControl.prototype._value;\n/** @type {?} */\nWeUIFormControl.prototype._cls_cell;\n/** @type {?} */\nWeUIFormControl.prototype._cls_control;\n/** @type {?} */\nWeUIFormControl.prototype.__renderer;\n/** @type {?} */\nWeUIFormControl.prototype.__elementRef;\n/** @type {?} */\nWeUIFormControl.prototype.__compositionMode;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright 厦门乾元盛世科技有限公司 All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file.\n */\n\n\nimport { Component, Input } from '@angular/core';\n/**\n * 徽章\n */\nexport class WeUIBadge {\n/**\n * 颜色，取值：default、primary、warn等。默认为default。<br>\n * 自定义的颜色名称与色值，可以定义在 工程根目录/src/theme/variables.scss 文件中的 $colors 对象。\n */\ncolor = 'default';\n/**\n * 点\n */\ndot: any;\nconstructor() {\n\n    }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n    selector: 'weui-badge',\n    template: `\n        <span class=\"weui-badge weui-badge_{{color}}\"\n             [ngClass]=\"{'weui-badge_dot': dot !== undefined && dot !== null}\"><ng-content></ng-content></span>`\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'color': [{ type: Input },],\n'dot': [{ type: Input },],\n};\n}\n\nfunction WeUIBadge_tsickle_Closure_declarations() {\n/** @type {?} */\nWeUIBadge.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nWeUIBadge.ctorParameters;\n/** @type {?} */\nWeUIBadge.propDecorators;\n/**\n * 颜色，取值：default、primary、warn等。默认为default。<br>\n * 自定义的颜色名称与色值，可以定义在 工程根目录/src/theme/variables.scss 文件中的 $colors 对象。\n * @type {?}\n */\nWeUIBadge.prototype.color;\n/**\n * 点\n * @type {?}\n */\nWeUIBadge.prototype.dot;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright 厦门乾元盛世科技有限公司 All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file.\n */\n\n\nimport { Component, Input } from '@angular/core';\nexport class WeUIButton {\n/**\n * 颜色，取值：default、primary、warn等。默认为default。<br>\n * 自定义的颜色名称与色值，可以定义在 工程根目录/src/theme/variables.scss 文件中的 $colors 对象。\n */\ncolor = 'default';\n/**\n * 简朴样式 (主要出现此属性)\n */\nplain: string;\n/**\n * 按钮大小 (主要出现此属性)\n */\nmini: string;\n/**\n * 正在加载\n */\nloading = false;\n/**\n * 禁用样式\n */\ndisabled = false;\nconstructor() {\n\n    }\n/**\n * @return {?}\n */\ngetColorStyle(): string {\n        return 'weui-btn_' + (this.plain !== undefined ? 'plain-' : '') + this.color;\n    }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n    selector: 'weui-button',\n    template: `\n        <a href=\"javascript:;\" class=\"weui-btn {{getColorStyle()}}\"\n            [ngClass]=\"{\n                'weui-btn_disabled': disabled && plain == undefined,\n                'weui-btn_plain-disabled': disabled && plain !== undefined,\n                'weui-btn_loading': loading,\n                'weui-btn_mini': mini !== undefined\n            }\">\n            <i class=\"weui-loading\" *ngIf=\"loading\"></i>\n            <ng-content></ng-content>\n        </a>\n    `\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'color': [{ type: Input },],\n'plain': [{ type: Input },],\n'mini': [{ type: Input },],\n'loading': [{ type: Input },],\n'disabled': [{ type: Input },],\n};\n}\n\nfunction WeUIButton_tsickle_Closure_declarations() {\n/** @type {?} */\nWeUIButton.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nWeUIButton.ctorParameters;\n/** @type {?} */\nWeUIButton.propDecorators;\n/**\n * 颜色，取值：default、primary、warn等。默认为default。<br>\n * 自定义的颜色名称与色值，可以定义在 工程根目录/src/theme/variables.scss 文件中的 $colors 对象。\n * @type {?}\n */\nWeUIButton.prototype.color;\n/**\n * 简朴样式 (主要出现此属性)\n * @type {?}\n */\nWeUIButton.prototype.plain;\n/**\n * 按钮大小 (主要出现此属性)\n * @type {?}\n */\nWeUIButton.prototype.mini;\n/**\n * 正在加载\n * @type {?}\n */\nWeUIButton.prototype.loading;\n/**\n * 禁用样式\n * @type {?}\n */\nWeUIButton.prototype.disabled;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright 厦门乾元盛世科技有限公司 All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file.\n */\n\n\nimport { Component, Input } from '@angular/core';\nexport class WeUISubmit {\n/**\n * 颜色，取值：default、primary、warn等。默认为default。<br>\n * 自定义的颜色名称与色值，可以定义在 工程根目录/src/theme/variables.scss 文件中的 $colors 对象。\n */\ncolor = 'default';\n/**\n * 按钮类型\n */\ntype = 'submit';\n/**\n * 简朴样式 (主要出现此属性)\n */\nplain: string;\n/**\n * 按钮大小 (主要出现此属性)\n */\nmini: string;\n/**\n * 正在加载\n */\nloading = false;\n/**\n * 禁用样式\n */\ndisabled = false;\nconstructor() {\n\n    }\n/**\n * @return {?}\n */\ngetColorStyle(): string {\n        return 'weui-btn_' + (this.plain !== undefined ? 'plain-' : '') + this.color;\n    }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n    selector: 'weui-submit',\n    template: `\n        <button [attr.type]=\"type\" class=\"weui-btn {{getColorStyle()}}\"\n            [ngClass]=\"{\n                'weui-btn_disabled': disabled && plain == undefined,\n                'weui-btn_plain-disabled': disabled && plain !== undefined,\n                'weui-btn_loading': loading,\n                'weui-btn_mini': mini !== undefined\n            }\">\n            <i class=\"weui-loading\" *ngIf=\"loading\"></i>\n            <ng-content></ng-content>\n        </button>\n    `\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'color': [{ type: Input },],\n'type': [{ type: Input },],\n'plain': [{ type: Input },],\n'mini': [{ type: Input },],\n'loading': [{ type: Input },],\n'disabled': [{ type: Input },],\n};\n}\n\nfunction WeUISubmit_tsickle_Closure_declarations() {\n/** @type {?} */\nWeUISubmit.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nWeUISubmit.ctorParameters;\n/** @type {?} */\nWeUISubmit.propDecorators;\n/**\n * 颜色，取值：default、primary、warn等。默认为default。<br>\n * 自定义的颜色名称与色值，可以定义在 工程根目录/src/theme/variables.scss 文件中的 $colors 对象。\n * @type {?}\n */\nWeUISubmit.prototype.color;\n/**\n * 按钮类型\n * @type {?}\n */\nWeUISubmit.prototype.type;\n/**\n * 简朴样式 (主要出现此属性)\n * @type {?}\n */\nWeUISubmit.prototype.plain;\n/**\n * 按钮大小 (主要出现此属性)\n * @type {?}\n */\nWeUISubmit.prototype.mini;\n/**\n * 正在加载\n * @type {?}\n */\nWeUISubmit.prototype.loading;\n/**\n * 禁用样式\n * @type {?}\n */\nWeUISubmit.prototype.disabled;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright 厦门乾元盛世科技有限公司 All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file.\n */\n\n\nimport { Component, HostBinding, Renderer2, ElementRef, forwardRef, Optional, Inject } from '@angular/core';\nimport { NG_VALUE_ACCESSOR, COMPOSITION_BUFFER_MODE } from '@angular/forms';\n\n\nimport { WeUIFormControl } from './weui.form.control';\n\n\nconst /** @type {?} */ WEUI_FORM_CONTROL_VALUE_ACCESSOR: any = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => WeUICheckbox),\n    multi: true\n};\nexport class WeUICheckbox extends WeUIFormControl {\n/**\n * 是否已选中\n */\npublic checked = false;\n/**\n * 选中的值\n */\npublic values: any[] = [];\n/**\n * The value of the input ngModel。 (view -> model)\n * @param {?} checked\n * @return {?}\n */\nset innerValue(checked: boolean) {\n        this._value = checked || false;\n\n        const /** @type {?} */ index = this.values.indexOf(this.value);\n        if (checked) {\n            if (index === -1) {\n                this.values.push(this.value);\n            }\n        } else {\n            if (index >= 0) {\n                this.values.splice(index, 1);\n            }\n        }\n\n        // view -> model -> outside world (ie. NgModel on this control)\n        this.onChange(this.values);\n\n        // console.log('innerValue: id=' + this.id + ', name=' + this.name\n        //  + ', values=' + JSON.stringify(this.values) + ', checked=' + this._value);\n    }\n/**\n * Write a new value to the element. (From ControlValueAccessor interface)\n * @param {?} value\n * @return {?}\n */\nwriteValue(value: any): void {\n        if (value !== null) {\n            this.values = value;\n        }\n\n        this.checked = this.values.indexOf(this.value) >= 0;\n        super.writeValue(this.checked);\n\n        // console.log('writeValue: id=' + this.id + ', name=' + this.name\n        //  + ', values=' + JSON.stringify(this.values) + ', checked=' + this._value);\n    }\n/**\n * 扩展样式\n */\n_cls_check_label = true;\n/**\n * @param {?} renderer\n * @param {?} elementRef\n * @param {?} compositionMode\n */\nconstructor(\nprivate renderer: Renderer2,\nprivate elementRef: ElementRef,\nprivate compositionMode: boolean) {\n        super(renderer, elementRef, compositionMode);\n        this.value = 'on'; // default value\n    }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n    selector: 'weui-checkbox',\n    providers: [WEUI_FORM_CONTROL_VALUE_ACCESSOR],\n    template: `\n        <label class=\"weui-check__label\" [for]=\"id\" (click)=\"onTouched()\">\n            <div class=\"weui-cell__hd\">\n                <input type=\"checkbox\" class=\"weui-check\"\n                    [attr.id]=\"id\" [attr.name]=\"name\" [value]=\"value\"\n                    [checked]=\"checked\" [(ngModel)]=\"innerValue\">\n                <i class=\"weui-icon-checked\"></i>\n            </div>\n            <div class=\"weui-cell__bd\">\n                {{label}}<ng-content></ng-content>\n            </div>\n        </label>\n    `\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Renderer2, },\n{type: ElementRef, },\n{type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [COMPOSITION_BUFFER_MODE, ] }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'_cls_check_label': [{ type: HostBinding, args: ['class.weui-check__label', ] },],\n};\n}\n\nfunction WeUICheckbox_tsickle_Closure_declarations() {\n/** @type {?} */\nWeUICheckbox.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nWeUICheckbox.ctorParameters;\n/** @type {?} */\nWeUICheckbox.propDecorators;\n/**\n * 是否已选中\n * @type {?}\n */\nWeUICheckbox.prototype.checked;\n/**\n * 选中的值\n * @type {?}\n */\nWeUICheckbox.prototype.values;\n/**\n * 扩展样式\n * @type {?}\n */\nWeUICheckbox.prototype._cls_check_label;\n/** @type {?} */\nWeUICheckbox.prototype.renderer;\n/** @type {?} */\nWeUICheckbox.prototype.elementRef;\n/** @type {?} */\nWeUICheckbox.prototype.compositionMode;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright 厦门乾元盛世科技有限公司 All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file.\n */\n\n\nimport { Component, Input, HostBinding, Output, EventEmitter } from '@angular/core';\n/**\n * 菜单选项\n */\nexport class PickerOption {\n/**\n * 显示文本\n */\nlabel: string;\n/**\n * 取值\n */\nvalue: any;\n/**\n * 是否已禁用\n */\ndisabled?: boolean;\n\n    /**\n     * 其它属性\n     */\n    [key: string]: any;\n}\n\nfunction PickerOption_tsickle_Closure_declarations() {\n/**\n * 显示文本\n * @type {?}\n */\nPickerOption.prototype.label;\n/**\n * 取值\n * @type {?}\n */\nPickerOption.prototype.value;\n/**\n * 是否已禁用\n * @type {?}\n */\nPickerOption.prototype.disabled;\n}\n\n/**\n * 多列选择器\n * 参考了 {\\@link https://github.com/weui/weui.js/blob/master/src/picker/picker.js}的实现\n */\nexport class WeUIPicker {\n/**\n * \\@i18n\n */\ndefaults: any = {\n        cancelText: '取消',\n        confirmText: '确定'\n    };\n/**\n * 单列菜单列表，内容任意，其中<code>label</code>用于显示，<code>value</code>表示值，<code>disabled</code>表示不可选择项。\n * @param {?} menu\n * @return {?}\n */\nset menu(menu: PickerOption[]) {\n        if (menu !== undefined && menu !== null && menu.length) {\n            this.menus = [menu];\n        }\n    };\n/**\n * 多列菜单列表，内容任意，其中<code>label</code>用于显示，<code>value</code>表示值，<code>disabled</code>表示不可选择项。<br>\n * 注意：列的个数不宜超过3个。\n */\nmenus: PickerOption[][] = [];\n/**\n * 当前选择的值（每列对应一个值）\n */\nvalue: any[] = [];\n/**\n * \\@i18n 取消\n */\ncancelText: string = this.defaults.cancelText;\n/**\n * \\@i18n 确定\n */\nconfirmText: string = this.defaults.confirmText;\n/**\n * 用于控制控件的可视化\n * @return {?}\n */\nget hideCls(): boolean {\n        return this.hidden;\n    }\n/**\n * 关闭事件\n */\nclose = new EventEmitter<any>();\n/**\n * 点击【确定】按钮时，通过Promise.resolve()输出最终值\n */\nprivate resolve: (value: any[]) => void;\n/**\n * 已显示否\n */\npublic shown = false;\n/**\n * 已显示否\n */\nprivate hidden = true;\nconstructor() {\n\n    }\n/**\n * @param {?} event\n * @return {?}\n */\nonAnimationEnd(event: AnimationEvent): void {\n        if (event.animationName === 'slideDown') {\n            this.hidden = true;\n            this.close.emit();\n        }\n    }\n/**\n * 显示菜单\n * @return {?}\n */\nshow(): Promise<any> {\n        this.hidden = false;\n        this.shown = true;\n\n        return new Promise<any>((resolve, reject) => {\n            this.resolve = resolve;\n        });\n    }\n/**\n * 隐藏菜单\n * @return {?}\n */\nhide(): void {\n        this.shown = false;\n    }\n/**\n * 某列数据修改时触发\n * \n * @param {?} option 该列数据的选择项\n * @param {?} index  该列在组内的索引\n * @return {?}\n */\nonChange(option: PickerOption, index: number): void {\n        if (option) {\n            this.value[index] = option;\n        }\n    }\n/**\n * 点击【确定】按钮时，通过Promise.resolve()输出最终值\n * @return {?}\n */\nonConfirm(): void {\n        this.resolve(this.value);\n        this.hide();\n    }\n/**\n * 点击【取消】按钮时，关闭Picker\n * @return {?}\n */\nonCancel(): void {\n        this.hide();\n    }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n    selector: 'weui-picker',\n    template: `\n        <div class=\"weui-mask\" (click)=\"onCancel()\"\n            [ngClass]=\"{'weui-animate-fade-in': shown, 'weui-animate-fade-out': !shown}\"></div>\n        <div class=\"weui-picker\"\n            [ngClass]=\"{'weui-animate-slide-up': shown, 'weui-animate-slide-down': !shown}\"\n            (animationend)=\"onAnimationEnd($event)\">\n            <div class=\"weui-picker__hd\">\n                <a href=\"javascript:;\" class=\"weui-picker__action\" (click)=\"onCancel()\">{{cancelText}}  </a>\n                <a href=\"javascript:;\" class=\"weui-picker__action\" (click)=\"onConfirm()\">{{confirmText}}</a>\n            </div>\n            <div class=\"weui-picker__bd\">\n                <weui-picker-group tappable class=\"weui-picker__group\"\n                    *ngFor=\"let options of menus; let i = index;\"\n                    [options]=\"options\" [value]=\"value[i]\" (change)=\"onChange($event, i)\"></weui-picker-group>\n            </div>\n        </div>\n    `,\n    exportAs: 'weuiPicker'\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'menu': [{ type: Input },],\n'menus': [{ type: Input },],\n'value': [{ type: Input },],\n'cancelText': [{ type: Input },],\n'confirmText': [{ type: Input },],\n'hideCls': [{ type: HostBinding, args: ['class.weui-hide', ] },],\n'close': [{ type: Output },],\n};\n}\n\nfunction WeUIPicker_tsickle_Closure_declarations() {\n/** @type {?} */\nWeUIPicker.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nWeUIPicker.ctorParameters;\n/** @type {?} */\nWeUIPicker.propDecorators;\n/**\n * \\@i18n\n * @type {?}\n */\nWeUIPicker.prototype.defaults;\n/**\n * 多列菜单列表，内容任意，其中<code>label</code>用于显示，<code>value</code>表示值，<code>disabled</code>表示不可选择项。<br>\n * 注意：列的个数不宜超过3个。\n * @type {?}\n */\nWeUIPicker.prototype.menus;\n/**\n * 当前选择的值（每列对应一个值）\n * @type {?}\n */\nWeUIPicker.prototype.value;\n/**\n * \\@i18n 取消\n * @type {?}\n */\nWeUIPicker.prototype.cancelText;\n/**\n * \\@i18n 确定\n * @type {?}\n */\nWeUIPicker.prototype.confirmText;\n/**\n * 关闭事件\n * @type {?}\n */\nWeUIPicker.prototype.close;\n/**\n * 点击【确定】按钮时，通过Promise.resolve()输出最终值\n * @type {?}\n */\nWeUIPicker.prototype.resolve;\n/**\n * 已显示否\n * @type {?}\n */\nWeUIPicker.prototype.shown;\n/**\n * 已显示否\n * @type {?}\n */\nWeUIPicker.prototype.hidden;\n}\n\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright 厦门乾元盛世科技有限公司 All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file.\n */\n\n\nimport { Component, Input, Output, EventEmitter, HostListener, AfterViewInit } from '@angular/core';\nimport { PickerOption } from './weui.picker';\n/**\n * 获取Window窗口的高度\n */\nconst getWindowHeight = (): number => {\n    return window.innerHeight;\n};\nexport class WeUIPickerGroup implements AfterViewInit {\n/**\n * 默认参数\n */\ndefaults: any = {\n        offset: 3,           // 列表初始化时的偏移量（列表初始化时，选项是聚焦在中间的，通过offset强制往上挪3项，以达到初始选项是为顶部的那项）\n        rowHeight: 34,       // 列表每一行的高度\n        bodyHeight: 7 * 34,  // picker的高度，用于辅助点击滚动的计算\n        inertiaTime: 150,    // 惯性滑动的保持时间，此值直接影响“灵敏度” (单位：ms)\n        slideDuration: 300   // 惯性滑动的动画时间，表现为最终可视化的效果\n    };\n/**\n * 当前列表组的选项\n */\noptions: PickerOption[] = [];\n/**\n * 初始值\n */\nvalue: any;\n/**\n * 修改事件\n */\nchange = new EventEmitter<any>();\nprivate startTime: number;\nprivate startY: number | null;\nprivate endY: number;\nprivate speed: number;\n/**\n * 选项滚动的距离，用于设置translate3d的Y值\n */\nprivate distance = 0;\n/**\n * @return {?}\n */\npublic get translate3d(): string {\n        return `translate3d(0, ${this.distance}px, 0)`;\n    }\n/**\n * 选项惯性滚动的时间\n */\nprivate duration = 0;\n/**\n * @return {?}\n */\npublic get transition(): string {\n        return `all ${this.duration}ms`;\n    }\nconstructor() {\n\n    }\n/**\n * @return {?}\n */\nngAfterViewInit(): void {\n        setTimeout(() => {\n            this.init();\n        }, 1);\n    }\n/**\n * @return {?}\n */\nforceChange(): void {\n        this.init();\n    }\n/**\n * @param {?} event\n * @return {?}\n */\n_start(event: TouchEvent): void {\n        this.startY = event.changedTouches[0].pageY;\n        this.startTime = +new Date();\n    }\n/**\n * @param {?} event\n * @return {?}\n */\n_move(event: TouchEvent): void {\n        const /** @type {?} */ endTime = +new Date();\n        this.endY = event.changedTouches[0].pageY;\n\n        // 计算滑动的速度: 距离 / 时间\n        const /** @type {?} */ _distance: number = this.endY - (this.startY || 0);\n        this.speed = _distance / (endTime - this.startTime);\n\n        // 重新设置开始时间、开始位置\n        this.startTime = endTime;\n        this.startY = this.endY;\n        this.duration = 0;          // ms\n        this.distance += _distance; // 内容移动的距离\n        // console.log(`速度=${this.speed} px/ms`);\n\n        event.preventDefault();\n    }\n/**\n * @param {?} event\n * @return {?}\n */\n_end(event: TouchEvent): void {\n        if (!this.startY) {\n            return;\n        }\n        this.endY = event.changedTouches[0].pageY;\n/**\n * 思路:\n * 根据最后一次touchmove事件的速度(speed)，判断是否执行惯性滑动；\n * 如果speed大于1、小于5，则根据速度乘以惯性滑动的时间(如150ms)，计算出应该滑动的距离；\n * 如果speed大于5，则按照屏幕的高度(减去列表高度的一半)，作为该滑动的距离。\n */\nconst _speed = Math.abs(this.speed);\n        if (_speed >= 5) {\n            const /** @type {?} */ windowY = getWindowHeight() - (this.defaults.bodyHeight / 2);\n            this.stop(windowY - this.endY);\n        } else if (_speed >= 1) {\n            const /** @type {?} */ diff = this.speed * this.defaults.inertiaTime; // 滑行 150ms,这里直接影响“灵敏度”\n            this.stop(diff);\n        } else {\n            this.stop(0);\n        }\n        this.startY = null;\n    }\n/**\n * @return {?}\n */\ninit(): void {\n        let /** @type {?} */ index = 0;\n        if (this.value) { // 有传入value，则按value找可匹配的选项\n            const /** @type {?} */ len = this.options && this.options.length || 0;\n            for (; index < len; index++) {\n                const /** @type {?} */ option = this.options[index];\n                if (this.value === option.value || this.value['value'] === option.value) {\n                    this.onChange(option, index);\n                    this.distance = (this.defaults.offset - index) * this.defaults.rowHeight;\n                    return; // 已找到匹配选项，直接返回\n                }\n            }\n            console.warn('Picker has not match defaultValue:', this.value);\n        }\n\n        // 没有传入value，或者 有value但是没有匹配的选项\n        index = this._getDefaultIndex(this.options);\n        this.onChange(this.options[index], index);\n        this.distance = this._getDefaultTranslate(this.defaults.offset, this.defaults.rowHeight, this.options);\n    }\n/**\n * 当touch事件结束时，根据惯性滑动计算当前在哪个选项，以及列表滚动的最终距离\n * \n * @param {?} diff 惯性滑动的距离\n * @return {?}\n */\nstop(diff: number): void {\n        let /** @type {?} */ dist = this.distance + diff;\n\n        // 移动到最接近的那一行\n        dist = Math.round(dist / this.defaults.rowHeight) * this.defaults.rowHeight;\n        const /** @type {?} */ max = this._getMax(this.defaults.offset, this.defaults.rowHeight);\n        const /** @type {?} */ min = this._getMin(this.defaults.offset, this.defaults.rowHeight, this.options.length);\n        // console.log(`移动距离: dist=${dist}px`);\n\n        // 不要超过最大值或者最小值\n        dist = Math.max(Math.min(dist, max), min);\n\n        // 如果是 disabled 的就跳过\n        let /** @type {?} */ index = this.defaults.offset - dist / this.defaults.rowHeight;\n        while (!!this.options[index] && this.options[index].disabled) {\n            diff > 0 ? ++index : --index;\n        }\n        dist = (this.defaults.offset - index) * this.defaults.rowHeight;\n\n        this.duration = this.defaults.slideDuration;  // ms\n        this.distance = dist; // px\n\n        // 触发选择事件\n        this.onChange(this.options[index], index);\n    }\n/**\n * 选择某个选项时触发\n * \n * @param {?} option 选中的选项\n * @param {?=} index  该选项在列表中的索引\n * @return {?}\n */\nonChange(option: PickerOption, index?: number): void {\n        this.change.emit(option);\n    }\n/**\n * get max translate\n * \n * @param {?} offset\n * @param {?} rowHeight\n * @return {?}\n */\n_getMax(offset: number, rowHeight: number): number {\n        return offset * rowHeight;\n    }\n/**\n * get min translate\n * \n * @param {?} offset\n * @param {?} rowHeight\n * @param {?} length\n * @return {?}\n */\n_getMin(offset: number, rowHeight: number, length: number): number {\n        return -(rowHeight * (length - offset - 1));\n    }\n/**\n * get index of middle item\n * \n * @param {?} options\n * @return {?}\n */\n_getDefaultIndex(options: any[]): number {\n        let /** @type {?} */ current = Math.floor(options.length / 2);\n        let /** @type {?} */ count = 0;\n        while (!!options[current] && options[current].disabled) {\n            current = ++current % options.length;\n            count++;\n\n            if (count > options.length) {\n                throw new Error('No selectable item.');\n            }\n        }\n\n        return current;\n    }\n/**\n * @param {?} offset\n * @param {?} rowHeight\n * @param {?} options\n * @return {?}\n */\n_getDefaultTranslate(offset: number, rowHeight: number, options: any[]): number {\n        const /** @type {?} */ currentIndex = this._getDefaultIndex(options);\n\n        return (offset - currentIndex) * rowHeight;\n    }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n    selector: 'weui-picker-group',\n    template: `\n        <div class=\"weui-picker__mask\"></div>\n        <div class=\"weui-picker__indicator\"></div>\n        <div class=\"weui-picker__content\" [ngStyle]=\"{\n                '-webkit-transform': translate3d, 'transform': translate3d,\n                '-webkit-transition': transition, 'transition': transition\n            }\">\n            <div class=\"weui-picker__item\" *ngFor=\"let option of options\"\n                [ngClass]=\"{'weui-picker__item_disabled': option.disabled}\">{{option.label}}</div>\n        </div>\n    `\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'options': [{ type: Input },],\n'value': [{ type: Input },],\n'change': [{ type: Output },],\n'_start': [{ type: HostListener, args: ['touchstart', ['$event'], ] },],\n'_move': [{ type: HostListener, args: ['touchmove', ['$event'], ] },],\n'_end': [{ type: HostListener, args: ['touchend', ['$event'], ] },],\n};\n}\n\nfunction WeUIPickerGroup_tsickle_Closure_declarations() {\n/** @type {?} */\nWeUIPickerGroup.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nWeUIPickerGroup.ctorParameters;\n/** @type {?} */\nWeUIPickerGroup.propDecorators;\n/**\n * 默认参数\n * @type {?}\n */\nWeUIPickerGroup.prototype.defaults;\n/**\n * 当前列表组的选项\n * @type {?}\n */\nWeUIPickerGroup.prototype.options;\n/**\n * 初始值\n * @type {?}\n */\nWeUIPickerGroup.prototype.value;\n/**\n * 修改事件\n * @type {?}\n */\nWeUIPickerGroup.prototype.change;\n/** @type {?} */\nWeUIPickerGroup.prototype.startTime;\n/** @type {?} */\nWeUIPickerGroup.prototype.startY;\n/** @type {?} */\nWeUIPickerGroup.prototype.endY;\n/** @type {?} */\nWeUIPickerGroup.prototype.speed;\n/**\n * 选项滚动的距离，用于设置translate3d的Y值\n * @type {?}\n */\nWeUIPickerGroup.prototype.distance;\n/**\n * 选项惯性滚动的时间\n * @type {?}\n */\nWeUIPickerGroup.prototype.duration;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","\n/**\n * 支持的格式：(1) 纯数字；(2)范围: min-max；(3)叠加：mum/step\n */\nconst regex = /^(\\d+)(?:-(\\d+))?(?:\\/(\\d+))?$/g;\n/**\n * 日[1-31]、月[1-12]、周[0-6]（周日-周六）的取值范围\n */\nconst constraints = [[1, 31], [1, 12], [0, 6]];\n/**\n * Schedule\n */\nexport class Schedule {\n/**\n * days of the month\n */\nprivate _dates: number[];\n/**\n * months\n */\nprivate _months: number[];\n/**\n * days of the week\n */\nprivate _days: number[];\n/**\n * current cursor\n */\nprivate _pointer: Date;\n/**\n * 构造\n * @param {?} fields [[日..], [月..], [周..]]\n * @param {?} _start 起始日期\n * @param {?} _end   终止日期\n */\nconstructor(private fields: number[][],\nprivate _start: Date,\nprivate _end: Date) {\n        /**\n         * dayOfMonth\n         * @type {Array}\n         */\n        this._dates = fields[0];\n\n        /**\n         * month\n         * @type {Array}\n         */\n        this._months = fields[1];\n\n        /**\n         * dayOfWeek\n         * @type {Array}\n         */\n        this._days = fields[2];\n\n        /**\n         * cursor\n         * @type {Date}\n         * @private\n         */\n        this._pointer = _start;\n    }\n/**\n * @return {?}\n */\n_findNext(): Date {\n        let /** @type {?} */ next: Date;\n        while (true) {\n            if (this._end.getTime() - this._pointer.getTime() < 0) {\n                throw new Error(`out of range, end is ${this._end}, current is ${this._pointer}`);\n            }\n\n            const /** @type {?} */ month: number = this._pointer.getMonth();\n            const /** @type {?} */ date: number = this._pointer.getDate();\n            const /** @type {?} */ day: number = this._pointer.getDay();\n\n            if (this._months.indexOf(month + 1) === -1) {\n                this._pointer.setMonth(month + 1);\n                this._pointer.setDate(1);\n                continue;\n            }\n\n            if (this._dates.indexOf(date) === -1) {\n                this._pointer.setDate(date + 1);\n                continue;\n            }\n\n            if (this._days.indexOf(day) === -1) {\n                this._pointer.setDate(date + 1);\n                continue;\n            }\n\n            next = new Date(this._pointer.getTime());\n\n            break;\n        }\n        return next;\n    }\n/**\n * fetch next data\n * @return {?}\n */\nnext(): {value: Date, done: boolean} {\n        const /** @type {?} */ value: Date = this._findNext();\n        // move next date\n        this._pointer.setDate(this._pointer.getDate() + 1);\n        return {\n            value: value,\n            done: !this.hasNext()\n        };\n    }\n/**\n * has next\n * @return {?}\n */\nhasNext(): boolean {\n        try {\n            this._findNext();\n            return true;\n        } catch ( /** @type {?} */e) {\n            return false;\n        }\n    }\n}\n\nfunction Schedule_tsickle_Closure_declarations() {\n/**\n * days of the month\n * @type {?}\n */\nSchedule.prototype._dates;\n/**\n * months\n * @type {?}\n */\nSchedule.prototype._months;\n/**\n * days of the week\n * @type {?}\n */\nSchedule.prototype._days;\n/**\n * current cursor\n * @type {?}\n */\nSchedule.prototype._pointer;\n/** @type {?} */\nSchedule.prototype.fields;\n/** @type {?} */\nSchedule.prototype._start;\n/** @type {?} */\nSchedule.prototype._end;\n}\n\n/**\n * 解析表达式，并获得合法的数字的列表，如合法的月份数\n * \n * @param {?} field 日期cron表达式中通过空格分割后的某一部分(日、月、周)的内容\n * @param {?} _constraints 取值约束，如日期为[1,31]\n * @return {?} number[]\n */\nexport function parseField(field: string, _constraints: number[]): number[] {\n    const /** @type {?} */ low: number = _constraints[0];\n    const /** @type {?} */ high: number = _constraints[1];\n    const /** @type {?} */ result: number[] = [];\n\n    // * 号等于最低到最高\n    field = field.replace(/\\*/g, low + '-' + high);\n\n    // 处理 1,2,5-9 这种情况\n    const /** @type {?} */ fields: string[] = field.split(',');\n    const /** @type {?} */ len = fields.length;\n    for (let /** @type {?} */ i = 0; i < len; i++) {\n        const /** @type {?} */ f: string = fields[i];\n        if (f.match(regex)) {\n            f.replace(regex, ($0: string, _lower: string, _upper: string, _step: string): string => {\n                // ref to `cron-parser`\n                const /** @type {?} */ step: number = parseInt(_step, 10) || 1;\n                // Positive integer higher than constraints[0]\n                const /** @type {?} */ lower: number = Math.min(Math.max(low, Math.abs(+_lower)), high);\n\n                // Positive integer lower than constraints[1]\n                const /** @type {?} */ upper: number = _upper ? Math.min(high, Math.abs(+_upper)) : high;\n\n                // Count from the lower barrier to the upper\n                let /** @type {?} */ pointer: number = lower;\n\n                do {\n                    result.push(pointer);\n                    pointer += step;\n                } while (pointer <= upper);\n                return '';\n            });\n        }\n    }\n    return result;\n}\n/**\n * 解析表达式，并返回Schedule对象\n * \n * @param {?} expr  cron表达式，形如: 日期 月份 周。例如：* * * 或 1,2,5-9 1-6 0-6 或 1/2 * * 等\n * @param {?} start 开始日期\n * @param {?} end   介绍日期\n * @return {?}\n */\nexport function parse(expr: string, start: Date, end: Date): Schedule {\n    const /** @type {?} */ atoms: string[] = expr.replace(/^\\s\\s*|\\s\\s*$/g, '').split(/\\s+/);\n    const /** @type {?} */ fields: number[][] = [];\n    atoms.forEach((atom: string, index: number) => {\n        const /** @type {?} */ constraint: number[] = constraints[index];\n        fields.push(parseField(atom, constraint));\n    });\n    return new Schedule(fields, start, end);\n}\n","/**\n * @license\n * Copyright 厦门乾元盛世科技有限公司 All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file.\n */\n\n\nimport { Component, Input, OnInit, AfterViewInit, ViewChildren, QueryList } from '@angular/core';\n\nimport { WeUIPicker, PickerOption } from './weui.picker';\nimport { WeUIPickerGroup } from './weui-picker-group';\nimport { Schedule, parse as parseCron, parseField } from './cron';\n/**\n * 求下一轮的数值\n * \n * @param {?} expr cron 表达式\n * @param {?=} year 年份\n * @param {?=} month 月份，取值范围为：1-12\n * @return {?}\n */\nfunction nexts(expr: string, year?: number, month?: number): PickerOption[] {\n    const /** @type {?} */ result: PickerOption[] = [];\n    const /** @type {?} */ atoms: string[] = expr.replace(/^\\s\\s*|\\s\\s*$/g, '').split(/\\s+/);\n\n    // (1) 根据“年” 求可用的“月”\n    if (!month) {\n        const /** @type {?} */ months: number[] = parseField(atoms[1], [1, 12]);\n        for (let /** @type {?} */ m = 1; m <= 12; m++) {\n            result.push({\n                label: m + '月',\n                value: m,\n                disabled: months.indexOf(m) === -1\n            });\n        }\n        return result;\n    }\n\n    // (2) 根据“年、月” 求可用的“日”\n    const /** @type {?} */ today = new Date();\n    const /** @type {?} */ _year = year || today.getFullYear();\n    const /** @type {?} */ maxDate = getActualMaximumDate(_year, month);\n    const /** @type {?} */ startDt = new Date(_year, month - 1, 1);\n    const /** @type {?} */ endDt = new Date(_year, month - 1, maxDate);\n    const /** @type {?} */ interval: Schedule = parseCron(expr, startDt, endDt);\n\n    const /** @type {?} */ available: number[] = [];\n    let /** @type {?} */ obj: { value: Date, done: boolean };\n    do {\n        obj = interval.next();\n        available.push(obj.value.getDate());\n    } while (!obj.done);\n\n    for (let /** @type {?} */ i = 1; i <= maxDate; i++) {\n        result.push({\n            label: i + '日',\n            value: i,\n            disabled: available.indexOf(i) === -1\n        });\n    }\n    return result;\n}\n/**\n * 根据年、月求当月的最大日期\n * \n * @param {?} year 年份\n * @param {?} month 月份，取值：1-12（1月-12月）\n * @return {?}\n */\nfunction getActualMaximumDate(year: number, month: number): number {\n    const /** @type {?} */ calendar = new Date(year, month - 1, 31);\n    while (calendar.getMonth() !== month - 1) {\n        calendar.setDate(calendar.getDate() - 1);\n    }\n    return calendar.getDate();\n}\n/**\n * 日期选择器\n */\nexport class WeUIDatePicker extends WeUIPicker implements OnInit, AfterViewInit {\n/**\n * cron 表达式，三位，分别是 dayOfMonth[1-31]，month[1-12] 和 dayOfWeek[0-6]（周日-周六）。<br>\n * 格式: 日期 月份 周。例如：* * * 或 1,2,5-9 1-6 0-6 或 1/2 * * 等。默认：* * *。\n */\ncron = '* * *';\n/**\n * 开始日期/年份。取值：<ul>\n * <li>(1)字符串：符合ISO 8601日期格式的字符串，如：2013-01-18 或者 20130118；</li>\n * <li>(2)数值：表示年份，如：2011，则默认加\"-01-01\"在年份之后 </li>\n * <li>(3)Date：JavaScript Date对象 </li>\n * </ul>\n * @param {?} start\n * @return {?}\n */\nset start(start: any) {\n        this._startDate = this._parseDate(start, '-01-01');\n    }\n/**\n * 结束日期/年份。取值：<ul>\n * <li>(1)字符串：符合ISO 8601日期格式的字符串，如：2013-01-18 或者 20130118；</li>\n * <li>(2)数值：表示年份，如：2011，则默认加\"-12-31\"在年份之后 </li>\n * <li>(3)Date：JavaScript Date对象 </li>\n * </ul>\n * @param {?} end\n * @return {?}\n */\nset end(end: any) {\n        this._endDate = this._parseDate(end, '-12-31');\n    }\nprivate _startDate: Date;\nprivate _endDate: Date;\n/**\n * 显示列表\n */\n_groups: QueryList<WeUIPickerGroup>;\n/**\n * 月份选择控件\n */\nprivate monthPicker: WeUIPickerGroup;\n/**\n * 日期选择控件\n */\nprivate datePicker: WeUIPickerGroup;\n/**\n * @param {?} value\n * @param {?} sub\n * @return {?}\n */\nprivate _parseDate(value: any, sub: string): Date {\n        if (typeof value === 'string') {\n            if (value.length === 4) {\n                value = value + sub;\n            }\n            if (/^(\\d{4})-(\\d{2})-(\\d{2})$/.test(value) || /^(\\d{4})(\\d{2})(\\d{2})$/.test(value)) {\n                return new Date(+RegExp.$1, +RegExp.$2 - 1, +RegExp.$3);\n            }\n        }\n        if (typeof value === 'number') {\n            return new Date(value + sub);\n        }\n        return value; // 默认为Date对象\n    }\nconstructor() {\n        super();\n    }\n/**\n * @return {?}\n */\nngOnInit(): void {\n        // 设置初始值\n        const /** @type {?} */ now = new Date();\n        const /** @type {?} */ thisYear = now.getFullYear();\n        if (!this._startDate) {\n            this.start = thisYear - 10;\n        }\n        if (!this._endDate) {\n            this.end = thisYear + 10;\n        }\n        if (this._startDate.getTime() > this._endDate.getTime()) {\n            [this._startDate, this._endDate] = [this._endDate, this._startDate];\n        }\n\n        // 年份列表\n        const /** @type {?} */ years: PickerOption[] = [];\n        const /** @type {?} */ endYear = this._endDate.getFullYear();\n        for (let /** @type {?} */ year = this._startDate.getFullYear(); year <= endYear; year++) {\n            years.push({\n                label: year + '年',\n                value: year\n            });\n        }\n\n        // 渲染数据列表\n        this.menus = [years, [], []];\n    }\n/**\n * @return {?}\n */\nngAfterViewInit(): void {\n        const /** @type {?} */ monthPicker = this._groups.find((group: WeUIPickerGroup, index: number): boolean => {\n            return index === 1;\n        });\n        const /** @type {?} */ datePicker = this._groups.find((group: WeUIPickerGroup, index: number): boolean => {\n            return index === 2;\n        });\n\n        if (monthPicker) {\n            this.monthPicker = monthPicker;\n        }\n        if (datePicker) {\n            this.datePicker = datePicker;\n        }\n\n        // 更新月份、日期列表\n        this._updateMonthPickerList();\n    }\n/**\n * 选择年或月，触发子列表的变更\n * \n * @param {?} option 被选择的选项\n * @param {?} index 哪个列（索引）\n * @return {?}\n */\nonChange(option: PickerOption, index: number): void {\n        if (!option) {\n            return; // 未选择任何值，不触发子列表的变更\n        }\n        super.onChange(option, index);\n\n        // 变更“年份”时，修改月份列表；如果月份的值为2月，则也修改日期列表\n        if (index === 0) {\n            this._updateMonthPickerList();\n        }\n\n        // 变更“月份”时，修改日期列表\n        if (index === 1) {\n            this._updateDatePickerList();\n        }\n    }\n/**\n * @return {?}\n */\nprivate _updateMonthPickerList(): void {\n        if (!this.monthPicker) {\n            return;\n        }\n        if (!this.value || !this.value.length || !this.value[0]) {\n            return;\n        }\n\n        const /** @type {?} */ year: number = this.value[0].value;\n        const /** @type {?} */ months = nexts(this.cron, year);\n\n        const /** @type {?} */ options = this.monthPicker.options;\n        if (months.length !== options.length) {\n            this.monthPicker.options = months;\n            this.monthPicker.forceChange();\n        }\n\n        // 强制日期列表更新\n        this._updateDatePickerList();\n    }\n/**\n * @return {?}\n */\nprivate _updateDatePickerList(): void {\n        if (!this.datePicker) {\n            return;\n        }\n\n        const /** @type {?} */ year: number = this.value[0].value;\n        const /** @type {?} */ month: number = this.value[1].value;\n        const /** @type {?} */ dates = nexts(this.cron, year, month);\n\n        this.value[2] = null; // 清空值\n        this.datePicker.options = dates;\n        this.datePicker.forceChange();\n    }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n    selector: 'weui-date-picker',\n    template: `\n        <div class=\"weui-mask\" (click)=\"onCancel()\"\n            [ngClass]=\"{'weui-animate-fade-in': shown, 'weui-animate-fade-out': !shown}\"></div>\n        <div class=\"weui-picker\"\n            [ngClass]=\"{'weui-animate-slide-up': shown, 'weui-animate-slide-down': !shown}\"\n            (animationend)=\"onAnimationEnd($event)\">\n            <div class=\"weui-picker__hd\">\n                <a href=\"javascript:;\" class=\"weui-picker__action\" (click)=\"onCancel()\">{{cancelText}}  </a>\n                <a href=\"javascript:;\" class=\"weui-picker__action\" (click)=\"onConfirm()\">{{confirmText}}</a>\n            </div>\n            <div class=\"weui-picker__bd\">\n                <weui-picker-group tappable class=\"weui-picker__group\"\n                    *ngFor=\"let options of menus; let i = index;\"\n                    [options]=\"options\" [value]=\"value[i]\" (change)=\"onChange($event, i)\"></weui-picker-group>\n            </div>\n        </div>\n    `,\n    exportAs: 'weuiDatePicker'\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'cron': [{ type: Input },],\n'start': [{ type: Input },],\n'end': [{ type: Input },],\n'_groups': [{ type: ViewChildren, args: [WeUIPickerGroup, ] },],\n};\n}\n\nfunction WeUIDatePicker_tsickle_Closure_declarations() {\n/** @type {?} */\nWeUIDatePicker.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nWeUIDatePicker.ctorParameters;\n/** @type {?} */\nWeUIDatePicker.propDecorators;\n/**\n * cron 表达式，三位，分别是 dayOfMonth[1-31]，month[1-12] 和 dayOfWeek[0-6]（周日-周六）。<br>\n * 格式: 日期 月份 周。例如：* * * 或 1,2,5-9 1-6 0-6 或 1/2 * * 等。默认：* * *。\n * @type {?}\n */\nWeUIDatePicker.prototype.cron;\n/** @type {?} */\nWeUIDatePicker.prototype._startDate;\n/** @type {?} */\nWeUIDatePicker.prototype._endDate;\n/**\n * 显示列表\n * @type {?}\n */\nWeUIDatePicker.prototype._groups;\n/**\n * 月份选择控件\n * @type {?}\n */\nWeUIDatePicker.prototype.monthPicker;\n/**\n * 日期选择控件\n * @type {?}\n */\nWeUIDatePicker.prototype.datePicker;\n}\n\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright 厦门乾元盛世科技有限公司 All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file.\n */\n\n\nimport { Component, Input, HostBinding, Renderer2, ElementRef } from '@angular/core';\nimport { Directive, Host, Optional } from '@angular/core';\n/**\n * 页脚\n */\nexport class WeUIFooter {\n/**\n * 固定在底部\n */\nfixedAtBottom = false;\n/**\n * 基本样式\n */\n_cls_footer = true;\n/**\n * 固定在底部样式\n * @return {?}\n */\nget fixedBottomCls(): boolean {\n        return this.fixedAtBottom;\n    }\nconstructor() {\n\n    }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n    selector: 'weui-footer',\n    template: '<ng-content></ng-content>'\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'fixedAtBottom': [{ type: Input },],\n'_cls_footer': [{ type: HostBinding, args: ['class.weui-footer', ] },],\n'fixedBottomCls': [{ type: HostBinding, args: ['class.weui-footer_fixed-bottom', ] },],\n};\n}\n\nfunction WeUIFooter_tsickle_Closure_declarations() {\n/** @type {?} */\nWeUIFooter.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nWeUIFooter.ctorParameters;\n/** @type {?} */\nWeUIFooter.propDecorators;\n/**\n * 固定在底部\n * @type {?}\n */\nWeUIFooter.prototype.fixedAtBottom;\n/**\n * 基本样式\n * @type {?}\n */\nWeUIFooter.prototype._cls_footer;\n}\n\nexport class WeUIFooterText {\n/**\n * @param {?} _renderer\n * @param {?} _elementRef\n * @param {?} _container\n */\nconstructor(\nprivate _renderer: Renderer2,\nprivate _elementRef: ElementRef,\nprivate _container: WeUIFooter) {\n        if (_container !== null) {\n            _renderer.addClass(_elementRef.nativeElement, 'weui-footer__text');\n        }\n    }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n    // tslint:disable-next-line:directive-selector\n    selector: 'weui-footer-text,[weui-footer-text]'\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Renderer2, },\n{type: ElementRef, },\n{type: WeUIFooter, decorators: [{ type: Optional }, { type: Host }, ]},\n];\n}\n\nfunction WeUIFooterText_tsickle_Closure_declarations() {\n/** @type {?} */\nWeUIFooterText.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nWeUIFooterText.ctorParameters;\n/** @type {?} */\nWeUIFooterText.prototype._renderer;\n/** @type {?} */\nWeUIFooterText.prototype._elementRef;\n/** @type {?} */\nWeUIFooterText.prototype._container;\n}\n\nexport class WeUIFooterLinks {\n/**\n * @param {?} _renderer\n * @param {?} _elementRef\n * @param {?} _container\n */\nconstructor(\nprivate _renderer: Renderer2,\nprivate _elementRef: ElementRef,\nprivate _container: WeUIFooter) {\n        if (_container !== null) {\n            _renderer.addClass(_elementRef.nativeElement, 'weui-footer__links');\n        }\n    }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n    // tslint:disable-next-line:directive-selector\n    selector: 'weui-footer-links,[weui-footer-links]'\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Renderer2, },\n{type: ElementRef, },\n{type: WeUIFooter, decorators: [{ type: Optional }, { type: Host }, ]},\n];\n}\n\nfunction WeUIFooterLinks_tsickle_Closure_declarations() {\n/** @type {?} */\nWeUIFooterLinks.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nWeUIFooterLinks.ctorParameters;\n/** @type {?} */\nWeUIFooterLinks.prototype._renderer;\n/** @type {?} */\nWeUIFooterLinks.prototype._elementRef;\n/** @type {?} */\nWeUIFooterLinks.prototype._container;\n}\n\nexport class WeUIFooterLink {\n/**\n * @param {?} _renderer\n * @param {?} _elementRef\n * @param {?} _container\n */\nconstructor(\nprivate _renderer: Renderer2,\nprivate _elementRef: ElementRef,\nprivate _container: WeUIFooterLinks) {\n        if (_container !== null) {\n            _renderer.addClass(_elementRef.nativeElement, 'weui-footer__link');\n        }\n    }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n    // tslint:disable-next-line:directive-selector\n    selector: 'a'\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Renderer2, },\n{type: ElementRef, },\n{type: WeUIFooterLinks, decorators: [{ type: Optional }, { type: Host }, ]},\n];\n}\n\nfunction WeUIFooterLink_tsickle_Closure_declarations() {\n/** @type {?} */\nWeUIFooterLink.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nWeUIFooterLink.ctorParameters;\n/** @type {?} */\nWeUIFooterLink.prototype._renderer;\n/** @type {?} */\nWeUIFooterLink.prototype._elementRef;\n/** @type {?} */\nWeUIFooterLink.prototype._container;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright 厦门乾元盛世科技有限公司 All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file.\n */\n\n\nimport { Component, Input, Output, EventEmitter } from '@angular/core';\nimport { WeUIFile } from '../uploader/weui.uploader';\nexport class WeUIGallery {\n/**\n * 背景图片，如：url(./images/pic_160.png)\n */\nimage: WeUIFile;\n/**\n * 是否显示删除按钮\n */\ncanDelete = true;\n/**\n * 删除事件\n */\ndelete = new EventEmitter<WeUIFile>();\n/**\n * 已显示否\n */\npublic shown = false;\npublic _show = false;\nconstructor() {\n\n    }\n/**\n * 删除照片\n * @param {?} event\n * @return {?}\n */\ndeleteImage(event: Event): void {\n        this.delete.emit(this.image);\n        event.preventDefault();\n    }\n/**\n * 显示图片\n * @return {?}\n */\nshow(): void {\n        this._show = true;\n        setTimeout(() => { // 解决transition动画与display冲突的问题\n            this.shown = true;\n        }, 10);\n    }\n/**\n * 隐藏图片\n * @return {?}\n */\nhide(): void {\n        this.shown = false;\n        setTimeout(() => {\n            this._show = false;\n        }, 200);\n    }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n    selector: 'weui-gallery',\n    template: `\n        <div class=\"weui-gallery weui-transition-opacity\" [ngClass]=\"{'weui-block': _show, 'weui-fadeIn': shown}\">\n            <span class=\"weui-gallery__img\" [style.background-image]=\"image?.fileURL\"></span>\n            <div class=\"weui-gallery__opr\" *ngIf=\"canDelete\">\n                <a href=\"javascript:;\" class=\"weui-gallery__del\" (click)=\"deleteImage($event)\">\n                    <i class=\"weui-icon-delete weui-icon_gallery-delete\"></i>\n                </a>\n            </div>\n        </div>\n    `\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'image': [{ type: Input },],\n'canDelete': [{ type: Input },],\n'delete': [{ type: Output },],\n};\n}\n\nfunction WeUIGallery_tsickle_Closure_declarations() {\n/** @type {?} */\nWeUIGallery.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nWeUIGallery.ctorParameters;\n/** @type {?} */\nWeUIGallery.propDecorators;\n/**\n * 背景图片，如：url(./images/pic_160.png)\n * @type {?}\n */\nWeUIGallery.prototype.image;\n/**\n * 是否显示删除按钮\n * @type {?}\n */\nWeUIGallery.prototype.canDelete;\n/**\n * 删除事件\n * @type {?}\n */\nWeUIGallery.prototype.delete;\n/**\n * 已显示否\n * @type {?}\n */\nWeUIGallery.prototype.shown;\n/** @type {?} */\nWeUIGallery.prototype._show;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright 厦门乾元盛世科技有限公司 All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file.\n */\n\n\nimport { Component, Input, Output, EventEmitter, Renderer2, ElementRef, HostBinding, ContentChild } from '@angular/core';\nimport { OnChanges, SimpleChanges, forwardRef, ViewEncapsulation, Optional, Inject } from '@angular/core';\nimport { NgControl, NG_VALUE_ACCESSOR, COMPOSITION_BUFFER_MODE } from '@angular/forms';\nimport { WeUIFormControl } from './weui.form.control';\n\nconst /** @type {?} */ WEUI_INPUT_CONTROL_VALUE_ACCESSOR: any = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => WeUIInput),\n    multi: true\n};\nexport class WeUIInput extends WeUIFormControl implements OnChanges {\n/**\n * 控件类型：text, number, tel, email, password, date, datetime-local等\n */\ntype = 'text';\n/**\n * pattern 属性规定用于验证输入字段的模式（正则表达式）。<br>\n * 注释：pattern 属性适用于以下 <input> 类型：text, search, url, telephone, email 以及 password 。\n */\npattern: string;\n/**\n * placeholder 规定帮助用户填写输入字段的提示。<br>\n * 注释：placeholder 属性适用于以下的 <input> 类型：text, search, url, telephone, email 以及 password。\n */\nplaceholder: string;\n/**\n * maxlength 属性规定输入字段的最大长度，以字符个数计。<br>\n * 注释：maxlength 属性与 <input type=\"text\"> 或 <input type=\"password\"> 配合使用。\n */\nmaxlength: string;\n/**\n * minlength 属性规定输入字段的最小长度，以字符个数计。<br>\n * 注释：minlength 属性与 <input type=\"text\"> 或 <input type=\"password\"> 配合使用。\n */\nminlength: string;\n/**\n * max 属性规定输入字段所允许的最大值。<br>\n * 注释：max 和 min 属性适用于以下 <input> 类型：number, range, date, datetime, datetime-local, month, time 以及 week。\n */\nmax: number | Date;\n/**\n * min 属性规定输入字段所允许的最小值。<br>\n * 注释：max 和 min 属性适用于以下 <input> 类型：number, range, date, datetime, datetime-local, month, time 以及 week。\n */\nmin: number | Date;\n/**\n * 是否必填\n */\nrequired = false;\n/**\n * 是否只读\n */\nreadonly = false;\n/**\n * autocomplete 属性规定输入字段是否应该启用自动完成功能。默认为on。<br>\n * 自动完成允许浏览器预测对字段的输入。当用户在字段开始键入时，浏览器基于之前键入过的值，应该显示出在字段中填写的选项。\n */\nautocomplete = true;\n/**\n * 是否监听输入长度\n */\ncountChars = false;\n/**\n * 样式\n */\nbaseCls: string;\n/**\n * 输入域无效时显示告警图标，默认为true\n */\nshowWarnIcon = true;\n/**\n * 行数，当类型是textarea时\n */\nrows = 3;\n/**\n * \\@output {event} Expression to call when the input no longer has focus\n */\nblur: EventEmitter<Event> = new EventEmitter<Event>();\n/**\n * \\@output {event} Expression to call when the input has focus\n */\nfocus: EventEmitter<Event> = new EventEmitter<Event>();\n\n    // 实际输入控件(<input>)\n     state: NgControl;\n/**\n * @param {?} renderer\n * @param {?} elementRef\n * @param {?} compositionMode\n */\nconstructor(\nprivate renderer: Renderer2,\nprivate elementRef: ElementRef,\nprivate compositionMode: boolean) {\n        super(renderer, elementRef, compositionMode);\n    }\n/**\n * 扩展样式，如：weui-cell_example\n */\n_cls_check_label = true;\n/**\n * 扩展样式，如：weui-cell_example\n * @return {?}\n */\nget warnCls(): boolean {\n        return this.shouldWarn();\n    }\n/**\n * @param {?} changes\n * @return {?}\n */\nngOnChanges(changes: SimpleChanges): void {\n        const /** @type {?} */ changed = changes['baseCls'];\n        if (changed) {\n            const /** @type {?} */ _el = /** @type {?} */(( this.elementRef.nativeElement as HTMLElement));\n            if (changed.previousValue) {\n                _el.classList.remove(`weui-cell_${changed.previousValue}`);\n            }\n            if (changed.currentValue) {\n                _el.classList.add(`weui-cell_${changed.currentValue}`);\n            }\n        }\n    }\n/**\n * @return {?}\n */\nshouldWarn(): boolean {\n        return this.state.invalid === true &&\n            (this.state.touched === true || this.state.dirty === true);\n    }\n/**\n * @return {?}\n */\nshouldShowWarnIcon(): boolean {\n        return this.showWarnIcon && this.shouldWarn();\n    }\n/**\n * @param {?} ev\n * @return {?}\n */\nonBlur(ev: UIEvent) {\n        this.onTouched(); // set your control to 'touched'\n        this.blur.emit(ev);\n    }\n/**\n * @param {?} ev\n * @return {?}\n */\nonFocus(ev: UIEvent) {\n        this.focus.emit(ev);\n    }\n/**\n * 统计字符总长度\n * @return {?}\n */\ngetCharCount(): number {\n        return (this._value && this._value.length) || 0;\n    }\n/**\n * 当事件keyup、change时，当字数大于等于maxLength后，禁止输入\n * @param {?} event\n * @return {?}\n */\nonKeyboardEvent(event: KeyboardEvent): void {\n        const /** @type {?} */ maxLen = parseInt(this.maxlength, 10);\n        if (!isNaN(maxLen) && this.getCharCount() >= maxLen) {\n            if (event.keyCode !== 46 && event.keyCode !== 8) {\n                event.preventDefault(); // 禁止输入\n            }\n        }\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n    selector: 'weui-input',\n    template: `\n        <div class=\"weui-cell__hd\">\n            {{label}}<ng-content select=\"label\"></ng-content>\n        </div>\n        <div class=\"weui-cell__bd\">\n            <div class=\"weui-input-area\" *ngIf=\"type !== 'textarea'\">\n                <input #input class=\"weui-input\" [type]=\"type\"\n                    [attr.id]=\"id\" [attr.name]=\"name\" [placeholder]=\"placeholder\"\n                    [attr.maxlength]=\"maxlength\" [attr.minlength]=\"minlength\" [pattern]=\"pattern\"\n                    [attr.max]=\"max\" [attr.min]=\"min\" [required]=\"required\" [readonly]=\"readonly\"\n                    [disabled]=\"disabled\" [autocomplete]=\"autocomplete ? 'on' : 'off'\"\n                    [(ngModel)]=\"innerValue\"\n                    (blur)=\"onBlur($event)\" (focus)=\"onFocus($event)\"\n                    (keydown)=\"onKeyboardEvent($event)\" (keyup)=\"onKeyboardEvent($event)\" />\n                <div *ngIf=\"maxlength && countChars\" class=\"weui-text-counter\">\n                    <span>{{getCharCount()}}</span>/{{maxlength}}\n                </div>\n            </div>\n\n            <div class=\"weui-input-area\" *ngIf=\"type == 'textarea'\">\n                <textarea #textarea class=\"weui-textarea\"\n                    [placeholder]=\"placeholder\" [rows]=\"rows\"\n                    [required]=\"required\" [readonly]=\"readonly\"\n                    [attr.minlength]=\"minlength\" [attr.maxlength]=\"maxlength\"\n                    [(ngModel)]=\"innerValue\"\n                    (keydown)=\"onKeyboardEvent($event)\" (keyup)=\"onKeyboardEvent($event)\"></textarea>\n                <div *ngIf=\"maxlength && countChars\" class=\"weui-textarea-counter\">\n                    <span>{{getCharCount()}}</span>/{{maxlength}}\n                </div>\n            </div>\n        </div>\n        <div class=\"weui-cell__ft\">\n            <ng-content select=\"[weui-last]\"></ng-content>\n            <i class=\"weui-icon-warn\" *ngIf=\"shouldShowWarnIcon()\"></i>\n        </div>\n    `,\n    providers: [WEUI_INPUT_CONTROL_VALUE_ACCESSOR],\n    encapsulation: ViewEncapsulation.None\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Renderer2, },\n{type: ElementRef, },\n{type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [COMPOSITION_BUFFER_MODE, ] }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'type': [{ type: Input },],\n'pattern': [{ type: Input },],\n'placeholder': [{ type: Input },],\n'maxlength': [{ type: Input },],\n'minlength': [{ type: Input },],\n'max': [{ type: Input },],\n'min': [{ type: Input },],\n'required': [{ type: Input },],\n'readonly': [{ type: Input },],\n'autocomplete': [{ type: Input },],\n'countChars': [{ type: Input },],\n'baseCls': [{ type: Input },],\n'showWarnIcon': [{ type: Input },],\n'rows': [{ type: Input },],\n'blur': [{ type: Output },],\n'focus': [{ type: Output },],\n'state': [{ type: ContentChild, args: [NgControl, ] },],\n'_cls_check_label': [{ type: HostBinding, args: ['class.weui-check__label', ] },],\n'warnCls': [{ type: HostBinding, args: ['class.weui-cell_warn', ] },],\n};\n}\n\nfunction WeUIInput_tsickle_Closure_declarations() {\n/** @type {?} */\nWeUIInput.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nWeUIInput.ctorParameters;\n/** @type {?} */\nWeUIInput.propDecorators;\n/**\n * 控件类型：text, number, tel, email, password, date, datetime-local等\n * @type {?}\n */\nWeUIInput.prototype.type;\n/**\n * pattern 属性规定用于验证输入字段的模式（正则表达式）。<br>\n * 注释：pattern 属性适用于以下 <input> 类型：text, search, url, telephone, email 以及 password 。\n * @type {?}\n */\nWeUIInput.prototype.pattern;\n/**\n * placeholder 规定帮助用户填写输入字段的提示。<br>\n * 注释：placeholder 属性适用于以下的 <input> 类型：text, search, url, telephone, email 以及 password。\n * @type {?}\n */\nWeUIInput.prototype.placeholder;\n/**\n * maxlength 属性规定输入字段的最大长度，以字符个数计。<br>\n * 注释：maxlength 属性与 <input type=\"text\"> 或 <input type=\"password\"> 配合使用。\n * @type {?}\n */\nWeUIInput.prototype.maxlength;\n/**\n * minlength 属性规定输入字段的最小长度，以字符个数计。<br>\n * 注释：minlength 属性与 <input type=\"text\"> 或 <input type=\"password\"> 配合使用。\n * @type {?}\n */\nWeUIInput.prototype.minlength;\n/**\n * max 属性规定输入字段所允许的最大值。<br>\n * 注释：max 和 min 属性适用于以下 <input> 类型：number, range, date, datetime, datetime-local, month, time 以及 week。\n * @type {?}\n */\nWeUIInput.prototype.max;\n/**\n * min 属性规定输入字段所允许的最小值。<br>\n * 注释：max 和 min 属性适用于以下 <input> 类型：number, range, date, datetime, datetime-local, month, time 以及 week。\n * @type {?}\n */\nWeUIInput.prototype.min;\n/**\n * 是否必填\n * @type {?}\n */\nWeUIInput.prototype.required;\n/**\n * 是否只读\n * @type {?}\n */\nWeUIInput.prototype.readonly;\n/**\n * autocomplete 属性规定输入字段是否应该启用自动完成功能。默认为on。<br>\n * 自动完成允许浏览器预测对字段的输入。当用户在字段开始键入时，浏览器基于之前键入过的值，应该显示出在字段中填写的选项。\n * @type {?}\n */\nWeUIInput.prototype.autocomplete;\n/**\n * 是否监听输入长度\n * @type {?}\n */\nWeUIInput.prototype.countChars;\n/**\n * 样式\n * @type {?}\n */\nWeUIInput.prototype.baseCls;\n/**\n * 输入域无效时显示告警图标，默认为true\n * @type {?}\n */\nWeUIInput.prototype.showWarnIcon;\n/**\n * 行数，当类型是textarea时\n * @type {?}\n */\nWeUIInput.prototype.rows;\n/**\n * \\@output {event} Expression to call when the input no longer has focus\n * @type {?}\n */\nWeUIInput.prototype.blur;\n/**\n * \\@output {event} Expression to call when the input has focus\n * @type {?}\n */\nWeUIInput.prototype.focus;\n/** @type {?} */\nWeUIInput.prototype.state;\n/**\n * 扩展样式，如：weui-cell_example\n * @type {?}\n */\nWeUIInput.prototype._cls_check_label;\n/** @type {?} */\nWeUIInput.prototype.renderer;\n/** @type {?} */\nWeUIInput.prototype.elementRef;\n/** @type {?} */\nWeUIInput.prototype.compositionMode;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright 厦门乾元盛世科技有限公司 All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file.\n */\n\n\nimport { Component, Renderer2, ElementRef, Input, HostBinding, OnChanges, SimpleChanges } from '@angular/core';\nexport class WeUIItems implements OnChanges {\n/**\n * 控件样式，如：<code>'form'</code>对应的样式类为<code>'weui-cells_form'</code>\n */\nbaseCls: string;\n\n     _cls_cells = true;\n/**\n * @param {?} changes\n * @return {?}\n */\nngOnChanges(changes: SimpleChanges): void {\n        const /** @type {?} */ changed = changes['baseCls'];\n        if (changed) {\n            const /** @type {?} */ _el = /** @type {?} */(( this._elementRef.nativeElement as HTMLElement));\n            if (changed.previousValue) {\n                _el.classList.remove(`weui-cells_${changed.previousValue}`);\n            }\n            if (changed.currentValue) {\n                _el.classList.add(`weui-cells_${changed.currentValue}`);\n            }\n        }\n    }\n/**\n * @param {?} _renderer\n * @param {?} _elementRef\n */\nconstructor(private _renderer: Renderer2,\nprivate _elementRef: ElementRef) {\n\n    }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n    selector: 'weui-items',\n    template: `<ng-content></ng-content>`\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Renderer2, },\n{type: ElementRef, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'baseCls': [{ type: Input },],\n'_cls_cells': [{ type: HostBinding, args: ['class.weui-cells', ] },],\n};\n}\n\nfunction WeUIItems_tsickle_Closure_declarations() {\n/** @type {?} */\nWeUIItems.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nWeUIItems.ctorParameters;\n/** @type {?} */\nWeUIItems.propDecorators;\n/**\n * 控件样式，如：<code>'form'</code>对应的样式类为<code>'weui-cells_form'</code>\n * @type {?}\n */\nWeUIItems.prototype.baseCls;\n/** @type {?} */\nWeUIItems.prototype._cls_cells;\n/** @type {?} */\nWeUIItems.prototype._renderer;\n/** @type {?} */\nWeUIItems.prototype._elementRef;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright 厦门乾元盛世科技有限公司 All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file.\n */\n\n\nimport { Component, Input, Renderer2, ElementRef, HostBinding, OnChanges, SimpleChanges } from '@angular/core';\nexport class WeUIItem implements OnChanges {\n/**\n * 样式\n */\nbaseCls: string;\n\n\n     _cls_cell = true;\n     _cls_item = true;\n/**\n * @param {?} changes\n * @return {?}\n */\nngOnChanges(changes: SimpleChanges): void {\n        const /** @type {?} */ changed = changes['baseCls'];\n        if (changed) {\n            const /** @type {?} */ _el = /** @type {?} */(( this._elementRef.nativeElement as HTMLElement));\n            if (changed.previousValue) {\n                _el.classList.remove(`weui-cell_${changed.previousValue}`);\n            }\n            if (changed.currentValue) {\n                _el.classList.add(`weui-cell_${changed.currentValue}`);\n            }\n        }\n    }\n/**\n * @param {?} _renderer\n * @param {?} _elementRef\n */\nconstructor(private _renderer: Renderer2,\nprivate _elementRef: ElementRef) {\n\n    }\n/**\n * @param {?} cls\n * @return {?}\n */\naddClass(cls: string): void {\n        this._renderer.addClass(this._elementRef.nativeElement, cls);\n    }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n    selector: 'weui-item',\n    template: `\n        <div class=\"weui-cell__hd\">\n            <ng-content select=\"[weui-start]\"></ng-content>\n        </div>\n        <div class=\"weui-cell__bd\">\n            <ng-content select=\"[weui-content]\"></ng-content>\n            <ng-content></ng-content>\n        </div>\n        <div class=\"weui-cell__ft\">\n            <ng-content select=\"[weui-last]\"></ng-content>\n        </div>\n    `\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Renderer2, },\n{type: ElementRef, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'baseCls': [{ type: Input },],\n'_cls_cell': [{ type: HostBinding, args: ['class.weui-cell', ] },],\n'_cls_item': [{ type: HostBinding, args: ['class.weui-item', ] },],\n};\n}\n\nfunction WeUIItem_tsickle_Closure_declarations() {\n/** @type {?} */\nWeUIItem.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nWeUIItem.ctorParameters;\n/** @type {?} */\nWeUIItem.propDecorators;\n/**\n * 样式\n * @type {?}\n */\nWeUIItem.prototype.baseCls;\n/** @type {?} */\nWeUIItem.prototype._cls_cell;\n/** @type {?} */\nWeUIItem.prototype._cls_item;\n/** @type {?} */\nWeUIItem.prototype._renderer;\n/** @type {?} */\nWeUIItem.prototype._elementRef;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright 厦门乾元盛世科技有限公司 All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file.\n */\n\n\nimport { Component, Renderer2, ElementRef, Input, HostBinding, OnChanges, SimpleChanges } from '@angular/core';\nimport { DomSanitizer, SafeUrl } from '@angular/platform-browser';\nexport class WeUILink implements OnChanges {\n/**\n * 不显示最右边的箭头。默认为false，即：显示箭头。\n */\nnoPushArrow = false;\n/**\n * 样式\n */\nbaseCls: string;\n/**\n * 链接\n * @param {?} _href\n * @return {?}\n */\nset href(_href: string) {\n        this._href = this.sanitizer.bypassSecurityTrustUrl(_href);\n    }\n\n    _href: SafeUrl;\n\n     _cls_cell = true;\n     _cls_item = true;\n     _cls_cell_access = true;\n/**\n * @return {?}\n */\nget _cls_cell_access_noarrow() {\n        return this.noPushArrow;\n    }\n/**\n * @param {?} changes\n * @return {?}\n */\nngOnChanges(changes: SimpleChanges): void {\n        const /** @type {?} */ changed = changes['baseCls'];\n        if (changed) {\n            const /** @type {?} */ _el = /** @type {?} */(( this._elementRef.nativeElement as HTMLElement));\n            if (changed.previousValue) {\n                _el.classList.remove(`weui-cell_${changed.previousValue}`);\n            }\n            if (changed.currentValue) {\n                _el.classList.add(`weui-cell_${changed.currentValue}`);\n            }\n        }\n    }\n/**\n * @param {?} _renderer\n * @param {?} _elementRef\n * @param {?} sanitizer\n */\nconstructor(\nprivate _renderer: Renderer2,\nprivate _elementRef: ElementRef,\nprivate sanitizer: DomSanitizer) {\n\n    }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n    selector: 'weui-link',\n    template: `\n        <a class=\"weui-cell_access\" [href]=\"_href\">\n            <div class=\"weui-cell__hd\">\n                <ng-content select=\"[weui-start]\"></ng-content>\n            </div>\n            <div class=\"weui-cell__bd\">\n                <ng-content select=\"[weui-content]\"></ng-content>\n                <ng-content></ng-content>\n            </div>\n            <div class=\"weui-cell__ft\">\n                <ng-content select=\"[weui-last]\"></ng-content>\n            </div>\n        </a>\n    `\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Renderer2, },\n{type: ElementRef, },\n{type: DomSanitizer, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'noPushArrow': [{ type: Input },],\n'baseCls': [{ type: Input },],\n'href': [{ type: Input },],\n'_cls_cell': [{ type: HostBinding, args: ['class.weui-cell', ] },],\n'_cls_item': [{ type: HostBinding, args: ['class.weui-item', ] },],\n'_cls_cell_access': [{ type: HostBinding, args: ['class.weui-cell_access', ] },],\n'_cls_cell_access_noarrow': [{ type: HostBinding, args: ['class.weui-cell_access-noarrow', ] },],\n};\n}\n\nfunction WeUILink_tsickle_Closure_declarations() {\n/** @type {?} */\nWeUILink.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nWeUILink.ctorParameters;\n/** @type {?} */\nWeUILink.propDecorators;\n/**\n * 不显示最右边的箭头。默认为false，即：显示箭头。\n * @type {?}\n */\nWeUILink.prototype.noPushArrow;\n/**\n * 样式\n * @type {?}\n */\nWeUILink.prototype.baseCls;\n/** @type {?} */\nWeUILink.prototype._href;\n/** @type {?} */\nWeUILink.prototype._cls_cell;\n/** @type {?} */\nWeUILink.prototype._cls_item;\n/** @type {?} */\nWeUILink.prototype._cls_cell_access;\n/** @type {?} */\nWeUILink.prototype._renderer;\n/** @type {?} */\nWeUILink.prototype._elementRef;\n/** @type {?} */\nWeUILink.prototype.sanitizer;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright 厦门乾元盛世科技有限公司 All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file.\n */\n\n\nimport { Component, Input } from '@angular/core';\n/**\n * 加载更多\n */\nexport class WeUILoadmore {\n/**\n * 分割线\n */\nline: any;\n/**\n * 点\n */\ndot: any;\n/**\n * 正在加载\n */\nloading = false;\nconstructor() {\n\n    }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n    selector: 'weui-loadmore',\n    template: `\n        <div class=\"weui-loadmore\" [ngClass]=\"{\n                'weui-loadmore_line': line !== undefined && line !== null,\n                'weui-loadmore_dot': dot !== undefined && dot !== null }\">\n            <i class=\"weui-loading\" *ngIf=\"loading\"></i>\n            <span class=\"weui-loadmore__tips\"><ng-content></ng-content></span>\n        </div>\n    `\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'line': [{ type: Input },],\n'dot': [{ type: Input },],\n'loading': [{ type: Input },],\n};\n}\n\nfunction WeUILoadmore_tsickle_Closure_declarations() {\n/** @type {?} */\nWeUILoadmore.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nWeUILoadmore.ctorParameters;\n/** @type {?} */\nWeUILoadmore.propDecorators;\n/**\n * 分割线\n * @type {?}\n */\nWeUILoadmore.prototype.line;\n/**\n * 点\n * @type {?}\n */\nWeUILoadmore.prototype.dot;\n/**\n * 正在加载\n * @type {?}\n */\nWeUILoadmore.prototype.loading;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { OperatorFunction, MonoTypeOperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function scan<T>(accumulator: (acc: T, value: T, index: number) => T, seed?: T): MonoTypeOperatorFunction<T>;\nexport function scan<T>(accumulator: (acc: T[], value: T, index: number) => T[], seed?: T[]): OperatorFunction<T, T[]>;\nexport function scan<T, R>(accumulator: (acc: R, value: T, index: number) => R, seed?: R): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Applies an accumulator function over the source Observable, and returns each\n * intermediate result, with an optional seed value.\n *\n * <span class=\"informal\">It's like {@link reduce}, but emits the current\n * accumulation whenever the source emits a value.</span>\n *\n * <img src=\"./img/scan.png\" width=\"100%\">\n *\n * Combines together all values emitted on the source, using an accumulator\n * function that knows how to join a new source value into the accumulation from\n * the past. Is similar to {@link reduce}, but emits the intermediate\n * accumulations.\n *\n * Returns an Observable that applies a specified `accumulator` function to each\n * item emitted by the source Observable. If a `seed` value is specified, then\n * that value will be used as the initial value for the accumulator. If no seed\n * value is specified, the first item of the source is used as the seed.\n *\n * @example <caption>Count the number of click events</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var ones = clicks.mapTo(1);\n * var seed = 0;\n * var count = ones.scan((acc, one) => acc + one, seed);\n * count.subscribe(x => console.log(x));\n *\n * @see {@link expand}\n * @see {@link mergeScan}\n * @see {@link reduce}\n *\n * @param {function(acc: R, value: T, index: number): R} accumulator\n * The accumulator function called on each source value.\n * @param {T|R} [seed] The initial accumulation value.\n * @return {Observable<R>} An observable of the accumulated values.\n * @method scan\n * @owner Observable\n */\nexport function scan<T, R>(accumulator: (acc: R, value: T, index: number) => R, seed?: T | R): OperatorFunction<T, R> {\n  let hasSeed = false;\n  // providing a seed of `undefined` *should* be valid and trigger\n  // hasSeed! so don't use `seed !== undefined` checks!\n  // For this reason, we have to check it here at the original call site\n  // otherwise inside Operator/Subscriber we won't know if `undefined`\n  // means they didn't provide anything or if they literally provided `undefined`\n  if (arguments.length >= 2) {\n    hasSeed = true;\n  }\n\n  return function scanOperatorFunction(source: Observable<T>): Observable<R> {\n    return source.lift(new ScanOperator(accumulator, seed, hasSeed));\n  };\n}\n\nclass ScanOperator<T, R> implements Operator<T, R> {\n  constructor(private accumulator: (acc: R, value: T, index: number) => R, private seed?: T | R, private hasSeed: boolean = false) {}\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new ScanSubscriber(subscriber, this.accumulator, this.seed, this.hasSeed));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass ScanSubscriber<T, R> extends Subscriber<T> {\n  private index: number = 0;\n\n  get seed(): T | R {\n    return this._seed;\n  }\n\n  set seed(value: T | R) {\n    this.hasSeed = true;\n    this._seed = value;\n  }\n\n  constructor(destination: Subscriber<R>, private accumulator: (acc: R, value: T, index: number) => R, private _seed: T | R,\n              private hasSeed: boolean) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    if (!this.hasSeed) {\n      this.seed = value;\n      this.destination.next(value);\n    } else {\n      return this._tryNext(value);\n    }\n  }\n\n  private _tryNext(value: T): void {\n    const index = this.index++;\n    let result: any;\n    try {\n      result = this.accumulator(<R>this.seed, value, index);\n    } catch (err) {\n      this.destination.error(err);\n    }\n    this.seed = result;\n    this.destination.next(result);\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { ArgumentOutOfRangeError } from '../util/ArgumentOutOfRangeError';\nimport { EmptyObservable } from '../observable/EmptyObservable';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Emits only the last `count` values emitted by the source Observable.\n *\n * <span class=\"informal\">Remembers the latest `count` values, then emits those\n * only when the source completes.</span>\n *\n * <img src=\"./img/takeLast.png\" width=\"100%\">\n *\n * `takeLast` returns an Observable that emits at most the last `count` values\n * emitted by the source Observable. If the source emits fewer than `count`\n * values then all of its values are emitted. This operator must wait until the\n * `complete` notification emission from the source in order to emit the `next`\n * values on the output Observable, because otherwise it is impossible to know\n * whether or not more values will be emitted on the source. For this reason,\n * all values are emitted synchronously, followed by the complete notification.\n *\n * @example <caption>Take the last 3 values of an Observable with many values</caption>\n * var many = Rx.Observable.range(1, 100);\n * var lastThree = many.takeLast(3);\n * lastThree.subscribe(x => console.log(x));\n *\n * @see {@link take}\n * @see {@link takeUntil}\n * @see {@link takeWhile}\n * @see {@link skip}\n *\n * @throws {ArgumentOutOfRangeError} When using `takeLast(i)`, it delivers an\n * ArgumentOutOrRangeError to the Observer's `error` callback if `i < 0`.\n *\n * @param {number} count The maximum number of values to emit from the end of\n * the sequence of values emitted by the source Observable.\n * @return {Observable<T>} An Observable that emits at most the last count\n * values emitted by the source Observable.\n * @method takeLast\n * @owner Observable\n */\nexport function takeLast<T>(count: number): MonoTypeOperatorFunction<T> {\n  return function takeLastOperatorFunction(source: Observable<T>): Observable<T> {\n    if (count === 0) {\n      return new EmptyObservable<T>();\n    } else {\n      return source.lift(new TakeLastOperator(count));\n    }\n  };\n}\n\nclass TakeLastOperator<T> implements Operator<T, T> {\n  constructor(private total: number) {\n    if (this.total < 0) {\n      throw new ArgumentOutOfRangeError;\n    }\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new TakeLastSubscriber(subscriber, this.total));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass TakeLastSubscriber<T> extends Subscriber<T> {\n  private ring: Array<T> = new Array();\n  private count: number = 0;\n\n  constructor(destination: Subscriber<T>, private total: number) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    const ring = this.ring;\n    const total = this.total;\n    const count = this.count++;\n\n    if (ring.length < total) {\n      ring.push(value);\n    } else {\n      const index = count % total;\n      ring[index] = value;\n    }\n  }\n\n  protected _complete(): void {\n    const destination = this.destination;\n    let count = this.count;\n\n    if (count > 0) {\n      const total = this.count >= this.total ? this.total : this.count;\n      const ring  = this.ring;\n\n      for (let i = 0; i < total; i++) {\n        const idx = (count++) % total;\n        destination.next(ring[idx]);\n      }\n    }\n\n    destination.complete();\n  }\n}\n","import { Observable, ObservableInput } from '../Observable';\nimport { Operator } from '../Operator';\nimport { PartialObserver } from '../Observer';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function mergeMapTo<T, R>(observable: ObservableInput<R>, concurrent?: number): OperatorFunction<T, R>;\nexport function mergeMapTo<T, I, R>(observable: ObservableInput<I>, resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R, concurrent?: number): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Projects each source value to the same Observable which is merged multiple\n * times in the output Observable.\n *\n * <span class=\"informal\">It's like {@link mergeMap}, but maps each value always\n * to the same inner Observable.</span>\n *\n * <img src=\"./img/mergeMapTo.png\" width=\"100%\">\n *\n * Maps each source value to the given Observable `innerObservable` regardless\n * of the source value, and then merges those resulting Observables into one\n * single Observable, which is the output Observable.\n *\n * @example <caption>For each click event, start an interval Observable ticking every 1 second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.mergeMapTo(Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link concatMapTo}\n * @see {@link merge}\n * @see {@link mergeAll}\n * @see {@link mergeMap}\n * @see {@link mergeScan}\n * @see {@link switchMapTo}\n *\n * @param {ObservableInput} innerObservable An Observable to replace each value from\n * the source Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n * Observables being subscribed to concurrently.\n * @return {Observable} An Observable that emits items from the given\n * `innerObservable` (and optionally transformed through `resultSelector`) every\n * time a value is emitted on the source Observable.\n * @method mergeMapTo\n * @owner Observable\n */\nexport function mergeMapTo<T, I, R>(innerObservable: Observable<I>,\n                                    resultSelector?: ((outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R) | number,\n                                    concurrent: number = Number.POSITIVE_INFINITY): OperatorFunction<T, R> {\n  if (typeof resultSelector === 'number') {\n    concurrent = <number>resultSelector;\n    resultSelector = null;\n  }\n  return (source: Observable<T>) => source.lift(new MergeMapToOperator(innerObservable, <any>resultSelector, concurrent));\n}\n\n// TODO: Figure out correct signature here: an Operator<Observable<T>, R>\n//       needs to implement call(observer: Subscriber<R>): Subscriber<Observable<T>>\nexport class MergeMapToOperator<T, I, R> implements Operator<Observable<T>, R> {\n  constructor(private ish: ObservableInput<I>,\n              private resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R,\n              private concurrent: number = Number.POSITIVE_INFINITY) {\n  }\n\n  call(observer: Subscriber<R>, source: any): any {\n    return source.subscribe(new MergeMapToSubscriber(observer, this.ish, this.resultSelector, this.concurrent));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class MergeMapToSubscriber<T, I, R> extends OuterSubscriber<T, I> {\n  private hasCompleted: boolean = false;\n  private buffer: T[] = [];\n  private active: number = 0;\n  protected index: number = 0;\n\n  constructor(destination: Subscriber<R>,\n              private ish: ObservableInput<I>,\n              private resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R,\n              private concurrent: number = Number.POSITIVE_INFINITY) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    if (this.active < this.concurrent) {\n      const resultSelector = this.resultSelector;\n      const index = this.index++;\n      const ish = this.ish;\n      const destination = this.destination;\n\n      this.active++;\n      this._innerSub(ish, destination, resultSelector, value, index);\n    } else {\n      this.buffer.push(value);\n    }\n  }\n\n  private _innerSub(ish: ObservableInput<I>,\n                    destination: PartialObserver<I>,\n                    resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R,\n                    value: T,\n                    index: number): void {\n    this.add(subscribeToResult<T, I>(this, ish, value, index));\n  }\n\n  protected _complete(): void {\n    this.hasCompleted = true;\n    if (this.active === 0 && this.buffer.length === 0) {\n      this.destination.complete();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: I,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, I>): void {\n    const { resultSelector, destination } = this;\n    if (resultSelector) {\n      this.trySelectResult(outerValue, innerValue, outerIndex, innerIndex);\n    } else {\n      destination.next(innerValue);\n    }\n  }\n\n  private trySelectResult(outerValue: T, innerValue: I,\n                          outerIndex: number, innerIndex: number): void {\n    const { resultSelector, destination } = this;\n    let result: R;\n    try {\n      result = resultSelector(outerValue, innerValue, outerIndex, innerIndex);\n    } catch (err) {\n      destination.error(err);\n      return;\n    }\n\n    destination.next(result);\n  }\n\n  notifyError(err: any): void {\n    this.destination.error(err);\n  }\n\n  notifyComplete(innerSub: Subscription): void {\n    const buffer = this.buffer;\n    this.remove(innerSub);\n    this.active--;\n    if (buffer.length > 0) {\n      this._next(buffer.shift());\n    } else if (this.active === 0 && this.hasCompleted) {\n      this.destination.complete();\n    }\n  }\n}\n","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Applies an accumulator function over the source Observable where the\n * accumulator function itself returns an Observable, then each intermediate\n * Observable returned is merged into the output Observable.\n *\n * <span class=\"informal\">It's like {@link scan}, but the Observables returned\n * by the accumulator are merged into the outer Observable.</span>\n *\n * @example <caption>Count the number of click events</caption>\n * const click$ = Rx.Observable.fromEvent(document, 'click');\n * const one$ = click$.mapTo(1);\n * const seed = 0;\n * const count$ = one$.mergeScan((acc, one) => Rx.Observable.of(acc + one), seed);\n * count$.subscribe(x => console.log(x));\n *\n * // Results:\n * 1\n * 2\n * 3\n * 4\n * // ...and so on for each click\n *\n * @param {function(acc: R, value: T): Observable<R>} accumulator\n * The accumulator function called on each source value.\n * @param seed The initial accumulation value.\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of\n * input Observables being subscribed to concurrently.\n * @return {Observable<R>} An observable of the accumulated values.\n * @method mergeScan\n * @owner Observable\n */\nexport function mergeScan<T, R>(accumulator: (acc: R, value: T) => Observable<R>,\n                                seed: R,\n                                concurrent: number = Number.POSITIVE_INFINITY): OperatorFunction<T, R> {\n  return (source: Observable<T>) => source.lift(new MergeScanOperator(accumulator, seed, concurrent));\n}\n\nexport class MergeScanOperator<T, R> implements Operator<T, R> {\n  constructor(private accumulator: (acc: R, value: T) => Observable<R>,\n              private seed: R,\n              private concurrent: number) {\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new MergeScanSubscriber(\n      subscriber, this.accumulator, this.seed, this.concurrent\n    ));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class MergeScanSubscriber<T, R> extends OuterSubscriber<T, R> {\n  private hasValue: boolean = false;\n  private hasCompleted: boolean = false;\n  private buffer: Observable<any>[] = [];\n  private active: number = 0;\n  protected index: number = 0;\n\n  constructor(destination: Subscriber<R>,\n              private accumulator: (acc: R, value: T) => Observable<R>,\n              private acc: R,\n              private concurrent: number) {\n    super(destination);\n  }\n\n  protected _next(value: any): void {\n    if (this.active < this.concurrent) {\n      const index = this.index++;\n      const ish = tryCatch(this.accumulator)(this.acc, value);\n      const destination = this.destination;\n      if (ish === errorObject) {\n        destination.error(errorObject.e);\n      } else {\n        this.active++;\n        this._innerSub(ish, value, index);\n      }\n    } else {\n      this.buffer.push(value);\n    }\n  }\n\n  private _innerSub(ish: any, value: T, index: number): void {\n    this.add(subscribeToResult<T, R>(this, ish, value, index));\n  }\n\n  protected _complete(): void {\n    this.hasCompleted = true;\n    if (this.active === 0 && this.buffer.length === 0) {\n      if (this.hasValue === false) {\n        this.destination.next(this.acc);\n      }\n      this.destination.complete();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    const { destination } = this;\n    this.acc = innerValue;\n    this.hasValue = true;\n    destination.next(innerValue);\n  }\n\n  notifyComplete(innerSub: Subscription): void {\n    const buffer = this.buffer;\n    this.remove(innerSub);\n    this.active--;\n    if (buffer.length > 0) {\n      this._next(buffer.shift());\n    } else if (this.active === 0 && this.hasCompleted) {\n      if (this.hasValue === false) {\n        this.destination.next(this.acc);\n      }\n      this.destination.complete();\n    }\n  }\n}\n","import { Observable, ObservableInput } from '../Observable';\nimport { FromObservable } from '../observable/FromObservable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { isArray } from '../util/isArray';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function onErrorResumeNext<T, R>(v: ObservableInput<R>): OperatorFunction<T, R>;\nexport function onErrorResumeNext<T, T2, T3, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>): OperatorFunction<T, R>;\nexport function onErrorResumeNext<T, T2, T3, T4, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>): OperatorFunction<T, R>;\nexport function onErrorResumeNext<T, T2, T3, T4, T5, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>): OperatorFunction<T, R>;\nexport function onErrorResumeNext<T, T2, T3, T4, T5, T6, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>): OperatorFunction<T, R> ;\nexport function onErrorResumeNext<T, R>(...observables: Array<ObservableInput<any> | ((...values: Array<any>) => R)>): OperatorFunction<T, R>;\nexport function onErrorResumeNext<T, R>(array: ObservableInput<any>[]): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * When any of the provided Observable emits an complete or error notification, it immediately subscribes to the next one\n * that was passed.\n *\n * <span class=\"informal\">Execute series of Observables no matter what, even if it means swallowing errors.</span>\n *\n * <img src=\"./img/onErrorResumeNext.png\" width=\"100%\">\n *\n * `onErrorResumeNext` is an operator that accepts a series of Observables, provided either directly as\n * arguments or as an array. If no single Observable is provided, returned Observable will simply behave the same\n * as the source.\n *\n * `onErrorResumeNext` returns an Observable that starts by subscribing and re-emitting values from the source Observable.\n * When its stream of values ends - no matter if Observable completed or emitted an error - `onErrorResumeNext`\n * will subscribe to the first Observable that was passed as an argument to the method. It will start re-emitting\n * its values as well and - again - when that stream ends, `onErrorResumeNext` will proceed to subscribing yet another\n * Observable in provided series, no matter if previous Observable completed or ended with an error. This will\n * be happening until there is no more Observables left in the series, at which point returned Observable will\n * complete - even if the last subscribed stream ended with an error.\n *\n * `onErrorResumeNext` can be therefore thought of as version of {@link concat} operator, which is more permissive\n * when it comes to the errors emitted by its input Observables. While `concat` subscribes to the next Observable\n * in series only if previous one successfully completed, `onErrorResumeNext` subscribes even if it ended with\n * an error.\n *\n * Note that you do not get any access to errors emitted by the Observables. In particular do not\n * expect these errors to appear in error callback passed to {@link subscribe}. If you want to take\n * specific actions based on what error was emitted by an Observable, you should try out {@link catch} instead.\n *\n *\n * @example <caption>Subscribe to the next Observable after map fails</caption>\n * Rx.Observable.of(1, 2, 3, 0)\n *   .map(x => {\n *       if (x === 0) { throw Error(); }\n         return 10 / x;\n *   })\n *   .onErrorResumeNext(Rx.Observable.of(1, 2, 3))\n *   .subscribe(\n *     val => console.log(val),\n *     err => console.log(err),          // Will never be called.\n *     () => console.log('that\\'s it!')\n *   );\n *\n * // Logs:\n * // 10\n * // 5\n * // 3.3333333333333335\n * // 1\n * // 2\n * // 3\n * // \"that's it!\"\n *\n * @see {@link concat}\n * @see {@link catch}\n *\n * @param {...ObservableInput} observables Observables passed either directly or as an array.\n * @return {Observable} An Observable that emits values from source Observable, but - if it errors - subscribes\n * to the next passed Observable and so on, until it completes or runs out of Observables.\n * @method onErrorResumeNext\n * @owner Observable\n */\n\nexport function onErrorResumeNext<T, R>(...nextSources: Array<ObservableInput<any> |\n                                                       Array<ObservableInput<any>> |\n                                                       ((...values: Array<any>) => R)>): OperatorFunction<T, R> {\n  if (nextSources.length === 1 && isArray(nextSources[0])) {\n    nextSources = <Array<Observable<any>>>nextSources[0];\n  }\n\n  return (source: Observable<T>) => source.lift(new OnErrorResumeNextOperator<T, R>(nextSources));\n}\n\n/* tslint:disable:max-line-length */\nexport function onErrorResumeNextStatic<R>(v: ObservableInput<R>): Observable<R>;\nexport function onErrorResumeNextStatic<T2, T3, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>): Observable<R>;\nexport function onErrorResumeNextStatic<T2, T3, T4, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>): Observable<R>;\nexport function onErrorResumeNextStatic<T2, T3, T4, T5, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>): Observable<R>;\nexport function onErrorResumeNextStatic<T2, T3, T4, T5, T6, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>): Observable<R>;\n\nexport function onErrorResumeNextStatic<R>(...observables: Array<ObservableInput<any> | ((...values: Array<any>) => R)>): Observable<R>;\nexport function onErrorResumeNextStatic<R>(array: ObservableInput<any>[]): Observable<R>;\n/* tslint:enable:max-line-length */\n\nexport function onErrorResumeNextStatic<T, R>(...nextSources: Array<ObservableInput<any> |\n                                                              Array<ObservableInput<any>> |\n                                                              ((...values: Array<any>) => R)>): Observable<R> {\n  let source: ObservableInput<any> = null;\n\n  if (nextSources.length === 1 && isArray(nextSources[0])) {\n    nextSources = <Array<ObservableInput<any>>>nextSources[0];\n  }\n  source = nextSources.shift();\n\n  return new FromObservable(source, null).lift(new OnErrorResumeNextOperator<T, R>(nextSources));\n}\n\nclass OnErrorResumeNextOperator<T, R> implements Operator<T, R> {\n  constructor(private nextSources: Array<ObservableInput<any>>) {\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new OnErrorResumeNextSubscriber(subscriber, this.nextSources));\n  }\n}\n\nclass OnErrorResumeNextSubscriber<T, R> extends OuterSubscriber<T, R> {\n  constructor(protected destination: Subscriber<T>,\n              private nextSources: Array<ObservableInput<any>>) {\n    super(destination);\n  }\n\n  notifyError(error: any, innerSub: InnerSubscriber<T, any>): void {\n    this.subscribeToNextSource();\n  }\n\n  notifyComplete(innerSub: InnerSubscriber<T, any>): void {\n    this.subscribeToNextSource();\n  }\n\n  protected _error(err: any): void {\n    this.subscribeToNextSource();\n  }\n\n  protected _complete(): void {\n    this.subscribeToNextSource();\n  }\n\n  private subscribeToNextSource(): void {\n    const next = this.nextSources.shift();\n    if (next) {\n      this.add(subscribeToResult(this, next));\n    } else {\n      this.destination.complete();\n    }\n  }\n}\n","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Groups pairs of consecutive emissions together and emits them as an array of\n * two values.\n *\n * <span class=\"informal\">Puts the current value and previous value together as\n * an array, and emits that.</span>\n *\n * <img src=\"./img/pairwise.png\" width=\"100%\">\n *\n * The Nth emission from the source Observable will cause the output Observable\n * to emit an array [(N-1)th, Nth] of the previous and the current value, as a\n * pair. For this reason, `pairwise` emits on the second and subsequent\n * emissions from the source Observable, but not on the first emission, because\n * there is no previous value in that case.\n *\n * @example <caption>On every click (starting from the second), emit the relative distance to the previous click</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var pairs = clicks.pairwise();\n * var distance = pairs.map(pair => {\n *   var x0 = pair[0].clientX;\n *   var y0 = pair[0].clientY;\n *   var x1 = pair[1].clientX;\n *   var y1 = pair[1].clientY;\n *   return Math.sqrt(Math.pow(x0 - x1, 2) + Math.pow(y0 - y1, 2));\n * });\n * distance.subscribe(x => console.log(x));\n *\n * @see {@link buffer}\n * @see {@link bufferCount}\n *\n * @return {Observable<Array<T>>} An Observable of pairs (as arrays) of\n * consecutive values from the source Observable.\n * @method pairwise\n * @owner Observable\n */\nexport function pairwise<T>(): OperatorFunction<T, [T, T]> {\n  return (source: Observable<T>) => source.lift(new PairwiseOperator());\n}\n\nclass PairwiseOperator<T> implements Operator<T, [T, T]> {\n  call(subscriber: Subscriber<[T, T]>, source: any): any {\n    return source.subscribe(new PairwiseSubscriber(subscriber));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass PairwiseSubscriber<T> extends Subscriber<T> {\n  private prev: T;\n  private hasPrev: boolean = false;\n\n  constructor(destination: Subscriber<[T, T]>) {\n    super(destination);\n  }\n\n  _next(value: T): void {\n    if (this.hasPrev) {\n      this.destination.next([this.prev, value]);\n    } else {\n      this.hasPrev = true;\n    }\n\n    this.prev = value;\n  }\n}\n","import { Subject } from './Subject';\nimport { Subscriber } from './Subscriber';\nimport { Subscription, ISubscription } from './Subscription';\nimport { ObjectUnsubscribedError } from './util/ObjectUnsubscribedError';\n\n/**\n * @class BehaviorSubject<T>\n */\nexport class BehaviorSubject<T> extends Subject<T> {\n\n  constructor(private _value: T) {\n    super();\n  }\n\n  get value(): T {\n    return this.getValue();\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): Subscription {\n    const subscription = super._subscribe(subscriber);\n    if (subscription && !(<ISubscription>subscription).closed) {\n      subscriber.next(this._value);\n    }\n    return subscription;\n  }\n\n  getValue(): T {\n    if (this.hasError) {\n      throw this.thrownError;\n    } else if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    } else {\n      return this._value;\n    }\n  }\n\n  next(value: T): void {\n    super.next(this._value = value);\n  }\n}\n","import { Subject } from './Subject';\nimport { Subscriber } from './Subscriber';\nimport { Subscription } from './Subscription';\n\n/**\n * @class AsyncSubject<T>\n */\nexport class AsyncSubject<T> extends Subject<T> {\n  private value: T = null;\n  private hasNext: boolean = false;\n  private hasCompleted: boolean = false;\n\n  protected _subscribe(subscriber: Subscriber<any>): Subscription {\n    if (this.hasError) {\n      subscriber.error(this.thrownError);\n      return Subscription.EMPTY;\n    } else if (this.hasCompleted && this.hasNext) {\n      subscriber.next(this.value);\n      subscriber.complete();\n      return Subscription.EMPTY;\n    }\n    return super._subscribe(subscriber);\n  }\n\n  next(value: T): void {\n    if (!this.hasCompleted) {\n      this.value = value;\n      this.hasNext = true;\n    }\n  }\n\n  error(error: any): void {\n    if (!this.hasCompleted) {\n      super.error(error);\n    }\n  }\n\n  complete(): void {\n    this.hasCompleted = true;\n    if (this.hasNext) {\n      super.next(this.value);\n    }\n    super.complete();\n  }\n}\n","import { AsyncAction } from './AsyncAction';\nimport { Subscription } from '../Subscription';\nimport { QueueScheduler } from './QueueScheduler';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class QueueAction<T> extends AsyncAction<T> {\n\n  constructor(protected scheduler: QueueScheduler,\n              protected work: (this: QueueAction<T>, state?: T) => void) {\n    super(scheduler, work);\n  }\n\n  public schedule(state?: T, delay: number = 0): Subscription {\n    if (delay > 0) {\n      return super.schedule(state, delay);\n    }\n    this.delay = delay;\n    this.state = state;\n    this.scheduler.flush(this);\n    return this;\n  }\n\n  public execute(state: T, delay: number): any {\n    return (delay > 0 || this.closed) ?\n      super.execute(state, delay) :\n      this._execute(state, delay) ;\n  }\n\n  protected requestAsyncId(scheduler: QueueScheduler, id?: any, delay: number = 0): any {\n    // If delay exists and is greater than 0, or if the delay is null (the\n    // action wasn't rescheduled) but was originally scheduled as an async\n    // action, then recycle as an async action.\n    if ((delay !== null && delay > 0) || (delay === null && this.delay > 0)) {\n      return super.requestAsyncId(scheduler, id, delay);\n    }\n    // Otherwise flush the scheduler starting with this action.\n    return scheduler.flush(this);\n  }\n}\n","import { AsyncScheduler } from './AsyncScheduler';\n\nexport class QueueScheduler extends AsyncScheduler {\n}\n","import { QueueAction } from './QueueAction';\nimport { QueueScheduler } from './QueueScheduler';\n\n/**\n *\n * Queue Scheduler\n *\n * <span class=\"informal\">Put every next task on a queue, instead of executing it immediately</span>\n *\n * `queue` scheduler, when used with delay, behaves the same as {@link async} scheduler.\n *\n * When used without delay, it schedules given task synchronously - executes it right when\n * it is scheduled. However when called recursively, that is when inside the scheduled task,\n * another task is scheduled with queue scheduler, instead of executing immediately as well,\n * that task will be put on a queue and wait for current one to finish.\n *\n * This means that when you execute task with `queue` scheduler, you are sure it will end\n * before any other task scheduled with that scheduler will start.\n *\n * @examples <caption>Schedule recursively first, then do something</caption>\n *\n * Rx.Scheduler.queue.schedule(() => {\n *   Rx.Scheduler.queue.schedule(() => console.log('second')); // will not happen now, but will be put on a queue\n *\n *   console.log('first');\n * });\n *\n * // Logs:\n * // \"first\"\n * // \"second\"\n *\n *\n * @example <caption>Reschedule itself recursively</caption>\n *\n * Rx.Scheduler.queue.schedule(function(state) {\n *   if (state !== 0) {\n *     console.log('before', state);\n *     this.schedule(state - 1); // `this` references currently executing Action,\n *                               // which we reschedule with new state\n *     console.log('after', state);\n *   }\n * }, 0, 3);\n *\n * // In scheduler that runs recursively, you would expect:\n * // \"before\", 3\n * // \"before\", 2\n * // \"before\", 1\n * // \"after\", 1\n * // \"after\", 2\n * // \"after\", 3\n *\n * // But with queue it logs:\n * // \"before\", 3\n * // \"after\", 3\n * // \"before\", 2\n * // \"after\", 2\n * // \"before\", 1\n * // \"after\", 1\n *\n *\n * @static true\n * @name queue\n * @owner Scheduler\n */\n\nexport const queue = new QueueScheduler(QueueAction);\n","import { Subject } from './Subject';\nimport { IScheduler } from './Scheduler';\nimport { queue } from './scheduler/queue';\nimport { Subscriber } from './Subscriber';\nimport { Subscription } from './Subscription';\nimport { ObserveOnSubscriber } from './operators/observeOn';\nimport { ObjectUnsubscribedError } from './util/ObjectUnsubscribedError';\nimport { SubjectSubscription } from './SubjectSubscription';\n/**\n * @class ReplaySubject<T>\n */\nexport class ReplaySubject<T> extends Subject<T> {\n  private _events: ReplayEvent<T>[] = [];\n  private _bufferSize: number;\n  private _windowTime: number;\n\n  constructor(bufferSize: number = Number.POSITIVE_INFINITY,\n              windowTime: number = Number.POSITIVE_INFINITY,\n              private scheduler?: IScheduler) {\n    super();\n    this._bufferSize = bufferSize < 1 ? 1 : bufferSize;\n    this._windowTime = windowTime < 1 ? 1 : windowTime;\n  }\n\n  next(value: T): void {\n    const now = this._getNow();\n    this._events.push(new ReplayEvent(now, value));\n    this._trimBufferThenGetEvents();\n    super.next(value);\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): Subscription {\n    const _events = this._trimBufferThenGetEvents();\n    const scheduler = this.scheduler;\n    let subscription: Subscription;\n\n    if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    } else if (this.hasError) {\n      subscription = Subscription.EMPTY;\n    } else if (this.isStopped) {\n      subscription = Subscription.EMPTY;\n    } else {\n      this.observers.push(subscriber);\n      subscription = new SubjectSubscription(this, subscriber);\n    }\n\n    if (scheduler) {\n      subscriber.add(subscriber = new ObserveOnSubscriber<T>(subscriber, scheduler));\n    }\n\n    const len = _events.length;\n    for (let i = 0; i < len && !subscriber.closed; i++) {\n      subscriber.next(_events[i].value);\n    }\n\n    if (this.hasError) {\n      subscriber.error(this.thrownError);\n    } else if (this.isStopped) {\n      subscriber.complete();\n    }\n\n    return subscription;\n  }\n\n  _getNow(): number {\n    return (this.scheduler || queue).now();\n  }\n\n  private _trimBufferThenGetEvents(): ReplayEvent<T>[] {\n    const now = this._getNow();\n    const _bufferSize = this._bufferSize;\n    const _windowTime = this._windowTime;\n    const _events = this._events;\n\n    let eventsCount = _events.length;\n    let spliceCount = 0;\n\n    // Trim events that fall out of the time window.\n    // Start at the front of the list. Break early once\n    // we encounter an event that falls within the window.\n    while (spliceCount < eventsCount) {\n      if ((now - _events[spliceCount].time) < _windowTime) {\n        break;\n      }\n      spliceCount++;\n    }\n\n    if (eventsCount > _bufferSize) {\n      spliceCount = Math.max(spliceCount, eventsCount - _bufferSize);\n    }\n\n    if (spliceCount > 0) {\n      _events.splice(0, spliceCount);\n    }\n\n    return _events;\n  }\n}\n\nclass ReplayEvent<T> {\n  constructor(public time: number, public value: T) {\n  }\n}\n","import { Observable } from '../Observable';\nimport { isArray } from '../util/isArray';\nimport { ArrayObservable } from '../observable/ArrayObservable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription, TeardownLogic } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\n/**\n * Returns an Observable that mirrors the first source Observable to emit an item.\n * @param {...Observables} ...observables sources used to race for which Observable emits first.\n * @return {Observable} an Observable that mirrors the output of the first Observable to emit an item.\n * @static true\n * @name race\n * @owner Observable\n */\nexport function race<T>(observables: Array<Observable<T>>): Observable<T>;\nexport function race<T>(observables: Array<Observable<any>>): Observable<T>;\nexport function race<T>(...observables: Array<Observable<T> | Array<Observable<T>>>): Observable<T>;\nexport function race<T>(...observables: Array<Observable<any> | Array<Observable<any>>>): Observable<T> {\n  // if the only argument is an array, it was most likely called with\n  // `race([obs1, obs2, ...])`\n  if (observables.length === 1) {\n    if (isArray(observables[0])) {\n      observables = <Array<Observable<any>>>observables[0];\n    } else {\n      return <Observable<any>>observables[0];\n    }\n  }\n\n  return new ArrayObservable<T>(<any>observables).lift(new RaceOperator<T>());\n}\n\nexport class RaceOperator<T> implements Operator<T, T> {\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new RaceSubscriber(subscriber));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class RaceSubscriber<T> extends OuterSubscriber<T, T> {\n  private hasFirst: boolean = false;\n  private observables: Observable<any>[] = [];\n  private subscriptions: Subscription[] = [];\n\n  constructor(destination: Subscriber<T>) {\n    super(destination);\n  }\n\n  protected _next(observable: any): void {\n    this.observables.push(observable);\n  }\n\n  protected _complete() {\n    const observables = this.observables;\n    const len = observables.length;\n\n    if (len === 0) {\n      this.destination.complete();\n    } else {\n      for (let i = 0; i < len && !this.hasFirst; i++) {\n        let observable = observables[i];\n        let subscription = subscribeToResult(this, observable, observable, i);\n\n        if (this.subscriptions) {\n          this.subscriptions.push(subscription);\n        }\n        this.add(subscription);\n      }\n      this.observables = null;\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: T,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, T>): void {\n    if (!this.hasFirst) {\n      this.hasFirst = true;\n\n      for (let i = 0; i < this.subscriptions.length; i++) {\n        if (i !== outerIndex) {\n          let subscription = this.subscriptions[i];\n\n          subscription.unsubscribe();\n          this.remove(subscription);\n        }\n      }\n\n      this.subscriptions = null;\n    }\n\n    this.destination.next(innerValue);\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { EmptyObservable } from '../observable/EmptyObservable';\nimport { TeardownLogic } from '../Subscription';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Returns an Observable that repeats the stream of items emitted by the source Observable at most count times.\n *\n * <img src=\"./img/repeat.png\" width=\"100%\">\n *\n * @param {number} [count] The number of times the source Observable items are repeated, a count of 0 will yield\n * an empty Observable.\n * @return {Observable} An Observable that repeats the stream of items emitted by the source Observable at most\n * count times.\n * @method repeat\n * @owner Observable\n */\nexport function repeat<T>(count: number = -1): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => {\n    if (count === 0) {\n      return new EmptyObservable<T>();\n    } else if (count < 0) {\n      return source.lift(new RepeatOperator(-1, source));\n    } else {\n      return source.lift(new RepeatOperator(count - 1, source));\n    }\n  };\n}\n\nclass RepeatOperator<T> implements Operator<T, T> {\n  constructor(private count: number,\n              private source: Observable<T>) {\n  }\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new RepeatSubscriber(subscriber, this.count, this.source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass RepeatSubscriber<T> extends Subscriber<T> {\n  constructor(destination: Subscriber<any>,\n              private count: number,\n              private source: Observable<T>) {\n    super(destination);\n  }\n  complete() {\n    if (!this.isStopped) {\n      const { source, count } = this;\n      if (count === 0) {\n        return super.complete();\n      } else if (count > -1) {\n        this.count = count - 1;\n      }\n      source.subscribe(this._unsubscribeAndRecycle());\n    }\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { Subject } from '../Subject';\nimport { Subscription, TeardownLogic } from '../Subscription';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\n\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Returns an Observable that mirrors the source Observable with the exception of a `complete`. If the source\n * Observable calls `complete`, this method will emit to the Observable returned from `notifier`. If that Observable\n * calls `complete` or `error`, then this method will call `complete` or `error` on the child subscription. Otherwise\n * this method will resubscribe to the source Observable.\n *\n * <img src=\"./img/repeatWhen.png\" width=\"100%\">\n *\n * @param {function(notifications: Observable): Observable} notifier - Receives an Observable of notifications with\n * which a user can `complete` or `error`, aborting the repetition.\n * @return {Observable} The source Observable modified with repeat logic.\n * @method repeatWhen\n * @owner Observable\n */\nexport function repeatWhen<T>(notifier: (notifications: Observable<any>) => Observable<any>): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new RepeatWhenOperator(notifier));\n}\n\nclass RepeatWhenOperator<T> implements Operator<T, T> {\n  constructor(protected notifier: (notifications: Observable<any>) => Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new RepeatWhenSubscriber(subscriber, this.notifier, source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass RepeatWhenSubscriber<T, R> extends OuterSubscriber<T, R> {\n\n  private notifications: Subject<any>;\n  private retries: Observable<any>;\n  private retriesSubscription: Subscription;\n  private sourceIsBeingSubscribedTo: boolean = true;\n\n  constructor(destination: Subscriber<R>,\n              private notifier: (notifications: Observable<any>) => Observable<any>,\n              private source: Observable<T>) {\n    super(destination);\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.sourceIsBeingSubscribedTo = true;\n    this.source.subscribe(this);\n  }\n\n  notifyComplete(innerSub: InnerSubscriber<T, R>): void {\n    if (this.sourceIsBeingSubscribedTo === false) {\n      return super.complete();\n    }\n  }\n\n  complete() {\n    this.sourceIsBeingSubscribedTo = false;\n\n    if (!this.isStopped) {\n      if (!this.retries) {\n        this.subscribeToRetries();\n      } else if (this.retriesSubscription.closed) {\n        return super.complete();\n      }\n\n      this._unsubscribeAndRecycle();\n      this.notifications.next();\n    }\n  }\n\n  protected _unsubscribe() {\n    const { notifications, retriesSubscription } = this;\n    if (notifications) {\n      notifications.unsubscribe();\n      this.notifications = null;\n    }\n    if (retriesSubscription) {\n      retriesSubscription.unsubscribe();\n      this.retriesSubscription = null;\n    }\n    this.retries = null;\n  }\n\n  protected _unsubscribeAndRecycle(): Subscriber<T> {\n    const { notifications, retries, retriesSubscription } = this;\n    this.notifications = null;\n    this.retries = null;\n    this.retriesSubscription = null;\n    super._unsubscribeAndRecycle();\n    this.notifications = notifications;\n    this.retries = retries;\n    this.retriesSubscription = retriesSubscription;\n    return this;\n  }\n\n  private subscribeToRetries() {\n    this.notifications = new Subject();\n    const retries = tryCatch(this.notifier)(this.notifications);\n    if (retries === errorObject) {\n      return super.complete();\n    }\n    this.retries = retries;\n    this.retriesSubscription = subscribeToResult(this, retries);\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\n\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Returns an Observable that mirrors the source Observable with the exception of an `error`. If the source Observable\n * calls `error`, this method will resubscribe to the source Observable for a maximum of `count` resubscriptions (given\n * as a number parameter) rather than propagating the `error` call.\n *\n * <img src=\"./img/retry.png\" width=\"100%\">\n *\n * Any and all items emitted by the source Observable will be emitted by the resulting Observable, even those emitted\n * during failed subscriptions. For example, if an Observable fails at first but emits [1, 2] then succeeds the second\n * time and emits: [1, 2, 3, 4, 5] then the complete stream of emissions and notifications\n * would be: [1, 2, 1, 2, 3, 4, 5, `complete`].\n * @param {number} count - Number of retry attempts before failing.\n * @return {Observable} The source Observable modified with the retry logic.\n * @method retry\n * @owner Observable\n */\nexport function retry<T>(count: number = -1): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new RetryOperator(count, source));\n}\n\nclass RetryOperator<T> implements Operator<T, T> {\n  constructor(private count: number,\n              private source: Observable<T>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new RetrySubscriber(subscriber, this.count, this.source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass RetrySubscriber<T> extends Subscriber<T> {\n  constructor(destination: Subscriber<any>,\n              private count: number,\n              private source: Observable<T>) {\n    super(destination);\n  }\n  error(err: any) {\n    if (!this.isStopped) {\n      const { source, count } = this;\n      if (count === 0) {\n        return super.error(err);\n      } else if (count > -1) {\n        this.count = count - 1;\n      }\n      source.subscribe(this._unsubscribeAndRecycle());\n    }\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { Subject } from '../Subject';\nimport { Subscription, TeardownLogic } from '../Subscription';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\n\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Returns an Observable that mirrors the source Observable with the exception of an `error`. If the source Observable\n * calls `error`, this method will emit the Throwable that caused the error to the Observable returned from `notifier`.\n * If that Observable calls `complete` or `error` then this method will call `complete` or `error` on the child\n * subscription. Otherwise this method will resubscribe to the source Observable.\n *\n * <img src=\"./img/retryWhen.png\" width=\"100%\">\n *\n * @param {function(errors: Observable): Observable} notifier - Receives an Observable of notifications with which a\n * user can `complete` or `error`, aborting the retry.\n * @return {Observable} The source Observable modified with retry logic.\n * @method retryWhen\n * @owner Observable\n */\nexport function retryWhen<T>(notifier: (errors: Observable<any>) => Observable<any>): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new RetryWhenOperator(notifier, source));\n}\n\nclass RetryWhenOperator<T> implements Operator<T, T> {\n  constructor(protected notifier: (errors: Observable<any>) => Observable<any>,\n              protected source: Observable<T>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new RetryWhenSubscriber(subscriber, this.notifier, this.source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass RetryWhenSubscriber<T, R> extends OuterSubscriber<T, R> {\n\n  private errors: Subject<any>;\n  private retries: Observable<any>;\n  private retriesSubscription: Subscription;\n\n  constructor(destination: Subscriber<R>,\n              private notifier: (errors: Observable<any>) => Observable<any>,\n              private source: Observable<T>) {\n    super(destination);\n  }\n\n  error(err: any) {\n    if (!this.isStopped) {\n\n      let errors = this.errors;\n      let retries: any = this.retries;\n      let retriesSubscription = this.retriesSubscription;\n\n      if (!retries) {\n        errors = new Subject();\n        retries = tryCatch(this.notifier)(errors);\n        if (retries === errorObject) {\n          return super.error(errorObject.e);\n        }\n        retriesSubscription = subscribeToResult(this, retries);\n      } else {\n        this.errors = null;\n        this.retriesSubscription = null;\n      }\n\n      this._unsubscribeAndRecycle();\n\n      this.errors = errors;\n      this.retries = retries;\n      this.retriesSubscription = retriesSubscription;\n\n      errors.next(err);\n    }\n  }\n\n  protected _unsubscribe() {\n    const { errors, retriesSubscription } = this;\n    if (errors) {\n      errors.unsubscribe();\n      this.errors = null;\n    }\n    if (retriesSubscription) {\n      retriesSubscription.unsubscribe();\n      this.retriesSubscription = null;\n    }\n    this.retries = null;\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    const { errors, retries, retriesSubscription } = this;\n    this.errors = null;\n    this.retries = null;\n    this.retriesSubscription = null;\n\n    this._unsubscribeAndRecycle();\n\n    this.errors = errors;\n    this.retries = retries;\n    this.retriesSubscription = retriesSubscription;\n\n    this.source.subscribe(this);\n  }\n}\n","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { TeardownLogic } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Emits the most recently emitted value from the source Observable whenever\n * another Observable, the `notifier`, emits.\n *\n * <span class=\"informal\">It's like {@link sampleTime}, but samples whenever\n * the `notifier` Observable emits something.</span>\n *\n * <img src=\"./img/sample.png\" width=\"100%\">\n *\n * Whenever the `notifier` Observable emits a value or completes, `sample`\n * looks at the source Observable and emits whichever value it has most recently\n * emitted since the previous sampling, unless the source has not emitted\n * anything since the previous sampling. The `notifier` is subscribed to as soon\n * as the output Observable is subscribed.\n *\n * @example <caption>On every click, sample the most recent \"seconds\" timer</caption>\n * var seconds = Rx.Observable.interval(1000);\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = seconds.sample(clicks);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link audit}\n * @see {@link debounce}\n * @see {@link sampleTime}\n * @see {@link throttle}\n *\n * @param {Observable<any>} notifier The Observable to use for sampling the\n * source Observable.\n * @return {Observable<T>} An Observable that emits the results of sampling the\n * values emitted by the source Observable whenever the notifier Observable\n * emits value or completes.\n * @method sample\n * @owner Observable\n */\nexport function sample<T>(notifier: Observable<any>): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new SampleOperator(notifier));\n}\n\nclass SampleOperator<T> implements Operator<T, T> {\n  constructor(private notifier: Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    const sampleSubscriber = new SampleSubscriber(subscriber);\n    const subscription = source.subscribe(sampleSubscriber);\n    subscription.add(subscribeToResult(sampleSubscriber, this.notifier));\n    return subscription;\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SampleSubscriber<T, R> extends OuterSubscriber<T, R> {\n  private value: T;\n  private hasValue: boolean = false;\n\n  protected _next(value: T) {\n    this.value = value;\n    this.hasValue = true;\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.emitValue();\n  }\n\n  notifyComplete(): void {\n    this.emitValue();\n  }\n\n  emitValue() {\n    if (this.hasValue) {\n      this.hasValue = false;\n      this.destination.next(this.value);\n    }\n  }\n}\n","import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { IScheduler } from '../Scheduler';\nimport { Action } from '../scheduler/Action';\nimport { async } from '../scheduler/async';\nimport { TeardownLogic } from '../Subscription';\n\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Emits the most recently emitted value from the source Observable within\n * periodic time intervals.\n *\n * <span class=\"informal\">Samples the source Observable at periodic time\n * intervals, emitting what it samples.</span>\n *\n * <img src=\"./img/sampleTime.png\" width=\"100%\">\n *\n * `sampleTime` periodically looks at the source Observable and emits whichever\n * value it has most recently emitted since the previous sampling, unless the\n * source has not emitted anything since the previous sampling. The sampling\n * happens periodically in time every `period` milliseconds (or the time unit\n * defined by the optional `scheduler` argument). The sampling starts as soon as\n * the output Observable is subscribed.\n *\n * @example <caption>Every second, emit the most recent click at most once</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.sampleTime(1000);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link auditTime}\n * @see {@link debounceTime}\n * @see {@link delay}\n * @see {@link sample}\n * @see {@link throttleTime}\n *\n * @param {number} period The sampling period expressed in milliseconds or the\n * time unit determined internally by the optional `scheduler`.\n * @param {Scheduler} [scheduler=async] The {@link IScheduler} to use for\n * managing the timers that handle the sampling.\n * @return {Observable<T>} An Observable that emits the results of sampling the\n * values emitted by the source Observable at the specified time interval.\n * @method sampleTime\n * @owner Observable\n */\nexport function sampleTime<T>(period: number, scheduler: IScheduler = async): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new SampleTimeOperator(period, scheduler));\n}\n\nclass SampleTimeOperator<T> implements Operator<T, T> {\n  constructor(private period: number,\n              private scheduler: IScheduler) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new SampleTimeSubscriber(subscriber, this.period, this.scheduler));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SampleTimeSubscriber<T> extends Subscriber<T> {\n  lastValue: T;\n  hasValue: boolean = false;\n\n  constructor(destination: Subscriber<T>,\n              private period: number,\n              private scheduler: IScheduler) {\n    super(destination);\n    this.add(scheduler.schedule(dispatchNotification, period, { subscriber: this, period }));\n  }\n\n  protected _next(value: T) {\n    this.lastValue = value;\n    this.hasValue = true;\n  }\n\n  notifyNext() {\n    if (this.hasValue) {\n      this.hasValue = false;\n      this.destination.next(this.lastValue);\n    }\n  }\n}\n\nfunction dispatchNotification<T>(this: Action<any>, state: any) {\n  let { subscriber, period } = state;\n  subscriber.notifyNext();\n  this.schedule(state, period);\n}\n","import { Operator } from '../Operator';\nimport { Observer } from '../Observer';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\n\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Compares all values of two observables in sequence using an optional comparor function\n * and returns an observable of a single boolean value representing whether or not the two sequences\n * are equal.\n *\n * <span class=\"informal\">Checks to see of all values emitted by both observables are equal, in order.</span>\n *\n * <img src=\"./img/sequenceEqual.png\" width=\"100%\">\n *\n * `sequenceEqual` subscribes to two observables and buffers incoming values from each observable. Whenever either\n * observable emits a value, the value is buffered and the buffers are shifted and compared from the bottom\n * up; If any value pair doesn't match, the returned observable will emit `false` and complete. If one of the\n * observables completes, the operator will wait for the other observable to complete; If the other\n * observable emits before completing, the returned observable will emit `false` and complete. If one observable never\n * completes or emits after the other complets, the returned observable will never complete.\n *\n * @example <caption>figure out if the Konami code matches</caption>\n * var code = Rx.Observable.from([\n *  \"ArrowUp\",\n *  \"ArrowUp\",\n *  \"ArrowDown\",\n *  \"ArrowDown\",\n *  \"ArrowLeft\",\n *  \"ArrowRight\",\n *  \"ArrowLeft\",\n *  \"ArrowRight\",\n *  \"KeyB\",\n *  \"KeyA\",\n *  \"Enter\" // no start key, clearly.\n * ]);\n *\n * var keys = Rx.Observable.fromEvent(document, 'keyup')\n *  .map(e => e.code);\n * var matches = keys.bufferCount(11, 1)\n *  .mergeMap(\n *    last11 =>\n *      Rx.Observable.from(last11)\n *        .sequenceEqual(code)\n *   );\n * matches.subscribe(matched => console.log('Successful cheat at Contra? ', matched));\n *\n * @see {@link combineLatest}\n * @see {@link zip}\n * @see {@link withLatestFrom}\n *\n * @param {Observable} compareTo The observable sequence to compare the source sequence to.\n * @param {function} [comparor] An optional function to compare each value pair\n * @return {Observable} An Observable of a single boolean value representing whether or not\n * the values emitted by both observables were equal in sequence.\n * @method sequenceEqual\n * @owner Observable\n */\nexport function sequenceEqual<T>(compareTo: Observable<T>,\n                                 comparor?: (a: T, b: T) => boolean): OperatorFunction<T, boolean> {\n  return (source: Observable<T>) => source.lift(new SequenceEqualOperator(compareTo, comparor));\n}\n\nexport class SequenceEqualOperator<T> implements Operator<T, boolean> {\n  constructor(private compareTo: Observable<T>,\n              private comparor: (a: T, b: T) => boolean) {\n  }\n\n  call(subscriber: Subscriber<boolean>, source: any): any {\n    return source.subscribe(new SequenceEqualSubscriber(subscriber, this.compareTo, this.comparor));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class SequenceEqualSubscriber<T, R> extends Subscriber<T> {\n  private _a: T[] = [];\n  private _b: T[] = [];\n  private _oneComplete = false;\n\n  constructor(destination: Observer<R>,\n              private compareTo: Observable<T>,\n              private comparor: (a: T, b: T) => boolean) {\n    super(destination);\n    this.add(compareTo.subscribe(new SequenceEqualCompareToSubscriber(destination, this)));\n  }\n\n  protected _next(value: T): void {\n    if (this._oneComplete && this._b.length === 0) {\n      this.emit(false);\n    } else {\n      this._a.push(value);\n      this.checkValues();\n    }\n  }\n\n  public _complete(): void {\n    if (this._oneComplete) {\n      this.emit(this._a.length === 0 && this._b.length === 0);\n    } else {\n      this._oneComplete = true;\n    }\n  }\n\n  checkValues() {\n    const { _a, _b, comparor } = this;\n    while (_a.length > 0 && _b.length > 0) {\n      let a = _a.shift();\n      let b = _b.shift();\n      let areEqual = false;\n      if (comparor) {\n        areEqual = tryCatch(comparor)(a, b);\n        if (areEqual === errorObject) {\n          this.destination.error(errorObject.e);\n        }\n      } else {\n        areEqual = a === b;\n      }\n      if (!areEqual) {\n        this.emit(false);\n      }\n    }\n  }\n\n  emit(value: boolean) {\n    const { destination } = this;\n    destination.next(value);\n    destination.complete();\n  }\n\n  nextB(value: T) {\n    if (this._oneComplete && this._a.length === 0) {\n      this.emit(false);\n    } else {\n      this._b.push(value);\n      this.checkValues();\n    }\n  }\n}\n\nclass SequenceEqualCompareToSubscriber<T, R> extends Subscriber<T> {\n  constructor(destination: Observer<R>, private parent: SequenceEqualSubscriber<T, R>) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    this.parent.nextB(value);\n  }\n\n  protected _error(err: any): void {\n    this.parent.error(err);\n  }\n\n  protected _complete(): void {\n    this.parent._complete();\n  }\n}\n","import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observer } from '../Observer';\nimport { EmptyError } from '../util/EmptyError';\nimport { TeardownLogic } from '../Subscription';\n\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Returns an Observable that emits the single item emitted by the source Observable that matches a specified\n * predicate, if that Observable emits one such item. If the source Observable emits more than one such item or no\n * such items, notify of an IllegalArgumentException or NoSuchElementException respectively.\n *\n * <img src=\"./img/single.png\" width=\"100%\">\n *\n * @throws {EmptyError} Delivers an EmptyError to the Observer's `error`\n * callback if the Observable completes before any `next` notification was sent.\n * @param {Function} predicate - A predicate function to evaluate items emitted by the source Observable.\n * @return {Observable<T>} An Observable that emits the single item emitted by the source Observable that matches\n * the predicate.\n .\n * @method single\n * @owner Observable\n */\nexport function single<T>(predicate?: (value: T, index: number, source: Observable<T>) => boolean): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new SingleOperator(predicate, source));\n}\n\nclass SingleOperator<T> implements Operator<T, T> {\n  constructor(private predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n              private source?: Observable<T>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new SingleSubscriber(subscriber, this.predicate, this.source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SingleSubscriber<T> extends Subscriber<T> {\n  private seenValue: boolean = false;\n  private singleValue: T;\n  private index: number = 0;\n\n  constructor(destination: Observer<T>,\n              private predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n              private source?: Observable<T>) {\n    super(destination);\n  }\n\n  private applySingleValue(value: T): void {\n    if (this.seenValue) {\n      this.destination.error('Sequence contains more than one element');\n    } else {\n      this.seenValue = true;\n      this.singleValue = value;\n    }\n  }\n\n  protected _next(value: T): void {\n    const index = this.index++;\n\n    if (this.predicate) {\n      this.tryNext(value, index);\n    } else {\n      this.applySingleValue(value);\n    }\n  }\n\n  private tryNext(value: T, index: number): void {\n    try {\n      if (this.predicate(value, index, this.source)) {\n        this.applySingleValue(value);\n      }\n    } catch (err) {\n      this.destination.error(err);\n    }\n  }\n\n  protected _complete(): void {\n    const destination = this.destination;\n\n    if (this.index > 0) {\n      destination.next(this.seenValue ? this.singleValue : undefined);\n      destination.complete();\n    } else {\n      destination.error(new EmptyError);\n    }\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Returns an Observable that skips the first `count` items emitted by the source Observable.\n *\n * <img src=\"./img/skip.png\" width=\"100%\">\n *\n * @param {Number} count - The number of times, items emitted by source Observable should be skipped.\n * @return {Observable} An Observable that skips values emitted by the source Observable.\n *\n * @method skip\n * @owner Observable\n */\nexport function skip<T>(count: number): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new SkipOperator(count));\n}\n\nclass SkipOperator<T> implements Operator<T, T> {\n  constructor(private total: number) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new SkipSubscriber(subscriber, this.total));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SkipSubscriber<T> extends Subscriber<T> {\n  count: number = 0;\n\n  constructor(destination: Subscriber<T>, private total: number) {\n    super(destination);\n  }\n\n  protected _next(x: T) {\n    if (++this.count > this.total) {\n      this.destination.next(x);\n    }\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { ArgumentOutOfRangeError } from '../util/ArgumentOutOfRangeError';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Skip the last `count` values emitted by the source Observable.\n *\n * <img src=\"./img/skipLast.png\" width=\"100%\">\n *\n * `skipLast` returns an Observable that accumulates a queue with a length\n * enough to store the first `count` values. As more values are received,\n * values are taken from the front of the queue and produced on the result\n * sequence. This causes values to be delayed.\n *\n * @example <caption>Skip the last 2 values of an Observable with many values</caption>\n * var many = Rx.Observable.range(1, 5);\n * var skipLastTwo = many.skipLast(2);\n * skipLastTwo.subscribe(x => console.log(x));\n *\n * // Results in:\n * // 1 2 3\n *\n * @see {@link skip}\n * @see {@link skipUntil}\n * @see {@link skipWhile}\n * @see {@link take}\n *\n * @throws {ArgumentOutOfRangeError} When using `skipLast(i)`, it throws\n * ArgumentOutOrRangeError if `i < 0`.\n *\n * @param {number} count Number of elements to skip from the end of the source Observable.\n * @returns {Observable<T>} An Observable that skips the last count values\n * emitted by the source Observable.\n * @method skipLast\n * @owner Observable\n */\nexport function skipLast<T>(count: number): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new SkipLastOperator(count));\n}\n\nclass SkipLastOperator<T> implements Operator<T, T> {\n  constructor(private _skipCount: number) {\n    if (this._skipCount < 0) {\n      throw new ArgumentOutOfRangeError;\n    }\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    if (this._skipCount === 0) {\n      // If we don't want to skip any values then just subscribe\n      // to Subscriber without any further logic.\n      return source.subscribe(new Subscriber(subscriber));\n    } else {\n      return source.subscribe(new SkipLastSubscriber(subscriber, this._skipCount));\n    }\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SkipLastSubscriber<T> extends Subscriber<T> {\n  private _ring: T[];\n  private _count: number = 0;\n\n  constructor(destination: Subscriber<T>, private _skipCount: number) {\n    super(destination);\n    this._ring = new Array<T>(_skipCount);\n  }\n\n  protected _next(value: T): void {\n    const skipCount = this._skipCount;\n    const count = this._count++;\n\n    if (count < skipCount) {\n      this._ring[count] = value;\n    } else {\n      const currentIndex = count % skipCount;\n      const ring = this._ring;\n      const oldValue = ring[currentIndex];\n\n      ring[currentIndex] = value;\n      this.destination.next(oldValue);\n    }\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Returns an Observable that skips items emitted by the source Observable until a second Observable emits an item.\n *\n * <img src=\"./img/skipUntil.png\" width=\"100%\">\n *\n * @param {Observable} notifier - The second Observable that has to emit an item before the source Observable's elements begin to\n * be mirrored by the resulting Observable.\n * @return {Observable<T>} An Observable that skips items from the source Observable until the second Observable emits\n * an item, then emits the remaining items.\n * @method skipUntil\n * @owner Observable\n */\nexport function skipUntil<T>(notifier: Observable<any>): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new SkipUntilOperator(notifier));\n}\n\nclass SkipUntilOperator<T> implements Operator<T, T> {\n  constructor(private notifier: Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new SkipUntilSubscriber(subscriber, this.notifier));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SkipUntilSubscriber<T, R> extends OuterSubscriber<T, R> {\n\n  private hasValue: boolean = false;\n  private isInnerStopped: boolean = false;\n\n  constructor(destination: Subscriber<any>,\n              notifier: Observable<any>) {\n    super(destination);\n    this.add(subscribeToResult(this, notifier));\n  }\n\n  protected _next(value: T) {\n    if (this.hasValue) {\n      super._next(value);\n    }\n  }\n\n  protected _complete() {\n    if (this.isInnerStopped) {\n      super._complete();\n    } else {\n      this.unsubscribe();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.hasValue = true;\n  }\n\n  notifyComplete(): void {\n    this.isInnerStopped = true;\n    if (this.isStopped) {\n      super._complete();\n    }\n  }\n}\n","import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { TeardownLogic } from '../Subscription';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Returns an Observable that skips all items emitted by the source Observable as long as a specified condition holds\n * true, but emits all further source items as soon as the condition becomes false.\n *\n * <img src=\"./img/skipWhile.png\" width=\"100%\">\n *\n * @param {Function} predicate - A function to test each item emitted from the source Observable.\n * @return {Observable<T>} An Observable that begins emitting items emitted by the source Observable when the\n * specified predicate becomes false.\n * @method skipWhile\n * @owner Observable\n */\nexport function skipWhile<T>(predicate: (value: T, index: number) => boolean): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new SkipWhileOperator(predicate));\n}\n\nclass SkipWhileOperator<T> implements Operator<T, T> {\n  constructor(private predicate: (value: T, index: number) => boolean) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new SkipWhileSubscriber(subscriber, this.predicate));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SkipWhileSubscriber<T> extends Subscriber<T> {\n  private skipping: boolean = true;\n  private index: number = 0;\n\n  constructor(destination: Subscriber<T>,\n              private predicate: (value: T, index: number) => boolean) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    const destination = this.destination;\n    if (this.skipping) {\n      this.tryCallPredicate(value);\n    }\n\n    if (!this.skipping) {\n      destination.next(value);\n    }\n  }\n\n  private tryCallPredicate(value: T): void {\n    try {\n      const result = this.predicate(value, this.index++);\n      this.skipping = Boolean(result);\n    } catch (err) {\n      this.destination.error(err);\n    }\n  }\n}\n","import { Operator } from '../Operator';\nimport { Observable, ObservableInput } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function switchMap<T, R>(project: (value: T, index: number) => ObservableInput<R>): OperatorFunction<T, R>;\nexport function switchMap<T, I, R>(project: (value: T, index: number) => ObservableInput<I>, resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Projects each source value to an Observable which is merged in the output\n * Observable, emitting values only from the most recently projected Observable.\n *\n * <span class=\"informal\">Maps each value to an Observable, then flattens all of\n * these inner Observables using {@link switch}.</span>\n *\n * <img src=\"./img/switchMap.png\" width=\"100%\">\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an (so-called \"inner\") Observable. Each time it observes one of these\n * inner Observables, the output Observable begins emitting the items emitted by\n * that inner Observable. When a new inner Observable is emitted, `switchMap`\n * stops emitting items from the earlier-emitted inner Observable and begins\n * emitting items from the new one. It continues to behave like this for\n * subsequent inner Observables.\n *\n * @example <caption>Rerun an interval Observable on every click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.switchMap((ev) => Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link concatMap}\n * @see {@link exhaustMap}\n * @see {@link mergeMap}\n * @see {@link switch}\n * @see {@link switchMapTo}\n *\n * @param {function(value: T, ?index: number): ObservableInput} project A function\n * that, when applied to an item emitted by the source Observable, returns an\n * Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @return {Observable} An Observable that emits the result of applying the\n * projection function (and the optional `resultSelector`) to each item emitted\n * by the source Observable and taking only the values from the most recently\n * projected inner Observable.\n * @method switchMap\n * @owner Observable\n */\nexport function switchMap<T, I, R>(\n  project: (value: T, index: number) => ObservableInput<I>,\n  resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R\n): OperatorFunction<T, I | R> {\n  return function switchMapOperatorFunction(source: Observable<T>): Observable<I | R> {\n    return source.lift(new SwitchMapOperator(project, resultSelector));\n  };\n}\n\nclass SwitchMapOperator<T, I, R> implements Operator<T, I> {\n  constructor(private project: (value: T, index: number) => ObservableInput<I>,\n              private resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R) {\n  }\n\n  call(subscriber: Subscriber<I>, source: any): any {\n    return source.subscribe(new SwitchMapSubscriber(subscriber, this.project, this.resultSelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SwitchMapSubscriber<T, I, R> extends OuterSubscriber<T, I> {\n  private index: number = 0;\n  private innerSubscription: Subscription;\n\n  constructor(destination: Subscriber<I>,\n              private project: (value: T, index: number) => ObservableInput<I>,\n              private resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R) {\n    super(destination);\n  }\n\n  protected _next(value: T) {\n    let result: ObservableInput<I>;\n    const index = this.index++;\n    try {\n      result = this.project(value, index);\n    } catch (error) {\n      this.destination.error(error);\n      return;\n    }\n    this._innerSub(result, value, index);\n  }\n\n  private _innerSub(result: ObservableInput<I>, value: T, index: number) {\n    const innerSubscription = this.innerSubscription;\n    if (innerSubscription) {\n      innerSubscription.unsubscribe();\n    }\n    this.add(this.innerSubscription = subscribeToResult(this, result, value, index));\n  }\n\n  protected _complete(): void {\n    const {innerSubscription} = this;\n    if (!innerSubscription || innerSubscription.closed) {\n      super._complete();\n    }\n  }\n\n  protected _unsubscribe() {\n    this.innerSubscription = null;\n  }\n\n  notifyComplete(innerSub: Subscription): void {\n    this.remove(innerSub);\n    this.innerSubscription = null;\n    if (this.isStopped) {\n      super._complete();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: I,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, I>): void {\n    if (this.resultSelector) {\n      this._tryNotifyNext(outerValue, innerValue, outerIndex, innerIndex);\n    } else {\n      this.destination.next(innerValue);\n    }\n  }\n\n  private _tryNotifyNext(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): void {\n    let result: R;\n    try {\n      result = this.resultSelector(outerValue, innerValue, outerIndex, innerIndex);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.destination.next(result);\n  }\n}\n","import { Operator } from '../Operator';\nimport { Observable, ObservableInput } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function switchMapTo<T, R>(observable: ObservableInput<R>): OperatorFunction<T, R>;\nexport function switchMapTo<T, I, R>(observable: ObservableInput<I>, resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Projects each source value to the same Observable which is flattened multiple\n * times with {@link switch} in the output Observable.\n *\n * <span class=\"informal\">It's like {@link switchMap}, but maps each value\n * always to the same inner Observable.</span>\n *\n * <img src=\"./img/switchMapTo.png\" width=\"100%\">\n *\n * Maps each source value to the given Observable `innerObservable` regardless\n * of the source value, and then flattens those resulting Observables into one\n * single Observable, which is the output Observable. The output Observables\n * emits values only from the most recently emitted instance of\n * `innerObservable`.\n *\n * @example <caption>Rerun an interval Observable on every click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.switchMapTo(Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link concatMapTo}\n * @see {@link switch}\n * @see {@link switchMap}\n * @see {@link mergeMapTo}\n *\n * @param {ObservableInput} innerObservable An Observable to replace each value from\n * the source Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @return {Observable} An Observable that emits items from the given\n * `innerObservable` (and optionally transformed through `resultSelector`) every\n * time a value is emitted on the source Observable, and taking only the values\n * from the most recently projected inner Observable.\n * @method switchMapTo\n * @owner Observable\n */\nexport function switchMapTo<T, I, R>(innerObservable: Observable<I>,\n                                     resultSelector?: (outerValue: T,\n                                                       innerValue: I,\n                                                       outerIndex: number,\n                                                       innerIndex: number) => R): OperatorFunction<T, I | R> {\n  return (source: Observable<T>) => source.lift(new SwitchMapToOperator(innerObservable, resultSelector));\n}\n\nclass SwitchMapToOperator<T, I, R> implements Operator<T, I> {\n  constructor(private observable: Observable<I>,\n              private resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R) {\n  }\n\n  call(subscriber: Subscriber<I>, source: any): any {\n    return source.subscribe(new SwitchMapToSubscriber(subscriber, this.observable, this.resultSelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SwitchMapToSubscriber<T, I, R> extends OuterSubscriber<T, I> {\n  private index: number = 0;\n  private innerSubscription: Subscription;\n\n  constructor(destination: Subscriber<I>,\n              private inner: Observable<I>,\n              private resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R) {\n    super(destination);\n  }\n\n  protected _next(value: any) {\n    const innerSubscription = this.innerSubscription;\n    if (innerSubscription) {\n      innerSubscription.unsubscribe();\n    }\n    this.add(this.innerSubscription = subscribeToResult(this, this.inner, value, this.index++));\n  }\n\n  protected _complete() {\n    const {innerSubscription} = this;\n    if (!innerSubscription || innerSubscription.closed) {\n      super._complete();\n    }\n  }\n\n  protected _unsubscribe() {\n    this.innerSubscription = null;\n  }\n\n  notifyComplete(innerSub: Subscription) {\n    this.remove(innerSub);\n    this.innerSubscription = null;\n    if (this.isStopped) {\n      super._complete();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: I,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, I>): void {\n    const { resultSelector, destination } = this;\n    if (resultSelector) {\n      this.tryResultSelector(outerValue, innerValue, outerIndex, innerIndex);\n    } else {\n      destination.next(innerValue);\n    }\n  }\n\n  private tryResultSelector(outerValue: T, innerValue: I,\n                            outerIndex: number, innerIndex: number): void {\n    const { resultSelector, destination } = this;\n    let result: R;\n    try {\n      result = resultSelector(outerValue, innerValue, outerIndex, innerIndex);\n    } catch (err) {\n      destination.error(err);\n      return;\n    }\n\n    destination.next(result);\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { ArgumentOutOfRangeError } from '../util/ArgumentOutOfRangeError';\nimport { EmptyObservable } from '../observable/EmptyObservable';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Emits only the first `count` values emitted by the source Observable.\n *\n * <span class=\"informal\">Takes the first `count` values from the source, then\n * completes.</span>\n *\n * <img src=\"./img/take.png\" width=\"100%\">\n *\n * `take` returns an Observable that emits only the first `count` values emitted\n * by the source Observable. If the source emits fewer than `count` values then\n * all of its values are emitted. After that, it completes, regardless if the\n * source completes.\n *\n * @example <caption>Take the first 5 seconds of an infinite 1-second interval Observable</caption>\n * var interval = Rx.Observable.interval(1000);\n * var five = interval.take(5);\n * five.subscribe(x => console.log(x));\n *\n * @see {@link takeLast}\n * @see {@link takeUntil}\n * @see {@link takeWhile}\n * @see {@link skip}\n *\n * @throws {ArgumentOutOfRangeError} When using `take(i)`, it delivers an\n * ArgumentOutOrRangeError to the Observer's `error` callback if `i < 0`.\n *\n * @param {number} count The maximum number of `next` values to emit.\n * @return {Observable<T>} An Observable that emits only the first `count`\n * values emitted by the source Observable, or all of the values from the source\n * if the source emits fewer than `count` values.\n * @method take\n * @owner Observable\n */\nexport function take<T>(count: number): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => {\n    if (count === 0) {\n      return new EmptyObservable<T>();\n    } else {\n      return source.lift(new TakeOperator(count));\n    }\n  };\n}\n\nclass TakeOperator<T> implements Operator<T, T> {\n  constructor(private total: number) {\n    if (this.total < 0) {\n      throw new ArgumentOutOfRangeError;\n    }\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new TakeSubscriber(subscriber, this.total));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass TakeSubscriber<T> extends Subscriber<T> {\n  private count: number = 0;\n\n  constructor(destination: Subscriber<T>, private total: number) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    const total = this.total;\n    const count = ++this.count;\n    if (count <= total) {\n      this.destination.next(value);\n      if (count === total) {\n        this.destination.complete();\n        this.unsubscribe();\n      }\n    }\n  }\n}\n","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { TeardownLogic } from '../Subscription';\n\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Emits the values emitted by the source Observable until a `notifier`\n * Observable emits a value.\n *\n * <span class=\"informal\">Lets values pass until a second Observable,\n * `notifier`, emits something. Then, it completes.</span>\n *\n * <img src=\"./img/takeUntil.png\" width=\"100%\">\n *\n * `takeUntil` subscribes and begins mirroring the source Observable. It also\n * monitors a second Observable, `notifier` that you provide. If the `notifier`\n * emits a value or a complete notification, the output Observable stops\n * mirroring the source Observable and completes.\n *\n * @example <caption>Tick every second until the first click happens</caption>\n * var interval = Rx.Observable.interval(1000);\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = interval.takeUntil(clicks);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link take}\n * @see {@link takeLast}\n * @see {@link takeWhile}\n * @see {@link skip}\n *\n * @param {Observable} notifier The Observable whose first emitted value will\n * cause the output Observable of `takeUntil` to stop emitting values from the\n * source Observable.\n * @return {Observable<T>} An Observable that emits the values from the source\n * Observable until such time as `notifier` emits its first value.\n * @method takeUntil\n * @owner Observable\n */\nexport function takeUntil<T>(notifier: Observable<any>): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new TakeUntilOperator(notifier));\n}\n\nclass TakeUntilOperator<T> implements Operator<T, T> {\n  constructor(private notifier: Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new TakeUntilSubscriber(subscriber, this.notifier));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass TakeUntilSubscriber<T, R> extends OuterSubscriber<T, R> {\n\n  constructor(destination: Subscriber<any>,\n              private notifier: Observable<any>) {\n    super(destination);\n    this.add(subscribeToResult(this, notifier));\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.complete();\n  }\n\n  notifyComplete(): void {\n    // noop\n  }\n}\n","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { TeardownLogic } from '../Subscription';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Emits values emitted by the source Observable so long as each value satisfies\n * the given `predicate`, and then completes as soon as this `predicate` is not\n * satisfied.\n *\n * <span class=\"informal\">Takes values from the source only while they pass the\n * condition given. When the first value does not satisfy, it completes.</span>\n *\n * <img src=\"./img/takeWhile.png\" width=\"100%\">\n *\n * `takeWhile` subscribes and begins mirroring the source Observable. Each value\n * emitted on the source is given to the `predicate` function which returns a\n * boolean, representing a condition to be satisfied by the source values. The\n * output Observable emits the source values until such time as the `predicate`\n * returns false, at which point `takeWhile` stops mirroring the source\n * Observable and completes the output Observable.\n *\n * @example <caption>Emit click events only while the clientX property is greater than 200</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.takeWhile(ev => ev.clientX > 200);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link take}\n * @see {@link takeLast}\n * @see {@link takeUntil}\n * @see {@link skip}\n *\n * @param {function(value: T, index: number): boolean} predicate A function that\n * evaluates a value emitted by the source Observable and returns a boolean.\n * Also takes the (zero-based) index as the second argument.\n * @return {Observable<T>} An Observable that emits the values from the source\n * Observable so long as each value satisfies the condition defined by the\n * `predicate`, then completes.\n * @method takeWhile\n * @owner Observable\n */\nexport function takeWhile<T>(predicate: (value: T, index: number) => boolean): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new TakeWhileOperator(predicate));\n}\n\nclass TakeWhileOperator<T> implements Operator<T, T> {\n  constructor(private predicate: (value: T, index: number) => boolean) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new TakeWhileSubscriber(subscriber, this.predicate));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass TakeWhileSubscriber<T> extends Subscriber<T> {\n  private index: number = 0;\n\n  constructor(destination: Subscriber<T>,\n              private predicate: (value: T, index: number) => boolean) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    const destination = this.destination;\n    let result: boolean;\n    try {\n      result = this.predicate(value, this.index++);\n    } catch (err) {\n      destination.error(err);\n      return;\n    }\n    this.nextOrComplete(value, result);\n  }\n\n  private nextOrComplete(value: T, predicateResult: boolean): void {\n    const destination = this.destination;\n    if (Boolean(predicateResult)) {\n      destination.next(value);\n    } else {\n      destination.complete();\n    }\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { PartialObserver } from '../Observer';\nimport { TeardownLogic } from '../Subscription';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function tap<T>(next: (x: T) => void, error?: (e: any) => void, complete?: () => void): MonoTypeOperatorFunction<T>;\nexport function tap<T>(observer: PartialObserver<T>): MonoTypeOperatorFunction<T>;\n/* tslint:enable:max-line-length */\n\n/**\n * Perform a side effect for every emission on the source Observable, but return\n * an Observable that is identical to the source.\n *\n * <span class=\"informal\">Intercepts each emission on the source and runs a\n * function, but returns an output which is identical to the source as long as errors don't occur.</span>\n *\n * <img src=\"./img/do.png\" width=\"100%\">\n *\n * Returns a mirrored Observable of the source Observable, but modified so that\n * the provided Observer is called to perform a side effect for every value,\n * error, and completion emitted by the source. Any errors that are thrown in\n * the aforementioned Observer or handlers are safely sent down the error path\n * of the output Observable.\n *\n * This operator is useful for debugging your Observables for the correct values\n * or performing other side effects.\n *\n * Note: this is different to a `subscribe` on the Observable. If the Observable\n * returned by `do` is not subscribed, the side effects specified by the\n * Observer will never happen. `do` therefore simply spies on existing\n * execution, it does not trigger an execution to happen like `subscribe` does.\n *\n * @example <caption>Map every click to the clientX position of that click, while also logging the click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var positions = clicks\n *   .do(ev => console.log(ev))\n *   .map(ev => ev.clientX);\n * positions.subscribe(x => console.log(x));\n *\n * @see {@link map}\n * @see {@link subscribe}\n *\n * @param {Observer|function} [nextOrObserver] A normal Observer object or a\n * callback for `next`.\n * @param {function} [error] Callback for errors in the source.\n * @param {function} [complete] Callback for the completion of the source.\n * @return {Observable} An Observable identical to the source, but runs the\n * specified Observer or callback(s) for each item.\n * @name tap\n */\nexport function tap<T>(nextOrObserver?: PartialObserver<T> | ((x: T) => void),\n                       error?: (e: any) => void,\n                       complete?: () => void): MonoTypeOperatorFunction<T> {\n  return function tapOperatorFunction(source: Observable<T>): Observable<T> {\n    return source.lift(new DoOperator(nextOrObserver, error, complete));\n  };\n}\n\nclass DoOperator<T> implements Operator<T, T> {\n  constructor(private nextOrObserver?: PartialObserver<T> | ((x: T) => void),\n              private error?: (e: any) => void,\n              private complete?: () => void) {\n  }\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new DoSubscriber(subscriber, this.nextOrObserver, this.error, this.complete));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass DoSubscriber<T> extends Subscriber<T> {\n\n  private safeSubscriber: Subscriber<T>;\n\n  constructor(destination: Subscriber<T>,\n              nextOrObserver?: PartialObserver<T> | ((x: T) => void),\n              error?: (e: any) => void,\n              complete?: () => void) {\n    super(destination);\n\n    const safeSubscriber = new Subscriber<T>(nextOrObserver, error, complete);\n    safeSubscriber.syncErrorThrowable = true;\n    this.add(safeSubscriber);\n    this.safeSubscriber = safeSubscriber;\n  }\n\n  protected _next(value: T): void {\n    const { safeSubscriber } = this;\n    safeSubscriber.next(value);\n    if (safeSubscriber.syncErrorThrown) {\n      this.destination.error(safeSubscriber.syncErrorValue);\n    } else {\n      this.destination.next(value);\n    }\n  }\n\n  protected _error(err: any): void {\n    const { safeSubscriber } = this;\n    safeSubscriber.error(err);\n    if (safeSubscriber.syncErrorThrown) {\n      this.destination.error(safeSubscriber.syncErrorValue);\n    } else {\n      this.destination.error(err);\n    }\n  }\n\n  protected _complete(): void {\n    const { safeSubscriber } = this;\n    safeSubscriber.complete();\n    if (safeSubscriber.syncErrorThrown) {\n      this.destination.error(safeSubscriber.syncErrorValue);\n    } else {\n      this.destination.complete();\n    }\n  }\n}\n","import { Operator } from '../Operator';\nimport { Observable, SubscribableOrPromise } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription, TeardownLogic } from '../Subscription';\n\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\nexport interface ThrottleConfig {\n  leading?: boolean;\n  trailing?: boolean;\n}\n\nexport const defaultThrottleConfig: ThrottleConfig = {\n  leading: true,\n  trailing: false\n};\n\n/**\n * Emits a value from the source Observable, then ignores subsequent source\n * values for a duration determined by another Observable, then repeats this\n * process.\n *\n * <span class=\"informal\">It's like {@link throttleTime}, but the silencing\n * duration is determined by a second Observable.</span>\n *\n * <img src=\"./img/throttle.png\" width=\"100%\">\n *\n * `throttle` emits the source Observable values on the output Observable\n * when its internal timer is disabled, and ignores source values when the timer\n * is enabled. Initially, the timer is disabled. As soon as the first source\n * value arrives, it is forwarded to the output Observable, and then the timer\n * is enabled by calling the `durationSelector` function with the source value,\n * which returns the \"duration\" Observable. When the duration Observable emits a\n * value or completes, the timer is disabled, and this process repeats for the\n * next source value.\n *\n * @example <caption>Emit clicks at a rate of at most one click per second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.throttle(ev => Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link audit}\n * @see {@link debounce}\n * @see {@link delayWhen}\n * @see {@link sample}\n * @see {@link throttleTime}\n *\n * @param {function(value: T): SubscribableOrPromise} durationSelector A function\n * that receives a value from the source Observable, for computing the silencing\n * duration for each source value, returned as an Observable or a Promise.\n * @param {Object} config a configuration object to define `leading` and `trailing` behavior. Defaults\n * to `{ leading: true, trailing: false }`.\n * @return {Observable<T>} An Observable that performs the throttle operation to\n * limit the rate of emissions from the source.\n * @method throttle\n * @owner Observable\n */\nexport function throttle<T>(durationSelector: (value: T) => SubscribableOrPromise<number>,\n                            config: ThrottleConfig = defaultThrottleConfig): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new ThrottleOperator(durationSelector, config.leading, config.trailing));\n}\n\nclass ThrottleOperator<T> implements Operator<T, T> {\n  constructor(private durationSelector: (value: T) => SubscribableOrPromise<number>,\n              private leading: boolean,\n              private trailing: boolean) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(\n      new ThrottleSubscriber(subscriber, this.durationSelector, this.leading, this.trailing)\n    );\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc\n * @ignore\n * @extends {Ignored}\n */\nclass ThrottleSubscriber<T, R> extends OuterSubscriber<T, R> {\n  private throttled: Subscription;\n  private _trailingValue: T;\n  private _hasTrailingValue = false;\n\n  constructor(protected destination: Subscriber<T>,\n              private durationSelector: (value: T) => SubscribableOrPromise<number>,\n              private _leading: boolean,\n              private _trailing: boolean) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    if (this.throttled) {\n      if (this._trailing) {\n        this._hasTrailingValue = true;\n        this._trailingValue = value;\n      }\n    } else {\n      const duration = this.tryDurationSelector(value);\n      if (duration) {\n        this.add(this.throttled = subscribeToResult(this, duration));\n      }\n      if (this._leading) {\n        this.destination.next(value);\n        if (this._trailing) {\n          this._hasTrailingValue = true;\n          this._trailingValue = value;\n        }\n      }\n    }\n  }\n\n  private tryDurationSelector(value: T): SubscribableOrPromise<any> {\n    try {\n      return this.durationSelector(value);\n    } catch (err) {\n      this.destination.error(err);\n      return null;\n    }\n  }\n\n  protected _unsubscribe() {\n    const { throttled, _trailingValue, _hasTrailingValue, _trailing } = this;\n\n    this._trailingValue = null;\n    this._hasTrailingValue = false;\n\n    if (throttled) {\n      this.remove(throttled);\n      this.throttled = null;\n      throttled.unsubscribe();\n    }\n  }\n\n  private _sendTrailing() {\n    const { destination, throttled, _trailing, _trailingValue, _hasTrailingValue } = this;\n    if (throttled && _trailing && _hasTrailingValue) {\n      destination.next(_trailingValue);\n      this._trailingValue = null;\n      this._hasTrailingValue = false;\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this._sendTrailing();\n    this._unsubscribe();\n  }\n\n  notifyComplete(): void {\n    this._sendTrailing();\n    this._unsubscribe();\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { IScheduler } from '../Scheduler';\nimport { Subscription, TeardownLogic } from '../Subscription';\nimport { async } from '../scheduler/async';\nimport { Observable } from '../Observable';\nimport { ThrottleConfig, defaultThrottleConfig } from './throttle';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Emits a value from the source Observable, then ignores subsequent source\n * values for `duration` milliseconds, then repeats this process.\n *\n * <span class=\"informal\">Lets a value pass, then ignores source values for the\n * next `duration` milliseconds.</span>\n *\n * <img src=\"./img/throttleTime.png\" width=\"100%\">\n *\n * `throttleTime` emits the source Observable values on the output Observable\n * when its internal timer is disabled, and ignores source values when the timer\n * is enabled. Initially, the timer is disabled. As soon as the first source\n * value arrives, it is forwarded to the output Observable, and then the timer\n * is enabled. After `duration` milliseconds (or the time unit determined\n * internally by the optional `scheduler`) has passed, the timer is disabled,\n * and this process repeats for the next source value. Optionally takes a\n * {@link IScheduler} for managing timers.\n *\n * @example <caption>Emit clicks at a rate of at most one click per second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.throttleTime(1000);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link auditTime}\n * @see {@link debounceTime}\n * @see {@link delay}\n * @see {@link sampleTime}\n * @see {@link throttle}\n *\n * @param {number} duration Time to wait before emitting another value after\n * emitting the last value, measured in milliseconds or the time unit determined\n * internally by the optional `scheduler`.\n * @param {Scheduler} [scheduler=async] The {@link IScheduler} to use for\n * managing the timers that handle the throttling.\n * @return {Observable<T>} An Observable that performs the throttle operation to\n * limit the rate of emissions from the source.\n * @method throttleTime\n * @owner Observable\n */\nexport function throttleTime<T>(duration: number,\n                                scheduler: IScheduler = async,\n                                config: ThrottleConfig = defaultThrottleConfig): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new ThrottleTimeOperator(duration, scheduler, config.leading, config.trailing));\n}\n\nclass ThrottleTimeOperator<T> implements Operator<T, T> {\n  constructor(private duration: number,\n              private scheduler: IScheduler,\n              private leading: boolean,\n              private trailing: boolean) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(\n      new ThrottleTimeSubscriber(subscriber, this.duration, this.scheduler, this.leading, this.trailing)\n    );\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass ThrottleTimeSubscriber<T> extends Subscriber<T> {\n  private throttled: Subscription;\n  private _hasTrailingValue: boolean = false;\n  private _trailingValue: T = null;\n\n  constructor(destination: Subscriber<T>,\n              private duration: number,\n              private scheduler: IScheduler,\n              private leading: boolean,\n              private trailing: boolean) {\n    super(destination);\n  }\n\n  protected _next(value: T) {\n    if (this.throttled) {\n      if (this.trailing) {\n        this._trailingValue = value;\n        this._hasTrailingValue = true;\n      }\n    } else {\n      this.add(this.throttled = this.scheduler.schedule(dispatchNext, this.duration, { subscriber: this }));\n      if (this.leading) {\n        this.destination.next(value);\n      }\n    }\n  }\n\n  clearThrottle() {\n    const throttled = this.throttled;\n    if (throttled) {\n      if (this.trailing && this._hasTrailingValue) {\n        this.destination.next(this._trailingValue);\n        this._trailingValue = null;\n        this._hasTrailingValue = false;\n      }\n      throttled.unsubscribe();\n      this.remove(throttled);\n      this.throttled = null;\n    }\n  }\n}\n\ninterface DispatchArg<T> {\n  subscriber: ThrottleTimeSubscriber<T>;\n}\n\nfunction dispatchNext<T>(arg: DispatchArg<T>) {\n  const { subscriber } = arg;\n  subscriber.clearThrottle();\n}\n","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { IScheduler } from '../Scheduler';\nimport { async } from '../scheduler/async';\nimport { OperatorFunction } from '../interfaces';\n\nexport function timeInterval<T>(scheduler: IScheduler = async): OperatorFunction<T, TimeInterval<T>> {\n  return (source: Observable<T>) => source.lift(new TimeIntervalOperator(scheduler));\n}\n\nexport class TimeInterval<T> {\n  constructor(public value: T, public interval: number) {\n\n  }\n};\n\nclass TimeIntervalOperator<T> implements Operator<T, TimeInterval<T>> {\n  constructor(private scheduler: IScheduler) {\n\n  }\n\n  call(observer: Subscriber<TimeInterval<T>>, source: any): any {\n    return source.subscribe(new TimeIntervalSubscriber(observer, this.scheduler));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass TimeIntervalSubscriber<T> extends Subscriber<T> {\n  private lastTime: number = 0;\n\n  constructor(destination: Subscriber<TimeInterval<T>>, private scheduler: IScheduler) {\n    super(destination);\n\n    this.lastTime = scheduler.now();\n  }\n\n  protected _next(value: T) {\n    let now = this.scheduler.now();\n    let span = now - this.lastTime;\n    this.lastTime = now;\n\n    this.destination.next(new TimeInterval(value, span));\n  }\n}\n","/**\r\n * An error thrown when duetime elapses.\r\n *\r\n * @see {@link timeout}\r\n *\r\n * @class TimeoutError\r\n */\r\nexport class TimeoutError extends Error {\r\n  constructor() {\r\n    const err: any = super('Timeout has occurred');\r\n    (<any> this).name = err.name = 'TimeoutError';\r\n    (<any> this).stack = err.stack;\r\n    (<any> this).message = err.message;\r\n  }\r\n}\r\n","import { Action } from '../scheduler/Action';\nimport { async } from '../scheduler/async';\nimport { isDate } from '../util/isDate';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { IScheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\nimport { TimeoutError } from '../util/TimeoutError';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n *\n * Errors if Observable does not emit a value in given time span.\n *\n * <span class=\"informal\">Timeouts on Observable that doesn't emit values fast enough.</span>\n *\n * <img src=\"./img/timeout.png\" width=\"100%\">\n *\n * `timeout` operator accepts as an argument either a number or a Date.\n *\n * If number was provided, it returns an Observable that behaves like a source\n * Observable, unless there is a period of time where there is no value emitted.\n * So if you provide `100` as argument and first value comes after 50ms from\n * the moment of subscription, this value will be simply re-emitted by the resulting\n * Observable. If however after that 100ms passes without a second value being emitted,\n * stream will end with an error and source Observable will be unsubscribed.\n * These checks are performed throughout whole lifecycle of Observable - from the moment\n * it was subscribed to, until it completes or errors itself. Thus every value must be\n * emitted within specified period since previous value.\n *\n * If provided argument was Date, returned Observable behaves differently. It throws\n * if Observable did not complete before provided Date. This means that periods between\n * emission of particular values do not matter in this case. If Observable did not complete\n * before provided Date, source Observable will be unsubscribed. Other than that, resulting\n * stream behaves just as source Observable.\n *\n * `timeout` accepts also a Scheduler as a second parameter. It is used to schedule moment (or moments)\n * when returned Observable will check if source stream emitted value or completed.\n *\n * @example <caption>Check if ticks are emitted within certain timespan</caption>\n * const seconds = Rx.Observable.interval(1000);\n *\n * seconds.timeout(1100) // Let's use bigger timespan to be safe,\n *                       // since `interval` might fire a bit later then scheduled.\n * .subscribe(\n *     value => console.log(value), // Will emit numbers just as regular `interval` would.\n *     err => console.log(err) // Will never be called.\n * );\n *\n * seconds.timeout(900).subscribe(\n *     value => console.log(value), // Will never be called.\n *     err => console.log(err) // Will emit error before even first value is emitted,\n *                             // since it did not arrive within 900ms period.\n * );\n *\n * @example <caption>Use Date to check if Observable completed</caption>\n * const seconds = Rx.Observable.interval(1000);\n *\n * seconds.timeout(new Date(\"December 17, 2020 03:24:00\"))\n * .subscribe(\n *     value => console.log(value), // Will emit values as regular `interval` would\n *                                  // until December 17, 2020 at 03:24:00.\n *     err => console.log(err) // On December 17, 2020 at 03:24:00 it will emit an error,\n *                             // since Observable did not complete by then.\n * );\n *\n * @see {@link timeoutWith}\n *\n * @param {number|Date} due Number specifying period within which Observable must emit values\n *                          or Date specifying before when Observable should complete\n * @param {Scheduler} [scheduler] Scheduler controlling when timeout checks occur.\n * @return {Observable<T>} Observable that mirrors behaviour of source, unless timeout checks fail.\n * @method timeout\n * @owner Observable\n */\nexport function timeout<T>(due: number | Date,\n                           scheduler: IScheduler = async): MonoTypeOperatorFunction<T> {\n  const absoluteTimeout = isDate(due);\n  const waitFor = absoluteTimeout ? (+due - scheduler.now()) : Math.abs(<number>due);\n  return (source: Observable<T>) => source.lift(new TimeoutOperator(waitFor, absoluteTimeout, scheduler, new TimeoutError()));\n}\n\nclass TimeoutOperator<T> implements Operator<T, T> {\n  constructor(private waitFor: number,\n              private absoluteTimeout: boolean,\n              private scheduler: IScheduler,\n              private errorInstance: TimeoutError) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new TimeoutSubscriber<T>(\n      subscriber, this.absoluteTimeout, this.waitFor, this.scheduler, this.errorInstance\n    ));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass TimeoutSubscriber<T> extends Subscriber<T> {\n\n  private action: Action<TimeoutSubscriber<T>> = null;\n\n  constructor(destination: Subscriber<T>,\n              private absoluteTimeout: boolean,\n              private waitFor: number,\n              private scheduler: IScheduler,\n              private errorInstance: TimeoutError) {\n    super(destination);\n    this.scheduleTimeout();\n  }\n\n  private static dispatchTimeout<T>(subscriber: TimeoutSubscriber<T>): void {\n    subscriber.error(subscriber.errorInstance);\n  }\n\n  private scheduleTimeout(): void {\n    const { action } = this;\n    if (action) {\n      // Recycle the action if we've already scheduled one. All the production\n      // Scheduler Actions mutate their state/delay time and return themeselves.\n      // VirtualActions are immutable, so they create and return a clone. In this\n      // case, we need to set the action reference to the most recent VirtualAction,\n      // to ensure that's the one we clone from next time.\n      this.action = (<Action<TimeoutSubscriber<T>>> action.schedule(this, this.waitFor));\n    } else {\n      this.add(this.action = (<Action<TimeoutSubscriber<T>>> this.scheduler.schedule(\n        TimeoutSubscriber.dispatchTimeout, this.waitFor, this\n      )));\n    }\n  }\n\n  protected _next(value: T): void {\n    if (!this.absoluteTimeout) {\n      this.scheduleTimeout();\n    }\n    super._next(value);\n  }\n\n  protected _unsubscribe() {\n    this.action = null;\n    this.scheduler = null;\n    this.errorInstance = null;\n  }\n}\n","import { Action } from '../scheduler/Action';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { IScheduler } from '../Scheduler';\nimport { async } from '../scheduler/async';\nimport { TeardownLogic } from '../Subscription';\nimport { Observable, ObservableInput } from '../Observable';\nimport { isDate } from '../util/isDate';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OperatorFunction, MonoTypeOperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function timeoutWith<T>(due: number | Date, withObservable: ObservableInput<T>, scheduler?: IScheduler): MonoTypeOperatorFunction<T>;\nexport function timeoutWith<T, R>(due: number | Date, withObservable: ObservableInput<R>, scheduler?: IScheduler): OperatorFunction<T, T | R>;\n/* tslint:enable:max-line-length */\n\n/**\n *\n * Errors if Observable does not emit a value in given time span, in case of which\n * subscribes to the second Observable.\n *\n * <span class=\"informal\">It's a version of `timeout` operator that let's you specify fallback Observable.</span>\n *\n * <img src=\"./img/timeoutWith.png\" width=\"100%\">\n *\n * `timeoutWith` is a variation of `timeout` operator. It behaves exactly the same,\n * still accepting as a first argument either a number or a Date, which control - respectively -\n * when values of source Observable should be emitted or when it should complete.\n *\n * The only difference is that it accepts a second, required parameter. This parameter\n * should be an Observable which will be subscribed when source Observable fails any timeout check.\n * So whenever regular `timeout` would emit an error, `timeoutWith` will instead start re-emitting\n * values from second Observable. Note that this fallback Observable is not checked for timeouts\n * itself, so it can emit values and complete at arbitrary points in time. From the moment of a second\n * subscription, Observable returned from `timeoutWith` simply mirrors fallback stream. When that\n * stream completes, it completes as well.\n *\n * Scheduler, which in case of `timeout` is provided as as second argument, can be still provided\n * here - as a third, optional parameter. It still is used to schedule timeout checks and -\n * as a consequence - when second Observable will be subscribed, since subscription happens\n * immediately after failing check.\n *\n * @example <caption>Add fallback observable</caption>\n * const seconds = Rx.Observable.interval(1000);\n * const minutes = Rx.Observable.interval(60 * 1000);\n *\n * seconds.timeoutWith(900, minutes)\n *     .subscribe(\n *         value => console.log(value), // After 900ms, will start emitting `minutes`,\n *                                      // since first value of `seconds` will not arrive fast enough.\n *         err => console.log(err) // Would be called after 900ms in case of `timeout`,\n *                                 // but here will never be called.\n *     );\n *\n * @param {number|Date} due Number specifying period within which Observable must emit values\n *                          or Date specifying before when Observable should complete\n * @param {Observable<T>} withObservable Observable which will be subscribed if source fails timeout check.\n * @param {Scheduler} [scheduler] Scheduler controlling when timeout checks occur.\n * @return {Observable<T>} Observable that mirrors behaviour of source or, when timeout check fails, of an Observable\n *                          passed as a second parameter.\n * @method timeoutWith\n * @owner Observable\n */\nexport function timeoutWith<T, R>(due: number | Date,\n                                  withObservable: ObservableInput<R>,\n                                  scheduler: IScheduler = async): OperatorFunction<T, T | R> {\n  return (source: Observable<T>) => {\n    let absoluteTimeout = isDate(due);\n    let waitFor = absoluteTimeout ? (+due - scheduler.now()) : Math.abs(<number>due);\n    return source.lift(new TimeoutWithOperator(waitFor, absoluteTimeout, withObservable, scheduler));\n  };\n}\n\nclass TimeoutWithOperator<T> implements Operator<T, T> {\n  constructor(private waitFor: number,\n              private absoluteTimeout: boolean,\n              private withObservable: ObservableInput<any>,\n              private scheduler: IScheduler) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new TimeoutWithSubscriber(\n      subscriber, this.absoluteTimeout, this.waitFor, this.withObservable, this.scheduler\n    ));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass TimeoutWithSubscriber<T, R> extends OuterSubscriber<T, R> {\n\n  private action: Action<TimeoutWithSubscriber<T, R>> = null;\n\n  constructor(destination: Subscriber<T>,\n              private absoluteTimeout: boolean,\n              private waitFor: number,\n              private withObservable: ObservableInput<any>,\n              private scheduler: IScheduler) {\n    super(destination);\n    this.scheduleTimeout();\n  }\n\n  private static dispatchTimeout<T, R>(subscriber: TimeoutWithSubscriber<T, R>): void {\n    const { withObservable } = subscriber;\n    (<any> subscriber)._unsubscribeAndRecycle();\n    subscriber.add(subscribeToResult(subscriber, withObservable));\n  }\n\n  private scheduleTimeout(): void {\n    const { action } = this;\n    if (action) {\n      // Recycle the action if we've already scheduled one. All the production\n      // Scheduler Actions mutate their state/delay time and return themeselves.\n      // VirtualActions are immutable, so they create and return a clone. In this\n      // case, we need to set the action reference to the most recent VirtualAction,\n      // to ensure that's the one we clone from next time.\n      this.action = (<Action<TimeoutWithSubscriber<T, R>>> action.schedule(this, this.waitFor));\n    } else {\n      this.add(this.action = (<Action<TimeoutWithSubscriber<T, R>>> this.scheduler.schedule(\n        TimeoutWithSubscriber.dispatchTimeout, this.waitFor, this\n      )));\n    }\n  }\n\n  protected _next(value: T): void {\n    if (!this.absoluteTimeout) {\n      this.scheduleTimeout();\n    }\n    super._next(value);\n  }\n\n  protected _unsubscribe() {\n    this.action = null;\n    this.scheduler = null;\n    this.withObservable = null;\n  }\n}\n","import { Observable } from '../Observable';\nimport { OperatorFunction } from '../interfaces';\nimport { Subject } from '../Subject';\nimport { Subscriber } from '../Subscriber';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { Operator } from '../Operator';\n\n/**\n * Branch out the source Observable values as a nested Observable whenever\n * `windowBoundaries` emits.\n *\n * <span class=\"informal\">It's like {@link buffer}, but emits a nested Observable\n * instead of an array.</span>\n *\n * <img src=\"./img/window.png\" width=\"100%\">\n *\n * Returns an Observable that emits windows of items it collects from the source\n * Observable. The output Observable emits connected, non-overlapping\n * windows. It emits the current window and opens a new one whenever the\n * Observable `windowBoundaries` emits an item. Because each window is an\n * Observable, the output is a higher-order Observable.\n *\n * @example <caption>In every window of 1 second each, emit at most 2 click events</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var interval = Rx.Observable.interval(1000);\n * var result = clicks.window(interval)\n *   .map(win => win.take(2)) // each window has at most 2 emissions\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @see {@link windowCount}\n * @see {@link windowTime}\n * @see {@link windowToggle}\n * @see {@link windowWhen}\n * @see {@link buffer}\n *\n * @param {Observable<any>} windowBoundaries An Observable that completes the\n * previous window and starts a new window.\n * @return {Observable<Observable<T>>} An Observable of windows, which are\n * Observables emitting values of the source Observable.\n * @method window\n * @owner Observable\n */\nexport function window<T>(windowBoundaries: Observable<any>): OperatorFunction<T, Observable<T>> {\n  return function windowOperatorFunction(source: Observable<T>) {\n    return source.lift(new WindowOperator(windowBoundaries));\n  };\n}\n\nclass WindowOperator<T> implements Operator<T, Observable<T>> {\n\n  constructor(private windowBoundaries: Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<Observable<T>>, source: any): any {\n    const windowSubscriber = new WindowSubscriber(subscriber);\n    const sourceSubscription = source.subscribe(windowSubscriber);\n    if (!sourceSubscription.closed) {\n      windowSubscriber.add(subscribeToResult(windowSubscriber, this.windowBoundaries));\n    }\n    return sourceSubscription;\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass WindowSubscriber<T> extends OuterSubscriber<T, any> {\n\n  private window: Subject<T> = new Subject<T>();\n\n  constructor(destination: Subscriber<Observable<T>>) {\n    super(destination);\n    destination.next(this.window);\n  }\n\n  notifyNext(outerValue: T, innerValue: any,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, any>): void {\n    this.openWindow();\n  }\n\n  notifyError(error: any, innerSub: InnerSubscriber<T, any>): void {\n    this._error(error);\n  }\n\n  notifyComplete(innerSub: InnerSubscriber<T, any>): void {\n    this._complete();\n  }\n\n  protected _next(value: T): void {\n    this.window.next(value);\n  }\n\n  protected _error(err: any): void {\n    this.window.error(err);\n    this.destination.error(err);\n  }\n\n  protected _complete(): void {\n    this.window.complete();\n    this.destination.complete();\n  }\n\n  protected _unsubscribe() {\n    this.window = null;\n  }\n\n  private openWindow(): void  {\n    const prevWindow = this.window;\n    if (prevWindow) {\n      prevWindow.complete();\n    }\n    const destination = this.destination;\n    const newWindow = this.window = new Subject<T>();\n    destination.next(newWindow);\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { Subject } from '../Subject';\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Branch out the source Observable values as a nested Observable with each\n * nested Observable emitting at most `windowSize` values.\n *\n * <span class=\"informal\">It's like {@link bufferCount}, but emits a nested\n * Observable instead of an array.</span>\n *\n * <img src=\"./img/windowCount.png\" width=\"100%\">\n *\n * Returns an Observable that emits windows of items it collects from the source\n * Observable. The output Observable emits windows every `startWindowEvery`\n * items, each containing no more than `windowSize` items. When the source\n * Observable completes or encounters an error, the output Observable emits\n * the current window and propagates the notification from the source\n * Observable. If `startWindowEvery` is not provided, then new windows are\n * started immediately at the start of the source and when each window completes\n * with size `windowSize`.\n *\n * @example <caption>Ignore every 3rd click event, starting from the first one</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.windowCount(3)\n *   .map(win => win.skip(1)) // skip first of every 3 clicks\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @example <caption>Ignore every 3rd click event, starting from the third one</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.windowCount(2, 3)\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @see {@link window}\n * @see {@link windowTime}\n * @see {@link windowToggle}\n * @see {@link windowWhen}\n * @see {@link bufferCount}\n *\n * @param {number} windowSize The maximum number of values emitted by each\n * window.\n * @param {number} [startWindowEvery] Interval at which to start a new window.\n * For example if `startWindowEvery` is `2`, then a new window will be started\n * on every other value from the source. A new window is started at the\n * beginning of the source by default.\n * @return {Observable<Observable<T>>} An Observable of windows, which in turn\n * are Observable of values.\n * @method windowCount\n * @owner Observable\n */\nexport function windowCount<T>(windowSize: number,\n                               startWindowEvery: number = 0): OperatorFunction<T, Observable<T>> {\n  return function windowCountOperatorFunction(source: Observable<T>) {\n    return source.lift(new WindowCountOperator<T>(windowSize, startWindowEvery));\n  };\n}\n\nclass WindowCountOperator<T> implements Operator<T, Observable<T>> {\n\n  constructor(private windowSize: number,\n              private startWindowEvery: number) {\n  }\n\n  call(subscriber: Subscriber<Observable<T>>, source: any): any {\n    return source.subscribe(new WindowCountSubscriber(subscriber, this.windowSize, this.startWindowEvery));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass WindowCountSubscriber<T> extends Subscriber<T> {\n  private windows: Subject<T>[] = [ new Subject<T>() ];\n  private count: number = 0;\n\n  constructor(protected destination: Subscriber<Observable<T>>,\n              private windowSize: number,\n              private startWindowEvery: number) {\n    super(destination);\n    destination.next(this.windows[0]);\n  }\n\n  protected _next(value: T) {\n    const startWindowEvery = (this.startWindowEvery > 0) ? this.startWindowEvery : this.windowSize;\n    const destination = this.destination;\n    const windowSize = this.windowSize;\n    const windows = this.windows;\n    const len = windows.length;\n\n    for (let i = 0; i < len && !this.closed; i++) {\n      windows[i].next(value);\n    }\n    const c = this.count - windowSize + 1;\n    if (c >= 0 && c % startWindowEvery === 0 && !this.closed) {\n      windows.shift().complete();\n    }\n    if (++this.count % startWindowEvery === 0 && !this.closed) {\n      const window = new Subject<T>();\n      windows.push(window);\n      destination.next(window);\n    }\n  }\n\n  protected _error(err: any) {\n    const windows = this.windows;\n    if (windows) {\n      while (windows.length > 0 && !this.closed) {\n        windows.shift().error(err);\n      }\n    }\n    this.destination.error(err);\n  }\n\n  protected _complete() {\n    const windows = this.windows;\n    if (windows) {\n      while (windows.length > 0 && !this.closed) {\n        windows.shift().complete();\n      }\n    }\n    this.destination.complete();\n  }\n\n  protected _unsubscribe() {\n    this.count = 0;\n    this.windows = null;\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable, SubscribableOrPromise } from '../Observable';\nimport { Subscription } from '../Subscription';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Buffers the source Observable values starting from an emission from\n * `openings` and ending when the output of `closingSelector` emits.\n *\n * <span class=\"informal\">Collects values from the past as an array. Starts\n * collecting only when `opening` emits, and calls the `closingSelector`\n * function to get an Observable that tells when to close the buffer.</span>\n *\n * <img src=\"./img/bufferToggle.png\" width=\"100%\">\n *\n * Buffers values from the source by opening the buffer via signals from an\n * Observable provided to `openings`, and closing and sending the buffers when\n * a Subscribable or Promise returned by the `closingSelector` function emits.\n *\n * @example <caption>Every other second, emit the click events from the next 500ms</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var openings = Rx.Observable.interval(1000);\n * var buffered = clicks.bufferToggle(openings, i =>\n *   i % 2 ? Rx.Observable.interval(500) : Rx.Observable.empty()\n * );\n * buffered.subscribe(x => console.log(x));\n *\n * @see {@link buffer}\n * @see {@link bufferCount}\n * @see {@link bufferTime}\n * @see {@link bufferWhen}\n * @see {@link windowToggle}\n *\n * @param {SubscribableOrPromise<O>} openings A Subscribable or Promise of notifications to start new\n * buffers.\n * @param {function(value: O): SubscribableOrPromise} closingSelector A function that takes\n * the value emitted by the `openings` observable and returns a Subscribable or Promise,\n * which, when it emits, signals that the associated buffer should be emitted\n * and cleared.\n * @return {Observable<T[]>} An observable of arrays of buffered values.\n * @method bufferToggle\n * @owner Observable\n */\nexport function bufferToggle<T, O>(\n  openings: SubscribableOrPromise<O>,\n  closingSelector: (value: O) => SubscribableOrPromise<any>\n): OperatorFunction<T, T[]> {\n  return function bufferToggleOperatorFunction(source: Observable<T>) {\n    return source.lift(new BufferToggleOperator<T, O>(openings, closingSelector));\n  };\n}\n\nclass BufferToggleOperator<T, O> implements Operator<T, T[]> {\n\n  constructor(private openings: SubscribableOrPromise<O>,\n              private closingSelector: (value: O) => SubscribableOrPromise<any>) {\n  }\n\n  call(subscriber: Subscriber<T[]>, source: any): any {\n    return source.subscribe(new BufferToggleSubscriber(subscriber, this.openings, this.closingSelector));\n  }\n}\n\ninterface BufferContext<T> {\n  buffer: T[];\n  subscription: Subscription;\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass BufferToggleSubscriber<T, O> extends OuterSubscriber<T, O> {\n  private contexts: Array<BufferContext<T>> = [];\n\n  constructor(destination: Subscriber<T[]>,\n              private openings: SubscribableOrPromise<O>,\n              private closingSelector: (value: O) => SubscribableOrPromise<any> | void) {\n    super(destination);\n    this.add(subscribeToResult(this, openings));\n  }\n\n  protected _next(value: T): void {\n    const contexts = this.contexts;\n    const len = contexts.length;\n    for (let i = 0; i < len; i++) {\n      contexts[i].buffer.push(value);\n    }\n  }\n\n  protected _error(err: any): void {\n    const contexts = this.contexts;\n    while (contexts.length > 0) {\n      const context = contexts.shift();\n      context.subscription.unsubscribe();\n      context.buffer = null;\n      context.subscription = null;\n    }\n    this.contexts = null;\n    super._error(err);\n  }\n\n  protected _complete(): void {\n    const contexts = this.contexts;\n    while (contexts.length > 0) {\n      const context = contexts.shift();\n      this.destination.next(context.buffer);\n      context.subscription.unsubscribe();\n      context.buffer = null;\n      context.subscription = null;\n    }\n    this.contexts = null;\n    super._complete();\n  }\n\n  notifyNext(outerValue: any, innerValue: O,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, O>): void {\n    outerValue ? this.closeBuffer(outerValue) : this.openBuffer(innerValue);\n  }\n\n  notifyComplete(innerSub: InnerSubscriber<T, O>): void {\n    this.closeBuffer((<any> innerSub).context);\n  }\n\n  private openBuffer(value: O): void {\n    try {\n      const closingSelector = this.closingSelector;\n      const closingNotifier = closingSelector.call(this, value);\n      if (closingNotifier) {\n        this.trySubscribe(closingNotifier);\n      }\n    } catch (err) {\n      this._error(err);\n    }\n  }\n\n  private closeBuffer(context: BufferContext<T>): void {\n    const contexts = this.contexts;\n\n    if (contexts && context) {\n      const { buffer, subscription } = context;\n      this.destination.next(buffer);\n      contexts.splice(contexts.indexOf(context), 1);\n      this.remove(subscription);\n      subscription.unsubscribe();\n    }\n  }\n\n  private trySubscribe(closingNotifier: any): void {\n    const contexts = this.contexts;\n\n    const buffer: Array<T> = [];\n    const subscription = new Subscription();\n    const context = { buffer, subscription };\n    contexts.push(context);\n\n    const innerSubscription = subscribeToResult(this, closingNotifier, <any>context);\n\n    if (!innerSubscription || innerSubscription.closed) {\n      this.closeBuffer(context);\n    } else {\n      (<any> innerSubscription).context = context;\n\n      this.add(innerSubscription);\n      subscription.add(innerSubscription);\n    }\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { Subscription } from '../Subscription';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Buffers the source Observable values, using a factory function of closing\n * Observables to determine when to close, emit, and reset the buffer.\n *\n * <span class=\"informal\">Collects values from the past as an array. When it\n * starts collecting values, it calls a function that returns an Observable that\n * tells when to close the buffer and restart collecting.</span>\n *\n * <img src=\"./img/bufferWhen.png\" width=\"100%\">\n *\n * Opens a buffer immediately, then closes the buffer when the observable\n * returned by calling `closingSelector` function emits a value. When it closes\n * the buffer, it immediately opens a new buffer and repeats the process.\n *\n * @example <caption>Emit an array of the last clicks every [1-5] random seconds</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var buffered = clicks.bufferWhen(() =>\n *   Rx.Observable.interval(1000 + Math.random() * 4000)\n * );\n * buffered.subscribe(x => console.log(x));\n *\n * @see {@link buffer}\n * @see {@link bufferCount}\n * @see {@link bufferTime}\n * @see {@link bufferToggle}\n * @see {@link windowWhen}\n *\n * @param {function(): Observable} closingSelector A function that takes no\n * arguments and returns an Observable that signals buffer closure.\n * @return {Observable<T[]>} An observable of arrays of buffered values.\n * @method bufferWhen\n * @owner Observable\n */\nexport function bufferWhen<T>(closingSelector: () => Observable<any>): OperatorFunction<T, T[]> {\n  return function (source: Observable<T>) {\n    return source.lift(new BufferWhenOperator(closingSelector));\n  };\n}\n\nclass BufferWhenOperator<T> implements Operator<T, T[]> {\n\n  constructor(private closingSelector: () => Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<T[]>, source: any): any {\n    return source.subscribe(new BufferWhenSubscriber(subscriber, this.closingSelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass BufferWhenSubscriber<T> extends OuterSubscriber<T, any> {\n  private buffer: T[];\n  private subscribing: boolean = false;\n  private closingSubscription: Subscription;\n\n  constructor(destination: Subscriber<T[]>, private closingSelector: () => Observable<any>) {\n    super(destination);\n    this.openBuffer();\n  }\n\n  protected _next(value: T) {\n    this.buffer.push(value);\n  }\n\n  protected _complete() {\n    const buffer = this.buffer;\n    if (buffer) {\n      this.destination.next(buffer);\n    }\n    super._complete();\n  }\n\n  protected _unsubscribe() {\n    this.buffer = null;\n    this.subscribing = false;\n  }\n\n  notifyNext(outerValue: T, innerValue: any,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, any>): void {\n    this.openBuffer();\n  }\n\n  notifyComplete(): void {\n    if (this.subscribing) {\n      this.complete();\n    } else {\n      this.openBuffer();\n    }\n  }\n\n  openBuffer() {\n\n    let { closingSubscription } = this;\n\n    if (closingSubscription) {\n      this.remove(closingSubscription);\n      closingSubscription.unsubscribe();\n    }\n\n    const buffer = this.buffer;\n    if (this.buffer) {\n      this.destination.next(buffer);\n    }\n\n    this.buffer = [];\n\n    const closingNotifier = tryCatch(this.closingSelector)();\n\n    if (closingNotifier === errorObject) {\n      this.error(errorObject.e);\n    } else {\n      closingSubscription = new Subscription();\n      this.closingSubscription = closingSubscription;\n      this.add(closingSubscription);\n      this.subscribing = true;\n      closingSubscription.add(subscribeToResult(this, closingNotifier));\n      this.subscribing = false;\n    }\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable, ObservableInput } from '../Observable';\n\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Catches errors on the observable to be handled by returning a new observable or throwing an error.\n *\n * <img src=\"./img/catch.png\" width=\"100%\">\n *\n * @example <caption>Continues with a different Observable when there's an error</caption>\n *\n * Observable.of(1, 2, 3, 4, 5)\n *   .map(n => {\n * \t   if (n == 4) {\n * \t     throw 'four!';\n *     }\n *\t   return n;\n *   })\n *   .catch(err => Observable.of('I', 'II', 'III', 'IV', 'V'))\n *   .subscribe(x => console.log(x));\n *   // 1, 2, 3, I, II, III, IV, V\n *\n * @example <caption>Retries the caught source Observable again in case of error, similar to retry() operator</caption>\n *\n * Observable.of(1, 2, 3, 4, 5)\n *   .map(n => {\n * \t   if (n === 4) {\n * \t     throw 'four!';\n *     }\n * \t   return n;\n *   })\n *   .catch((err, caught) => caught)\n *   .take(30)\n *   .subscribe(x => console.log(x));\n *   // 1, 2, 3, 1, 2, 3, ...\n *\n * @example <caption>Throws a new error when the source Observable throws an error</caption>\n *\n * Observable.of(1, 2, 3, 4, 5)\n *   .map(n => {\n *     if (n == 4) {\n *       throw 'four!';\n *     }\n *     return n;\n *   })\n *   .catch(err => {\n *     throw 'error in source. Details: ' + err;\n *   })\n *   .subscribe(\n *     x => console.log(x),\n *     err => console.log(err)\n *   );\n *   // 1, 2, 3, error in source. Details: four!\n *\n * @param {function} selector a function that takes as arguments `err`, which is the error, and `caught`, which\n *  is the source observable, in case you'd like to \"retry\" that observable by returning it again. Whatever observable\n *  is returned by the `selector` will be used to continue the observable chain.\n * @return {Observable} An observable that originates from either the source or the observable returned by the\n *  catch `selector` function.\n * @name catchError\n */\nexport function catchError<T, R>(selector: (err: any, caught: Observable<T>) => ObservableInput<R>): OperatorFunction<T, T | R> {\n  return function catchErrorOperatorFunction(source: Observable<T>): Observable<T | R> {\n    const operator = new CatchOperator(selector);\n    const caught = source.lift(operator);\n    return (operator.caught = caught as Observable<T>);\n  };\n}\n\nclass CatchOperator<T, R> implements Operator<T, T | R> {\n  caught: Observable<T>;\n\n  constructor(private selector: (err: any, caught: Observable<T>) => ObservableInput<T | R>) {\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new CatchSubscriber(subscriber, this.selector, this.caught));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass CatchSubscriber<T, R> extends OuterSubscriber<T, T | R> {\n  constructor(destination: Subscriber<any>,\n              private selector: (err: any, caught: Observable<T>) => ObservableInput<T | R>,\n              private caught: Observable<T>) {\n    super(destination);\n  }\n\n  // NOTE: overriding `error` instead of `_error` because we don't want\n  // to have this flag this subscriber as `isStopped`. We can mimic the\n  // behavior of the RetrySubscriber (from the `retry` operator), where\n  // we unsubscribe from our source chain, reset our Subscriber flags,\n  // then subscribe to the selector result.\n  error(err: any) {\n    if (!this.isStopped) {\n      let result: any;\n      try {\n        result = this.selector(err, this.caught);\n      } catch (err2) {\n        super.error(err2);\n        return;\n      }\n      this._unsubscribeAndRecycle();\n      this.add(subscribeToResult(this, result));\n    }\n  }\n}\n","import { Observable, ObservableInput } from '../Observable';\nimport { ArrayObservable } from '../observable/ArrayObservable';\nimport { isArray } from '../util/isArray';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OperatorFunction } from '../interfaces';\n\nconst none = {};\n\n/* tslint:disable:max-line-length */\nexport function combineLatest<T, R>(project: (v1: T) => R): OperatorFunction<T, R>;\nexport function combineLatest<T, T2, R>(v2: ObservableInput<T2>, project: (v1: T, v2: T2) => R): OperatorFunction<T, R>;\nexport function combineLatest<T, T2, T3, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, project: (v1: T, v2: T2, v3: T3) => R): OperatorFunction<T, R>;\nexport function combineLatest<T, T2, T3, T4, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, project: (v1: T, v2: T2, v3: T3, v4: T4) => R): OperatorFunction<T, R>;\nexport function combineLatest<T, T2, T3, T4, T5, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5) => R): OperatorFunction<T, R>;\nexport function combineLatest<T, T2, T3, T4, T5, T6, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6) => R): OperatorFunction<T, R> ;\nexport function combineLatest<T, T2>(v2: ObservableInput<T2>): OperatorFunction<T, [T, T2]>;\nexport function combineLatest<T, T2, T3>(v2: ObservableInput<T2>, v3: ObservableInput<T3>): OperatorFunction<T, [T, T2, T3]>;\nexport function combineLatest<T, T2, T3, T4>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>): OperatorFunction<T, [T, T2, T3, T4]>;\nexport function combineLatest<T, T2, T3, T4, T5>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>): OperatorFunction<T, [T, T2, T3, T4, T5]>;\nexport function combineLatest<T, T2, T3, T4, T5, T6>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>): OperatorFunction<T, [T, T2, T3, T4, T5, T6]> ;\nexport function combineLatest<T, R>(...observables: Array<ObservableInput<T> | ((...values: Array<T>) => R)>): OperatorFunction<T, R>;\nexport function combineLatest<T, R>(array: ObservableInput<T>[]): OperatorFunction<T, Array<T>>;\nexport function combineLatest<T, TOther, R>(array: ObservableInput<TOther>[], project: (v1: T, ...values: Array<TOther>) => R): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Combines multiple Observables to create an Observable whose values are\n * calculated from the latest values of each of its input Observables.\n *\n * <span class=\"informal\">Whenever any input Observable emits a value, it\n * computes a formula using the latest values from all the inputs, then emits\n * the output of that formula.</span>\n *\n * <img src=\"./img/combineLatest.png\" width=\"100%\">\n *\n * `combineLatest` combines the values from this Observable with values from\n * Observables passed as arguments. This is done by subscribing to each\n * Observable, in order, and collecting an array of each of the most recent\n * values any time any of the input Observables emits, then either taking that\n * array and passing it as arguments to an optional `project` function and\n * emitting the return value of that, or just emitting the array of recent\n * values directly if there is no `project` function.\n *\n * @example <caption>Dynamically calculate the Body-Mass Index from an Observable of weight and one for height</caption>\n * var weight = Rx.Observable.of(70, 72, 76, 79, 75);\n * var height = Rx.Observable.of(1.76, 1.77, 1.78);\n * var bmi = weight.combineLatest(height, (w, h) => w / (h * h));\n * bmi.subscribe(x => console.log('BMI is ' + x));\n *\n * // With output to console:\n * // BMI is 24.212293388429753\n * // BMI is 23.93948099205209\n * // BMI is 23.671253629592222\n *\n * @see {@link combineAll}\n * @see {@link merge}\n * @see {@link withLatestFrom}\n *\n * @param {ObservableInput} other An input Observable to combine with the source\n * Observable. More than one input Observables may be given as argument.\n * @param {function} [project] An optional function to project the values from\n * the combined latest values into a new value on the output Observable.\n * @return {Observable} An Observable of projected values from the most recent\n * values from each input Observable, or an array of the most recent values from\n * each input Observable.\n * @method combineLatest\n * @owner Observable\n */\nexport function combineLatest<T, R>(...observables: Array<ObservableInput<any> |\n                                                    Array<ObservableInput<any>> |\n                                                    ((...values: Array<any>) => R)>): OperatorFunction<T, R> {\n  let project: (...values: Array<any>) => R = null;\n  if (typeof observables[observables.length - 1] === 'function') {\n    project = <(...values: Array<any>) => R>observables.pop();\n  }\n\n  // if the first and only other argument besides the resultSelector is an array\n  // assume it's been called with `combineLatest([obs1, obs2, obs3], project)`\n  if (observables.length === 1 && isArray(observables[0])) {\n    observables = (<any>observables[0]).slice();\n  }\n\n  return (source: Observable<T>) => source.lift.call(new ArrayObservable([source, ...observables]), new CombineLatestOperator(project));\n}\n\nexport class CombineLatestOperator<T, R> implements Operator<T, R> {\n  constructor(private project?: (...values: Array<any>) => R) {\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new CombineLatestSubscriber(subscriber, this.project));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class CombineLatestSubscriber<T, R> extends OuterSubscriber<T, R> {\n  private active: number = 0;\n  private values: any[] = [];\n  private observables: any[] = [];\n  private toRespond: number;\n\n  constructor(destination: Subscriber<R>, private project?: (...values: Array<any>) => R) {\n    super(destination);\n  }\n\n  protected _next(observable: any) {\n    this.values.push(none);\n    this.observables.push(observable);\n  }\n\n  protected _complete() {\n    const observables = this.observables;\n    const len = observables.length;\n    if (len === 0) {\n      this.destination.complete();\n    } else {\n      this.active = len;\n      this.toRespond = len;\n      for (let i = 0; i < len; i++) {\n        const observable = observables[i];\n        this.add(subscribeToResult(this, observable, observable, i));\n      }\n    }\n  }\n\n  notifyComplete(unused: Subscriber<R>): void {\n    if ((this.active -= 1) === 0) {\n      this.destination.complete();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    const values = this.values;\n    const oldVal = values[outerIndex];\n    const toRespond = !this.toRespond\n      ? 0\n      : oldVal === none ? --this.toRespond : this.toRespond;\n    values[outerIndex] = innerValue;\n\n    if (toRespond === 0) {\n      if (this.project) {\n        this._tryProject(values);\n      } else {\n        this.destination.next(values.slice());\n      }\n    }\n  }\n\n  private _tryProject(values: any[]) {\n    let result: any;\n    try {\n      result = this.project.apply(this, values);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.destination.next(result);\n  }\n}\n","import { root } from '../util/root';\nimport { IScheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { iterator as Symbol_iterator } from '../symbol/iterator';\nimport { TeardownLogic } from '../Subscription';\nimport { Subscriber } from '../Subscriber';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class IteratorObservable<T> extends Observable<T> {\n  private iterator: any;\n\n  static create<T>(iterator: any, scheduler?: IScheduler): IteratorObservable<T> {\n    return new IteratorObservable(iterator, scheduler);\n  }\n\n  static dispatch(state: any) {\n\n    const { index, hasError, iterator, subscriber } = state;\n\n    if (hasError) {\n      subscriber.error(state.error);\n      return;\n    }\n\n    let result = iterator.next();\n    if (result.done) {\n      subscriber.complete();\n      return;\n    }\n\n    subscriber.next(result.value);\n    state.index = index + 1;\n\n    if (subscriber.closed) {\n      if (typeof iterator.return === 'function') {\n        iterator.return();\n      }\n      return;\n    }\n\n    (<any> this).schedule(state);\n  }\n\n  constructor(iterator: any, private scheduler?: IScheduler) {\n    super();\n\n    if (iterator == null) {\n      throw new Error('iterator cannot be null.');\n    }\n\n    this.iterator = getIterator(iterator);\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): TeardownLogic {\n\n    let index = 0;\n    const { iterator, scheduler } = this;\n\n    if (scheduler) {\n      return scheduler.schedule(IteratorObservable.dispatch, 0, {\n        index, iterator, subscriber\n      });\n    } else {\n      do {\n        let result = iterator.next();\n        if (result.done) {\n          subscriber.complete();\n          break;\n        } else {\n          subscriber.next(result.value);\n        }\n        if (subscriber.closed) {\n          if (typeof iterator.return === 'function') {\n            iterator.return();\n          }\n          break;\n        }\n      } while (true);\n    }\n  }\n}\n\nclass StringIterator {\n  constructor(private str: string,\n              private idx: number = 0,\n              private len: number = str.length) {\n  }\n  [Symbol_iterator]() { return (this); }\n  next() {\n    return this.idx < this.len ? {\n        done: false,\n        value: this.str.charAt(this.idx++)\n    } : {\n        done: true,\n        value: undefined\n    };\n  }\n}\n\nclass ArrayIterator {\n  constructor(private arr: Array<any>,\n              private idx: number = 0,\n              private len: number = toLength(arr)) {\n  }\n  [Symbol_iterator]() { return this; }\n  next() {\n    return this.idx < this.len ? {\n        done: false,\n        value: this.arr[this.idx++]\n    } : {\n        done: true,\n        value: undefined\n    };\n  }\n}\n\nfunction getIterator(obj: any) {\n  const i = obj[Symbol_iterator];\n  if (!i && typeof obj === 'string') {\n    return new StringIterator(obj);\n  }\n  if (!i && obj.length !== undefined) {\n    return new ArrayIterator(obj);\n  }\n  if (!i) {\n    throw new TypeError('object is not iterable');\n  }\n  return obj[Symbol_iterator]();\n}\n\nconst maxSafeInteger = Math.pow(2, 53) - 1;\n\nfunction toLength(o: any) {\n  let len = +o.length;\n  if (isNaN(len)) {\n      return 0;\n  }\n  if (len === 0 || !numberIsFinite(len)) {\n      return len;\n  }\n  len = sign(len) * Math.floor(Math.abs(len));\n  if (len <= 0) {\n      return 0;\n  }\n  if (len > maxSafeInteger) {\n      return maxSafeInteger;\n  }\n  return len;\n}\n\nfunction numberIsFinite(value: any) {\n  return typeof value === 'number' && root.isFinite(value);\n}\n\nfunction sign(value: any) {\n  let valueAsNumber = +value;\n  if (valueAsNumber === 0) {\n    return valueAsNumber;\n  }\n  if (isNaN(valueAsNumber)) {\n    return valueAsNumber;\n  }\n  return valueAsNumber < 0 ? -1 : 1;\n}\n","import { IScheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { ScalarObservable } from './ScalarObservable';\nimport { EmptyObservable } from './EmptyObservable';\nimport { Subscriber } from '../Subscriber';\nimport { TeardownLogic } from '../Subscription';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class ArrayLikeObservable<T> extends Observable<T> {\n\n  static create<T>(arrayLike: ArrayLike<T>, scheduler?: IScheduler): Observable<T> {\n    const length = arrayLike.length;\n    if (length === 0) {\n      return new EmptyObservable<T>();\n    } else if (length === 1) {\n      return new ScalarObservable<T>(<any>arrayLike[0], scheduler);\n    } else {\n      return new ArrayLikeObservable(arrayLike, scheduler);\n    }\n  }\n\n  static dispatch(state: any) {\n    const { arrayLike, index, length, subscriber } = state;\n\n    if (subscriber.closed) {\n      return;\n    }\n\n    if (index >= length) {\n      subscriber.complete();\n      return;\n    }\n\n    subscriber.next(arrayLike[index]);\n\n    state.index = index + 1;\n\n    (<any> this).schedule(state);\n  }\n\n  // value used if Array has one value and _isScalar\n  private value: any;\n\n  constructor(private arrayLike: ArrayLike<T>, private scheduler?: IScheduler) {\n    super();\n    if (!scheduler && arrayLike.length === 1) {\n      this._isScalar = true;\n      this.value = arrayLike[0];\n    }\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): TeardownLogic {\n    let index = 0;\n    const { arrayLike, scheduler } = this;\n    const length = arrayLike.length;\n\n    if (scheduler) {\n      return scheduler.schedule(ArrayLikeObservable.dispatch, 0, {\n        arrayLike, index, length, subscriber\n      });\n    } else {\n      for (let i = 0; i < length && !subscriber.closed; i++) {\n        subscriber.next(arrayLike[i]);\n      }\n      subscriber.complete();\n    }\n  }\n}\n","import { PartialObserver } from './Observer';\nimport { Observable } from './Observable';\n\n/**\n * Represents a push-based event or value that an {@link Observable} can emit.\n * This class is particularly useful for operators that manage notifications,\n * like {@link materialize}, {@link dematerialize}, {@link observeOn}, and\n * others. Besides wrapping the actual delivered value, it also annotates it\n * with metadata of, for instance, what type of push message it is (`next`,\n * `error`, or `complete`).\n *\n * @see {@link materialize}\n * @see {@link dematerialize}\n * @see {@link observeOn}\n *\n * @class Notification<T>\n */\nexport class Notification<T> {\n  hasValue: boolean;\n\n  constructor(public kind: string, public value?: T, public error?: any) {\n    this.hasValue = kind === 'N';\n  }\n\n  /**\n   * Delivers to the given `observer` the value wrapped by this Notification.\n   * @param {Observer} observer\n   * @return\n   */\n  observe(observer: PartialObserver<T>): any {\n    switch (this.kind) {\n      case 'N':\n        return observer.next && observer.next(this.value);\n      case 'E':\n        return observer.error && observer.error(this.error);\n      case 'C':\n        return observer.complete && observer.complete();\n    }\n  }\n\n  /**\n   * Given some {@link Observer} callbacks, deliver the value represented by the\n   * current Notification to the correctly corresponding callback.\n   * @param {function(value: T): void} next An Observer `next` callback.\n   * @param {function(err: any): void} [error] An Observer `error` callback.\n   * @param {function(): void} [complete] An Observer `complete` callback.\n   * @return {any}\n   */\n  do(next: (value: T) => void, error?: (err: any) => void, complete?: () => void): any {\n    const kind = this.kind;\n    switch (kind) {\n      case 'N':\n        return next && next(this.value);\n      case 'E':\n        return error && error(this.error);\n      case 'C':\n        return complete && complete();\n    }\n  }\n\n  /**\n   * Takes an Observer or its individual callback functions, and calls `observe`\n   * or `do` methods accordingly.\n   * @param {Observer|function(value: T): void} nextOrObserver An Observer or\n   * the `next` callback.\n   * @param {function(err: any): void} [error] An Observer `error` callback.\n   * @param {function(): void} [complete] An Observer `complete` callback.\n   * @return {any}\n   */\n  accept(nextOrObserver: PartialObserver<T> | ((value: T) => void), error?: (err: any) => void, complete?: () => void) {\n    if (nextOrObserver && typeof (<PartialObserver<T>>nextOrObserver).next === 'function') {\n      return this.observe(<PartialObserver<T>>nextOrObserver);\n    } else {\n      return this.do(<(value: T) => void>nextOrObserver, error, complete);\n    }\n  }\n\n  /**\n   * Returns a simple Observable that just delivers the notification represented\n   * by this Notification instance.\n   * @return {any}\n   */\n  toObservable(): Observable<T> {\n    const kind = this.kind;\n    switch (kind) {\n      case 'N':\n        return Observable.of(this.value);\n      case 'E':\n        return Observable.throw(this.error);\n      case 'C':\n        return Observable.empty<T>();\n    }\n    throw new Error('unexpected notification kind value');\n  }\n\n  private static completeNotification: Notification<any> = new Notification('C');\n  private static undefinedValueNotification: Notification<any> = new Notification('N', undefined);\n\n  /**\n   * A shortcut to create a Notification instance of the type `next` from a\n   * given value.\n   * @param {T} value The `next` value.\n   * @return {Notification<T>} The \"next\" Notification representing the\n   * argument.\n   */\n  static createNext<T>(value: T): Notification<T> {\n    if (typeof value !== 'undefined') {\n      return new Notification('N', value);\n    }\n    return Notification.undefinedValueNotification;\n  }\n\n  /**\n   * A shortcut to create a Notification instance of the type `error` from a\n   * given error.\n   * @param {any} [err] The `error` error.\n   * @return {Notification<T>} The \"error\" Notification representing the\n   * argument.\n   */\n  static createError<T>(err?: any): Notification<T> {\n    return new Notification('E', undefined, err);\n  }\n\n  /**\n   * A shortcut to create a Notification instance of the type `complete`.\n   * @return {Notification<any>} The valueless \"complete\" Notification.\n   */\n  static createComplete(): Notification<any> {\n    return Notification.completeNotification;\n  }\n}\n","import { Observable } from '../Observable';\nimport { IScheduler } from '../Scheduler';\nimport { Operator } from '../Operator';\nimport { PartialObserver } from '../Observer';\nimport { Subscriber } from '../Subscriber';\nimport { Notification } from '../Notification';\nimport { TeardownLogic } from '../Subscription';\nimport { Action } from '../scheduler/Action';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n *\n * Re-emits all notifications from source Observable with specified scheduler.\n *\n * <span class=\"informal\">Ensure a specific scheduler is used, from outside of an Observable.</span>\n *\n * `observeOn` is an operator that accepts a scheduler as a first parameter, which will be used to reschedule\n * notifications emitted by the source Observable. It might be useful, if you do not have control over\n * internal scheduler of a given Observable, but want to control when its values are emitted nevertheless.\n *\n * Returned Observable emits the same notifications (nexted values, complete and error events) as the source Observable,\n * but rescheduled with provided scheduler. Note that this doesn't mean that source Observables internal\n * scheduler will be replaced in any way. Original scheduler still will be used, but when the source Observable emits\n * notification, it will be immediately scheduled again - this time with scheduler passed to `observeOn`.\n * An anti-pattern would be calling `observeOn` on Observable that emits lots of values synchronously, to split\n * that emissions into asynchronous chunks. For this to happen, scheduler would have to be passed into the source\n * Observable directly (usually into the operator that creates it). `observeOn` simply delays notifications a\n * little bit more, to ensure that they are emitted at expected moments.\n *\n * As a matter of fact, `observeOn` accepts second parameter, which specifies in milliseconds with what delay notifications\n * will be emitted. The main difference between {@link delay} operator and `observeOn` is that `observeOn`\n * will delay all notifications - including error notifications - while `delay` will pass through error\n * from source Observable immediately when it is emitted. In general it is highly recommended to use `delay` operator\n * for any kind of delaying of values in the stream, while using `observeOn` to specify which scheduler should be used\n * for notification emissions in general.\n *\n * @example <caption>Ensure values in subscribe are called just before browser repaint.</caption>\n * const intervals = Rx.Observable.interval(10); // Intervals are scheduled\n *                                               // with async scheduler by default...\n *\n * intervals\n * .observeOn(Rx.Scheduler.animationFrame)       // ...but we will observe on animationFrame\n * .subscribe(val => {                           // scheduler to ensure smooth animation.\n *   someDiv.style.height = val + 'px';\n * });\n *\n * @see {@link delay}\n *\n * @param {IScheduler} scheduler Scheduler that will be used to reschedule notifications from source Observable.\n * @param {number} [delay] Number of milliseconds that states with what delay every notification should be rescheduled.\n * @return {Observable<T>} Observable that emits the same notifications as the source Observable,\n * but with provided scheduler.\n *\n * @method observeOn\n * @owner Observable\n */\nexport function observeOn<T>(scheduler: IScheduler, delay: number = 0): MonoTypeOperatorFunction<T> {\n  return function observeOnOperatorFunction(source: Observable<T>): Observable<T> {\n    return source.lift(new ObserveOnOperator(scheduler, delay));\n  };\n}\n\nexport class ObserveOnOperator<T> implements Operator<T, T> {\n  constructor(private scheduler: IScheduler, private delay: number = 0) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new ObserveOnSubscriber(subscriber, this.scheduler, this.delay));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class ObserveOnSubscriber<T> extends Subscriber<T> {\n  static dispatch(this: Action<ObserveOnMessage>, arg: ObserveOnMessage) {\n    const { notification, destination } = arg;\n    notification.observe(destination);\n    this.unsubscribe();\n  }\n\n  constructor(destination: Subscriber<T>,\n              private scheduler: IScheduler,\n              private delay: number = 0) {\n    super(destination);\n  }\n\n  private scheduleMessage(notification: Notification<any>): void {\n    this.add(this.scheduler.schedule(\n      ObserveOnSubscriber.dispatch,\n      this.delay,\n      new ObserveOnMessage(notification, this.destination)\n    ));\n  }\n\n  protected _next(value: T): void {\n    this.scheduleMessage(Notification.createNext(value));\n  }\n\n  protected _error(err: any): void {\n    this.scheduleMessage(Notification.createError(err));\n  }\n\n  protected _complete(): void {\n    this.scheduleMessage(Notification.createComplete());\n  }\n}\n\nexport class ObserveOnMessage {\n  constructor(public notification: Notification<any>,\n              public destination: PartialObserver<any>) {\n  }\n}\n","import { isArray } from '../util/isArray';\nimport { isArrayLike } from '../util/isArrayLike';\nimport { isPromise } from '../util/isPromise';\nimport { PromiseObservable } from './PromiseObservable';\nimport { IteratorObservable } from'./IteratorObservable';\nimport { ArrayObservable } from './ArrayObservable';\nimport { ArrayLikeObservable } from './ArrayLikeObservable';\n\nimport { IScheduler } from '../Scheduler';\nimport { iterator as Symbol_iterator } from '../symbol/iterator';\nimport { Observable, ObservableInput } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { ObserveOnSubscriber } from '../operators/observeOn';\nimport { observable as Symbol_observable } from '../symbol/observable';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class FromObservable<T> extends Observable<T> {\n  constructor(private ish: ObservableInput<T>, private scheduler?: IScheduler) {\n    super(null);\n  }\n\n  static create<T>(ish: ObservableInput<T>, scheduler?: IScheduler): Observable<T>;\n  static create<T, R>(ish: ArrayLike<T>, scheduler?: IScheduler): Observable<R>;\n\n  /**\n   * Creates an Observable from an Array, an array-like object, a Promise, an\n   * iterable object, or an Observable-like object.\n   *\n   * <span class=\"informal\">Converts almost anything to an Observable.</span>\n   *\n   * <img src=\"./img/from.png\" width=\"100%\">\n   *\n   * Convert various other objects and data types into Observables. `from`\n   * converts a Promise or an array-like or an\n   * [iterable](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#iterable)\n   * object into an Observable that emits the items in that promise or array or\n   * iterable. A String, in this context, is treated as an array of characters.\n   * Observable-like objects (contains a function named with the ES2015 Symbol\n   * for Observable) can also be converted through this operator.\n   *\n   * @example <caption>Converts an array to an Observable</caption>\n   * var array = [10, 20, 30];\n   * var result = Rx.Observable.from(array);\n   * result.subscribe(x => console.log(x));\n   *\n   * // Results in the following:\n   * // 10 20 30\n   *\n   * @example <caption>Convert an infinite iterable (from a generator) to an Observable</caption>\n   * function* generateDoubles(seed) {\n   *   var i = seed;\n   *   while (true) {\n   *     yield i;\n   *     i = 2 * i; // double it\n   *   }\n   * }\n   *\n   * var iterator = generateDoubles(3);\n   * var result = Rx.Observable.from(iterator).take(10);\n   * result.subscribe(x => console.log(x));\n   *\n   * // Results in the following:\n   * // 3 6 12 24 48 96 192 384 768 1536\n   *\n   * @see {@link create}\n   * @see {@link fromEvent}\n   * @see {@link fromEventPattern}\n   * @see {@link fromPromise}\n   *\n   * @param {ObservableInput<T>} ish A subscribable object, a Promise, an\n   * Observable-like, an Array, an iterable or an array-like object to be\n   * converted.\n   * @param {Scheduler} [scheduler] The scheduler on which to schedule the\n   * emissions of values.\n   * @return {Observable<T>} The Observable whose values are originally from the\n   * input object that was converted.\n   * @static true\n   * @name from\n   * @owner Observable\n   */\n  static create<T>(ish: ObservableInput<T>, scheduler?: IScheduler): Observable<T> {\n    if (ish != null) {\n      if (typeof ish[Symbol_observable] === 'function') {\n        if (ish instanceof Observable && !scheduler) {\n          return ish;\n        }\n        return new FromObservable<T>(ish, scheduler);\n      } else if (isArray(ish)) {\n        return new ArrayObservable<T>(ish, scheduler);\n      } else if (isPromise<T>(ish)) {\n        return new PromiseObservable<T>(ish, scheduler);\n      } else if (typeof ish[Symbol_iterator] === 'function' || typeof ish === 'string') {\n        return new IteratorObservable<T>(ish, scheduler);\n      } else if (isArrayLike(ish)) {\n        return new ArrayLikeObservable(ish, scheduler);\n      }\n    }\n\n    throw new TypeError((ish !== null && typeof ish || ish) + ' is not observable');\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>) {\n    const ish = this.ish;\n    const scheduler = this.scheduler;\n    if (scheduler == null) {\n      return ish[Symbol_observable]().subscribe(subscriber);\n    } else {\n      return ish[Symbol_observable]().subscribe(new ObserveOnSubscriber(subscriber, scheduler, 0));\n    }\n  }\n}\n","import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Observer } from '../Observer';\nimport { Subscriber } from '../Subscriber';\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Counts the number of emissions on the source and emits that number when the\n * source completes.\n *\n * <span class=\"informal\">Tells how many values were emitted, when the source\n * completes.</span>\n *\n * <img src=\"./img/count.png\" width=\"100%\">\n *\n * `count` transforms an Observable that emits values into an Observable that\n * emits a single value that represents the number of values emitted by the\n * source Observable. If the source Observable terminates with an error, `count`\n * will pass this error notification along without emitting a value first. If\n * the source Observable does not terminate at all, `count` will neither emit\n * a value nor terminate. This operator takes an optional `predicate` function\n * as argument, in which case the output emission will represent the number of\n * source values that matched `true` with the `predicate`.\n *\n * @example <caption>Counts how many seconds have passed before the first click happened</caption>\n * var seconds = Rx.Observable.interval(1000);\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var secondsBeforeClick = seconds.takeUntil(clicks);\n * var result = secondsBeforeClick.count();\n * result.subscribe(x => console.log(x));\n *\n * @example <caption>Counts how many odd numbers are there between 1 and 7</caption>\n * var numbers = Rx.Observable.range(1, 7);\n * var result = numbers.count(i => i % 2 === 1);\n * result.subscribe(x => console.log(x));\n *\n * // Results in:\n * // 4\n *\n * @see {@link max}\n * @see {@link min}\n * @see {@link reduce}\n *\n * @param {function(value: T, i: number, source: Observable<T>): boolean} [predicate] A\n * boolean function to select what values are to be counted. It is provided with\n * arguments of:\n * - `value`: the value from the source Observable.\n * - `index`: the (zero-based) \"index\" of the value from the source Observable.\n * - `source`: the source Observable instance itself.\n * @return {Observable} An Observable of one number that represents the count as\n * described above.\n * @method count\n * @owner Observable\n */\nexport function count<T>(predicate?: (value: T, index: number, source: Observable<T>) => boolean): OperatorFunction<T, number> {\n  return (source: Observable<T>) => source.lift(new CountOperator(predicate, source));\n}\n\nclass CountOperator<T> implements Operator<T, number> {\n  constructor(private predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n              private source?: Observable<T>) {\n  }\n\n  call(subscriber: Subscriber<number>, source: any): any {\n    return source.subscribe(new CountSubscriber(subscriber, this.predicate, this.source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass CountSubscriber<T> extends Subscriber<T> {\n  private count: number = 0;\n  private index: number = 0;\n\n  constructor(destination: Observer<number>,\n              private predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n              private source?: Observable<T>) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    if (this.predicate) {\n      this._tryPredicate(value);\n    } else {\n      this.count++;\n    }\n  }\n\n  private _tryPredicate(value: T) {\n    let result: any;\n\n    try {\n      result = this.predicate(value, this.index++, this.source);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n\n    if (result) {\n      this.count++;\n    }\n  }\n\n  protected _complete(): void {\n    this.destination.next(this.count);\n    this.destination.complete();\n  }\n}\n","import { Operator } from '../Operator';\nimport { Observable, SubscribableOrPromise } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription, TeardownLogic } from '../Subscription';\n\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Emits a value from the source Observable only after a particular time span\n * determined by another Observable has passed without another source emission.\n *\n * <span class=\"informal\">It's like {@link debounceTime}, but the time span of\n * emission silence is determined by a second Observable.</span>\n *\n * <img src=\"./img/debounce.png\" width=\"100%\">\n *\n * `debounce` delays values emitted by the source Observable, but drops previous\n * pending delayed emissions if a new value arrives on the source Observable.\n * This operator keeps track of the most recent value from the source\n * Observable, and spawns a duration Observable by calling the\n * `durationSelector` function. The value is emitted only when the duration\n * Observable emits a value or completes, and if no other value was emitted on\n * the source Observable since the duration Observable was spawned. If a new\n * value appears before the duration Observable emits, the previous value will\n * be dropped and will not be emitted on the output Observable.\n *\n * Like {@link debounceTime}, this is a rate-limiting operator, and also a\n * delay-like operator since output emissions do not necessarily occur at the\n * same time as they did on the source Observable.\n *\n * @example <caption>Emit the most recent click after a burst of clicks</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.debounce(() => Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link audit}\n * @see {@link debounceTime}\n * @see {@link delayWhen}\n * @see {@link throttle}\n *\n * @param {function(value: T): SubscribableOrPromise} durationSelector A function\n * that receives a value from the source Observable, for computing the timeout\n * duration for each source value, returned as an Observable or a Promise.\n * @return {Observable} An Observable that delays the emissions of the source\n * Observable by the specified duration Observable returned by\n * `durationSelector`, and may drop some values if they occur too frequently.\n * @method debounce\n * @owner Observable\n */\nexport function debounce<T>(durationSelector: (value: T) => SubscribableOrPromise<number>): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new DebounceOperator(durationSelector));\n}\n\nclass DebounceOperator<T> implements Operator<T, T> {\n  constructor(private durationSelector: (value: T) => SubscribableOrPromise<number>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new DebounceSubscriber(subscriber, this.durationSelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass DebounceSubscriber<T, R> extends OuterSubscriber<T, R> {\n  private value: T;\n  private hasValue: boolean = false;\n  private durationSubscription: Subscription = null;\n\n  constructor(destination: Subscriber<R>,\n              private durationSelector: (value: T) => SubscribableOrPromise<number>) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    try {\n      const result = this.durationSelector.call(this, value);\n\n      if (result) {\n        this._tryNext(value, result);\n      }\n    } catch (err) {\n      this.destination.error(err);\n    }\n  }\n\n  protected _complete(): void {\n    this.emitValue();\n    this.destination.complete();\n  }\n\n  private _tryNext(value: T, duration: SubscribableOrPromise<number>): void {\n    let subscription = this.durationSubscription;\n    this.value = value;\n    this.hasValue = true;\n    if (subscription) {\n      subscription.unsubscribe();\n      this.remove(subscription);\n    }\n\n    subscription = subscribeToResult(this, duration);\n    if (!subscription.closed) {\n      this.add(this.durationSubscription = subscription);\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.emitValue();\n  }\n\n  notifyComplete(): void {\n    this.emitValue();\n  }\n\n  emitValue(): void {\n    if (this.hasValue) {\n      const value = this.value;\n      const subscription = this.durationSubscription;\n      if (subscription) {\n        this.durationSubscription = null;\n        subscription.unsubscribe();\n        this.remove(subscription);\n      }\n      this.value = null;\n      this.hasValue = false;\n      super._next(value);\n    }\n  }\n}\n","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { IScheduler } from '../Scheduler';\nimport { Subscription, TeardownLogic } from '../Subscription';\nimport { async } from '../scheduler/async';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Emits a value from the source Observable only after a particular time span\n * has passed without another source emission.\n *\n * <span class=\"informal\">It's like {@link delay}, but passes only the most\n * recent value from each burst of emissions.</span>\n *\n * <img src=\"./img/debounceTime.png\" width=\"100%\">\n *\n * `debounceTime` delays values emitted by the source Observable, but drops\n * previous pending delayed emissions if a new value arrives on the source\n * Observable. This operator keeps track of the most recent value from the\n * source Observable, and emits that only when `dueTime` enough time has passed\n * without any other value appearing on the source Observable. If a new value\n * appears before `dueTime` silence occurs, the previous value will be dropped\n * and will not be emitted on the output Observable.\n *\n * This is a rate-limiting operator, because it is impossible for more than one\n * value to be emitted in any time window of duration `dueTime`, but it is also\n * a delay-like operator since output emissions do not occur at the same time as\n * they did on the source Observable. Optionally takes a {@link IScheduler} for\n * managing timers.\n *\n * @example <caption>Emit the most recent click after a burst of clicks</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.debounceTime(1000);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link auditTime}\n * @see {@link debounce}\n * @see {@link delay}\n * @see {@link sampleTime}\n * @see {@link throttleTime}\n *\n * @param {number} dueTime The timeout duration in milliseconds (or the time\n * unit determined internally by the optional `scheduler`) for the window of\n * time required to wait for emission silence before emitting the most recent\n * source value.\n * @param {Scheduler} [scheduler=async] The {@link IScheduler} to use for\n * managing the timers that handle the timeout for each value.\n * @return {Observable} An Observable that delays the emissions of the source\n * Observable by the specified `dueTime`, and may drop some values if they occur\n * too frequently.\n * @method debounceTime\n * @owner Observable\n */\nexport function debounceTime<T>(dueTime: number, scheduler: IScheduler = async): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new DebounceTimeOperator(dueTime, scheduler));\n}\n\nclass DebounceTimeOperator<T> implements Operator<T, T> {\n  constructor(private dueTime: number, private scheduler: IScheduler) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new DebounceTimeSubscriber(subscriber, this.dueTime, this.scheduler));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass DebounceTimeSubscriber<T> extends Subscriber<T> {\n  private debouncedSubscription: Subscription = null;\n  private lastValue: T = null;\n  private hasValue: boolean = false;\n\n  constructor(destination: Subscriber<T>,\n              private dueTime: number,\n              private scheduler: IScheduler) {\n    super(destination);\n  }\n\n  protected _next(value: T) {\n    this.clearDebounce();\n    this.lastValue = value;\n    this.hasValue = true;\n    this.add(this.debouncedSubscription = this.scheduler.schedule(dispatchNext, this.dueTime, this));\n  }\n\n  protected _complete() {\n    this.debouncedNext();\n    this.destination.complete();\n  }\n\n  debouncedNext(): void {\n    this.clearDebounce();\n\n    if (this.hasValue) {\n      this.destination.next(this.lastValue);\n      this.lastValue = null;\n      this.hasValue = false;\n    }\n  }\n\n  private clearDebounce(): void {\n    const debouncedSubscription = this.debouncedSubscription;\n\n    if (debouncedSubscription !== null) {\n      this.remove(debouncedSubscription);\n      debouncedSubscription.unsubscribe();\n      this.debouncedSubscription = null;\n    }\n  }\n}\n\nfunction dispatchNext(subscriber: DebounceTimeSubscriber<any>) {\n  subscriber.debouncedNext();\n}\n","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { OperatorFunction, MonoTypeOperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function defaultIfEmpty<T>(defaultValue?: T): MonoTypeOperatorFunction<T>;\nexport function defaultIfEmpty<T, R>(defaultValue?: R): OperatorFunction<T, T | R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Emits a given value if the source Observable completes without emitting any\n * `next` value, otherwise mirrors the source Observable.\n *\n * <span class=\"informal\">If the source Observable turns out to be empty, then\n * this operator will emit a default value.</span>\n *\n * <img src=\"./img/defaultIfEmpty.png\" width=\"100%\">\n *\n * `defaultIfEmpty` emits the values emitted by the source Observable or a\n * specified default value if the source Observable is empty (completes without\n * having emitted any `next` value).\n *\n * @example <caption>If no clicks happen in 5 seconds, then emit \"no clicks\"</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var clicksBeforeFive = clicks.takeUntil(Rx.Observable.interval(5000));\n * var result = clicksBeforeFive.defaultIfEmpty('no clicks');\n * result.subscribe(x => console.log(x));\n *\n * @see {@link empty}\n * @see {@link last}\n *\n * @param {any} [defaultValue=null] The default value used if the source\n * Observable is empty.\n * @return {Observable} An Observable that emits either the specified\n * `defaultValue` if the source Observable emits no items, or the values emitted\n * by the source Observable.\n * @method defaultIfEmpty\n * @owner Observable\n */\nexport function defaultIfEmpty<T, R>(defaultValue: R = null): OperatorFunction<T, T | R> {\n  return (source: Observable<T>) => source.lift(new DefaultIfEmptyOperator(defaultValue)) as Observable<T | R>;\n}\n\nclass DefaultIfEmptyOperator<T, R> implements Operator<T, T | R> {\n\n  constructor(private defaultValue: R) {\n  }\n\n  call(subscriber: Subscriber<T | R>, source: any): any {\n    return source.subscribe(new DefaultIfEmptySubscriber(subscriber, this.defaultValue));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass DefaultIfEmptySubscriber<T, R> extends Subscriber<T> {\n  private isEmpty: boolean = true;\n\n  constructor(destination: Subscriber<T | R>, private defaultValue: R) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    this.isEmpty = false;\n    this.destination.next(value);\n  }\n\n  protected _complete(): void {\n    if (this.isEmpty) {\n      this.destination.next(this.defaultValue);\n    }\n    this.destination.complete();\n  }\n}","import { async } from '../scheduler/async';\nimport { isDate } from '../util/isDate';\nimport { Operator } from '../Operator';\nimport { IScheduler } from '../Scheduler';\nimport { Subscriber } from '../Subscriber';\nimport { Action } from '../scheduler/Action';\nimport { Notification } from '../Notification';\nimport { Observable } from '../Observable';\nimport { PartialObserver } from '../Observer';\nimport { TeardownLogic } from '../Subscription';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Delays the emission of items from the source Observable by a given timeout or\n * until a given Date.\n *\n * <span class=\"informal\">Time shifts each item by some specified amount of\n * milliseconds.</span>\n *\n * <img src=\"./img/delay.png\" width=\"100%\">\n *\n * If the delay argument is a Number, this operator time shifts the source\n * Observable by that amount of time expressed in milliseconds. The relative\n * time intervals between the values are preserved.\n *\n * If the delay argument is a Date, this operator time shifts the start of the\n * Observable execution until the given date occurs.\n *\n * @example <caption>Delay each click by one second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var delayedClicks = clicks.delay(1000); // each click emitted after 1 second\n * delayedClicks.subscribe(x => console.log(x));\n *\n * @example <caption>Delay all clicks until a future date happens</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var date = new Date('March 15, 2050 12:00:00'); // in the future\n * var delayedClicks = clicks.delay(date); // click emitted only after that date\n * delayedClicks.subscribe(x => console.log(x));\n *\n * @see {@link debounceTime}\n * @see {@link delayWhen}\n *\n * @param {number|Date} delay The delay duration in milliseconds (a `number`) or\n * a `Date` until which the emission of the source items is delayed.\n * @param {Scheduler} [scheduler=async] The IScheduler to use for\n * managing the timers that handle the time-shift for each item.\n * @return {Observable} An Observable that delays the emissions of the source\n * Observable by the specified timeout or Date.\n * @method delay\n * @owner Observable\n */\nexport function delay<T>(delay: number|Date,\n                         scheduler: IScheduler = async): MonoTypeOperatorFunction<T> {\n  const absoluteDelay = isDate(delay);\n  const delayFor = absoluteDelay ? (+delay - scheduler.now()) : Math.abs(<number>delay);\n  return (source: Observable<T>) => source.lift(new DelayOperator(delayFor, scheduler));\n}\n\nclass DelayOperator<T> implements Operator<T, T> {\n  constructor(private delay: number,\n              private scheduler: IScheduler) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new DelaySubscriber(subscriber, this.delay, this.scheduler));\n  }\n}\n\ninterface DelayState<T> {\n  source: DelaySubscriber<T>;\n  destination: PartialObserver<T>;\n  scheduler: IScheduler;\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass DelaySubscriber<T> extends Subscriber<T> {\n  private queue: Array<DelayMessage<T>> = [];\n  private active: boolean = false;\n  private errored: boolean = false;\n\n  private static dispatch<T>(this: Action<DelayState<T>>, state: DelayState<T>): void {\n    const source = state.source;\n    const queue = source.queue;\n    const scheduler = state.scheduler;\n    const destination = state.destination;\n\n    while (queue.length > 0 && (queue[0].time - scheduler.now()) <= 0) {\n      queue.shift().notification.observe(destination);\n    }\n\n    if (queue.length > 0) {\n      const delay = Math.max(0, queue[0].time - scheduler.now());\n      this.schedule(state, delay);\n    } else {\n      source.active = false;\n    }\n  }\n\n  constructor(destination: Subscriber<T>,\n              private delay: number,\n              private scheduler: IScheduler) {\n    super(destination);\n  }\n\n  private _schedule(scheduler: IScheduler): void {\n    this.active = true;\n    this.add(scheduler.schedule<DelayState<T>>(DelaySubscriber.dispatch, this.delay, {\n      source: this, destination: this.destination, scheduler: scheduler\n    }));\n  }\n\n  private scheduleNotification(notification: Notification<T>): void {\n    if (this.errored === true) {\n      return;\n    }\n\n    const scheduler = this.scheduler;\n    const message = new DelayMessage(scheduler.now() + this.delay, notification);\n    this.queue.push(message);\n\n    if (this.active === false) {\n      this._schedule(scheduler);\n    }\n  }\n\n  protected _next(value: T) {\n    this.scheduleNotification(Notification.createNext(value));\n  }\n\n  protected _error(err: any) {\n    this.errored = true;\n    this.queue = [];\n    this.destination.error(err);\n  }\n\n  protected _complete() {\n    this.scheduleNotification(Notification.createComplete());\n  }\n}\n\nclass DelayMessage<T> {\n  constructor(public readonly time: number,\n              public readonly notification: Notification<T>) {\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { Subscription, TeardownLogic } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Delays the emission of items from the source Observable by a given time span\n * determined by the emissions of another Observable.\n *\n * <span class=\"informal\">It's like {@link delay}, but the time span of the\n * delay duration is determined by a second Observable.</span>\n *\n * <img src=\"./img/delayWhen.png\" width=\"100%\">\n *\n * `delayWhen` time shifts each emitted value from the source Observable by a\n * time span determined by another Observable. When the source emits a value,\n * the `delayDurationSelector` function is called with the source value as\n * argument, and should return an Observable, called the \"duration\" Observable.\n * The source value is emitted on the output Observable only when the duration\n * Observable emits a value or completes.\n *\n * Optionally, `delayWhen` takes a second argument, `subscriptionDelay`, which\n * is an Observable. When `subscriptionDelay` emits its first value or\n * completes, the source Observable is subscribed to and starts behaving like\n * described in the previous paragraph. If `subscriptionDelay` is not provided,\n * `delayWhen` will subscribe to the source Observable as soon as the output\n * Observable is subscribed.\n *\n * @example <caption>Delay each click by a random amount of time, between 0 and 5 seconds</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var delayedClicks = clicks.delayWhen(event =>\n *   Rx.Observable.interval(Math.random() * 5000)\n * );\n * delayedClicks.subscribe(x => console.log(x));\n *\n * @see {@link debounce}\n * @see {@link delay}\n *\n * @param {function(value: T): Observable} delayDurationSelector A function that\n * returns an Observable for each value emitted by the source Observable, which\n * is then used to delay the emission of that item on the output Observable\n * until the Observable returned from this function emits a value.\n * @param {Observable} subscriptionDelay An Observable that triggers the\n * subscription to the source Observable once it emits any value.\n * @return {Observable} An Observable that delays the emissions of the source\n * Observable by an amount of time specified by the Observable returned by\n * `delayDurationSelector`.\n * @method delayWhen\n * @owner Observable\n */\nexport function delayWhen<T>(delayDurationSelector: (value: T) => Observable<any>,\n                             subscriptionDelay?: Observable<any>): MonoTypeOperatorFunction<T> {\n  if (subscriptionDelay) {\n    return (source: Observable<T>) =>\n      new SubscriptionDelayObservable(source, subscriptionDelay)\n        .lift(new DelayWhenOperator(delayDurationSelector));\n  }\n  return (source: Observable<T>) => source.lift(new DelayWhenOperator(delayDurationSelector));\n}\n\nclass DelayWhenOperator<T> implements Operator<T, T> {\n  constructor(private delayDurationSelector: (value: T) => Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new DelayWhenSubscriber(subscriber, this.delayDurationSelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass DelayWhenSubscriber<T, R> extends OuterSubscriber<T, R> {\n  private completed: boolean = false;\n  private delayNotifierSubscriptions: Array<Subscription> = [];\n  private values: Array<T> = [];\n\n  constructor(destination: Subscriber<T>,\n              private delayDurationSelector: (value: T) => Observable<any>) {\n    super(destination);\n  }\n\n  notifyNext(outerValue: T, innerValue: any,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.destination.next(outerValue);\n    this.removeSubscription(innerSub);\n    this.tryComplete();\n  }\n\n  notifyError(error: any, innerSub: InnerSubscriber<T, R>): void {\n    this._error(error);\n  }\n\n  notifyComplete(innerSub: InnerSubscriber<T, R>): void {\n    const value = this.removeSubscription(innerSub);\n    if (value) {\n      this.destination.next(value);\n    }\n    this.tryComplete();\n  }\n\n  protected _next(value: T): void {\n    try {\n      const delayNotifier = this.delayDurationSelector(value);\n      if (delayNotifier) {\n        this.tryDelay(delayNotifier, value);\n      }\n    } catch (err) {\n      this.destination.error(err);\n    }\n  }\n\n  protected _complete(): void {\n    this.completed = true;\n    this.tryComplete();\n  }\n\n  private removeSubscription(subscription: InnerSubscriber<T, R>): T {\n    subscription.unsubscribe();\n\n    const subscriptionIdx = this.delayNotifierSubscriptions.indexOf(subscription);\n    let value: T = null;\n\n    if (subscriptionIdx !== -1) {\n      value = this.values[subscriptionIdx];\n      this.delayNotifierSubscriptions.splice(subscriptionIdx, 1);\n      this.values.splice(subscriptionIdx, 1);\n    }\n\n    return value;\n  }\n\n  private tryDelay(delayNotifier: Observable<any>, value: T): void {\n    const notifierSubscription = subscribeToResult(this, delayNotifier, value);\n\n    if (notifierSubscription && !notifierSubscription.closed) {\n      this.add(notifierSubscription);\n      this.delayNotifierSubscriptions.push(notifierSubscription);\n    }\n\n    this.values.push(value);\n  }\n\n  private tryComplete(): void {\n    if (this.completed && this.delayNotifierSubscriptions.length === 0) {\n      this.destination.complete();\n    }\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SubscriptionDelayObservable<T> extends Observable<T> {\n  constructor(protected source: Observable<T>, private subscriptionDelay: Observable<any>) {\n    super();\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>) {\n    this.subscriptionDelay.subscribe(new SubscriptionDelaySubscriber(subscriber, this.source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SubscriptionDelaySubscriber<T> extends Subscriber<T> {\n  private sourceSubscribed: boolean = false;\n\n  constructor(private parent: Subscriber<T>, private source: Observable<T>) {\n    super();\n  }\n\n  protected _next(unused: any) {\n    this.subscribeToSource();\n  }\n\n  protected _error(err: any) {\n    this.unsubscribe();\n    this.parent.error(err);\n  }\n\n  protected _complete() {\n    this.subscribeToSource();\n  }\n\n  private subscribeToSource(): void {\n    if (!this.sourceSubscribed) {\n      this.sourceSubscribed = true;\n      this.unsubscribe();\n      this.source.subscribe(this.parent);\n    }\n  }\n}\n","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Notification } from '../Notification';\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Converts an Observable of {@link Notification} objects into the emissions\n * that they represent.\n *\n * <span class=\"informal\">Unwraps {@link Notification} objects as actual `next`,\n * `error` and `complete` emissions. The opposite of {@link materialize}.</span>\n *\n * <img src=\"./img/dematerialize.png\" width=\"100%\">\n *\n * `dematerialize` is assumed to operate an Observable that only emits\n * {@link Notification} objects as `next` emissions, and does not emit any\n * `error`. Such Observable is the output of a `materialize` operation. Those\n * notifications are then unwrapped using the metadata they contain, and emitted\n * as `next`, `error`, and `complete` on the output Observable.\n *\n * Use this operator in conjunction with {@link materialize}.\n *\n * @example <caption>Convert an Observable of Notifications to an actual Observable</caption>\n * var notifA = new Rx.Notification('N', 'A');\n * var notifB = new Rx.Notification('N', 'B');\n * var notifE = new Rx.Notification('E', void 0,\n *   new TypeError('x.toUpperCase is not a function')\n * );\n * var materialized = Rx.Observable.of(notifA, notifB, notifE);\n * var upperCase = materialized.dematerialize();\n * upperCase.subscribe(x => console.log(x), e => console.error(e));\n *\n * // Results in:\n * // A\n * // B\n * // TypeError: x.toUpperCase is not a function\n *\n * @see {@link Notification}\n * @see {@link materialize}\n *\n * @return {Observable} An Observable that emits items and notifications\n * embedded in Notification objects emitted by the source Observable.\n * @method dematerialize\n * @owner Observable\n */\nexport function dematerialize<T>(): OperatorFunction<Notification<T>, T> {\n  return function dematerializeOperatorFunction(source: Observable<Notification<T>>) {\n    return source.lift(new DeMaterializeOperator());\n  };\n}\n\nclass DeMaterializeOperator<T extends Notification<any>, R> implements Operator<T, R> {\n  call(subscriber: Subscriber<any>, source: any): any {\n    return source.subscribe(new DeMaterializeSubscriber(subscriber));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass DeMaterializeSubscriber<T extends Notification<any>> extends Subscriber<T> {\n  constructor(destination: Subscriber<any>) {\n    super(destination);\n  }\n\n  protected _next(value: T) {\n    value.observe(this.destination);\n  }\n}\n","import { root } from './root';\n\nexport interface ISetCtor {\n  new<T>(): ISet<T>;\n}\n\nexport interface ISet<T> {\n  add(value: T): void;\n  has(value: T): boolean;\n  size: number;\n  clear(): void;\n}\n\nexport function minimalSetImpl<T>(): ISetCtor {\n  // THIS IS NOT a full impl of Set, this is just the minimum\n  // bits of functionality we need for this library.\n  return class MinimalSet<T> implements ISet<T> {\n    private _values: T[] = [];\n\n    add(value: T): void {\n      if (!this.has(value)) {\n        this._values.push(value);\n      }\n    }\n\n    has(value: T): boolean {\n      return this._values.indexOf(value) !== -1;\n    }\n\n    get size(): number {\n      return this._values.length;\n    }\n\n    clear(): void {\n      this._values.length = 0;\n    }\n  };\n}\n\nexport const Set: ISetCtor = root.Set || minimalSetImpl();","import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { TeardownLogic } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { ISet, Set } from '../util/Set';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Returns an Observable that emits all items emitted by the source Observable that are distinct by comparison from previous items.\n *\n * If a keySelector function is provided, then it will project each value from the source observable into a new value that it will\n * check for equality with previously projected values. If a keySelector function is not provided, it will use each value from the\n * source observable directly with an equality check against previous values.\n *\n * In JavaScript runtimes that support `Set`, this operator will use a `Set` to improve performance of the distinct value checking.\n *\n * In other runtimes, this operator will use a minimal implementation of `Set` that relies on an `Array` and `indexOf` under the\n * hood, so performance will degrade as more values are checked for distinction. Even in newer browsers, a long-running `distinct`\n * use might result in memory leaks. To help alleviate this in some scenarios, an optional `flushes` parameter is also provided so\n * that the internal `Set` can be \"flushed\", basically clearing it of values.\n *\n * @example <caption>A simple example with numbers</caption>\n * Observable.of(1, 1, 2, 2, 2, 1, 2, 3, 4, 3, 2, 1)\n *   .distinct()\n *   .subscribe(x => console.log(x)); // 1, 2, 3, 4\n *\n * @example <caption>An example using a keySelector function</caption>\n * interface Person {\n *    age: number,\n *    name: string\n * }\n *\n * Observable.of<Person>(\n *     { age: 4, name: 'Foo'},\n *     { age: 7, name: 'Bar'},\n *     { age: 5, name: 'Foo'})\n *     .distinct((p: Person) => p.name)\n *     .subscribe(x => console.log(x));\n *\n * // displays:\n * // { age: 4, name: 'Foo' }\n * // { age: 7, name: 'Bar' }\n *\n * @see {@link distinctUntilChanged}\n * @see {@link distinctUntilKeyChanged}\n *\n * @param {function} [keySelector] Optional function to select which value you want to check as distinct.\n * @param {Observable} [flushes] Optional Observable for flushing the internal HashSet of the operator.\n * @return {Observable} An Observable that emits items from the source Observable with distinct values.\n * @method distinct\n * @owner Observable\n */\nexport function distinct<T, K>(keySelector?: (value: T) => K,\n                               flushes?: Observable<any>): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new DistinctOperator(keySelector, flushes));\n}\n\nclass DistinctOperator<T, K> implements Operator<T, T> {\n  constructor(private keySelector: (value: T) => K, private flushes: Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new DistinctSubscriber(subscriber, this.keySelector, this.flushes));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class DistinctSubscriber<T, K> extends OuterSubscriber<T, T> {\n  private values: ISet<K> = new Set<K>();\n\n  constructor(destination: Subscriber<T>, private keySelector: (value: T) => K, flushes: Observable<any>) {\n    super(destination);\n\n    if (flushes) {\n      this.add(subscribeToResult(this, flushes));\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: T,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, T>): void {\n    this.values.clear();\n  }\n\n  notifyError(error: any, innerSub: InnerSubscriber<T, T>): void {\n    this._error(error);\n  }\n\n  protected _next(value: T): void {\n    if (this.keySelector) {\n      this._useKeySelector(value);\n    } else {\n      this._finalizeNext(value, value);\n    }\n  }\n\n  private _useKeySelector(value: T): void {\n    let key: K;\n    const { destination } = this;\n    try {\n      key = this.keySelector(value);\n    } catch (err) {\n      destination.error(err);\n      return;\n    }\n    this._finalizeNext(key, value);\n  }\n\n  private _finalizeNext(key: K|T, value: T) {\n    const { values } = this;\n    if (!values.has(<K>key)) {\n      values.add(<K>key);\n      this.destination.next(value);\n    }\n  }\n\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function distinctUntilChanged<T>(compare?: (x: T, y: T) => boolean): MonoTypeOperatorFunction<T>;\nexport function distinctUntilChanged<T, K>(compare: (x: K, y: K) => boolean, keySelector: (x: T) => K): MonoTypeOperatorFunction<T>;\n/* tslint:enable:max-line-length */\n\n/**\n * Returns an Observable that emits all items emitted by the source Observable that are distinct by comparison from the previous item.\n *\n * If a comparator function is provided, then it will be called for each item to test for whether or not that value should be emitted.\n *\n * If a comparator function is not provided, an equality check is used by default.\n *\n * @example <caption>A simple example with numbers</caption>\n * Observable.of(1, 1, 2, 2, 2, 1, 1, 2, 3, 3, 4)\n *   .distinctUntilChanged()\n *   .subscribe(x => console.log(x)); // 1, 2, 1, 2, 3, 4\n *\n * @example <caption>An example using a compare function</caption>\n * interface Person {\n *    age: number,\n *    name: string\n * }\n *\n * Observable.of<Person>(\n *     { age: 4, name: 'Foo'},\n *     { age: 7, name: 'Bar'},\n *     { age: 5, name: 'Foo'})\n *     { age: 6, name: 'Foo'})\n *     .distinctUntilChanged((p: Person, q: Person) => p.name === q.name)\n *     .subscribe(x => console.log(x));\n *\n * // displays:\n * // { age: 4, name: 'Foo' }\n * // { age: 7, name: 'Bar' }\n * // { age: 5, name: 'Foo' }\n *\n * @see {@link distinct}\n * @see {@link distinctUntilKeyChanged}\n *\n * @param {function} [compare] Optional comparison function called to test if an item is distinct from the previous item in the source.\n * @return {Observable} An Observable that emits items from the source Observable with distinct values.\n * @method distinctUntilChanged\n * @owner Observable\n */\nexport function distinctUntilChanged<T, K>(compare?: (x: K, y: K) => boolean, keySelector?: (x: T) => K): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new DistinctUntilChangedOperator<T, K>(compare, keySelector));\n}\n\nclass DistinctUntilChangedOperator<T, K> implements Operator<T, T> {\n  constructor(private compare: (x: K, y: K) => boolean,\n              private keySelector: (x: T) => K) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new DistinctUntilChangedSubscriber(subscriber, this.compare, this.keySelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass DistinctUntilChangedSubscriber<T, K> extends Subscriber<T> {\n  private key: K;\n  private hasKey: boolean = false;\n\n  constructor(destination: Subscriber<T>,\n              compare: (x: K, y: K) => boolean,\n              private keySelector: (x: T) => K) {\n    super(destination);\n    if (typeof compare === 'function') {\n      this.compare = compare;\n    }\n  }\n\n  private compare(x: any, y: any): boolean {\n    return x === y;\n  }\n\n  protected _next(value: T): void {\n\n    const keySelector = this.keySelector;\n    let key: any = value;\n\n    if (keySelector) {\n      key = tryCatch(this.keySelector)(value);\n      if (key === errorObject) {\n        return this.destination.error(errorObject.e);\n      }\n    }\n\n    let result: any = false;\n\n    if (this.hasKey) {\n      result = tryCatch(this.compare)(this.key, key);\n      if (result === errorObject) {\n        return this.destination.error(errorObject.e);\n      }\n    } else {\n      this.hasKey = true;\n    }\n\n    if (Boolean(result) === false) {\n      this.key = key;\n      this.destination.next(value);\n    }\n  }\n}\n","/**\n * An error thrown when an element was queried at a certain index of an\n * Observable, but no such index or position exists in that sequence.\n *\n * @see {@link elementAt}\n * @see {@link take}\n * @see {@link takeLast}\n *\n * @class ArgumentOutOfRangeError\n */\nexport class ArgumentOutOfRangeError extends Error {\n  constructor() {\n    const err: any = super('argument out of range');\n    (<any> this).name = err.name = 'ArgumentOutOfRangeError';\n    (<any> this).stack = err.stack;\n    (<any> this).message = err.message;\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { ArgumentOutOfRangeError } from '../util/ArgumentOutOfRangeError';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Emits the single value at the specified `index` in a sequence of emissions\n * from the source Observable.\n *\n * <span class=\"informal\">Emits only the i-th value, then completes.</span>\n *\n * <img src=\"./img/elementAt.png\" width=\"100%\">\n *\n * `elementAt` returns an Observable that emits the item at the specified\n * `index` in the source Observable, or a default value if that `index` is out\n * of range and the `default` argument is provided. If the `default` argument is\n * not given and the `index` is out of range, the output Observable will emit an\n * `ArgumentOutOfRangeError` error.\n *\n * @example <caption>Emit only the third click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.elementAt(2);\n * result.subscribe(x => console.log(x));\n *\n * // Results in:\n * // click 1 = nothing\n * // click 2 = nothing\n * // click 3 = MouseEvent object logged to console\n *\n * @see {@link first}\n * @see {@link last}\n * @see {@link skip}\n * @see {@link single}\n * @see {@link take}\n *\n * @throws {ArgumentOutOfRangeError} When using `elementAt(i)`, it delivers an\n * ArgumentOutOrRangeError to the Observer's `error` callback if `i < 0` or the\n * Observable has completed before emitting the i-th `next` notification.\n *\n * @param {number} index Is the number `i` for the i-th source emission that has\n * happened since the subscription, starting from the number `0`.\n * @param {T} [defaultValue] The default value returned for missing indices.\n * @return {Observable} An Observable that emits a single item, if it is found.\n * Otherwise, will emit the default value if given. If not, then emits an error.\n * @method elementAt\n * @owner Observable\n */\nexport function elementAt<T>(index: number, defaultValue?: T): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new ElementAtOperator(index, defaultValue));\n}\n\nclass ElementAtOperator<T> implements Operator<T, T> {\n\n  constructor(private index: number, private defaultValue?: T) {\n    if (index < 0) {\n      throw new ArgumentOutOfRangeError;\n    }\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new ElementAtSubscriber(subscriber, this.index, this.defaultValue));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass ElementAtSubscriber<T> extends Subscriber<T> {\n\n  constructor(destination: Subscriber<T>, private index: number, private defaultValue?: T) {\n    super(destination);\n  }\n\n  protected _next(x: T) {\n    if (this.index-- === 0) {\n      this.destination.next(x);\n      this.destination.complete();\n    }\n  }\n\n  protected _complete() {\n    const destination = this.destination;\n    if (this.index >= 0) {\n      if (typeof this.defaultValue !== 'undefined') {\n        destination.next(this.defaultValue);\n      } else {\n        destination.error(new ArgumentOutOfRangeError);\n      }\n    }\n    destination.complete();\n  }\n}\n","import { Operator } from '../Operator';\nimport { Observer } from '../Observer';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Returns an Observable that emits whether or not every item of the source satisfies the condition specified.\n *\n * @example <caption>A simple example emitting true if all elements are less than 5, false otherwise</caption>\n *  Observable.of(1, 2, 3, 4, 5, 6)\n *     .every(x => x < 5)\n *     .subscribe(x => console.log(x)); // -> false\n *\n * @param {function} predicate A function for determining if an item meets a specified condition.\n * @param {any} [thisArg] Optional object to use for `this` in the callback.\n * @return {Observable} An Observable of booleans that determines if all items of the source Observable meet the condition specified.\n * @method every\n * @owner Observable\n */\nexport function every<T>(predicate: (value: T, index: number, source: Observable<T>) => boolean,\n                         thisArg?: any): OperatorFunction<T, boolean> {\n  return (source: Observable<T>) => source.lift(new EveryOperator(predicate, thisArg, source));\n}\n\nclass EveryOperator<T> implements Operator<T, boolean> {\n  constructor(private predicate: (value: T, index: number, source: Observable<T>) => boolean,\n              private thisArg?: any,\n              private source?: Observable<T>) {\n  }\n\n  call(observer: Subscriber<boolean>, source: any): any {\n    return source.subscribe(new EverySubscriber(observer, this.predicate, this.thisArg, this.source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass EverySubscriber<T> extends Subscriber<T> {\n  private index: number = 0;\n\n  constructor(destination: Observer<boolean>,\n              private predicate: (value: T, index: number, source: Observable<T>) => boolean,\n              private thisArg: any,\n              private source?: Observable<T>) {\n    super(destination);\n    this.thisArg = thisArg || this;\n  }\n\n  private notifyComplete(everyValueMatch: boolean): void {\n    this.destination.next(everyValueMatch);\n    this.destination.complete();\n  }\n\n  protected _next(value: T): void {\n    let result = false;\n    try {\n      result = this.predicate.call(this.thisArg, value, this.index++, this.source);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n\n    if (!result) {\n      this.notifyComplete(false);\n    }\n  }\n\n  protected _complete(): void {\n    this.notifyComplete(true);\n  }\n}\n","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription, TeardownLogic } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Converts a higher-order Observable into a first-order Observable by dropping\n * inner Observables while the previous inner Observable has not yet completed.\n *\n * <span class=\"informal\">Flattens an Observable-of-Observables by dropping the\n * next inner Observables while the current inner is still executing.</span>\n *\n * <img src=\"./img/exhaust.png\" width=\"100%\">\n *\n * `exhaust` subscribes to an Observable that emits Observables, also known as a\n * higher-order Observable. Each time it observes one of these emitted inner\n * Observables, the output Observable begins emitting the items emitted by that\n * inner Observable. So far, it behaves like {@link mergeAll}. However,\n * `exhaust` ignores every new inner Observable if the previous Observable has\n * not yet completed. Once that one completes, it will accept and flatten the\n * next inner Observable and repeat this process.\n *\n * @example <caption>Run a finite timer for each click, only if there is no currently active timer</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var higherOrder = clicks.map((ev) => Rx.Observable.interval(1000).take(5));\n * var result = higherOrder.exhaust();\n * result.subscribe(x => console.log(x));\n *\n * @see {@link combineAll}\n * @see {@link concatAll}\n * @see {@link switch}\n * @see {@link mergeAll}\n * @see {@link exhaustMap}\n * @see {@link zipAll}\n *\n * @return {Observable} An Observable that takes a source of Observables and propagates the first observable\n * exclusively until it completes before subscribing to the next.\n * @method exhaust\n * @owner Observable\n */\nexport function exhaust<T>(): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new SwitchFirstOperator<T>());\n}\n\nclass SwitchFirstOperator<T> implements Operator<T, T> {\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new SwitchFirstSubscriber(subscriber));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SwitchFirstSubscriber<T> extends OuterSubscriber<T, T> {\n  private hasCompleted: boolean = false;\n  private hasSubscription: boolean = false;\n\n  constructor(destination: Subscriber<T>) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    if (!this.hasSubscription) {\n      this.hasSubscription = true;\n      this.add(subscribeToResult(this, value));\n    }\n  }\n\n  protected _complete(): void {\n    this.hasCompleted = true;\n    if (!this.hasSubscription) {\n      this.destination.complete();\n    }\n  }\n\n  notifyComplete(innerSub: Subscription): void {\n    this.remove(innerSub);\n    this.hasSubscription = false;\n    if (this.hasCompleted) {\n      this.destination.complete();\n    }\n  }\n}\n","import { Operator } from '../Operator';\nimport { Observable, ObservableInput } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function exhaustMap<T, R>(project: (value: T, index: number) => ObservableInput<R>): OperatorFunction<T, R>;\nexport function exhaustMap<T, I, R>(project: (value: T, index: number) => ObservableInput<I>, resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Projects each source value to an Observable which is merged in the output\n * Observable only if the previous projected Observable has completed.\n *\n * <span class=\"informal\">Maps each value to an Observable, then flattens all of\n * these inner Observables using {@link exhaust}.</span>\n *\n * <img src=\"./img/exhaustMap.png\" width=\"100%\">\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an (so-called \"inner\") Observable. When it projects a source value to\n * an Observable, the output Observable begins emitting the items emitted by\n * that projected Observable. However, `exhaustMap` ignores every new projected\n * Observable if the previous projected Observable has not yet completed. Once\n * that one completes, it will accept and flatten the next projected Observable\n * and repeat this process.\n *\n * @example <caption>Run a finite timer for each click, only if there is no currently active timer</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.exhaustMap((ev) => Rx.Observable.interval(1000).take(5));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link concatMap}\n * @see {@link exhaust}\n * @see {@link mergeMap}\n * @see {@link switchMap}\n *\n * @param {function(value: T, ?index: number): ObservableInput} project A function\n * that, when applied to an item emitted by the source Observable, returns an\n * Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @return {Observable} An Observable containing projected Observables\n * of each item of the source, ignoring projected Observables that start before\n * their preceding Observable has completed.\n * @method exhaustMap\n * @owner Observable\n */\nexport function exhaustMap<T, I, R>(\n  project: (value: T, index: number) => ObservableInput<I>,\n  resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R\n  ): OperatorFunction<T, R> {\n    return (source: Observable<T>) => source.lift(new SwitchFirstMapOperator(project, resultSelector));\n  }\n\nclass SwitchFirstMapOperator<T, I, R> implements Operator<T, R> {\n  constructor(private project: (value: T, index: number) => ObservableInput<I>,\n              private resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R) {\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new SwitchFirstMapSubscriber(subscriber, this.project, this.resultSelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SwitchFirstMapSubscriber<T, I, R> extends OuterSubscriber<T, I> {\n  private hasSubscription: boolean = false;\n  private hasCompleted: boolean = false;\n  private index: number = 0;\n\n  constructor(destination: Subscriber<R>,\n              private project: (value: T, index: number) => ObservableInput<I>,\n              private resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    if (!this.hasSubscription) {\n      this.tryNext(value);\n    }\n  }\n\n  private tryNext(value: T): void {\n    const index = this.index++;\n    const destination = this.destination;\n    try {\n      const result = this.project(value, index);\n      this.hasSubscription = true;\n      this.add(subscribeToResult(this, result, value, index));\n    } catch (err) {\n      destination.error(err);\n    }\n  }\n\n  protected _complete(): void {\n    this.hasCompleted = true;\n    if (!this.hasSubscription) {\n      this.destination.complete();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: I,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, I>): void {\n    const { resultSelector, destination } = this;\n    if (resultSelector) {\n      this.trySelectResult(outerValue, innerValue, outerIndex, innerIndex);\n    } else {\n      destination.next(innerValue);\n    }\n  }\n\n  private trySelectResult(outerValue: T, innerValue: I,\n                          outerIndex: number, innerIndex: number): void {\n    const { resultSelector, destination } = this;\n    try {\n      const result = resultSelector(outerValue, innerValue, outerIndex, innerIndex);\n      destination.next(result);\n    } catch (err) {\n      destination.error(err);\n    }\n  }\n\n  notifyError(err: any): void {\n    this.destination.error(err);\n  }\n\n  notifyComplete(innerSub: Subscription): void {\n    this.remove(innerSub);\n\n    this.hasSubscription = false;\n    if (this.hasCompleted) {\n      this.destination.complete();\n    }\n  }\n}\n","import { Observable } from '../Observable';\nimport { IScheduler } from '../Scheduler';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\nimport { Subscription } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { MonoTypeOperatorFunction, OperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function expand<T>(project: (value: T, index: number) => Observable<T>, concurrent?: number, scheduler?: IScheduler): MonoTypeOperatorFunction<T>;\nexport function expand<T, R>(project: (value: T, index: number) => Observable<R>, concurrent?: number, scheduler?: IScheduler): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Recursively projects each source value to an Observable which is merged in\n * the output Observable.\n *\n * <span class=\"informal\">It's similar to {@link mergeMap}, but applies the\n * projection function to every source value as well as every output value.\n * It's recursive.</span>\n *\n * <img src=\"./img/expand.png\" width=\"100%\">\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an Observable, and then merging those resulting Observables and\n * emitting the results of this merger. *Expand* will re-emit on the output\n * Observable every source value. Then, each output value is given to the\n * `project` function which returns an inner Observable to be merged on the\n * output Observable. Those output values resulting from the projection are also\n * given to the `project` function to produce new output values. This is how\n * *expand* behaves recursively.\n *\n * @example <caption>Start emitting the powers of two on every click, at most 10 of them</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var powersOfTwo = clicks\n *   .mapTo(1)\n *   .expand(x => Rx.Observable.of(2 * x).delay(1000))\n *   .take(10);\n * powersOfTwo.subscribe(x => console.log(x));\n *\n * @see {@link mergeMap}\n * @see {@link mergeScan}\n *\n * @param {function(value: T, index: number) => Observable} project A function\n * that, when applied to an item emitted by the source or the output Observable,\n * returns an Observable.\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n * Observables being subscribed to concurrently.\n * @param {Scheduler} [scheduler=null] The IScheduler to use for subscribing to\n * each projected inner Observable.\n * @return {Observable} An Observable that emits the source values and also\n * result of applying the projection function to each value emitted on the\n * output Observable and and merging the results of the Observables obtained\n * from this transformation.\n * @method expand\n * @owner Observable\n */\nexport function expand<T, R>(project: (value: T, index: number) => Observable<R>,\n                             concurrent: number = Number.POSITIVE_INFINITY,\n                             scheduler: IScheduler = undefined): OperatorFunction<T, R> {\n  concurrent = (concurrent || 0) < 1 ? Number.POSITIVE_INFINITY : concurrent;\n\n  return (source: Observable<T>) => source.lift(new ExpandOperator(project, concurrent, scheduler));\n}\n\nexport class ExpandOperator<T, R> implements Operator<T, R> {\n  constructor(private project: (value: T, index: number) => Observable<R>,\n              private concurrent: number,\n              private scheduler: IScheduler) {\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new ExpandSubscriber(subscriber, this.project, this.concurrent, this.scheduler));\n  }\n}\n\ninterface DispatchArg<T, R> {\n  subscriber: ExpandSubscriber<T, R>;\n  result: Observable<R>;\n  value: any;\n  index: number;\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class ExpandSubscriber<T, R> extends OuterSubscriber<T, R> {\n  private index: number = 0;\n  private active: number = 0;\n  private hasCompleted: boolean = false;\n  private buffer: any[];\n\n  constructor(destination: Subscriber<R>,\n              private project: (value: T, index: number) => Observable<R>,\n              private concurrent: number,\n              private scheduler: IScheduler) {\n    super(destination);\n    if (concurrent < Number.POSITIVE_INFINITY) {\n      this.buffer = [];\n    }\n  }\n\n  private static dispatch<T, R>(arg: DispatchArg<T, R>): void {\n    const {subscriber, result, value, index} = arg;\n    subscriber.subscribeToProjection(result, value, index);\n  }\n\n  protected _next(value: any): void {\n    const destination = this.destination;\n\n    if (destination.closed) {\n      this._complete();\n      return;\n    }\n\n    const index = this.index++;\n    if (this.active < this.concurrent) {\n      destination.next(value);\n      let result = tryCatch(this.project)(value, index);\n      if (result === errorObject) {\n        destination.error(errorObject.e);\n      } else if (!this.scheduler) {\n        this.subscribeToProjection(result, value, index);\n      } else {\n        const state: DispatchArg<T, R> = { subscriber: this, result, value, index };\n        this.add(this.scheduler.schedule(ExpandSubscriber.dispatch, 0, state));\n      }\n    } else {\n      this.buffer.push(value);\n    }\n  }\n\n  private subscribeToProjection(result: any, value: T, index: number): void {\n    this.active++;\n    this.add(subscribeToResult<T, R>(this, result, value, index));\n  }\n\n  protected _complete(): void {\n    this.hasCompleted = true;\n    if (this.hasCompleted && this.active === 0) {\n      this.destination.complete();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this._next(innerValue);\n  }\n\n  notifyComplete(innerSub: Subscription): void {\n    const buffer = this.buffer;\n    this.remove(innerSub);\n    this.active--;\n    if (buffer && buffer.length > 0) {\n      this._next(buffer.shift());\n    }\n    if (this.hasCompleted && this.active === 0) {\n      this.destination.complete();\n    }\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\nimport { OperatorFunction, MonoTypeOperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function filter<T, S extends T>(predicate: (value: T, index: number) => value is S,\n                                       thisArg?: any): OperatorFunction<T, S>;\nexport function filter<T>(predicate: (value: T, index: number) => boolean,\n                          thisArg?: any): MonoTypeOperatorFunction<T>;\n/* tslint:enable:max-line-length */\n\n/**\n * Filter items emitted by the source Observable by only emitting those that\n * satisfy a specified predicate.\n *\n * <span class=\"informal\">Like\n * [Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter),\n * it only emits a value from the source if it passes a criterion function.</span>\n *\n * <img src=\"./img/filter.png\" width=\"100%\">\n *\n * Similar to the well-known `Array.prototype.filter` method, this operator\n * takes values from the source Observable, passes them through a `predicate`\n * function and only emits those values that yielded `true`.\n *\n * @example <caption>Emit only click events whose target was a DIV element</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var clicksOnDivs = clicks.filter(ev => ev.target.tagName === 'DIV');\n * clicksOnDivs.subscribe(x => console.log(x));\n *\n * @see {@link distinct}\n * @see {@link distinctUntilChanged}\n * @see {@link distinctUntilKeyChanged}\n * @see {@link ignoreElements}\n * @see {@link partition}\n * @see {@link skip}\n *\n * @param {function(value: T, index: number): boolean} predicate A function that\n * evaluates each value emitted by the source Observable. If it returns `true`,\n * the value is emitted, if `false` the value is not passed to the output\n * Observable. The `index` parameter is the number `i` for the i-th source\n * emission that has happened since the subscription, starting from the number\n * `0`.\n * @param {any} [thisArg] An optional argument to determine the value of `this`\n * in the `predicate` function.\n * @return {Observable} An Observable of values from the source that were\n * allowed by the `predicate` function.\n * @method filter\n * @owner Observable\n */\nexport function filter<T>(predicate: (value: T, index: number) => boolean,\n                          thisArg?: any): MonoTypeOperatorFunction<T> {\n  return function filterOperatorFunction(source: Observable<T>): Observable<T> {\n    return source.lift(new FilterOperator(predicate, thisArg));\n  };\n}\n\nclass FilterOperator<T> implements Operator<T, T> {\n  constructor(private predicate: (value: T, index: number) => boolean,\n              private thisArg?: any) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new FilterSubscriber(subscriber, this.predicate, this.thisArg));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass FilterSubscriber<T> extends Subscriber<T> {\n\n  count: number = 0;\n\n  constructor(destination: Subscriber<T>,\n              private predicate: (value: T, index: number) => boolean,\n              private thisArg: any) {\n    super(destination);\n  }\n\n  // the try catch block below is left specifically for\n  // optimization and perf reasons. a tryCatcher is not necessary here.\n  protected _next(value: T) {\n    let result: any;\n    try {\n      result = this.predicate.call(this.thisArg, value, this.count++);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    if (result) {\n      this.destination.next(value);\n    }\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription, TeardownLogic } from '../Subscription';\nimport { Observable } from '../Observable';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Returns an Observable that mirrors the source Observable, but will call a specified function when\n * the source terminates on complete or error.\n * @param {function} callback Function to be called when source terminates.\n * @return {Observable} An Observable that mirrors the source, but will call the specified function on termination.\n * @method finally\n * @owner Observable\n */\nexport function finalize<T>(callback: () => void): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new FinallyOperator(callback));\n}\n\nclass FinallyOperator<T> implements Operator<T, T> {\n  constructor(private callback: () => void) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new FinallySubscriber(subscriber, this.callback));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass FinallySubscriber<T> extends Subscriber<T> {\n  constructor(destination: Subscriber<T>, callback: () => void) {\n    super(destination);\n    this.add(new Subscription(callback));\n  }\n}\n","import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { OperatorFunction, MonoTypeOperatorFunction } from '../interfaces';\n\nexport function find<T, S extends T>(predicate: (value: T, index: number, source: Observable<T>) => value is S,\n                                     thisArg?: any): OperatorFunction<T, S>;\nexport function find<T, S extends T>(predicate: (value: T, index: number) => value is S,\n                                     thisArg?: any): OperatorFunction<T, S>;\nexport function find<T>(predicate: (value: T, index: number, source: Observable<T>) => boolean,\n                        thisArg?: any): MonoTypeOperatorFunction<T>;\nexport function find<T>(predicate: (value: T, index: number) => boolean,\n                        thisArg?: any): MonoTypeOperatorFunction<T>;\n/**\n * Emits only the first value emitted by the source Observable that meets some\n * condition.\n *\n * <span class=\"informal\">Finds the first value that passes some test and emits\n * that.</span>\n *\n * <img src=\"./img/find.png\" width=\"100%\">\n *\n * `find` searches for the first item in the source Observable that matches the\n * specified condition embodied by the `predicate`, and returns the first\n * occurrence in the source. Unlike {@link first}, the `predicate` is required\n * in `find`, and does not emit an error if a valid value is not found.\n *\n * @example <caption>Find and emit the first click that happens on a DIV element</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.find(ev => ev.target.tagName === 'DIV');\n * result.subscribe(x => console.log(x));\n *\n * @see {@link filter}\n * @see {@link first}\n * @see {@link findIndex}\n * @see {@link take}\n *\n * @param {function(value: T, index: number, source: Observable<T>): boolean} predicate\n * A function called with each item to test for condition matching.\n * @param {any} [thisArg] An optional argument to determine the value of `this`\n * in the `predicate` function.\n * @return {Observable<T>} An Observable of the first item that matches the\n * condition.\n * @method find\n * @owner Observable\n */\nexport function find<T>(predicate: (value: T, index: number, source: Observable<T>) => boolean,\n                        thisArg?: any): MonoTypeOperatorFunction<T> {\n  if (typeof predicate !== 'function') {\n    throw new TypeError('predicate is not a function');\n  }\n  return (source: Observable<T>) => source.lift(new FindValueOperator(predicate, source, false, thisArg));\n}\n\nexport class FindValueOperator<T> implements Operator<T, T> {\n  constructor(private predicate: (value: T, index: number, source: Observable<T>) => boolean,\n              private source: Observable<T>,\n              private yieldIndex: boolean,\n              private thisArg?: any) {\n  }\n\n  call(observer: Subscriber<T>, source: any): any {\n    return source.subscribe(new FindValueSubscriber(observer, this.predicate, this.source, this.yieldIndex, this.thisArg));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class FindValueSubscriber<T> extends Subscriber<T> {\n  private index: number = 0;\n\n  constructor(destination: Subscriber<T>,\n              private predicate: (value: T, index: number, source: Observable<T>) => boolean,\n              private source: Observable<T>,\n              private yieldIndex: boolean,\n              private thisArg?: any) {\n    super(destination);\n  }\n\n  private notifyComplete(value: any): void {\n    const destination = this.destination;\n\n    destination.next(value);\n    destination.complete();\n  }\n\n  protected _next(value: T): void {\n    const { predicate, thisArg } = this;\n    const index = this.index++;\n    try {\n      const result = predicate.call(thisArg || this, value, index, this.source);\n      if (result) {\n        this.notifyComplete(this.yieldIndex ? index : value);\n      }\n    } catch (err) {\n      this.destination.error(err);\n    }\n  }\n\n  protected _complete(): void {\n    this.notifyComplete(this.yieldIndex ? -1 : undefined);\n  }\n}\n","/**\n * An error thrown when an Observable or a sequence was queried but has no\n * elements.\n *\n * @see {@link first}\n * @see {@link last}\n * @see {@link single}\n *\n * @class EmptyError\n */\nexport class EmptyError extends Error {\n  constructor() {\n    const err: any = super('no elements in sequence');\n    (<any> this).name = err.name = 'EmptyError';\n    (<any> this).stack = err.stack;\n    (<any> this).message = err.message;\n  }\n}\n","export class MapPolyfill {\n  public size = 0;\n  private _values: any[] = [];\n  private _keys: any[] = [];\n\n  get(key: any) {\n    const i = this._keys.indexOf(key);\n    return i === -1 ? undefined : this._values[i];\n  }\n\n  set(key: any, value: any) {\n    const i = this._keys.indexOf(key);\n    if (i === -1) {\n      this._keys.push(key);\n      this._values.push(value);\n      this.size++;\n    } else {\n      this._values[i] = value;\n    }\n    return this;\n  }\n\n  delete(key: any): boolean {\n    const i = this._keys.indexOf(key);\n    if (i === -1) { return false; }\n    this._values.splice(i, 1);\n    this._keys.splice(i, 1);\n    this.size--;\n    return true;\n  }\n\n  clear(): void {\n    this._keys.length = 0;\n    this._values.length = 0;\n    this.size = 0;\n  }\n\n  forEach(cb: Function, thisArg: any): void {\n    for (let i = 0; i < this.size; i++) {\n      cb.call(thisArg, this._values[i], this._keys[i]);\n    }\n  }\n}","import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { EmptyError } from '../util/EmptyError';\nimport { OperatorFunction, MonoTypeOperatorFunction } from '../interfaces';\n/* tslint:disable:max-line-length */\nexport function first<T, S extends T>(predicate: (value: T, index: number, source: Observable<T>) => value is S): OperatorFunction<T, S>;\nexport function first<T, S extends T, R>(predicate: (value: T | S, index: number, source: Observable<T>) => value is S,\n                                         resultSelector: (value: S, index: number) => R, defaultValue?: R): OperatorFunction<T, R>;\nexport function first<T, S extends T>(predicate: (value: T, index: number, source: Observable<T>) => value is S,\n                                      resultSelector: void,\n                                      defaultValue?: S): OperatorFunction<T, S>;\nexport function first<T>(predicate?: (value: T, index: number, source: Observable<T>) => boolean): MonoTypeOperatorFunction<T>;\nexport function first<T, R>(predicate: (value: T, index: number, source: Observable<T>) => boolean,\n                            resultSelector?: (value: T, index: number) => R,\n                            defaultValue?: R): OperatorFunction<T, R>;\nexport function first<T>(predicate: (value: T, index: number, source: Observable<T>) => boolean,\n                         resultSelector: void,\n                         defaultValue?: T): MonoTypeOperatorFunction<T>;\n\n/**\n * Emits only the first value (or the first value that meets some condition)\n * emitted by the source Observable.\n *\n * <span class=\"informal\">Emits only the first value. Or emits only the first\n * value that passes some test.</span>\n *\n * <img src=\"./img/first.png\" width=\"100%\">\n *\n * If called with no arguments, `first` emits the first value of the source\n * Observable, then completes. If called with a `predicate` function, `first`\n * emits the first value of the source that matches the specified condition. It\n * may also take a `resultSelector` function to produce the output value from\n * the input value, and a `defaultValue` to emit in case the source completes\n * before it is able to emit a valid value. Throws an error if `defaultValue`\n * was not provided and a matching element is not found.\n *\n * @example <caption>Emit only the first click that happens on the DOM</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.first();\n * result.subscribe(x => console.log(x));\n *\n * @example <caption>Emits the first click that happens on a DIV</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.first(ev => ev.target.tagName === 'DIV');\n * result.subscribe(x => console.log(x));\n *\n * @see {@link filter}\n * @see {@link find}\n * @see {@link take}\n *\n * @throws {EmptyError} Delivers an EmptyError to the Observer's `error`\n * callback if the Observable completes before any `next` notification was sent.\n *\n * @param {function(value: T, index: number, source: Observable<T>): boolean} [predicate]\n * An optional function called with each item to test for condition matching.\n * @param {function(value: T, index: number): R} [resultSelector] A function to\n * produce the value on the output Observable based on the values\n * and the indices of the source Observable. The arguments passed to this\n * function are:\n * - `value`: the value that was emitted on the source.\n * - `index`: the \"index\" of the value from the source.\n * @param {R} [defaultValue] The default value emitted in case no valid value\n * was found on the source.\n * @return {Observable<T|R>} An Observable of the first item that matches the\n * condition.\n * @method first\n * @owner Observable\n */\nexport function first<T, R>(predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n                            resultSelector?: ((value: T, index: number) => R) | void,\n                            defaultValue?: R): OperatorFunction<T, T | R> {\n  return (source: Observable<T>) => source.lift(new FirstOperator(predicate, resultSelector, defaultValue, source));\n}\n\nclass FirstOperator<T, R> implements Operator<T, R> {\n  constructor(private predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n              private resultSelector?: ((value: T, index: number) => R) | void,\n              private defaultValue?: any,\n              private source?: Observable<T>) {\n  }\n\n  call(observer: Subscriber<R>, source: any): any {\n    return source.subscribe(new FirstSubscriber(observer, this.predicate, this.resultSelector, this.defaultValue, this.source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass FirstSubscriber<T, R> extends Subscriber<T> {\n  private index: number = 0;\n  private hasCompleted: boolean = false;\n  private _emitted: boolean = false;\n\n  constructor(destination: Subscriber<R>,\n              private predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n              private resultSelector?: ((value: T, index: number) => R) | void,\n              private defaultValue?: any,\n              private source?: Observable<T>) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    const index = this.index++;\n    if (this.predicate) {\n      this._tryPredicate(value, index);\n    } else {\n      this._emit(value, index);\n    }\n  }\n\n  private _tryPredicate(value: T, index: number) {\n    let result: any;\n    try {\n      result = this.predicate(value, index, this.source);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    if (result) {\n      this._emit(value, index);\n    }\n  }\n\n  private _emit(value: any, index: number) {\n    if (this.resultSelector) {\n      this._tryResultSelector(value, index);\n      return;\n    }\n    this._emitFinal(value);\n  }\n\n  private _tryResultSelector(value: T, index: number) {\n    let result: any;\n    try {\n      result = (<any>this).resultSelector(value, index);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this._emitFinal(result);\n  }\n\n  private _emitFinal(value: any) {\n    const destination = this.destination;\n    if (!this._emitted) {\n      this._emitted = true;\n      destination.next(value);\n      destination.complete();\n      this.hasCompleted = true;\n    }\n  }\n\n  protected _complete(): void {\n    const destination = this.destination;\n    if (!this.hasCompleted && typeof this.defaultValue !== 'undefined') {\n      destination.next(this.defaultValue);\n      destination.complete();\n    } else if (!this.hasCompleted) {\n      destination.error(new EmptyError);\n    }\n  }\n}\n","import { root } from './root';\nimport { MapPolyfill } from './MapPolyfill';\n\nexport const Map = root.Map || (() => MapPolyfill)();","export class FastMap {\n  private values: Object = {};\n\n  delete(key: string): boolean {\n    this.values[key] = null;\n    return true;\n  }\n\n  set(key: string, value: any): FastMap {\n    this.values[key] = value;\n    return this;\n  }\n\n  get(key: string): any {\n    return this.values[key];\n  }\n\n  forEach(cb: (value: any, key: any) => void, thisArg?: any): void {\n    const values = this.values;\n    for (let key in values) {\n      if (values.hasOwnProperty(key) && values[key] !== null) {\n        cb.call(thisArg, values[key], key);\n      }\n    }\n  }\n\n  clear(): void {\n    this.values = {};\n  }\n}","import { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subject } from '../Subject';\nimport { Map } from '../util/Map';\nimport { FastMap } from '../util/FastMap';\nimport { OperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function groupBy<T, K>(keySelector: (value: T) => K): OperatorFunction<T, GroupedObservable<K, T>>;\nexport function groupBy<T, K>(keySelector: (value: T) => K, elementSelector: void, durationSelector: (grouped: GroupedObservable<K, T>) => Observable<any>): OperatorFunction<T, GroupedObservable<K, T>>;\nexport function groupBy<T, K, R>(keySelector: (value: T) => K, elementSelector?: (value: T) => R, durationSelector?: (grouped: GroupedObservable<K, R>) => Observable<any>): OperatorFunction<T, GroupedObservable<K, R>>;\nexport function groupBy<T, K, R>(keySelector: (value: T) => K, elementSelector?: (value: T) => R, durationSelector?: (grouped: GroupedObservable<K, R>) => Observable<any>, subjectSelector?: () => Subject<R>): OperatorFunction<T, GroupedObservable<K, R>>;\n/* tslint:enable:max-line-length */\n\n/**\n * Groups the items emitted by an Observable according to a specified criterion,\n * and emits these grouped items as `GroupedObservables`, one\n * {@link GroupedObservable} per group.\n *\n * <img src=\"./img/groupBy.png\" width=\"100%\">\n *\n * @example <caption>Group objects by id and return as array</caption>\n * Observable.of<Obj>({id: 1, name: 'aze1'},\n *                    {id: 2, name: 'sf2'},\n *                    {id: 2, name: 'dg2'},\n *                    {id: 1, name: 'erg1'},\n *                    {id: 1, name: 'df1'},\n *                    {id: 2, name: 'sfqfb2'},\n *                    {id: 3, name: 'qfs3'},\n *                    {id: 2, name: 'qsgqsfg2'}\n *     )\n *     .groupBy(p => p.id)\n *     .flatMap( (group$) => group$.reduce((acc, cur) => [...acc, cur], []))\n *     .subscribe(p => console.log(p));\n *\n * // displays:\n * // [ { id: 1, name: 'aze1' },\n * //   { id: 1, name: 'erg1' },\n * //   { id: 1, name: 'df1' } ]\n * //\n * // [ { id: 2, name: 'sf2' },\n * //   { id: 2, name: 'dg2' },\n * //   { id: 2, name: 'sfqfb2' },\n * //   { id: 2, name: 'qsgqsfg2' } ]\n * //\n * // [ { id: 3, name: 'qfs3' } ]\n *\n * @example <caption>Pivot data on the id field</caption>\n * Observable.of<Obj>({id: 1, name: 'aze1'},\n *                    {id: 2, name: 'sf2'},\n *                    {id: 2, name: 'dg2'},\n *                    {id: 1, name: 'erg1'},\n *                    {id: 1, name: 'df1'},\n *                    {id: 2, name: 'sfqfb2'},\n *                    {id: 3, name: 'qfs1'},\n *                    {id: 2, name: 'qsgqsfg2'}\n *                   )\n *     .groupBy(p => p.id, p => p.name)\n *     .flatMap( (group$) => group$.reduce((acc, cur) => [...acc, cur], [\"\" + group$.key]))\n *     .map(arr => ({'id': parseInt(arr[0]), 'values': arr.slice(1)}))\n *     .subscribe(p => console.log(p));\n *\n * // displays:\n * // { id: 1, values: [ 'aze1', 'erg1', 'df1' ] }\n * // { id: 2, values: [ 'sf2', 'dg2', 'sfqfb2', 'qsgqsfg2' ] }\n * // { id: 3, values: [ 'qfs1' ] }\n *\n * @param {function(value: T): K} keySelector A function that extracts the key\n * for each item.\n * @param {function(value: T): R} [elementSelector] A function that extracts the\n * return element for each item.\n * @param {function(grouped: GroupedObservable<K,R>): Observable<any>} [durationSelector]\n * A function that returns an Observable to determine how long each group should\n * exist.\n * @return {Observable<GroupedObservable<K,R>>} An Observable that emits\n * GroupedObservables, each of which corresponds to a unique key value and each\n * of which emits those items from the source Observable that share that key\n * value.\n * @method groupBy\n * @owner Observable\n */\nexport function groupBy<T, K, R>(keySelector: (value: T) => K,\n                                 elementSelector?: ((value: T) => R) | void,\n                                 durationSelector?: (grouped: GroupedObservable<K, R>) => Observable<any>,\n                                 subjectSelector?: () => Subject<R>): OperatorFunction<T, GroupedObservable<K, R>> {\n  return (source: Observable<T>) =>\n    source.lift(new GroupByOperator(keySelector, elementSelector, durationSelector, subjectSelector));\n}\n\nexport interface RefCountSubscription {\n  count: number;\n  unsubscribe: () => void;\n  closed: boolean;\n  attemptedToUnsubscribe: boolean;\n}\n\nclass GroupByOperator<T, K, R> implements Operator<T, GroupedObservable<K, R>> {\n  constructor(private keySelector: (value: T) => K,\n              private elementSelector?: ((value: T) => R) | void,\n              private durationSelector?: (grouped: GroupedObservable<K, R>) => Observable<any>,\n              private subjectSelector?: () => Subject<R>) {\n  }\n\n  call(subscriber: Subscriber<GroupedObservable<K, R>>, source: any): any {\n    return source.subscribe(new GroupBySubscriber(\n      subscriber, this.keySelector, this.elementSelector, this.durationSelector, this.subjectSelector\n    ));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass GroupBySubscriber<T, K, R> extends Subscriber<T> implements RefCountSubscription {\n  private groups: Map<K, Subject<T|R>> = null;\n  public attemptedToUnsubscribe: boolean = false;\n  public count: number = 0;\n\n  constructor(destination: Subscriber<GroupedObservable<K, R>>,\n              private keySelector: (value: T) => K,\n              private elementSelector?: ((value: T) => R) | void,\n              private durationSelector?: (grouped: GroupedObservable<K, R>) => Observable<any>,\n              private subjectSelector?: () => Subject<R>) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    let key: K;\n    try {\n      key = this.keySelector(value);\n    } catch (err) {\n      this.error(err);\n      return;\n    }\n\n    this._group(value, key);\n  }\n\n  private _group(value: T, key: K) {\n    let groups = this.groups;\n\n    if (!groups) {\n      groups = this.groups = typeof key === 'string' ? new FastMap() : new Map();\n    }\n\n    let group = groups.get(key);\n\n    let element: R;\n    if (this.elementSelector) {\n      try {\n        element = this.elementSelector(value);\n      } catch (err) {\n        this.error(err);\n      }\n    } else {\n      element = <any>value;\n    }\n\n    if (!group) {\n      group = this.subjectSelector ? this.subjectSelector() : new Subject<R>();\n      groups.set(key, group);\n      const groupedObservable = new GroupedObservable(key, group, this);\n      this.destination.next(groupedObservable);\n      if (this.durationSelector) {\n        let duration: any;\n        try {\n          duration = this.durationSelector(new GroupedObservable<K, R>(key, <Subject<R>>group));\n        } catch (err) {\n          this.error(err);\n          return;\n        }\n        this.add(duration.subscribe(new GroupDurationSubscriber(key, group, this)));\n      }\n    }\n\n    if (!group.closed) {\n      group.next(element);\n    }\n  }\n\n  protected _error(err: any): void {\n    const groups = this.groups;\n    if (groups) {\n      groups.forEach((group, key) => {\n        group.error(err);\n      });\n\n      groups.clear();\n    }\n    this.destination.error(err);\n  }\n\n  protected _complete(): void {\n    const groups = this.groups;\n    if (groups) {\n      groups.forEach((group, key) => {\n        group.complete();\n      });\n\n      groups.clear();\n    }\n    this.destination.complete();\n  }\n\n  removeGroup(key: K): void {\n    this.groups.delete(key);\n  }\n\n  unsubscribe() {\n    if (!this.closed) {\n      this.attemptedToUnsubscribe = true;\n      if (this.count === 0) {\n        super.unsubscribe();\n      }\n    }\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass GroupDurationSubscriber<K, T> extends Subscriber<T> {\n  constructor(private key: K,\n              private group: Subject<T>,\n              private parent: GroupBySubscriber<any, K, T>) {\n    super(group);\n  }\n\n  protected _next(value: T): void {\n    this.complete();\n  }\n\n  protected _unsubscribe() {\n    const { parent, key } = this;\n    this.key = this.parent = null;\n    if (parent) {\n      parent.removeGroup(key);\n    }\n  }\n}\n\n/**\n * An Observable representing values belonging to the same group represented by\n * a common key. The values emitted by a GroupedObservable come from the source\n * Observable. The common key is available as the field `key` on a\n * GroupedObservable instance.\n *\n * @class GroupedObservable<K, T>\n */\nexport class GroupedObservable<K, T> extends Observable<T> {\n  constructor(public key: K,\n              private groupSubject: Subject<T>,\n              private refCountSubscription?: RefCountSubscription) {\n    super();\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>) {\n    const subscription = new Subscription();\n    const {refCountSubscription, groupSubject} = this;\n    if (refCountSubscription && !refCountSubscription.closed) {\n      subscription.add(new InnerRefCountSubscription(refCountSubscription));\n    }\n    subscription.add(groupSubject.subscribe(subscriber));\n    return subscription;\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass InnerRefCountSubscription extends Subscription {\n  constructor(private parent: RefCountSubscription) {\n    super();\n    parent.count++;\n  }\n\n  unsubscribe() {\n    const parent = this.parent;\n    if (!parent.closed && !this.closed) {\n      super.unsubscribe();\n      parent.count -= 1;\n      if (parent.count === 0 && parent.attemptedToUnsubscribe) {\n        parent.unsubscribe();\n      }\n    }\n  }\n}\n","import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { noop } from '../util/noop';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Ignores all items emitted by the source Observable and only passes calls of `complete` or `error`.\n *\n * <img src=\"./img/ignoreElements.png\" width=\"100%\">\n *\n * @return {Observable} An empty Observable that only calls `complete`\n * or `error`, based on which one is called by the source Observable.\n * @method ignoreElements\n * @owner Observable\n */\nexport function ignoreElements<T>(): MonoTypeOperatorFunction<T> {\n  return function ignoreElementsOperatorFunction(source: Observable<T>) {\n    return source.lift(new IgnoreElementsOperator());\n  };\n}\n\nclass IgnoreElementsOperator<T, R> implements Operator<T, R> {\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new IgnoreElementsSubscriber(subscriber));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass IgnoreElementsSubscriber<T> extends Subscriber<T> {\n  protected _next(unused: T): void {\n    noop();\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { OperatorFunction } from '../interfaces';\n\nexport function isEmpty<T>(): OperatorFunction<T, boolean> {\n  return (source: Observable<T>) => source.lift(new IsEmptyOperator());\n}\n\nclass IsEmptyOperator implements Operator<any, boolean> {\n  call (observer: Subscriber<boolean>, source: any): any {\n    return source.subscribe(new IsEmptySubscriber(observer));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass IsEmptySubscriber extends Subscriber<any> {\n  constructor(destination: Subscriber<boolean>) {\n    super(destination);\n  }\n\n  private notifyComplete(isEmpty: boolean): void {\n    const destination = this.destination;\n\n    destination.next(isEmpty);\n    destination.complete();\n  }\n\n  protected _next(value: boolean) {\n    this.notifyComplete(false);\n  }\n\n  protected _complete() {\n    this.notifyComplete(true);\n  }\n}\n","import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { EmptyError } from '../util/EmptyError';\nimport { OperatorFunction, MonoTypeOperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function last<T, S extends T>(predicate: (value: T, index: number, source: Observable<T>) => value is S): OperatorFunction<T, S>;\nexport function last<T, S extends T, R>(predicate: (value: T | S, index: number, source: Observable<T>) => value is S,\n                                        resultSelector: (value: S, index: number) => R, defaultValue?: R): OperatorFunction<T, R>;\nexport function last<T, S extends T>(predicate: (value: T, index: number, source: Observable<T>) => value is S,\n                                     resultSelector: void,\n                                     defaultValue?: S): OperatorFunction<T, S>;\nexport function last<T>(predicate?: (value: T, index: number, source: Observable<T>) => boolean): MonoTypeOperatorFunction<T>;\nexport function last<T, R>(predicate: (value: T, index: number, source: Observable<T>) => boolean,\n                           resultSelector?: (value: T, index: number) => R,\n                           defaultValue?: R): OperatorFunction<T, R>;\nexport function last<T>(predicate: (value: T, index: number, source: Observable<T>) => boolean,\n                        resultSelector: void,\n                        defaultValue?: T): MonoTypeOperatorFunction<T>;\n/* tslint:enable:max-line-length */\n\n/**\n * Returns an Observable that emits only the last item emitted by the source Observable.\n * It optionally takes a predicate function as a parameter, in which case, rather than emitting\n * the last item from the source Observable, the resulting Observable will emit the last item\n * from the source Observable that satisfies the predicate.\n *\n * <img src=\"./img/last.png\" width=\"100%\">\n *\n * @throws {EmptyError} Delivers an EmptyError to the Observer's `error`\n * callback if the Observable completes before any `next` notification was sent.\n * @param {function} predicate - The condition any source emitted item has to satisfy.\n * @return {Observable} An Observable that emits only the last item satisfying the given condition\n * from the source, or an NoSuchElementException if no such items are emitted.\n * @throws - Throws if no items that match the predicate are emitted by the source Observable.\n * @method last\n * @owner Observable\n */\nexport function last<T, R>(predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n                           resultSelector?: ((value: T, index: number) => R) | void,\n                           defaultValue?: R): OperatorFunction<T, T | R> {\n  return (source: Observable<T>) => source.lift(new LastOperator(predicate, resultSelector, defaultValue, source));\n}\n\nclass LastOperator<T, R> implements Operator<T, R> {\n  constructor(private predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n              private resultSelector?: ((value: T, index: number) => R) | void,\n              private defaultValue?: any,\n              private source?: Observable<T>) {\n  }\n\n  call(observer: Subscriber<R>, source: any): any {\n    return source.subscribe(new LastSubscriber(observer, this.predicate, this.resultSelector, this.defaultValue, this.source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass LastSubscriber<T, R> extends Subscriber<T> {\n  private lastValue: T | R;\n  private hasValue: boolean = false;\n  private index: number = 0;\n\n  constructor(destination: Subscriber<R>,\n              private predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n              private resultSelector?: ((value: T, index: number) => R) | void,\n              private defaultValue?: any,\n              private source?: Observable<T>) {\n    super(destination);\n    if (typeof defaultValue !== 'undefined') {\n      this.lastValue = defaultValue;\n      this.hasValue = true;\n    }\n  }\n\n  protected _next(value: T): void {\n    const index = this.index++;\n    if (this.predicate) {\n      this._tryPredicate(value, index);\n    } else {\n      if (this.resultSelector) {\n        this._tryResultSelector(value, index);\n        return;\n      }\n      this.lastValue = value;\n      this.hasValue = true;\n    }\n  }\n\n  private _tryPredicate(value: T, index: number) {\n    let result: any;\n    try {\n      result = this.predicate(value, index, this.source);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    if (result) {\n      if (this.resultSelector) {\n        this._tryResultSelector(value, index);\n        return;\n      }\n      this.lastValue = value;\n      this.hasValue = true;\n    }\n  }\n\n  private _tryResultSelector(value: T, index: number) {\n    let result: any;\n    try {\n      result = (<any>this).resultSelector(value, index);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.lastValue = result;\n    this.hasValue = true;\n  }\n\n  protected _complete(): void {\n    const destination = this.destination;\n    if (this.hasValue) {\n      destination.next(this.lastValue);\n      destination.complete();\n    } else {\n      destination.error(new EmptyError);\n    }\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Emits the given constant value on the output Observable every time the source\n * Observable emits a value.\n *\n * <span class=\"informal\">Like {@link map}, but it maps every source value to\n * the same output value every time.</span>\n *\n * <img src=\"./img/mapTo.png\" width=\"100%\">\n *\n * Takes a constant `value` as argument, and emits that whenever the source\n * Observable emits a value. In other words, ignores the actual source value,\n * and simply uses the emission moment to know when to emit the given `value`.\n *\n * @example <caption>Map every click to the string 'Hi'</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var greetings = clicks.mapTo('Hi');\n * greetings.subscribe(x => console.log(x));\n *\n * @see {@link map}\n *\n * @param {any} value The value to map each source value to.\n * @return {Observable} An Observable that emits the given `value` every time\n * the source Observable emits something.\n * @method mapTo\n * @owner Observable\n */\nexport function mapTo<T, R>(value: R): OperatorFunction<T, R> {\n  return (source: Observable<T>) => source.lift(new MapToOperator(value));\n}\n\nclass MapToOperator<T, R> implements Operator<T, R> {\n\n  value: R;\n\n  constructor(value: R) {\n    this.value = value;\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new MapToSubscriber(subscriber, this.value));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass MapToSubscriber<T, R> extends Subscriber<T> {\n\n  value: R;\n\n  constructor(destination: Subscriber<R>, value: R) {\n    super(destination);\n    this.value = value;\n  }\n\n  protected _next(x: T) {\n    this.destination.next(this.value);\n  }\n}","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Notification } from '../Notification';\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Represents all of the notifications from the source Observable as `next`\n * emissions marked with their original types within {@link Notification}\n * objects.\n *\n * <span class=\"informal\">Wraps `next`, `error` and `complete` emissions in\n * {@link Notification} objects, emitted as `next` on the output Observable.\n * </span>\n *\n * <img src=\"./img/materialize.png\" width=\"100%\">\n *\n * `materialize` returns an Observable that emits a `next` notification for each\n * `next`, `error`, or `complete` emission of the source Observable. When the\n * source Observable emits `complete`, the output Observable will emit `next` as\n * a Notification of type \"complete\", and then it will emit `complete` as well.\n * When the source Observable emits `error`, the output will emit `next` as a\n * Notification of type \"error\", and then `complete`.\n *\n * This operator is useful for producing metadata of the source Observable, to\n * be consumed as `next` emissions. Use it in conjunction with\n * {@link dematerialize}.\n *\n * @example <caption>Convert a faulty Observable to an Observable of Notifications</caption>\n * var letters = Rx.Observable.of('a', 'b', 13, 'd');\n * var upperCase = letters.map(x => x.toUpperCase());\n * var materialized = upperCase.materialize();\n * materialized.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // - Notification {kind: \"N\", value: \"A\", error: undefined, hasValue: true}\n * // - Notification {kind: \"N\", value: \"B\", error: undefined, hasValue: true}\n * // - Notification {kind: \"E\", value: undefined, error: TypeError:\n * //   x.toUpperCase is not a function at MapSubscriber.letters.map.x\n * //   [as project] (http://1…, hasValue: false}\n *\n * @see {@link Notification}\n * @see {@link dematerialize}\n *\n * @return {Observable<Notification<T>>} An Observable that emits\n * {@link Notification} objects that wrap the original emissions from the source\n * Observable with metadata.\n * @method materialize\n * @owner Observable\n */\nexport function materialize<T>(): OperatorFunction<T, Notification<T>> {\n  return function materializeOperatorFunction(source: Observable<T>) {\n    return source.lift(new MaterializeOperator());\n  };\n}\n\nclass MaterializeOperator<T> implements Operator<T, Notification<T>> {\n  call(subscriber: Subscriber<Notification<T>>, source: any): any {\n    return source.subscribe(new MaterializeSubscriber(subscriber));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass MaterializeSubscriber<T> extends Subscriber<T> {\n  constructor(destination: Subscriber<Notification<T>>) {\n    super(destination);\n  }\n\n  protected _next(value: T) {\n    this.destination.next(Notification.createNext(value));\n  }\n\n  protected _error(err: any) {\n    const destination = this.destination;\n    destination.next(Notification.createError(err));\n    destination.complete();\n  }\n\n  protected _complete() {\n    const destination = this.destination;\n    destination.next(Notification.createComplete());\n    destination.complete();\n  }\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {FormErrorExamples as Examples} from './error_examples';\nexport class TemplateDrivenErrors {\n/**\n * @return {?}\n */\nstatic modelParentException(): void {\n    throw new Error(`\n      ngModel cannot be used to register form controls with a parent formGroup directive.  Try using\n      formGroup's partner directive \"formControlName\" instead.  Example:\n\n      ${Examples.formControlName}\n\n      Or, if you'd like to avoid registering this form control, indicate that it's standalone in ngModelOptions:\n\n      Example:\n\n      ${Examples.ngModelWithFormGroup}`);\n  }\n/**\n * @return {?}\n */\nstatic formGroupNameException(): void {\n    throw new Error(`\n      ngModel cannot be used to register form controls with a parent formGroupName or formArrayName directive.\n\n      Option 1: Use formControlName instead of ngModel (reactive strategy):\n\n      ${Examples.formGroupName}\n\n      Option 2:  Update ngModel's parent be ngModelGroup (template-driven strategy):\n\n      ${Examples.ngModelGroup}`);\n  }\n/**\n * @return {?}\n */\nstatic missingNameException() {\n    throw new Error(\n        `If ngModel is used within a form tag, either the name attribute must be set or the form\n      control must be defined as 'standalone' in ngModelOptions.\n\n      Example 1: <input [(ngModel)]=\"person.firstName\" name=\"first\">\n      Example 2: <input [(ngModel)]=\"person.firstName\" [ngModelOptions]=\"{standalone: true}\">`);\n  }\n/**\n * @return {?}\n */\nstatic modelGroupParentException() {\n    throw new Error(`\n      ngModelGroup cannot be used with a parent formGroup directive.\n\n      Option 1: Use formGroupName instead of ngModelGroup (reactive strategy):\n\n      ${Examples.formGroupName}\n\n      Option 2:  Use a regular form tag instead of the formGroup directive (template-driven strategy):\n\n      ${Examples.ngModelGroup}`);\n  }\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Directive, Host, Inject, Input, OnDestroy, OnInit, Optional, Self, SkipSelf, forwardRef} from '@angular/core';\n\nimport {NG_ASYNC_VALIDATORS, NG_VALIDATORS} from '../validators';\n\nimport {AbstractFormGroupDirective} from './abstract_form_group_directive';\nimport {ControlContainer} from './control_container';\nimport {NgForm} from './ng_form';\nimport {TemplateDrivenErrors} from './template_driven_errors';\n\nexport const /** @type {?} */ modelGroupProvider: any = {\n  provide: ControlContainer,\n  useExisting: forwardRef(() => NgModelGroup)\n};\n/**\n * \\@whatItDoes Creates and binds a {\\@link FormGroup} instance to a DOM element.\n * \n * \\@howToUse \n * \n * This directive can only be used as a child of {\\@link NgForm} (or in other words,\n * within `<form>` tags).\n * \n * Use this directive if you'd like to create a sub-group within a form. This can\n * come in handy if you want to validate a sub-group of your form separately from\n * the rest of your form, or if some values in your domain model make more sense to\n * consume together in a nested object.\n * \n * Pass in the name you'd like this sub-group to have and it will become the key\n * for the sub-group in the form's full value. You can also export the directive into\n * a local template variable using `ngModelGroup` (ex: `#myGroup=\"ngModelGroup\"`).\n * \n * {\\@example forms/ts/ngModelGroup/ng_model_group_example.ts region='Component'}\n * \n * * **npm package**: `\\@angular/forms`\n * \n * * **NgModule**: `FormsModule`\n * \n * \\@stable\n */\nexport class NgModelGroup extends AbstractFormGroupDirective implements OnInit, OnDestroy {\n   name: string;\n/**\n * @param {?} parent\n * @param {?} validators\n * @param {?} asyncValidators\n */\nconstructor(\n        parent: ControlContainer,\n         validators: any[],\n         asyncValidators: any[]) {\n    super();\n    this._parent = parent;\n    this._validators = validators;\n    this._asyncValidators = asyncValidators;\n  }\n/**\n * \\@internal\n * @return {?}\n */\n_checkParentType(): void {\n    if (!(this._parent instanceof NgModelGroup) && !(this._parent instanceof NgForm)) {\n      TemplateDrivenErrors.modelGroupParentException();\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{selector: '[ngModelGroup]', providers: [modelGroupProvider], exportAs: 'ngModelGroup'}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ControlContainer, decorators: [{ type: Host }, { type: SkipSelf }, ]},\n{type: Array, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [NG_VALIDATORS, ] }, ]},\n{type: Array, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [NG_ASYNC_VALIDATORS, ] }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'name': [{ type: Input, args: ['ngModelGroup', ] },],\n};\n}\n\nfunction NgModelGroup_tsickle_Closure_declarations() {\n/** @type {?} */\nNgModelGroup.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nNgModelGroup.ctorParameters;\n/** @type {?} */\nNgModelGroup.propDecorators;\n/** @type {?} */\nNgModelGroup.prototype.name;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Directive, EventEmitter, Host, Inject, Input, OnChanges, OnDestroy, Optional, Output, Self, SimpleChanges, forwardRef} from '@angular/core';\n\nimport {FormControl} from '../model';\nimport {NG_ASYNC_VALIDATORS, NG_VALIDATORS} from '../validators';\n\nimport {AbstractFormGroupDirective} from './abstract_form_group_directive';\nimport {ControlContainer} from './control_container';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from './control_value_accessor';\nimport {NgControl} from './ng_control';\nimport {NgForm} from './ng_form';\nimport {NgModelGroup} from './ng_model_group';\nimport {composeAsyncValidators, composeValidators, controlPath, isPropertyUpdated, selectValueAccessor, setUpControl} from './shared';\nimport {TemplateDrivenErrors} from './template_driven_errors';\nimport {AsyncValidator, AsyncValidatorFn, Validator, ValidatorFn} from './validators';\n\nexport const /** @type {?} */ formControlBinding: any = {\n  provide: NgControl,\n  useExisting: forwardRef(() => NgModel)\n};\n/**\n * `ngModel` forces an additional change detection run when its inputs change:\n * E.g.:\n * ```\n * <div>{{myModel.valid}}</div>\n * <input [(ngModel)]=\"myValue\" #myModel=\"ngModel\">\n * ```\n * I.e. `ngModel` can export itself on the element and then be used in the template.\n * Normally, this would result in expressions before the `input` that use the exported directive\n * to have and old value as they have been\n * dirty checked before. As this is a very common case for `ngModel`, we added this second change\n * detection run.\n * \n * Notes:\n * - this is just one extra run no matter how many `ngModel` have been changed.\n * - this is a general problem when using `exportAs` for directives!\n */\nconst resolvedPromise = Promise.resolve(null);\n/**\n * \\@whatItDoes Creates a {\\@link FormControl} instance from a domain model and binds it\n * to a form control element.\n * \n * The {\\@link FormControl} instance will track the value, user interaction, and\n * validation status of the control and keep the view synced with the model. If used\n * within a parent form, the directive will also register itself with the form as a child\n * control.\n * \n * \\@howToUse \n * \n * This directive can be used by itself or as part of a larger form. All you need is the\n * `ngModel` selector to activate it.\n * \n * It accepts a domain model as an optional {\\@link Input}. If you have a one-way binding\n * to `ngModel` with `[]` syntax, changing the value of the domain model in the component\n * class will set the value in the view. If you have a two-way binding with `[()]` syntax\n * (also known as 'banana-box syntax'), the value in the UI will always be synced back to\n * the domain model in your class as well.\n * \n * If you wish to inspect the properties of the associated {\\@link FormControl} (like\n * validity state), you can also export the directive into a local template variable using\n * `ngModel` as the key (ex: `#myVar=\"ngModel\"`). You can then access the control using the\n * directive's `control` property, but most properties you'll need (like `valid` and `dirty`)\n * will fall through to the control anyway, so you can access them directly. You can see a\n * full list of properties directly available in {\\@link AbstractControlDirective}.\n * \n * The following is an example of a simple standalone control using `ngModel`:\n * \n * {\\@example forms/ts/simpleNgModel/simple_ng_model_example.ts region='Component'}\n * \n * When using the `ngModel` within `<form>` tags, you'll also need to supply a `name` attribute\n * so that the control can be registered with the parent form under that name.\n * \n * It's worth noting that in the context of a parent form, you often can skip one-way or\n * two-way binding because the parent form will sync the value for you. You can access\n * its properties by exporting it into a local template variable using `ngForm` (ex:\n * `#f=\"ngForm\"`). Then you can pass it where it needs to go on submit.\n * \n * If you do need to populate initial values into your form, using a one-way binding for\n * `ngModel` tends to be sufficient as long as you use the exported form's value rather\n * than the domain model's value on submit.\n * \n * Take a look at an example of using `ngModel` within a form:\n * \n * {\\@example forms/ts/simpleForm/simple_form_example.ts region='Component'}\n * \n * To see `ngModel` examples with different form control types, see:\n * \n * * Radio buttons: {\\@link RadioControlValueAccessor}\n * * Selects: {\\@link SelectControlValueAccessor}\n * \n * **npm package**: `\\@angular/forms`\n * \n * **NgModule**: `FormsModule`\n * \n *  \\@stable\n */\nexport class NgModel extends NgControl implements OnChanges,\n    OnDestroy {\n/**\n * \\@internal\n */\n_control = new FormControl();\n/**\n * \\@internal\n */\n_registered = false;\n  viewModel: any;\n\n   name: string;\n   isDisabled: boolean;\n   model: any;\n   options: {name?: string, standalone?: boolean};\n\n   update = new EventEmitter();\n/**\n * @param {?} parent\n * @param {?} validators\n * @param {?} asyncValidators\n * @param {?} valueAccessors\n */\nconstructor(  parent: ControlContainer,\n                 validators: Array<Validator|ValidatorFn>,\n                 asyncValidators: Array<AsyncValidator|AsyncValidatorFn>,\n                \n              valueAccessors: ControlValueAccessor[]) {\n                super();\n                this._parent = parent;\n                this._rawValidators = validators || [];\n                this._rawAsyncValidators = asyncValidators || [];\n                this.valueAccessor = selectValueAccessor(this, valueAccessors);\n              }\n/**\n * @param {?} changes\n * @return {?}\n */\nngOnChanges(changes: SimpleChanges) {\n                this._checkForErrors();\n                if (!this._registered) this._setUpControl();\n                if ('isDisabled' in changes) {\n                  this._updateDisabled(changes);\n                }\n\n                if (isPropertyUpdated(changes, this.viewModel)) {\n                  this._updateValue(this.model);\n                  this.viewModel = this.model;\n                }\n              }\n/**\n * @return {?}\n */\nngOnDestroy(): void { this.formDirective && this.formDirective.removeControl(this); }\n/**\n * @return {?}\n */\nget control(): FormControl { return this._control; }\n/**\n * @return {?}\n */\nget path(): string[] {\n                return this._parent ? controlPath(this.name, this._parent) : [this.name];\n              }\n/**\n * @return {?}\n */\nget formDirective(): any { return this._parent ? this._parent.formDirective : null; }\n/**\n * @return {?}\n */\nget validator(): ValidatorFn|null { return composeValidators(this._rawValidators); }\n/**\n * @return {?}\n */\nget asyncValidator(): AsyncValidatorFn|null {\n                return composeAsyncValidators(this._rawAsyncValidators);\n              }\n/**\n * @param {?} newValue\n * @return {?}\n */\nviewToModelUpdate(newValue: any): void {\n                this.viewModel = newValue;\n                this.update.emit(newValue);\n              }\n/**\n * @return {?}\n */\nprivate _setUpControl(): void {\n                this._isStandalone() ? this._setUpStandalone() :\n                                       this.formDirective.addControl(this);\n                this._registered = true;\n              }\n/**\n * @return {?}\n */\nprivate _isStandalone(): boolean {\n                return !this._parent || !!(this.options && this.options.standalone);\n              }\n/**\n * @return {?}\n */\nprivate _setUpStandalone(): void {\n                setUpControl(this._control, this);\n                this._control.updateValueAndValidity({emitEvent: false});\n              }\n/**\n * @return {?}\n */\nprivate _checkForErrors(): void {\n                if (!this._isStandalone()) {\n                  this._checkParentType();\n                }\n                this._checkName();\n              }\n/**\n * @return {?}\n */\nprivate _checkParentType(): void {\n                if (!(this._parent instanceof NgModelGroup) &&\n                    this._parent instanceof AbstractFormGroupDirective) {\n                  TemplateDrivenErrors.formGroupNameException();\n                } else if (\n                    !(this._parent instanceof NgModelGroup) && !(this._parent instanceof NgForm)) {\n                  TemplateDrivenErrors.modelParentException();\n                }\n              }\n/**\n * @return {?}\n */\nprivate _checkName(): void {\n                if (this.options && this.options.name) this.name = this.options.name;\n\n                if (!this._isStandalone() && !this.name) {\n                  TemplateDrivenErrors.missingNameException();\n                }\n              }\n/**\n * @param {?} value\n * @return {?}\n */\nprivate _updateValue(value: any): void {\n                resolvedPromise.then(\n                    () => { this.control.setValue(value, {emitViewToModelChange: false}); });\n              }\n/**\n * @param {?} changes\n * @return {?}\n */\nprivate _updateDisabled(changes: SimpleChanges) {\n                const /** @type {?} */ disabledValue = changes['isDisabled'].currentValue;\n\n                const /** @type {?} */ isDisabled =\n                    disabledValue === '' || (disabledValue && disabledValue !== 'false');\n\n                resolvedPromise.then(() => {\n                  if (isDisabled && !this.control.disabled) {\n                    this.control.disable();\n                  } else if (!isDisabled && this.control.disabled) {\n                    this.control.enable();\n                  }\n                });\n              }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[ngModel]:not([formControlName]):not([formControl])',\n  providers: [formControlBinding],\n  exportAs: 'ngModel'\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ControlContainer, decorators: [{ type: Optional }, { type: Host }, ]},\n{type: Array, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [NG_VALIDATORS, ] }, ]},\n{type: Array, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [NG_ASYNC_VALIDATORS, ] }, ]},\n{type: Array, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [NG_VALUE_ACCESSOR, ] }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'name': [{ type: Input },],\n'isDisabled': [{ type: Input, args: ['disabled', ] },],\n'model': [{ type: Input, args: ['ngModel', ] },],\n'options': [{ type: Input, args: ['ngModelOptions', ] },],\n'update': [{ type: Output, args: ['ngModelChange', ] },],\n};\n}\n\nfunction NgModel_tsickle_Closure_declarations() {\n/** @type {?} */\nNgModel.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nNgModel.ctorParameters;\n/** @type {?} */\nNgModel.propDecorators;\n/**\n * \\@internal\n * @type {?}\n */\nNgModel.prototype._control;\n/**\n * \\@internal\n * @type {?}\n */\nNgModel.prototype._registered;\n/** @type {?} */\nNgModel.prototype.viewModel;\n/** @type {?} */\nNgModel.prototype.name;\n/** @type {?} */\nNgModel.prototype.isDisabled;\n/** @type {?} */\nNgModel.prototype.model;\n/** @type {?} */\nNgModel.prototype.options;\n/** @type {?} */\nNgModel.prototype.update;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\n\nimport {FormErrorExamples as Examples} from './error_examples';\nexport class ReactiveErrors {\n/**\n * @return {?}\n */\nstatic controlParentException(): void {\n    throw new Error(\n        `formControlName must be used with a parent formGroup directive.  You'll want to add a formGroup\n       directive and pass it an existing FormGroup instance (you can create one in your class).\n\n      Example:\n\n      ${Examples.formControlName}`);\n  }\n/**\n * @return {?}\n */\nstatic ngModelGroupException(): void {\n    throw new Error(\n        `formControlName cannot be used with an ngModelGroup parent. It is only compatible with parents\n       that also have a \"form\" prefix: formGroupName, formArrayName, or formGroup.\n\n       Option 1:  Update the parent to be formGroupName (reactive form strategy)\n\n        ${Examples.formGroupName}\n\n        Option 2: Use ngModel instead of formControlName (template-driven strategy)\n\n        ${Examples.ngModelGroup}`);\n  }\n/**\n * @return {?}\n */\nstatic missingFormException(): void {\n    throw new Error(`formGroup expects a FormGroup instance. Please pass one in.\n\n       Example:\n\n       ${Examples.formControlName}`);\n  }\n/**\n * @return {?}\n */\nstatic groupParentException(): void {\n    throw new Error(\n        `formGroupName must be used with a parent formGroup directive.  You'll want to add a formGroup\n      directive and pass it an existing FormGroup instance (you can create one in your class).\n\n      Example:\n\n      ${Examples.formGroupName}`);\n  }\n/**\n * @return {?}\n */\nstatic arrayParentException(): void {\n    throw new Error(\n        `formArrayName must be used with a parent formGroup directive.  You'll want to add a formGroup\n       directive and pass it an existing FormGroup instance (you can create one in your class).\n\n        Example:\n\n        ${Examples.formArrayName}`);\n  }\n/**\n * @return {?}\n */\nstatic disabledAttrWarning(): void {\n    console.warn(`\n      It looks like you're using the disabled attribute with a reactive form directive. If you set disabled to true\n      when you set up this control in your component class, the disabled attribute will actually be set in the DOM for\n      you. We recommend using this approach to avoid 'changed after checked' errors.\n       \n      Example: \n      form = new FormGroup({\n        first: new FormControl({value: 'Nancy', disabled: true}, Validators.required),\n        last: new FormControl('Drew', Validators.required)\n      });\n    `);\n  }\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Directive, EventEmitter, Inject, Input, OnChanges, Optional, Output, Self, SimpleChanges, forwardRef} from '@angular/core';\n\nimport {FormControl} from '../../model';\nimport {NG_ASYNC_VALIDATORS, NG_VALIDATORS} from '../../validators';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '../control_value_accessor';\nimport {NgControl} from '../ng_control';\nimport {ReactiveErrors} from '../reactive_errors';\nimport {composeAsyncValidators, composeValidators, isPropertyUpdated, selectValueAccessor, setUpControl} from '../shared';\nimport {AsyncValidator, AsyncValidatorFn, Validator, ValidatorFn} from '../validators';\n\nexport const /** @type {?} */ formControlBinding: any = {\n  provide: NgControl,\n  useExisting: forwardRef(() => FormControlDirective)\n};\n/**\n * \\@whatItDoes Syncs a standalone {\\@link FormControl} instance to a form control element.\n * \n * In other words, this directive ensures that any values written to the {\\@link FormControl}\n * instance programmatically will be written to the DOM element (model -> view). Conversely,\n * any values written to the DOM element through user input will be reflected in the\n * {\\@link FormControl} instance (view -> model).\n * \n * \\@howToUse \n * \n * Use this directive if you'd like to create and manage a {\\@link FormControl} instance directly.\n * Simply create a {\\@link FormControl}, save it to your component class, and pass it into the\n * {\\@link FormControlDirective}.\n * \n * This directive is designed to be used as a standalone control.  Unlike {\\@link FormControlName},\n * it does not require that your {\\@link FormControl} instance be part of any parent\n * {\\@link FormGroup}, and it won't be registered to any {\\@link FormGroupDirective} that\n * exists above it.\n * \n * **Get the value**: the `value` property is always synced and available on the\n * {\\@link FormControl} instance. See a full list of available properties in\n * {\\@link AbstractControl}.\n * \n * **Set the value**: You can pass in an initial value when instantiating the {\\@link FormControl},\n * or you can set it programmatically later using {\\@link AbstractControl#setValue setValue} or\n * {\\@link AbstractControl#patchValue patchValue}.\n * \n * **Listen to value**: If you want to listen to changes in the value of the control, you can\n * subscribe to the {\\@link AbstractControl#valueChanges valueChanges} event.  You can also listen to\n * {\\@link AbstractControl#statusChanges statusChanges} to be notified when the validation status is\n * re-calculated.\n * \n * ### Example\n * \n * {\\@example forms/ts/simpleFormControl/simple_form_control_example.ts region='Component'}\n * \n * * **npm package**: `\\@angular/forms`\n * \n * * **NgModule**: `ReactiveFormsModule`\n * \n *  \\@stable\n */\nexport class FormControlDirective extends NgControl implements OnChanges {\n  viewModel: any;\n\n   form: FormControl;\n   model: any;\n   update = new EventEmitter();\n/**\n * @param {?} isDisabled\n * @return {?}\n */\nset isDisabled(isDisabled: boolean) { ReactiveErrors.disabledAttrWarning(); }\n/**\n * @param {?} validators\n * @param {?} asyncValidators\n * @param {?} valueAccessors\n */\nconstructor(   validators: Array<Validator|ValidatorFn>,\n                 asyncValidators: Array<AsyncValidator|AsyncValidatorFn>,\n                \n              valueAccessors: ControlValueAccessor[]) {\n                super();\n                this._rawValidators = validators || [];\n                this._rawAsyncValidators = asyncValidators || [];\n                this.valueAccessor = selectValueAccessor(this, valueAccessors);\n              }\n/**\n * @param {?} changes\n * @return {?}\n */\nngOnChanges(changes: SimpleChanges): void {\n                if (this._isControlChanged(changes)) {\n                  setUpControl(this.form, this);\n                  if (this.control.disabled && /** @type {?} */(( this.valueAccessor)).setDisabledState) { /** @type {?} */(( /** @type {?} */((\n                    this.valueAccessor)).setDisabledState))(true);\n                  }\n                  this.form.updateValueAndValidity({emitEvent: false});\n                }\n                if (isPropertyUpdated(changes, this.viewModel)) {\n                  this.form.setValue(this.model);\n                  this.viewModel = this.model;\n                }\n              }\n/**\n * @return {?}\n */\nget path(): string[] { return []; }\n/**\n * @return {?}\n */\nget validator(): ValidatorFn|null { return composeValidators(this._rawValidators); }\n/**\n * @return {?}\n */\nget asyncValidator(): AsyncValidatorFn|null {\n                return composeAsyncValidators(this._rawAsyncValidators);\n              }\n/**\n * @return {?}\n */\nget control(): FormControl { return this.form; }\n/**\n * @param {?} newValue\n * @return {?}\n */\nviewToModelUpdate(newValue: any): void {\n                this.viewModel = newValue;\n                this.update.emit(newValue);\n              }\n/**\n * @param {?} changes\n * @return {?}\n */\nprivate _isControlChanged(changes: {[key: string]: any}): boolean {\n                return changes.hasOwnProperty('form');\n              }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{selector: '[formControl]', providers: [formControlBinding], exportAs: 'ngForm'}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Array, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [NG_VALIDATORS, ] }, ]},\n{type: Array, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [NG_ASYNC_VALIDATORS, ] }, ]},\n{type: Array, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [NG_VALUE_ACCESSOR, ] }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'form': [{ type: Input, args: ['formControl', ] },],\n'model': [{ type: Input, args: ['ngModel', ] },],\n'update': [{ type: Output, args: ['ngModelChange', ] },],\n'isDisabled': [{ type: Input, args: ['disabled', ] },],\n};\n}\n\nfunction FormControlDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nFormControlDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nFormControlDirective.ctorParameters;\n/** @type {?} */\nFormControlDirective.propDecorators;\n/** @type {?} */\nFormControlDirective.prototype.viewModel;\n/** @type {?} */\nFormControlDirective.prototype.form;\n/** @type {?} */\nFormControlDirective.prototype.model;\n/** @type {?} */\nFormControlDirective.prototype.update;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Directive, EventEmitter, Inject, Input, OnChanges, Optional, Output, Self, SimpleChanges, forwardRef} from '@angular/core';\nimport {FormArray, FormControl, FormGroup} from '../../model';\nimport {NG_ASYNC_VALIDATORS, NG_VALIDATORS, Validators} from '../../validators';\nimport {ControlContainer} from '../control_container';\nimport {Form} from '../form_interface';\nimport {ReactiveErrors} from '../reactive_errors';\nimport {cleanUpControl, composeAsyncValidators, composeValidators, setUpControl, setUpFormContainer} from '../shared';\n\nimport {FormControlName} from './form_control_name';\nimport {FormArrayName, FormGroupName} from './form_group_name';\n\nexport const /** @type {?} */ formDirectiveProvider: any = {\n  provide: ControlContainer,\n  useExisting: forwardRef(() => FormGroupDirective)\n};\n/**\n * \\@whatItDoes Binds an existing {\\@link FormGroup} to a DOM element.\n * \n * \\@howToUse \n * \n * This directive accepts an existing {\\@link FormGroup} instance. It will then use this\n * {\\@link FormGroup} instance to match any child {\\@link FormControl}, {\\@link FormGroup},\n * and {\\@link FormArray} instances to child {\\@link FormControlName}, {\\@link FormGroupName},\n * and {\\@link FormArrayName} directives.\n * \n * **Set value**: You can set the form's initial value when instantiating the\n * {\\@link FormGroup}, or you can set it programmatically later using the {\\@link FormGroup}'s\n * {\\@link AbstractControl#setValue setValue} or {\\@link AbstractControl#patchValue patchValue}\n * methods.\n * \n * **Listen to value**: If you want to listen to changes in the value of the form, you can subscribe\n * to the {\\@link FormGroup}'s {\\@link AbstractControl#valueChanges valueChanges} event.  You can also\n * listen to its {\\@link AbstractControl#statusChanges statusChanges} event to be notified when the\n * validation status is re-calculated.\n * \n * Furthermore, you can listen to the directive's `ngSubmit` event to be notified when the user has\n * triggered a form submission. The `ngSubmit` event will be emitted with the original form\n * submission event.\n * \n * ### Example\n * \n * In this example, we create form controls for first name and last name.\n * \n * {\\@example forms/ts/simpleFormGroup/simple_form_group_example.ts region='Component'}\n * \n * **npm package**: `\\@angular/forms`\n * \n * **NgModule**: {\\@link ReactiveFormsModule}\n * \n *  \\@stable\n */\nexport class FormGroupDirective extends ControlContainer implements Form,\n    OnChanges {\nprivate _submitted: boolean = false;\nprivate _oldForm: FormGroup;\n  directives: FormControlName[] = [];\n\n   form: FormGroup = /** @type {?} */(( null));\n   ngSubmit = new EventEmitter();\n/**\n * @param {?} _validators\n * @param {?} _asyncValidators\n */\nconstructor(\nprivate _validators: any[],\nprivate _asyncValidators: any[]) {\n    super();\n  }\n/**\n * @param {?} changes\n * @return {?}\n */\nngOnChanges(changes: SimpleChanges): void {\n    this._checkFormPresent();\n    if (changes.hasOwnProperty('form')) {\n      this._updateValidators();\n      this._updateDomValue();\n      this._updateRegistrations();\n    }\n  }\n/**\n * @return {?}\n */\nget submitted(): boolean { return this._submitted; }\n/**\n * @return {?}\n */\nget formDirective(): Form { return this; }\n/**\n * @return {?}\n */\nget control(): FormGroup { return this.form; }\n/**\n * @return {?}\n */\nget path(): string[] { return []; }\n/**\n * @param {?} dir\n * @return {?}\n */\naddControl(dir: FormControlName): FormControl {\n    const /** @type {?} */ ctrl: any = this.form.get(dir.path);\n    setUpControl(ctrl, dir);\n    ctrl.updateValueAndValidity({emitEvent: false});\n    this.directives.push(dir);\n    return ctrl;\n  }\n/**\n * @param {?} dir\n * @return {?}\n */\ngetControl(dir: FormControlName): FormControl { return /** @type {?} */(( <FormControl>this.form.get(dir.path))); }\n/**\n * @param {?} dir\n * @return {?}\n */\nremoveControl(dir: FormControlName): void { remove(this.directives, dir); }\n/**\n * @param {?} dir\n * @return {?}\n */\naddFormGroup(dir: FormGroupName): void {\n    const /** @type {?} */ ctrl: any = this.form.get(dir.path);\n    setUpFormContainer(ctrl, dir);\n    ctrl.updateValueAndValidity({emitEvent: false});\n  }\n/**\n * @param {?} dir\n * @return {?}\n */\nremoveFormGroup(dir: FormGroupName): void {}\n/**\n * @param {?} dir\n * @return {?}\n */\ngetFormGroup(dir: FormGroupName): FormGroup { return /** @type {?} */(( <FormGroup>this.form.get(dir.path))); }\n/**\n * @param {?} dir\n * @return {?}\n */\naddFormArray(dir: FormArrayName): void {\n    const /** @type {?} */ ctrl: any = this.form.get(dir.path);\n    setUpFormContainer(ctrl, dir);\n    ctrl.updateValueAndValidity({emitEvent: false});\n  }\n/**\n * @param {?} dir\n * @return {?}\n */\nremoveFormArray(dir: FormArrayName): void {}\n/**\n * @param {?} dir\n * @return {?}\n */\ngetFormArray(dir: FormArrayName): FormArray { return /** @type {?} */(( <FormArray>this.form.get(dir.path))); }\n/**\n * @param {?} dir\n * @param {?} value\n * @return {?}\n */\nupdateModel(dir: FormControlName, value: any): void {\n    const /** @type {?} */ ctrl  = /** @type {?} */(( <FormControl>this.form.get(dir.path)));\n    ctrl.setValue(value);\n  }\n/**\n * @param {?} $event\n * @return {?}\n */\nonSubmit($event: Event): boolean {\n    this._submitted = true;\n    this.ngSubmit.emit($event);\n    return false;\n  }\n/**\n * @return {?}\n */\nonReset(): void { this.resetForm(); }\n/**\n * @param {?=} value\n * @return {?}\n */\nresetForm(value: any = undefined): void {\n    this.form.reset(value);\n    this._submitted = false;\n  }\n/**\n * \\@internal\n * @return {?}\n */\n_updateDomValue() {\n    this.directives.forEach(dir => {\n      const /** @type {?} */ newCtrl: any = this.form.get(dir.path);\n      if (dir._control !== newCtrl) {\n        cleanUpControl(dir._control, dir);\n        if (newCtrl) setUpControl(newCtrl, dir);\n        dir._control = newCtrl;\n      }\n    });\n\n    this.form._updateTreeValidity({emitEvent: false});\n  }\n/**\n * @return {?}\n */\nprivate _updateRegistrations() {\n    this.form._registerOnCollectionChange(() => this._updateDomValue());\n    if (this._oldForm) this._oldForm._registerOnCollectionChange(() => {});\n    this._oldForm = this.form;\n  }\n/**\n * @return {?}\n */\nprivate _updateValidators() {\n    const /** @type {?} */ sync = composeValidators(this._validators);\n    this.form.validator = Validators.compose([ /** @type {?} */((this.form.validator)), /** @type {?} */(( sync))]);\n\n    const /** @type {?} */ async = composeAsyncValidators(this._asyncValidators);\n    this.form.asyncValidator = Validators.composeAsync([ /** @type {?} */((this.form.asyncValidator)), /** @type {?} */(( async))]);\n  }\n/**\n * @return {?}\n */\nprivate _checkFormPresent() {\n    if (!this.form) {\n      ReactiveErrors.missingFormException();\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[formGroup]',\n  providers: [formDirectiveProvider],\n  host: {'(submit)': 'onSubmit($event)', '(reset)': 'onReset()'},\n  exportAs: 'ngForm'\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Array, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [NG_VALIDATORS, ] }, ]},\n{type: Array, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [NG_ASYNC_VALIDATORS, ] }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'form': [{ type: Input, args: ['formGroup', ] },],\n'ngSubmit': [{ type: Output },],\n};\n}\n\nfunction FormGroupDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nFormGroupDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nFormGroupDirective.ctorParameters;\n/** @type {?} */\nFormGroupDirective.propDecorators;\n/** @type {?} */\nFormGroupDirective.prototype._submitted;\n/** @type {?} */\nFormGroupDirective.prototype._oldForm;\n/** @type {?} */\nFormGroupDirective.prototype.directives;\n/** @type {?} */\nFormGroupDirective.prototype.form;\n/** @type {?} */\nFormGroupDirective.prototype.ngSubmit;\n/** @type {?} */\nFormGroupDirective.prototype._validators;\n/** @type {?} */\nFormGroupDirective.prototype._asyncValidators;\n}\n\n/**\n * @template T\n * @param {?} list\n * @param {?} el\n * @return {?}\n */\nfunction remove<T>(list: T[], el: T): void {\n  const /** @type {?} */ index = list.indexOf(el);\n  if (index > -1) {\n    list.splice(index, 1);\n  }\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Directive, Host, Inject, Input, OnDestroy, OnInit, Optional, Self, SkipSelf, forwardRef} from '@angular/core';\n\nimport {FormArray} from '../../model';\nimport {NG_ASYNC_VALIDATORS, NG_VALIDATORS} from '../../validators';\nimport {AbstractFormGroupDirective} from '../abstract_form_group_directive';\nimport {ControlContainer} from '../control_container';\nimport {ReactiveErrors} from '../reactive_errors';\nimport {composeAsyncValidators, composeValidators, controlPath} from '../shared';\nimport {AsyncValidatorFn, ValidatorFn} from '../validators';\n\nimport {FormGroupDirective} from './form_group_directive';\n\nexport const /** @type {?} */ formGroupNameProvider: any = {\n  provide: ControlContainer,\n  useExisting: forwardRef(() => FormGroupName)\n};\n/**\n * \\@whatItDoes Syncs a nested {\\@link FormGroup} to a DOM element.\n * \n * \\@howToUse \n * \n * This directive can only be used with a parent {\\@link FormGroupDirective} (selector:\n * `[formGroup]`).\n * \n * It accepts the string name of the nested {\\@link FormGroup} you want to link, and\n * will look for a {\\@link FormGroup} registered with that name in the parent\n * {\\@link FormGroup} instance you passed into {\\@link FormGroupDirective}.\n * \n * Nested form groups can come in handy when you want to validate a sub-group of a\n * form separately from the rest or when you'd like to group the values of certain\n * controls into their own nested object.\n * \n * **Access the group**: You can access the associated {\\@link FormGroup} using the\n * {\\@link AbstractControl#get} method. Ex: `this.form.get('name')`.\n * \n * You can also access individual controls within the group using dot syntax.\n * Ex: `this.form.get('name.first')`\n * \n * **Get the value**: the `value` property is always synced and available on the\n * {\\@link FormGroup}. See a full list of available properties in {\\@link AbstractControl}.\n * \n * **Set the value**: You can set an initial value for each child control when instantiating\n * the {\\@link FormGroup}, or you can set it programmatically later using\n * {\\@link AbstractControl#setValue setValue} or {\\@link AbstractControl#patchValue patchValue}.\n * \n * **Listen to value**: If you want to listen to changes in the value of the group, you can\n * subscribe to the {\\@link AbstractControl#valueChanges valueChanges} event.  You can also listen to\n * {\\@link AbstractControl#statusChanges statusChanges} to be notified when the validation status is\n * re-calculated.\n * \n * ### Example\n * \n * {\\@example forms/ts/nestedFormGroup/nested_form_group_example.ts region='Component'}\n * \n * * **npm package**: `\\@angular/forms`\n * \n * * **NgModule**: `ReactiveFormsModule`\n * \n * \\@stable\n */\nexport class FormGroupName extends AbstractFormGroupDirective implements OnInit, OnDestroy {\n   name: string;\n/**\n * @param {?} parent\n * @param {?} validators\n * @param {?} asyncValidators\n */\nconstructor(\n         parent: ControlContainer,\n         validators: any[],\n         asyncValidators: any[]) {\n    super();\n    this._parent = parent;\n    this._validators = validators;\n    this._asyncValidators = asyncValidators;\n  }\n/**\n * \\@internal\n * @return {?}\n */\n_checkParentType(): void {\n    if (_hasInvalidParent(this._parent)) {\n      ReactiveErrors.groupParentException();\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{selector: '[formGroupName]', providers: [formGroupNameProvider]}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ControlContainer, decorators: [{ type: Optional }, { type: Host }, { type: SkipSelf }, ]},\n{type: Array, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [NG_VALIDATORS, ] }, ]},\n{type: Array, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [NG_ASYNC_VALIDATORS, ] }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'name': [{ type: Input, args: ['formGroupName', ] },],\n};\n}\n\nfunction FormGroupName_tsickle_Closure_declarations() {\n/** @type {?} */\nFormGroupName.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nFormGroupName.ctorParameters;\n/** @type {?} */\nFormGroupName.propDecorators;\n/** @type {?} */\nFormGroupName.prototype.name;\n}\n\n\nexport const /** @type {?} */ formArrayNameProvider: any = {\n  provide: ControlContainer,\n  useExisting: forwardRef(() => FormArrayName)\n};\n/**\n * \\@whatItDoes Syncs a nested {\\@link FormArray} to a DOM element.\n * \n * \\@howToUse \n * \n * This directive is designed to be used with a parent {\\@link FormGroupDirective} (selector:\n * `[formGroup]`).\n * \n * It accepts the string name of the nested {\\@link FormArray} you want to link, and\n * will look for a {\\@link FormArray} registered with that name in the parent\n * {\\@link FormGroup} instance you passed into {\\@link FormGroupDirective}.\n * \n * Nested form arrays can come in handy when you have a group of form controls but\n * you're not sure how many there will be. Form arrays allow you to create new\n * form controls dynamically.\n * \n * **Access the array**: You can access the associated {\\@link FormArray} using the\n * {\\@link AbstractControl#get} method on the parent {\\@link FormGroup}.\n * Ex: `this.form.get('cities')`.\n * \n * **Get the value**: the `value` property is always synced and available on the\n * {\\@link FormArray}. See a full list of available properties in {\\@link AbstractControl}.\n * \n * **Set the value**: You can set an initial value for each child control when instantiating\n * the {\\@link FormArray}, or you can set the value programmatically later using the\n * {\\@link FormArray}'s {\\@link AbstractControl#setValue} or {\\@link AbstractControl#patchValue}\n * methods.\n * \n * **Listen to value**: If you want to listen to changes in the value of the array, you can\n * subscribe to the {\\@link FormArray}'s {\\@link AbstractControl#valueChanges} event.  You can also\n * listen to its {\\@link AbstractControl#statusChanges} event to be notified when the validation\n * status is re-calculated.\n * \n * **Add new controls**: You can add new controls to the {\\@link FormArray} dynamically by\n * calling its {\\@link FormArray#push} method.\n *  Ex: `this.form.get('cities').push(new FormControl());`\n * \n * ### Example\n * \n * {\\@example forms/ts/nestedFormArray/nested_form_array_example.ts region='Component'}\n * \n * * **npm package**: `\\@angular/forms`\n * \n * * **NgModule**: `ReactiveFormsModule`\n * \n * \\@stable\n */\nexport class FormArrayName extends ControlContainer implements OnInit, OnDestroy {\n/**\n * \\@internal\n */\n_parent: ControlContainer;\n/**\n * \\@internal\n */\n_validators: any[];\n/**\n * \\@internal\n */\n_asyncValidators: any[];\n\n   name: string;\n/**\n * @param {?} parent\n * @param {?} validators\n * @param {?} asyncValidators\n */\nconstructor(\n         parent: ControlContainer,\n         validators: any[],\n         asyncValidators: any[]) {\n    super();\n    this._parent = parent;\n    this._validators = validators;\n    this._asyncValidators = asyncValidators;\n  }\n/**\n * @return {?}\n */\nngOnInit(): void {\n    this._checkParentType(); /** @type {?} */((\n    this.formDirective)).addFormArray(this);\n  }\n/**\n * @return {?}\n */\nngOnDestroy(): void {\n    if (this.formDirective) {\n      this.formDirective.removeFormArray(this);\n    }\n  }\n/**\n * @return {?}\n */\nget control(): FormArray { return /** @type {?} */(( this.formDirective)).getFormArray(this); }\n/**\n * @return {?}\n */\nget formDirective(): FormGroupDirective|null {\n    return this._parent ? /** @type {?} */(( <FormGroupDirective>this._parent.formDirective)) : null;\n  }\n/**\n * @return {?}\n */\nget path(): string[] { return controlPath(this.name, this._parent); }\n/**\n * @return {?}\n */\nget validator(): ValidatorFn|null { return composeValidators(this._validators); }\n/**\n * @return {?}\n */\nget asyncValidator(): AsyncValidatorFn|null {\n    return composeAsyncValidators(this._asyncValidators);\n  }\n/**\n * @return {?}\n */\nprivate _checkParentType(): void {\n    if (_hasInvalidParent(this._parent)) {\n      ReactiveErrors.arrayParentException();\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{selector: '[formArrayName]', providers: [formArrayNameProvider]}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ControlContainer, decorators: [{ type: Optional }, { type: Host }, { type: SkipSelf }, ]},\n{type: Array, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [NG_VALIDATORS, ] }, ]},\n{type: Array, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [NG_ASYNC_VALIDATORS, ] }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'name': [{ type: Input, args: ['formArrayName', ] },],\n};\n}\n\nfunction FormArrayName_tsickle_Closure_declarations() {\n/** @type {?} */\nFormArrayName.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nFormArrayName.ctorParameters;\n/** @type {?} */\nFormArrayName.propDecorators;\n/**\n * \\@internal\n * @type {?}\n */\nFormArrayName.prototype._parent;\n/**\n * \\@internal\n * @type {?}\n */\nFormArrayName.prototype._validators;\n/**\n * \\@internal\n * @type {?}\n */\nFormArrayName.prototype._asyncValidators;\n/** @type {?} */\nFormArrayName.prototype.name;\n}\n\n/**\n * @param {?} parent\n * @return {?}\n */\nfunction _hasInvalidParent(parent: ControlContainer): boolean {\n  return !(parent instanceof FormGroupName) && !(parent instanceof FormGroupDirective) &&\n      !(parent instanceof FormArrayName);\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Directive, EventEmitter, Host, Inject, Input, OnChanges, OnDestroy, Optional, Output, Self, SimpleChanges, SkipSelf, forwardRef} from '@angular/core';\n\nimport {FormControl} from '../../model';\nimport {NG_ASYNC_VALIDATORS, NG_VALIDATORS} from '../../validators';\nimport {AbstractFormGroupDirective} from '../abstract_form_group_directive';\nimport {ControlContainer} from '../control_container';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '../control_value_accessor';\nimport {NgControl} from '../ng_control';\nimport {ReactiveErrors} from '../reactive_errors';\nimport {composeAsyncValidators, composeValidators, controlPath, isPropertyUpdated, selectValueAccessor} from '../shared';\nimport {AsyncValidator, AsyncValidatorFn, Validator, ValidatorFn} from '../validators';\n\nimport {FormGroupDirective} from './form_group_directive';\nimport {FormArrayName, FormGroupName} from './form_group_name';\n\nexport const /** @type {?} */ controlNameBinding: any = {\n  provide: NgControl,\n  useExisting: forwardRef(() => FormControlName)\n};\n/**\n * \\@whatItDoes Syncs a {\\@link FormControl} in an existing {\\@link FormGroup} to a form control\n * element by name.\n * \n * In other words, this directive ensures that any values written to the {\\@link FormControl}\n * instance programmatically will be written to the DOM element (model -> view). Conversely,\n * any values written to the DOM element through user input will be reflected in the\n * {\\@link FormControl} instance (view -> model).\n * \n * \\@howToUse \n * \n * This directive is designed to be used with a parent {\\@link FormGroupDirective} (selector:\n * `[formGroup]`).\n * \n * It accepts the string name of the {\\@link FormControl} instance you want to\n * link, and will look for a {\\@link FormControl} registered with that name in the\n * closest {\\@link FormGroup} or {\\@link FormArray} above it.\n * \n * **Access the control**: You can access the {\\@link FormControl} associated with\n * this directive by using the {\\@link AbstractControl#get get} method.\n * Ex: `this.form.get('first');`\n * \n * **Get value**: the `value` property is always synced and available on the {\\@link FormControl}.\n * See a full list of available properties in {\\@link AbstractControl}.\n * \n *  **Set value**: You can set an initial value for the control when instantiating the\n *  {\\@link FormControl}, or you can set it programmatically later using\n *  {\\@link AbstractControl#setValue setValue} or {\\@link AbstractControl#patchValue patchValue}.\n * \n * **Listen to value**: If you want to listen to changes in the value of the control, you can\n * subscribe to the {\\@link AbstractControl#valueChanges valueChanges} event.  You can also listen to\n * {\\@link AbstractControl#statusChanges statusChanges} to be notified when the validation status is\n * re-calculated.\n * \n * ### Example\n * \n * In this example, we create form controls for first name and last name.\n * \n * {\\@example forms/ts/simpleFormGroup/simple_form_group_example.ts region='Component'}\n * \n * To see `formControlName` examples with different form control types, see:\n * \n * * Radio buttons: {\\@link RadioControlValueAccessor}\n * * Selects: {\\@link SelectControlValueAccessor}\n * \n * **npm package**: `\\@angular/forms`\n * \n * **NgModule**: {\\@link ReactiveFormsModule}\n * \n *  \\@stable\n */\nexport class FormControlName extends NgControl implements OnChanges, OnDestroy {\nprivate _added = false;\n/**\n * \\@internal\n */\nviewModel: any;\n/**\n * \\@internal\n */\n_control: FormControl;\n\n   name: string;\n\n  // TODO(kara):  Replace ngModel with reactive API\n   model: any;\n   update = new EventEmitter();\n/**\n * @param {?} isDisabled\n * @return {?}\n */\nset isDisabled(isDisabled: boolean) { ReactiveErrors.disabledAttrWarning(); }\n/**\n * @param {?} parent\n * @param {?} validators\n * @param {?} asyncValidators\n * @param {?} valueAccessors\n */\nconstructor(\n         parent: ControlContainer,\n         validators: Array<Validator|ValidatorFn>,\n         asyncValidators:\n          Array<AsyncValidator|AsyncValidatorFn>,\n         valueAccessors: ControlValueAccessor[]) {\n    super();\n    this._parent = parent;\n    this._rawValidators = validators || [];\n    this._rawAsyncValidators = asyncValidators || [];\n    this.valueAccessor = selectValueAccessor(this, valueAccessors);\n  }\n/**\n * @param {?} changes\n * @return {?}\n */\nngOnChanges(changes: SimpleChanges) {\n    if (!this._added) this._setUpControl();\n    if (isPropertyUpdated(changes, this.viewModel)) {\n      this.viewModel = this.model;\n      this.formDirective.updateModel(this, this.model);\n    }\n  }\n/**\n * @return {?}\n */\nngOnDestroy(): void {\n    if (this.formDirective) {\n      this.formDirective.removeControl(this);\n    }\n  }\n/**\n * @param {?} newValue\n * @return {?}\n */\nviewToModelUpdate(newValue: any): void {\n    this.viewModel = newValue;\n    this.update.emit(newValue);\n  }\n/**\n * @return {?}\n */\nget path(): string[] { return controlPath(this.name, /** @type {?} */(( this._parent))); }\n/**\n * @return {?}\n */\nget formDirective(): any { return this._parent ? this._parent.formDirective : null; }\n/**\n * @return {?}\n */\nget validator(): ValidatorFn|null { return composeValidators(this._rawValidators); }\n/**\n * @return {?}\n */\nget asyncValidator(): AsyncValidatorFn {\n    return /** @type {?} */(( composeAsyncValidators(this._rawAsyncValidators)));\n  }\n/**\n * @return {?}\n */\nget control(): FormControl { return this._control; }\n/**\n * @return {?}\n */\nprivate _checkParentType(): void {\n    if (!(this._parent instanceof FormGroupName) &&\n        this._parent instanceof AbstractFormGroupDirective) {\n      ReactiveErrors.ngModelGroupException();\n    } else if (\n        !(this._parent instanceof FormGroupName) && !(this._parent instanceof FormGroupDirective) &&\n        !(this._parent instanceof FormArrayName)) {\n      ReactiveErrors.controlParentException();\n    }\n  }\n/**\n * @return {?}\n */\nprivate _setUpControl() {\n    this._checkParentType();\n    this._control = this.formDirective.addControl(this);\n    if (this.control.disabled && /** @type {?} */(( this.valueAccessor)).setDisabledState) { /** @type {?} */(( /** @type {?} */((\n      this.valueAccessor)).setDisabledState))(true);\n    }\n    this._added = true;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{selector: '[formControlName]', providers: [controlNameBinding]}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ControlContainer, decorators: [{ type: Optional }, { type: Host }, { type: SkipSelf }, ]},\n{type: Array, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [NG_VALIDATORS, ] }, ]},\n{type: Array, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [NG_ASYNC_VALIDATORS, ] }, ]},\n{type: Array, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [NG_VALUE_ACCESSOR, ] }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'name': [{ type: Input, args: ['formControlName', ] },],\n'model': [{ type: Input, args: ['ngModel', ] },],\n'update': [{ type: Output, args: ['ngModelChange', ] },],\n'isDisabled': [{ type: Input, args: ['disabled', ] },],\n};\n}\n\nfunction FormControlName_tsickle_Closure_declarations() {\n/** @type {?} */\nFormControlName.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nFormControlName.ctorParameters;\n/** @type {?} */\nFormControlName.propDecorators;\n/** @type {?} */\nFormControlName.prototype._added;\n/**\n * \\@internal\n * @type {?}\n */\nFormControlName.prototype.viewModel;\n/**\n * \\@internal\n * @type {?}\n */\nFormControlName.prototype._control;\n/** @type {?} */\nFormControlName.prototype.name;\n/** @type {?} */\nFormControlName.prototype.model;\n/** @type {?} */\nFormControlName.prototype.update;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Directive, Input, OnChanges, Provider, SimpleChanges, forwardRef} from '@angular/core';\nimport {Observable} from 'rxjs/Observable';\nimport {AbstractControl} from '../model';\nimport {NG_VALIDATORS, Validators} from '../validators';\n\n/** @experimental */\nexport type ValidationErrors = {\n  [key: string]: any\n};\n\n/**\n * An interface that can be implemented by classes that can act as validators.\n *\n * ## Usage\n *\n * ```typescript\n * @Directive({\n *   selector: '[custom-validator]',\n *   providers: [{provide: NG_VALIDATORS, useExisting: CustomValidatorDirective, multi: true}]\n * })\n * class CustomValidatorDirective implements Validator {\n *   validate(c: Control): {[key: string]: any} {\n *     return {\"custom\": true};\n *   }\n * }\n * ```\n *\n * @stable\n */\nexport interface Validator {\n  validate(c: AbstractControl): ValidationErrors|null;\n  registerOnValidatorChange?(fn: () => void): void;\n}\n\n/** @experimental */\nexport interface AsyncValidator extends Validator {\n  validate(c: AbstractControl): Promise<ValidationErrors|null>|Observable<ValidationErrors|null>;\n}\n\nexport const /** @type {?} */ REQUIRED_VALIDATOR: Provider = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => RequiredValidator),\n  multi: true\n};\n\nexport const /** @type {?} */ CHECKBOX_REQUIRED_VALIDATOR: Provider = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => CheckboxRequiredValidator),\n  multi: true\n};\n/**\n * A Directive that adds the `required` validator to any controls marked with the\n * `required` attribute, via the {\\@link NG_VALIDATORS} binding.\n * \n * ### Example\n * \n * ```\n * <input name=\"fullName\" ngModel required>\n * ```\n * \n * \\@stable\n */\nexport class RequiredValidator implements Validator {\nprivate _required: boolean;\nprivate _onChange: () => void;\n/**\n * @return {?}\n */\nget required(): boolean|string { return this._required; }\n/**\n * @param {?} value\n * @return {?}\n */\nset required(value: boolean|string) {\n    this._required = value != null && value !== false && `${value}` !== 'false';\n    if (this._onChange) this._onChange();\n  }\n/**\n * @param {?} c\n * @return {?}\n */\nvalidate(c: AbstractControl): ValidationErrors|null {\n    return this.required ? Validators.required(c) : null;\n  }\n/**\n * @param {?} fn\n * @return {?}\n */\nregisterOnValidatorChange(fn: () => void): void { this._onChange = fn; }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector:\n      ':not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]',\n  providers: [REQUIRED_VALIDATOR],\n  host: {'[attr.required]': 'required ? \"\" : null'}\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'required': [{ type: Input },],\n};\n}\n\nfunction RequiredValidator_tsickle_Closure_declarations() {\n/** @type {?} */\nRequiredValidator.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nRequiredValidator.ctorParameters;\n/** @type {?} */\nRequiredValidator.propDecorators;\n/** @type {?} */\nRequiredValidator.prototype._required;\n/** @type {?} */\nRequiredValidator.prototype._onChange;\n}\n\n/**\n * A Directive that adds the `required` validator to checkbox controls marked with the\n * `required` attribute, via the {\\@link NG_VALIDATORS} binding.\n * \n * ### Example\n * \n * ```\n * <input type=\"checkbox\" name=\"active\" ngModel required>\n * ```\n * \n * \\@experimental\n */\nexport class CheckboxRequiredValidator extends RequiredValidator {\n/**\n * @param {?} c\n * @return {?}\n */\nvalidate(c: AbstractControl): ValidationErrors|null {\n    return this.required ? Validators.requiredTrue(c) : null;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector:\n      'input[type=checkbox][required][formControlName],input[type=checkbox][required][formControl],input[type=checkbox][required][ngModel]',\n  providers: [CHECKBOX_REQUIRED_VALIDATOR],\n  host: {'[attr.required]': 'required ? \"\" : null'}\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction CheckboxRequiredValidator_tsickle_Closure_declarations() {\n/** @type {?} */\nCheckboxRequiredValidator.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nCheckboxRequiredValidator.ctorParameters;\n}\n\n/**\n * Provider which adds {\\@link EmailValidator} to {\\@link NG_VALIDATORS}.\n */\nexport const EMAIL_VALIDATOR: any = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => EmailValidator),\n  multi: true\n};\n/**\n * A Directive that adds the `email` validator to controls marked with the\n * `email` attribute, via the {\\@link NG_VALIDATORS} binding.\n * \n * ### Example\n * \n * ```\n * <input type=\"email\" name=\"email\" ngModel email>\n * <input type=\"email\" name=\"email\" ngModel email=\"true\">\n * <input type=\"email\" name=\"email\" ngModel [email]=\"true\">\n * ```\n * \n * \\@experimental\n */\nexport class EmailValidator implements Validator {\nprivate _enabled: boolean;\nprivate _onChange: () => void;\n/**\n * @param {?} value\n * @return {?}\n */\nset email(value: boolean|string) {\n    this._enabled = value === '' || value === true || value === 'true';\n    if (this._onChange) this._onChange();\n  }\n/**\n * @param {?} c\n * @return {?}\n */\nvalidate(c: AbstractControl): ValidationErrors|null {\n    return this._enabled ? Validators.email(c) : null;\n  }\n/**\n * @param {?} fn\n * @return {?}\n */\nregisterOnValidatorChange(fn: () => void): void { this._onChange = fn; }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[email][formControlName],[email][formControl],[email][ngModel]',\n  providers: [EMAIL_VALIDATOR]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'email': [{ type: Input },],\n};\n}\n\nfunction EmailValidator_tsickle_Closure_declarations() {\n/** @type {?} */\nEmailValidator.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nEmailValidator.ctorParameters;\n/** @type {?} */\nEmailValidator.propDecorators;\n/** @type {?} */\nEmailValidator.prototype._enabled;\n/** @type {?} */\nEmailValidator.prototype._onChange;\n}\n\n\n/**\n * @stable\n */\nexport interface ValidatorFn { (c: AbstractControl): ValidationErrors|null; }\n\n/**\n * @stable\n */\nexport interface AsyncValidatorFn {\n  (c: AbstractControl): Promise<ValidationErrors|null>|Observable<ValidationErrors|null>;\n}\n/**\n * Provider which adds {\\@link MinLengthValidator} to {\\@link NG_VALIDATORS}.\n * \n * ## Example:\n * \n * {\\@example common/forms/ts/validators/validators.ts region='min'}\n */\nexport const MIN_LENGTH_VALIDATOR: any = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => MinLengthValidator),\n  multi: true\n};\n/**\n * A directive which installs the {\\@link MinLengthValidator} for any `formControlName`,\n * `formControl`, or control with `ngModel` that also has a `minlength` attribute.\n * \n * \\@stable\n */\nexport class MinLengthValidator implements Validator,\n    OnChanges {\nprivate _validator: ValidatorFn;\nprivate _onChange: () => void;\n\n   minlength: string;\n/**\n * @param {?} changes\n * @return {?}\n */\nngOnChanges(changes: SimpleChanges): void {\n    if ('minlength' in changes) {\n      this._createValidator();\n      if (this._onChange) this._onChange();\n    }\n  }\n/**\n * @param {?} c\n * @return {?}\n */\nvalidate(c: AbstractControl): ValidationErrors|null {\n    return this.minlength == null ? null : this._validator(c);\n  }\n/**\n * @param {?} fn\n * @return {?}\n */\nregisterOnValidatorChange(fn: () => void): void { this._onChange = fn; }\n/**\n * @return {?}\n */\nprivate _createValidator(): void {\n    this._validator = Validators.minLength(parseInt(this.minlength, 10));\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[minlength][formControlName],[minlength][formControl],[minlength][ngModel]',\n  providers: [MIN_LENGTH_VALIDATOR],\n  host: {'[attr.minlength]': 'minlength ? minlength : null'}\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'minlength': [{ type: Input },],\n};\n}\n\nfunction MinLengthValidator_tsickle_Closure_declarations() {\n/** @type {?} */\nMinLengthValidator.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMinLengthValidator.ctorParameters;\n/** @type {?} */\nMinLengthValidator.propDecorators;\n/** @type {?} */\nMinLengthValidator.prototype._validator;\n/** @type {?} */\nMinLengthValidator.prototype._onChange;\n/** @type {?} */\nMinLengthValidator.prototype.minlength;\n}\n\n/**\n * Provider which adds {\\@link MaxLengthValidator} to {\\@link NG_VALIDATORS}.\n * \n * ## Example:\n * \n * {\\@example common/forms/ts/validators/validators.ts region='max'}\n */\nexport const MAX_LENGTH_VALIDATOR: any = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => MaxLengthValidator),\n  multi: true\n};\n/**\n * A directive which installs the {\\@link MaxLengthValidator} for any `formControlName,\n * `formControl`,\n * or control with `ngModel` that also has a `maxlength` attribute.\n * \n * \\@stable\n */\nexport class MaxLengthValidator implements Validator,\n    OnChanges {\nprivate _validator: ValidatorFn;\nprivate _onChange: () => void;\n\n   maxlength: string;\n/**\n * @param {?} changes\n * @return {?}\n */\nngOnChanges(changes: SimpleChanges): void {\n    if ('maxlength' in changes) {\n      this._createValidator();\n      if (this._onChange) this._onChange();\n    }\n  }\n/**\n * @param {?} c\n * @return {?}\n */\nvalidate(c: AbstractControl): ValidationErrors|null {\n    return this.maxlength != null ? this._validator(c) : null;\n  }\n/**\n * @param {?} fn\n * @return {?}\n */\nregisterOnValidatorChange(fn: () => void): void { this._onChange = fn; }\n/**\n * @return {?}\n */\nprivate _createValidator(): void {\n    this._validator = Validators.maxLength(parseInt(this.maxlength, 10));\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[maxlength][formControlName],[maxlength][formControl],[maxlength][ngModel]',\n  providers: [MAX_LENGTH_VALIDATOR],\n  host: {'[attr.maxlength]': 'maxlength ? maxlength : null'}\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'maxlength': [{ type: Input },],\n};\n}\n\nfunction MaxLengthValidator_tsickle_Closure_declarations() {\n/** @type {?} */\nMaxLengthValidator.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMaxLengthValidator.ctorParameters;\n/** @type {?} */\nMaxLengthValidator.propDecorators;\n/** @type {?} */\nMaxLengthValidator.prototype._validator;\n/** @type {?} */\nMaxLengthValidator.prototype._onChange;\n/** @type {?} */\nMaxLengthValidator.prototype.maxlength;\n}\n\n\n\nexport const /** @type {?} */ PATTERN_VALIDATOR: any = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => PatternValidator),\n  multi: true\n};\n/**\n * A Directive that adds the `pattern` validator to any controls marked with the\n * `pattern` attribute, via the {\\@link NG_VALIDATORS} binding. Uses attribute value\n * as the regex to validate Control value against.  Follows pattern attribute\n * semantics; i.e. regex must match entire Control value.\n * \n * ### Example\n * \n * ```\n * <input [name]=\"fullName\" pattern=\"[a-zA-Z ]*\" ngModel>\n * ```\n * \\@stable\n */\nexport class PatternValidator implements Validator,\n    OnChanges {\nprivate _validator: ValidatorFn;\nprivate _onChange: () => void;\n\n   pattern: string|RegExp;\n/**\n * @param {?} changes\n * @return {?}\n */\nngOnChanges(changes: SimpleChanges): void {\n    if ('pattern' in changes) {\n      this._createValidator();\n      if (this._onChange) this._onChange();\n    }\n  }\n/**\n * @param {?} c\n * @return {?}\n */\nvalidate(c: AbstractControl): ValidationErrors|null { return this._validator(c); }\n/**\n * @param {?} fn\n * @return {?}\n */\nregisterOnValidatorChange(fn: () => void): void { this._onChange = fn; }\n/**\n * @return {?}\n */\nprivate _createValidator(): void { this._validator = Validators.pattern(this.pattern); }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[pattern][formControlName],[pattern][formControl],[pattern][ngModel]',\n  providers: [PATTERN_VALIDATOR],\n  host: {'[attr.pattern]': 'pattern ? pattern : null'}\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'pattern': [{ type: Input },],\n};\n}\n\nfunction PatternValidator_tsickle_Closure_declarations() {\n/** @type {?} */\nPatternValidator.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nPatternValidator.ctorParameters;\n/** @type {?} */\nPatternValidator.propDecorators;\n/** @type {?} */\nPatternValidator.prototype._validator;\n/** @type {?} */\nPatternValidator.prototype._onChange;\n/** @type {?} */\nPatternValidator.prototype.pattern;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Injectable} from '@angular/core';\n\nimport {AsyncValidatorFn, ValidatorFn} from './directives/validators';\nimport {AbstractControl, FormArray, FormControl, FormGroup} from './model';\n/**\n * \\@whatItDoes Creates an {\\@link AbstractControl} from a user-specified configuration.\n * \n * It is essentially syntactic sugar that shortens the `new FormGroup()`,\n * `new FormControl()`, and `new FormArray()` boilerplate that can build up in larger\n * forms.\n * \n * \\@howToUse \n * \n * To use, inject `FormBuilder` into your component class. You can then call its methods\n * directly.\n * \n * {\\@example forms/ts/formBuilder/form_builder_example.ts region='Component'}\n * \n *  * **npm package**: `\\@angular/forms`\n * \n *  * **NgModule**: {\\@link ReactiveFormsModule}\n * \n * \\@stable\n */\nexport class FormBuilder {\n/**\n * Construct a new {\\@link FormGroup} with the given map of configuration.\n * Valid keys for the `extra` parameter map are `validator` and `asyncValidator`.\n * \n * See the {\\@link FormGroup} constructor for more details.\n * @param {?} controlsConfig\n * @param {?=} extra\n * @return {?}\n */\ngroup(controlsConfig: {[key: string]: any}, extra: {[key: string]: any}|null = null): FormGroup {\n    const /** @type {?} */ controls = this._reduceControls(controlsConfig);\n    const /** @type {?} */ validator: ValidatorFn = extra != null ? extra['validator'] : null;\n    const /** @type {?} */ asyncValidator: AsyncValidatorFn = extra != null ? extra['asyncValidator'] : null;\n    return new FormGroup(controls, validator, asyncValidator);\n  }\n/**\n * Construct a new {\\@link FormControl} with the given `formState`,`validator`, and\n * `asyncValidator`.\n * \n * `formState` can either be a standalone value for the form control or an object\n * that contains both a value and a disabled status.\n * \n * @param {?} formState\n * @param {?=} validator\n * @param {?=} asyncValidator\n * @return {?}\n */\ncontrol(\n      formState: Object, validator?: ValidatorFn|ValidatorFn[]|null,\n      asyncValidator?: AsyncValidatorFn|AsyncValidatorFn[]|null): FormControl {\n    return new FormControl(formState, validator, asyncValidator);\n  }\n/**\n * Construct a {\\@link FormArray} from the given `controlsConfig` array of\n * configuration, with the given optional `validator` and `asyncValidator`.\n * @param {?} controlsConfig\n * @param {?=} validator\n * @param {?=} asyncValidator\n * @return {?}\n */\narray(\n      controlsConfig: any[], validator?: ValidatorFn|null,\n      asyncValidator?: AsyncValidatorFn|null): FormArray {\n    const /** @type {?} */ controls = controlsConfig.map(c => this._createControl(c));\n    return new FormArray(controls, validator, asyncValidator);\n  }\n/**\n * \\@internal\n * @param {?} controlsConfig\n * @return {?}\n */\n_reduceControls(controlsConfig: {[k: string]: any}): {[key: string]: AbstractControl} {\n    const /** @type {?} */ controls: {[key: string]: AbstractControl} = {};\n    Object.keys(controlsConfig).forEach(controlName => {\n      controls[controlName] = this._createControl(controlsConfig[controlName]);\n    });\n    return controls;\n  }\n/**\n * \\@internal\n * @param {?} controlConfig\n * @return {?}\n */\n_createControl(controlConfig: any): AbstractControl {\n    if (controlConfig instanceof FormControl || controlConfig instanceof FormGroup ||\n        controlConfig instanceof FormArray) {\n      return controlConfig;\n\n    } else if (Array.isArray(controlConfig)) {\n      const /** @type {?} */ value = controlConfig[0];\n      const /** @type {?} */ validator: ValidatorFn = controlConfig.length > 1 ? controlConfig[1] : null;\n      const /** @type {?} */ asyncValidator: AsyncValidatorFn = controlConfig.length > 2 ? controlConfig[2] : null;\n      return this.control(value, validator, asyncValidator);\n\n    } else {\n      return this.control(controlConfig);\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction FormBuilder_tsickle_Closure_declarations() {\n/** @type {?} */\nFormBuilder.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nFormBuilder.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Directive} from '@angular/core';\n/**\n * \\@whatItDoes Adds `novalidate` attribute to all forms by default.\n * \n * `novalidate` is used to disable browser's native form validation.\n * \n * If you want to use native validation with Angular forms, just add `ngNativeValidate` attribute:\n * \n * ```\n * <form ngNativeValidate></form>\n * ```\n * \n * \\@experimental\n */\nexport class NgNoValidate {\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'form:not([ngNoForm]):not([ngNativeValidate])',\n  host: {'novalidate': ''},\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction NgNoValidate_tsickle_Closure_declarations() {\n/** @type {?} */\nNgNoValidate.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nNgNoValidate.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {NgModule, Type} from '@angular/core';\n\nimport {CheckboxControlValueAccessor} from './directives/checkbox_value_accessor';\nimport {DefaultValueAccessor} from './directives/default_value_accessor';\nimport {NgControlStatus, NgControlStatusGroup} from './directives/ng_control_status';\nimport {NgForm} from './directives/ng_form';\nimport {NgModel} from './directives/ng_model';\nimport {NgModelGroup} from './directives/ng_model_group';\nimport {NgNoValidate} from './directives/ng_no_validate_directive';\nimport {NumberValueAccessor} from './directives/number_value_accessor';\nimport {RadioControlValueAccessor} from './directives/radio_control_value_accessor';\nimport {RangeValueAccessor} from './directives/range_value_accessor';\nimport {FormControlDirective} from './directives/reactive_directives/form_control_directive';\nimport {FormControlName} from './directives/reactive_directives/form_control_name';\nimport {FormGroupDirective} from './directives/reactive_directives/form_group_directive';\nimport {FormArrayName, FormGroupName} from './directives/reactive_directives/form_group_name';\nimport {NgSelectOption, SelectControlValueAccessor} from './directives/select_control_value_accessor';\nimport {NgSelectMultipleOption, SelectMultipleControlValueAccessor} from './directives/select_multiple_control_value_accessor';\nimport {CheckboxRequiredValidator, EmailValidator, MaxLengthValidator, MinLengthValidator, PatternValidator, RequiredValidator} from './directives/validators';\n\nexport {CheckboxControlValueAccessor} from './directives/checkbox_value_accessor';\nexport {ControlValueAccessor} from './directives/control_value_accessor';\nexport {DefaultValueAccessor} from './directives/default_value_accessor';\nexport {NgControl} from './directives/ng_control';\nexport {NgControlStatus, NgControlStatusGroup} from './directives/ng_control_status';\nexport {NgForm} from './directives/ng_form';\nexport {NgModel} from './directives/ng_model';\nexport {NgModelGroup} from './directives/ng_model_group';\nexport {NumberValueAccessor} from './directives/number_value_accessor';\nexport {RadioControlValueAccessor} from './directives/radio_control_value_accessor';\nexport {RangeValueAccessor} from './directives/range_value_accessor';\nexport {FormControlDirective} from './directives/reactive_directives/form_control_directive';\nexport {FormControlName} from './directives/reactive_directives/form_control_name';\nexport {FormGroupDirective} from './directives/reactive_directives/form_group_directive';\nexport {FormArrayName, FormGroupName} from './directives/reactive_directives/form_group_name';\nexport {NgSelectOption, SelectControlValueAccessor} from './directives/select_control_value_accessor';\nexport {NgSelectMultipleOption, SelectMultipleControlValueAccessor} from './directives/select_multiple_control_value_accessor';\n\nexport const /** @type {?} */ SHARED_FORM_DIRECTIVES: Type<any>[] = [\n  NgNoValidate,\n  NgSelectOption,\n  NgSelectMultipleOption,\n  DefaultValueAccessor,\n  NumberValueAccessor,\n  RangeValueAccessor,\n  CheckboxControlValueAccessor,\n  SelectControlValueAccessor,\n  SelectMultipleControlValueAccessor,\n  RadioControlValueAccessor,\n  NgControlStatus,\n  NgControlStatusGroup,\n  RequiredValidator,\n  MinLengthValidator,\n  MaxLengthValidator,\n  PatternValidator,\n  CheckboxRequiredValidator,\n  EmailValidator,\n];\n\nexport const /** @type {?} */ TEMPLATE_DRIVEN_DIRECTIVES: Type<any>[] = [NgModel, NgModelGroup, NgForm];\n\nexport const /** @type {?} */ REACTIVE_DRIVEN_DIRECTIVES: Type<any>[] =\n    [FormControlDirective, FormGroupDirective, FormControlName, FormGroupName, FormArrayName];\n/**\n * Internal module used for sharing directives between FormsModule and ReactiveFormsModule\n */\nexport class InternalFormsSharedModule {\nstatic decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  declarations: SHARED_FORM_DIRECTIVES,\n  exports: SHARED_FORM_DIRECTIVES,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction InternalFormsSharedModule_tsickle_Closure_declarations() {\n/** @type {?} */\nInternalFormsSharedModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nInternalFormsSharedModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {NgModule} from '@angular/core';\n\nimport {InternalFormsSharedModule, REACTIVE_DRIVEN_DIRECTIVES, TEMPLATE_DRIVEN_DIRECTIVES} from './directives';\nimport {RadioControlRegistry} from './directives/radio_control_value_accessor';\nimport {FormBuilder} from './form_builder';\n/**\n * The ng module for forms.\n * \\@stable\n */\nexport class FormsModule {\nstatic decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  declarations: TEMPLATE_DRIVEN_DIRECTIVES,\n  providers: [RadioControlRegistry],\n  exports: [InternalFormsSharedModule, TEMPLATE_DRIVEN_DIRECTIVES]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction FormsModule_tsickle_Closure_declarations() {\n/** @type {?} */\nFormsModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nFormsModule.ctorParameters;\n}\n\n/**\n * The ng module for reactive forms.\n * \\@stable\n */\nexport class ReactiveFormsModule {\nstatic decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  declarations: [REACTIVE_DRIVEN_DIRECTIVES],\n  providers: [FormBuilder, RadioControlRegistry],\n  exports: [InternalFormsSharedModule, REACTIVE_DRIVEN_DIRECTIVES]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction ReactiveFormsModule_tsickle_Closure_declarations() {\n/** @type {?} */\nReactiveFormsModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nReactiveFormsModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable, SubscribableOrPromise } from '../Observable';\nimport { Subscription, TeardownLogic } from '../Subscription';\n\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Ignores source values for a duration determined by another Observable, then\n * emits the most recent value from the source Observable, then repeats this\n * process.\n *\n * <span class=\"informal\">It's like {@link auditTime}, but the silencing\n * duration is determined by a second Observable.</span>\n *\n * <img src=\"./img/audit.png\" width=\"100%\">\n *\n * `audit` is similar to `throttle`, but emits the last value from the silenced\n * time window, instead of the first value. `audit` emits the most recent value\n * from the source Observable on the output Observable as soon as its internal\n * timer becomes disabled, and ignores source values while the timer is enabled.\n * Initially, the timer is disabled. As soon as the first source value arrives,\n * the timer is enabled by calling the `durationSelector` function with the\n * source value, which returns the \"duration\" Observable. When the duration\n * Observable emits a value or completes, the timer is disabled, then the most\n * recent source value is emitted on the output Observable, and this process\n * repeats for the next source value.\n *\n * @example <caption>Emit clicks at a rate of at most one click per second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.audit(ev => Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link auditTime}\n * @see {@link debounce}\n * @see {@link delayWhen}\n * @see {@link sample}\n * @see {@link throttle}\n *\n * @param {function(value: T): SubscribableOrPromise} durationSelector A function\n * that receives a value from the source Observable, for computing the silencing\n * duration, returned as an Observable or a Promise.\n * @return {Observable<T>} An Observable that performs rate-limiting of\n * emissions from the source Observable.\n * @method audit\n * @owner Observable\n */\nexport function audit<T>(durationSelector: (value: T) => SubscribableOrPromise<any>): MonoTypeOperatorFunction<T> {\n  return function auditOperatorFunction(source: Observable<T>) {\n    return source.lift(new AuditOperator(durationSelector));\n  };\n}\n\nclass AuditOperator<T> implements Operator<T, T> {\n  constructor(private durationSelector: (value: T) => SubscribableOrPromise<any>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new AuditSubscriber<T, T>(subscriber, this.durationSelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass AuditSubscriber<T, R> extends OuterSubscriber<T, R> {\n\n  private value: T;\n  private hasValue: boolean = false;\n  private throttled: Subscription;\n\n  constructor(destination: Subscriber<T>,\n              private durationSelector: (value: T) => SubscribableOrPromise<any>) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    this.value = value;\n    this.hasValue = true;\n    if (!this.throttled) {\n      const duration = tryCatch(this.durationSelector)(value);\n      if (duration === errorObject) {\n        this.destination.error(errorObject.e);\n      } else {\n        const innerSubscription = subscribeToResult(this, duration);\n        if (innerSubscription.closed) {\n          this.clearThrottle();\n        } else {\n          this.add(this.throttled = innerSubscription);\n        }\n      }\n    }\n  }\n\n  clearThrottle() {\n    const { value, hasValue, throttled } = this;\n    if (throttled) {\n      this.remove(throttled);\n      this.throttled = null;\n      throttled.unsubscribe();\n    }\n    if (hasValue) {\n      this.value = null;\n      this.hasValue = false;\n      this.destination.next(value);\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: R, outerIndex: number, innerIndex: number): void {\n    this.clearThrottle();\n  }\n\n  notifyComplete(): void {\n    this.clearThrottle();\n  }\n}\n","import { Scheduler } from '../Scheduler';\nimport { Subscription } from '../Subscription';\n\n/**\n * A unit of work to be executed in a {@link Scheduler}. An action is typically\n * created from within a Scheduler and an RxJS user does not need to concern\n * themselves about creating and manipulating an Action.\n *\n * ```ts\n * class Action<T> extends Subscription {\n *   new (scheduler: Scheduler, work: (state?: T) => void);\n *   schedule(state?: T, delay: number = 0): Subscription;\n * }\n * ```\n *\n * @class Action<T>\n */\nexport class Action<T> extends Subscription {\n  constructor(scheduler: Scheduler, work: (this: Action<T>, state?: T) => void) {\n    super();\n  }\n  /**\n   * Schedules this action on its parent Scheduler for execution. May be passed\n   * some context object, `state`. May happen at some point in the future,\n   * according to the `delay` parameter, if specified.\n   * @param {T} [state] Some contextual data that the `work` function uses when\n   * called by the Scheduler.\n   * @param {number} [delay] Time to wait before executing the work, where the\n   * time unit is implicit and defined by the Scheduler.\n   * @return {void}\n   */\n  public schedule(state?: T, delay: number = 0): Subscription {\n    return this;\n  }\n}\n","import { root } from '../util/root';\nimport { Action } from './Action';\nimport { Subscription } from '../Subscription';\nimport { AsyncScheduler } from './AsyncScheduler';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class AsyncAction<T> extends Action<T> {\n\n  public id: any;\n  public state: T;\n  public delay: number;\n  protected pending: boolean = false;\n\n  constructor(protected scheduler: AsyncScheduler,\n              protected work: (this: AsyncAction<T>, state?: T) => void) {\n    super(scheduler, work);\n  }\n\n  public schedule(state?: T, delay: number = 0): Subscription {\n\n    if (this.closed) {\n      return this;\n     }\n\n    // Always replace the current state with the new state.\n    this.state = state;\n\n    // Set the pending flag indicating that this action has been scheduled, or\n    // has recursively rescheduled itself.\n    this.pending = true;\n\n    const id = this.id;\n    const scheduler = this.scheduler;\n\n    //\n    // Important implementation note:\n    //\n    // Actions only execute once by default, unless rescheduled from within the\n    // scheduled callback. This allows us to implement single and repeat\n    // actions via the same code path, without adding API surface area, as well\n    // as mimic traditional recursion but across asynchronous boundaries.\n    //\n    // However, JS runtimes and timers distinguish between intervals achieved by\n    // serial `setTimeout` calls vs. a single `setInterval` call. An interval of\n    // serial `setTimeout` calls can be individually delayed, which delays\n    // scheduling the next `setTimeout`, and so on. `setInterval` attempts to\n    // guarantee the interval callback will be invoked more precisely to the\n    // interval period, regardless of load.\n    //\n    // Therefore, we use `setInterval` to schedule single and repeat actions.\n    // If the action reschedules itself with the same delay, the interval is not\n    // canceled. If the action doesn't reschedule, or reschedules with a\n    // different delay, the interval will be canceled after scheduled callback\n    // execution.\n    //\n    if (id != null) {\n      this.id = this.recycleAsyncId(scheduler, id, delay);\n    }\n\n    this.delay = delay;\n    // If this action has already an async Id, don't request a new one.\n    this.id = this.id || this.requestAsyncId(scheduler, this.id, delay);\n\n    return this;\n  }\n\n  protected requestAsyncId(scheduler: AsyncScheduler, id?: any, delay: number = 0): any {\n    return root.setInterval(scheduler.flush.bind(scheduler, this), delay);\n  }\n\n  protected recycleAsyncId(scheduler: AsyncScheduler, id: any, delay: number = 0): any {\n    // If this action is rescheduled with the same delay time, don't clear the interval id.\n    if (delay !== null && this.delay === delay && this.pending === false) {\n      return id;\n    }\n    // Otherwise, if the action's delay time is different from the current delay,\n    // or the action has been rescheduled before it's executed, clear the interval id\n    return root.clearInterval(id) && undefined || undefined;\n  }\n\n  /**\n   * Immediately executes this action and the `work` it contains.\n   * @return {any}\n   */\n  public execute(state: T, delay: number): any {\n\n    if (this.closed) {\n      return new Error('executing a cancelled action');\n    }\n\n    this.pending = false;\n    const error = this._execute(state, delay);\n    if (error) {\n      return error;\n    } else if (this.pending === false && this.id != null) {\n      // Dequeue if the action didn't reschedule itself. Don't call\n      // unsubscribe(), because the action could reschedule later.\n      // For example:\n      // ```\n      // scheduler.schedule(function doWork(counter) {\n      //   /* ... I'm a busy worker bee ... */\n      //   var originalAction = this;\n      //   /* wait 100ms before rescheduling the action */\n      //   setTimeout(function () {\n      //     originalAction.schedule(counter + 1);\n      //   }, 100);\n      // }, 1000);\n      // ```\n      this.id = this.recycleAsyncId(this.scheduler, this.id, null);\n    }\n  }\n\n  protected _execute(state: T, delay: number): any {\n    let errored: boolean = false;\n    let errorValue: any = undefined;\n    try {\n      this.work(state);\n    } catch (e) {\n      errored = true;\n      errorValue = !!e && e || new Error(e);\n    }\n    if (errored) {\n      this.unsubscribe();\n      return errorValue;\n    }\n  }\n\n  protected _unsubscribe() {\n\n    const id = this.id;\n    const scheduler = this.scheduler;\n    const actions = scheduler.actions;\n    const index = actions.indexOf(this);\n\n    this.work  = null;\n    this.state = null;\n    this.pending = false;\n    this.scheduler = null;\n\n    if (index !== -1) {\n      actions.splice(index, 1);\n    }\n\n    if (id != null) {\n      this.id = this.recycleAsyncId(scheduler, id, null);\n    }\n\n    this.delay = null;\n  }\n}\n","import { Action } from './scheduler/Action';\nimport { Subscription } from './Subscription';\n\nexport interface IScheduler {\n  now(): number;\n  schedule<T>(work: (this: Action<T>, state?: T) => void, delay?: number, state?: T): Subscription;\n}\n/**\n * An execution context and a data structure to order tasks and schedule their\n * execution. Provides a notion of (potentially virtual) time, through the\n * `now()` getter method.\n *\n * Each unit of work in a Scheduler is called an {@link Action}.\n *\n * ```ts\n * class Scheduler {\n *   now(): number;\n *   schedule(work, delay?, state?): Subscription;\n * }\n * ```\n *\n * @class Scheduler\n */\nexport class Scheduler implements IScheduler {\n\n  public static now: () => number = Date.now ? Date.now : () => +new Date();\n\n  constructor(private SchedulerAction: typeof Action,\n              now: () => number = Scheduler.now) {\n    this.now = now;\n  }\n\n  /**\n   * A getter method that returns a number representing the current time\n   * (at the time this function was called) according to the scheduler's own\n   * internal clock.\n   * @return {number} A number that represents the current time. May or may not\n   * have a relation to wall-clock time. May or may not refer to a time unit\n   * (e.g. milliseconds).\n   */\n  public now: () => number;\n\n  /**\n   * Schedules a function, `work`, for execution. May happen at some point in\n   * the future, according to the `delay` parameter, if specified. May be passed\n   * some context object, `state`, which will be passed to the `work` function.\n   *\n   * The given arguments will be processed an stored as an Action object in a\n   * queue of actions.\n   *\n   * @param {function(state: ?T): ?Subscription} work A function representing a\n   * task, or some unit of work to be executed by the Scheduler.\n   * @param {number} [delay] Time to wait before executing the work, where the\n   * time unit is implicit and defined by the Scheduler itself.\n   * @param {T} [state] Some contextual data that the `work` function uses when\n   * called by the Scheduler.\n   * @return {Subscription} A subscription in order to be able to unsubscribe\n   * the scheduled work.\n   */\n  public schedule<T>(work: (this: Action<T>, state?: T) => void, delay: number = 0, state?: T): Subscription {\n    return new this.SchedulerAction<T>(this, work).schedule(state, delay);\n  }\n}\n","import { Scheduler } from '../Scheduler';\nimport { AsyncAction } from './AsyncAction';\n\nexport class AsyncScheduler extends Scheduler {\n  public actions: Array<AsyncAction<any>> = [];\n  /**\n   * A flag to indicate whether the Scheduler is currently executing a batch of\n   * queued actions.\n   * @type {boolean}\n   */\n  public active: boolean = false;\n  /**\n   * An internal ID used to track the latest asynchronous task such as those\n   * coming from `setTimeout`, `setInterval`, `requestAnimationFrame`, and\n   * others.\n   * @type {any}\n   */\n  public scheduled: any = undefined;\n\n  public flush(action: AsyncAction<any>): void {\n\n    const {actions} = this;\n\n    if (this.active) {\n      actions.push(action);\n      return;\n    }\n\n    let error: any;\n    this.active = true;\n\n    do {\n      if (error = action.execute(action.state, action.delay)) {\n        break;\n      }\n    } while (action = actions.shift()); // exhaust the scheduler queue\n\n    this.active = false;\n\n    if (error) {\n      while (action = actions.shift()) {\n        action.unsubscribe();\n      }\n      throw error;\n    }\n  }\n}\n","import { AsyncAction } from './AsyncAction';\nimport { AsyncScheduler } from './AsyncScheduler';\n\n/**\n *\n * Async Scheduler\n *\n * <span class=\"informal\">Schedule task as if you used setTimeout(task, duration)</span>\n *\n * `async` scheduler schedules tasks asynchronously, by putting them on the JavaScript\n * event loop queue. It is best used to delay tasks in time or to schedule tasks repeating\n * in intervals.\n *\n * If you just want to \"defer\" task, that is to perform it right after currently\n * executing synchronous code ends (commonly achieved by `setTimeout(deferredTask, 0)`),\n * better choice will be the {@link asap} scheduler.\n *\n * @example <caption>Use async scheduler to delay task</caption>\n * const task = () => console.log('it works!');\n *\n * Rx.Scheduler.async.schedule(task, 2000);\n *\n * // After 2 seconds logs:\n * // \"it works!\"\n *\n *\n * @example <caption>Use async scheduler to repeat task in intervals</caption>\n * function task(state) {\n *   console.log(state);\n *   this.schedule(state + 1, 1000); // `this` references currently executing Action,\n *                                   // which we reschedule with new state and delay\n * }\n *\n * Rx.Scheduler.async.schedule(task, 3000, 0);\n *\n * // Logs:\n * // 0 after 3s\n * // 1 after 4s\n * // 2 after 5s\n * // 3 after 6s\n *\n * @static true\n * @name async\n * @owner Scheduler\n */\n\nexport const async = new AsyncScheduler(AsyncAction);\n","import { isArray } from '../util/isArray';\n\nexport function isNumeric(val: any): val is number {\n  // parseFloat NaNs numeric-cast false positives (null|true|false|\"\")\n  // ...but misinterprets leading-number strings, particularly hex literals (\"0x...\")\n  // subtraction forces infinities to NaN\n  // adding 1 corrects loss of precision from parseFloat (#15100)\n  return !isArray(val) && (val - parseFloat(val) + 1) >= 0;\n};\n","export function isDate(value: any): value is Date {\n  return value instanceof Date && !isNaN(+value);\n}\n","import { isNumeric } from '../util/isNumeric';\nimport { IScheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { async } from '../scheduler/async';\nimport { isScheduler } from '../util/isScheduler';\nimport { isDate } from '../util/isDate';\nimport { TeardownLogic } from '../Subscription';\nimport { Subscriber } from '../Subscriber';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class TimerObservable extends Observable<number> {\n\n  /**\n   * Creates an Observable that starts emitting after an `initialDelay` and\n   * emits ever increasing numbers after each `period` of time thereafter.\n   *\n   * <span class=\"informal\">Its like {@link interval}, but you can specify when\n   * should the emissions start.</span>\n   *\n   * <img src=\"./img/timer.png\" width=\"100%\">\n   *\n   * `timer` returns an Observable that emits an infinite sequence of ascending\n   * integers, with a constant interval of time, `period` of your choosing\n   * between those emissions. The first emission happens after the specified\n   * `initialDelay`. The initial delay may be a {@link Date}. By default, this\n   * operator uses the `async` IScheduler to provide a notion of time, but you\n   * may pass any IScheduler to it. If `period` is not specified, the output\n   * Observable emits only one value, `0`. Otherwise, it emits an infinite\n   * sequence.\n   *\n   * @example <caption>Emits ascending numbers, one every second (1000ms), starting after 3 seconds</caption>\n   * var numbers = Rx.Observable.timer(3000, 1000);\n   * numbers.subscribe(x => console.log(x));\n   *\n   * @example <caption>Emits one number after five seconds</caption>\n   * var numbers = Rx.Observable.timer(5000);\n   * numbers.subscribe(x => console.log(x));\n   *\n   * @see {@link interval}\n   * @see {@link delay}\n   *\n   * @param {number|Date} initialDelay The initial delay time to wait before\n   * emitting the first value of `0`.\n   * @param {number} [period] The period of time between emissions of the\n   * subsequent numbers.\n   * @param {Scheduler} [scheduler=async] The IScheduler to use for scheduling\n   * the emission of values, and providing a notion of \"time\".\n   * @return {Observable} An Observable that emits a `0` after the\n   * `initialDelay` and ever increasing numbers after each `period` of time\n   * thereafter.\n   * @static true\n   * @name timer\n   * @owner Observable\n   */\n  static create(initialDelay: number | Date = 0,\n                period?: number | IScheduler,\n                scheduler?: IScheduler): Observable<number> {\n    return new TimerObservable(initialDelay, period, scheduler);\n  }\n\n  static dispatch(state: any) {\n\n    const { index, period, subscriber } = state;\n    const action = (<any> this);\n\n    subscriber.next(index);\n\n    if (subscriber.closed) {\n      return;\n    } else if (period === -1) {\n      return subscriber.complete();\n    }\n\n    state.index = index + 1;\n    action.schedule(state, period);\n  }\n\n  private period: number = -1;\n  private dueTime: number = 0;\n  private scheduler: IScheduler;\n\n  constructor(dueTime: number | Date = 0,\n              period?: number | IScheduler,\n              scheduler?: IScheduler) {\n    super();\n\n    if (isNumeric(period)) {\n      this.period = Number(period) < 1 && 1 || Number(period);\n    } else if (isScheduler(period)) {\n      scheduler = <IScheduler> period;\n    }\n\n    if (!isScheduler(scheduler)) {\n      scheduler = async;\n    }\n\n    this.scheduler = scheduler;\n    this.dueTime = isDate(dueTime) ?\n      (+dueTime - this.scheduler.now()) :\n      (<number> dueTime);\n  }\n\n  protected _subscribe(subscriber: Subscriber<number>): TeardownLogic {\n    const index = 0;\n    const { period, dueTime, scheduler } = this;\n\n    return scheduler.schedule(TimerObservable.dispatch, dueTime, {\n      index, period, subscriber\n    });\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Buffers the source Observable values until `closingNotifier` emits.\n *\n * <span class=\"informal\">Collects values from the past as an array, and emits\n * that array only when another Observable emits.</span>\n *\n * <img src=\"./img/buffer.png\" width=\"100%\">\n *\n * Buffers the incoming Observable values until the given `closingNotifier`\n * Observable emits a value, at which point it emits the buffer on the output\n * Observable and starts a new buffer internally, awaiting the next time\n * `closingNotifier` emits.\n *\n * @example <caption>On every click, emit array of most recent interval events</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var interval = Rx.Observable.interval(1000);\n * var buffered = interval.buffer(clicks);\n * buffered.subscribe(x => console.log(x));\n *\n * @see {@link bufferCount}\n * @see {@link bufferTime}\n * @see {@link bufferToggle}\n * @see {@link bufferWhen}\n * @see {@link window}\n *\n * @param {Observable<any>} closingNotifier An Observable that signals the\n * buffer to be emitted on the output Observable.\n * @return {Observable<T[]>} An Observable of buffers, which are arrays of\n * values.\n * @method buffer\n * @owner Observable\n */\nexport function buffer<T>(closingNotifier: Observable<any>): OperatorFunction<T, T[]> {\n  return function bufferOperatorFunction(source: Observable<T>) {\n    return source.lift(new BufferOperator<T>(closingNotifier));\n  };\n}\n\nclass BufferOperator<T> implements Operator<T, T[]> {\n\n  constructor(private closingNotifier: Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<T[]>, source: any): any {\n    return source.subscribe(new BufferSubscriber(subscriber, this.closingNotifier));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass BufferSubscriber<T> extends OuterSubscriber<T, any> {\n  private buffer: T[] = [];\n\n  constructor(destination: Subscriber<T[]>, closingNotifier: Observable<any>) {\n    super(destination);\n    this.add(subscribeToResult(this, closingNotifier));\n  }\n\n  protected _next(value: T) {\n    this.buffer.push(value);\n  }\n\n  notifyNext(outerValue: T, innerValue: any,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, any>): void {\n    const buffer = this.buffer;\n    this.buffer = [];\n    this.destination.next(buffer);\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Buffers the source Observable values until the size hits the maximum\n * `bufferSize` given.\n *\n * <span class=\"informal\">Collects values from the past as an array, and emits\n * that array only when its size reaches `bufferSize`.</span>\n *\n * <img src=\"./img/bufferCount.png\" width=\"100%\">\n *\n * Buffers a number of values from the source Observable by `bufferSize` then\n * emits the buffer and clears it, and starts a new buffer each\n * `startBufferEvery` values. If `startBufferEvery` is not provided or is\n * `null`, then new buffers are started immediately at the start of the source\n * and when each buffer closes and is emitted.\n *\n * @example <caption>Emit the last two click events as an array</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var buffered = clicks.bufferCount(2);\n * buffered.subscribe(x => console.log(x));\n *\n * @example <caption>On every click, emit the last two click events as an array</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var buffered = clicks.bufferCount(2, 1);\n * buffered.subscribe(x => console.log(x));\n *\n * @see {@link buffer}\n * @see {@link bufferTime}\n * @see {@link bufferToggle}\n * @see {@link bufferWhen}\n * @see {@link pairwise}\n * @see {@link windowCount}\n *\n * @param {number} bufferSize The maximum size of the buffer emitted.\n * @param {number} [startBufferEvery] Interval at which to start a new buffer.\n * For example if `startBufferEvery` is `2`, then a new buffer will be started\n * on every other value from the source. A new buffer is started at the\n * beginning of the source by default.\n * @return {Observable<T[]>} An Observable of arrays of buffered values.\n * @method bufferCount\n * @owner Observable\n */\nexport function bufferCount<T>(bufferSize: number, startBufferEvery: number = null): OperatorFunction<T, T[]> {\n  return function bufferCountOperatorFunction(source: Observable<T>) {\n    return source.lift(new BufferCountOperator<T>(bufferSize, startBufferEvery));\n  };\n}\n\nclass BufferCountOperator<T> implements Operator<T, T[]> {\n  private subscriberClass: any;\n\n  constructor(private bufferSize: number, private startBufferEvery: number) {\n    if (!startBufferEvery || bufferSize === startBufferEvery) {\n      this.subscriberClass = BufferCountSubscriber;\n    } else {\n      this.subscriberClass = BufferSkipCountSubscriber;\n    }\n  }\n\n  call(subscriber: Subscriber<T[]>, source: any): TeardownLogic {\n    return source.subscribe(new this.subscriberClass(subscriber, this.bufferSize, this.startBufferEvery));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass BufferCountSubscriber<T> extends Subscriber<T> {\n  private buffer: T[] = [];\n\n  constructor(destination: Subscriber<T[]>, private bufferSize: number) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    const buffer = this.buffer;\n\n    buffer.push(value);\n\n    if (buffer.length == this.bufferSize) {\n      this.destination.next(buffer);\n      this.buffer = [];\n    }\n  }\n\n  protected _complete(): void {\n    const buffer = this.buffer;\n    if (buffer.length > 0) {\n      this.destination.next(buffer);\n    }\n    super._complete();\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass BufferSkipCountSubscriber<T> extends Subscriber<T> {\n  private buffers: Array<T[]> = [];\n  private count: number = 0;\n\n  constructor(destination: Subscriber<T[]>, private bufferSize: number, private startBufferEvery: number) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    const { bufferSize, startBufferEvery, buffers, count } = this;\n\n    this.count++;\n    if (count % startBufferEvery === 0) {\n      buffers.push([]);\n    }\n\n    for (let i = buffers.length; i--; ) {\n      const buffer = buffers[i];\n      buffer.push(value);\n      if (buffer.length === bufferSize) {\n        buffers.splice(i, 1);\n        this.destination.next(buffer);\n      }\n    }\n  }\n\n  protected _complete(): void {\n    const { buffers, destination } = this;\n\n    while (buffers.length > 0) {\n      let buffer = buffers.shift();\n      if (buffer.length > 0) {\n        destination.next(buffer);\n      }\n    }\n    super._complete();\n  }\n\n}\n","import { IScheduler } from '../Scheduler';\nimport { Action } from '../scheduler/Action';\nimport { Operator } from '../Operator';\nimport { async } from '../scheduler/async';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { isScheduler } from '../util/isScheduler';\nimport { OperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function bufferTime<T>(bufferTimeSpan: number, scheduler?: IScheduler): OperatorFunction<T, T[]>;\nexport function bufferTime<T>(bufferTimeSpan: number, bufferCreationInterval: number, scheduler?: IScheduler): OperatorFunction<T, T[]>;\nexport function bufferTime<T>(bufferTimeSpan: number, bufferCreationInterval: number, maxBufferSize: number, scheduler?: IScheduler): OperatorFunction<T, T[]>;\n/* tslint:enable:max-line-length */\n\n/**\n * Buffers the source Observable values for a specific time period.\n *\n * <span class=\"informal\">Collects values from the past as an array, and emits\n * those arrays periodically in time.</span>\n *\n * <img src=\"./img/bufferTime.png\" width=\"100%\">\n *\n * Buffers values from the source for a specific time duration `bufferTimeSpan`.\n * Unless the optional argument `bufferCreationInterval` is given, it emits and\n * resets the buffer every `bufferTimeSpan` milliseconds. If\n * `bufferCreationInterval` is given, this operator opens the buffer every\n * `bufferCreationInterval` milliseconds and closes (emits and resets) the\n * buffer every `bufferTimeSpan` milliseconds. When the optional argument\n * `maxBufferSize` is specified, the buffer will be closed either after\n * `bufferTimeSpan` milliseconds or when it contains `maxBufferSize` elements.\n *\n * @example <caption>Every second, emit an array of the recent click events</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var buffered = clicks.bufferTime(1000);\n * buffered.subscribe(x => console.log(x));\n *\n * @example <caption>Every 5 seconds, emit the click events from the next 2 seconds</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var buffered = clicks.bufferTime(2000, 5000);\n * buffered.subscribe(x => console.log(x));\n *\n * @see {@link buffer}\n * @see {@link bufferCount}\n * @see {@link bufferToggle}\n * @see {@link bufferWhen}\n * @see {@link windowTime}\n *\n * @param {number} bufferTimeSpan The amount of time to fill each buffer array.\n * @param {number} [bufferCreationInterval] The interval at which to start new\n * buffers.\n * @param {number} [maxBufferSize] The maximum buffer size.\n * @param {Scheduler} [scheduler=async] The scheduler on which to schedule the\n * intervals that determine buffer boundaries.\n * @return {Observable<T[]>} An observable of arrays of buffered values.\n * @method bufferTime\n * @owner Observable\n */\nexport function bufferTime<T>(bufferTimeSpan: number): OperatorFunction<T, T[]> {\n  let length: number = arguments.length;\n\n  let scheduler: IScheduler = async;\n  if (isScheduler(arguments[arguments.length - 1])) {\n    scheduler = arguments[arguments.length - 1];\n    length--;\n  }\n\n  let bufferCreationInterval: number = null;\n  if (length >= 2) {\n    bufferCreationInterval = arguments[1];\n  }\n\n  let maxBufferSize: number = Number.POSITIVE_INFINITY;\n  if (length >= 3) {\n    maxBufferSize = arguments[2];\n  }\n\n  return function bufferTimeOperatorFunction(source: Observable<T>) {\n    return source.lift(new BufferTimeOperator<T>(bufferTimeSpan, bufferCreationInterval, maxBufferSize, scheduler));\n  };\n}\n\nclass BufferTimeOperator<T> implements Operator<T, T[]> {\n  constructor(private bufferTimeSpan: number,\n              private bufferCreationInterval: number,\n              private maxBufferSize: number,\n              private scheduler: IScheduler) {\n  }\n\n  call(subscriber: Subscriber<T[]>, source: any): any {\n    return source.subscribe(new BufferTimeSubscriber(\n      subscriber, this.bufferTimeSpan, this.bufferCreationInterval, this.maxBufferSize, this.scheduler\n    ));\n  }\n}\n\nclass Context<T> {\n  buffer: T[] = [];\n  closeAction: Subscription;\n}\n\ntype CreationState<T> = {\n  bufferTimeSpan: number;\n  bufferCreationInterval: number,\n  subscriber: BufferTimeSubscriber<T>;\n  scheduler: IScheduler;\n};\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass BufferTimeSubscriber<T> extends Subscriber<T> {\n  private contexts: Array<Context<T>> = [];\n  private timespanOnly: boolean;\n\n  constructor(destination: Subscriber<T[]>,\n              private bufferTimeSpan: number,\n              private bufferCreationInterval: number,\n              private maxBufferSize: number,\n              private scheduler: IScheduler) {\n    super(destination);\n    const context = this.openContext();\n    this.timespanOnly = bufferCreationInterval == null || bufferCreationInterval < 0;\n    if (this.timespanOnly) {\n      const timeSpanOnlyState = { subscriber: this, context, bufferTimeSpan };\n      this.add(context.closeAction = scheduler.schedule(dispatchBufferTimeSpanOnly, bufferTimeSpan, timeSpanOnlyState));\n    } else {\n      const closeState = { subscriber: this, context };\n      const creationState: CreationState<T> = { bufferTimeSpan, bufferCreationInterval, subscriber: this, scheduler };\n      this.add(context.closeAction = scheduler.schedule(dispatchBufferClose, bufferTimeSpan, closeState));\n      this.add(scheduler.schedule(dispatchBufferCreation, bufferCreationInterval, creationState));\n    }\n  }\n\n  protected _next(value: T) {\n    const contexts = this.contexts;\n    const len = contexts.length;\n    let filledBufferContext: Context<T>;\n    for (let i = 0; i < len; i++) {\n      const context = contexts[i];\n      const buffer = context.buffer;\n      buffer.push(value);\n      if (buffer.length == this.maxBufferSize) {\n        filledBufferContext = context;\n      }\n    }\n\n    if (filledBufferContext) {\n      this.onBufferFull(filledBufferContext);\n    }\n  }\n\n  protected _error(err: any) {\n    this.contexts.length = 0;\n    super._error(err);\n  }\n\n  protected _complete() {\n    const { contexts, destination } = this;\n    while (contexts.length > 0) {\n      const context = contexts.shift();\n      destination.next(context.buffer);\n    }\n    super._complete();\n  }\n\n  protected _unsubscribe() {\n    this.contexts = null;\n  }\n\n  protected onBufferFull(context: Context<T>) {\n    this.closeContext(context);\n    const closeAction = context.closeAction;\n    closeAction.unsubscribe();\n    this.remove(closeAction);\n\n    if (!this.closed && this.timespanOnly) {\n      context = this.openContext();\n      const bufferTimeSpan = this.bufferTimeSpan;\n      const timeSpanOnlyState = { subscriber: this, context, bufferTimeSpan };\n      this.add(context.closeAction = this.scheduler.schedule(dispatchBufferTimeSpanOnly, bufferTimeSpan, timeSpanOnlyState));\n    }\n  }\n\n  openContext(): Context<T> {\n    const context: Context<T> = new Context<T>();\n    this.contexts.push(context);\n    return context;\n  }\n\n  closeContext(context: Context<T>) {\n    this.destination.next(context.buffer);\n    const contexts = this.contexts;\n\n    const spliceIndex = contexts ? contexts.indexOf(context) : -1;\n    if (spliceIndex >= 0) {\n      contexts.splice(contexts.indexOf(context), 1);\n    }\n  }\n}\n\nfunction dispatchBufferTimeSpanOnly(this: Action<any>, state: any) {\n  const subscriber: BufferTimeSubscriber<any> = state.subscriber;\n\n  const prevContext = state.context;\n  if (prevContext) {\n    subscriber.closeContext(prevContext);\n  }\n\n  if (!subscriber.closed) {\n    state.context = subscriber.openContext();\n    state.context.closeAction = this.schedule(state, state.bufferTimeSpan);\n  }\n}\n\ninterface DispatchArg<T> {\n  subscriber: BufferTimeSubscriber<T>;\n  context: Context<T>;\n}\n\nfunction dispatchBufferCreation<T>(this: Action<CreationState<T>>, state: CreationState<T>) {\n  const { bufferCreationInterval, bufferTimeSpan, subscriber, scheduler } = state;\n  const context = subscriber.openContext();\n  const action = <Action<CreationState<T>>>this;\n  if (!subscriber.closed) {\n    subscriber.add(context.closeAction = scheduler.schedule<DispatchArg<T>>(dispatchBufferClose, bufferTimeSpan, { subscriber, context }));\n    action.schedule(state, bufferCreationInterval);\n  }\n}\n\nfunction dispatchBufferClose<T>(arg: DispatchArg<T>) {\n  const { subscriber, context } = arg;\n  subscriber.closeContext(context);\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Directive, ElementRef, Renderer2, forwardRef} from '@angular/core';\n\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from './control_value_accessor';\n\nexport const /** @type {?} */ NUMBER_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => NumberValueAccessor),\n  multi: true\n};\n/**\n * The accessor for writing a number value and listening to changes that is used by the\n * {\\@link NgModel}, {\\@link FormControlDirective}, and {\\@link FormControlName} directives.\n * \n *  ### Example\n *  ```\n *  <input type=\"number\" [(ngModel)]=\"age\">\n *  ```\n */\nexport class NumberValueAccessor implements ControlValueAccessor {\n  onChange = (_: any) => {};\n  onTouched = () => {};\n/**\n * @param {?} _renderer\n * @param {?} _elementRef\n */\nconstructor(private _renderer: Renderer2,\nprivate _elementRef: ElementRef) {}\n/**\n * @param {?} value\n * @return {?}\n */\nwriteValue(value: number): void {\n    // The value needs to be normalized for IE9, otherwise it is set to 'null' when null\n    const /** @type {?} */ normalizedValue = value == null ? '' : value;\n    this._renderer.setProperty(this._elementRef.nativeElement, 'value', normalizedValue);\n  }\n/**\n * @param {?} fn\n * @return {?}\n */\nregisterOnChange(fn: (_: number|null) => void): void {\n    this.onChange = (value) => { fn(value == '' ? null : parseFloat(value)); };\n  }\n/**\n * @param {?} fn\n * @return {?}\n */\nregisterOnTouched(fn: () => void): void { this.onTouched = fn; }\n/**\n * @param {?} isDisabled\n * @return {?}\n */\nsetDisabledState(isDisabled: boolean): void {\n    this._renderer.setProperty(this._elementRef.nativeElement, 'disabled', isDisabled);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector:\n      'input[type=number][formControlName],input[type=number][formControl],input[type=number][ngModel]',\n  host: {\n    '(change)': 'onChange($event.target.value)',\n    '(input)': 'onChange($event.target.value)',\n    '(blur)': 'onTouched()'\n  },\n  providers: [NUMBER_VALUE_ACCESSOR]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Renderer2, },\n{type: ElementRef, },\n];\n}\n\nfunction NumberValueAccessor_tsickle_Closure_declarations() {\n/** @type {?} */\nNumberValueAccessor.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nNumberValueAccessor.ctorParameters;\n/** @type {?} */\nNumberValueAccessor.prototype.onChange;\n/** @type {?} */\nNumberValueAccessor.prototype.onTouched;\n/** @type {?} */\nNumberValueAccessor.prototype._renderer;\n/** @type {?} */\nNumberValueAccessor.prototype._elementRef;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\n\nimport {AbstractControlDirective} from './abstract_control_directive';\nimport {ControlContainer} from './control_container';\nimport {ControlValueAccessor} from './control_value_accessor';\nimport {AsyncValidator, AsyncValidatorFn, Validator, ValidatorFn} from './validators';\n/**\n * @return {?}\n */\nfunction unimplemented(): any {\n  throw new Error('unimplemented');\n}\n/**\n * A base class that all control directive extend.\n * It binds a {\\@link FormControl} object to a DOM element.\n * \n * Used internally by Angular forms.\n * \n * \\@stable\n * @abstract\n */\nexport abstract class NgControl extends AbstractControlDirective {\n/**\n * \\@internal\n */\n_parent: ControlContainer|null = null;\n  name: string|null = null;\n  valueAccessor: ControlValueAccessor|null = null;\n/**\n * \\@internal\n */\n_rawValidators: Array<Validator|ValidatorFn> = [];\n/**\n * \\@internal\n */\n_rawAsyncValidators: Array<AsyncValidator|AsyncValidatorFn> = [];\n/**\n * @return {?}\n */\nget validator(): ValidatorFn|null { return /** @type {?} */(( <ValidatorFn>unimplemented())); }\n/**\n * @return {?}\n */\nget asyncValidator(): AsyncValidatorFn|null { return /** @type {?} */(( <AsyncValidatorFn>unimplemented())); }\n/**\n * @abstract\n * @param {?} newValue\n * @return {?}\n */\nviewToModelUpdate(newValue: any) {}\n}\n\nfunction NgControl_tsickle_Closure_declarations() {\n/**\n * \\@internal\n * @type {?}\n */\nNgControl.prototype._parent;\n/** @type {?} */\nNgControl.prototype.name;\n/** @type {?} */\nNgControl.prototype.valueAccessor;\n/**\n * \\@internal\n * @type {?}\n */\nNgControl.prototype._rawValidators;\n/**\n * \\@internal\n * @type {?}\n */\nNgControl.prototype._rawAsyncValidators;\n}\n\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Directive, ElementRef, Injectable, Injector, Input, OnDestroy, OnInit, Renderer2, forwardRef} from '@angular/core';\n\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from './control_value_accessor';\nimport {NgControl} from './ng_control';\n\nexport const /** @type {?} */ RADIO_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => RadioControlValueAccessor),\n  multi: true\n};\n/**\n * Internal class used by Angular to uncheck radio buttons with the matching name.\n */\nexport class RadioControlRegistry {\nprivate _accessors: any[] = [];\n/**\n * @param {?} control\n * @param {?} accessor\n * @return {?}\n */\nadd(control: NgControl, accessor: RadioControlValueAccessor) {\n    this._accessors.push([control, accessor]);\n  }\n/**\n * @param {?} accessor\n * @return {?}\n */\nremove(accessor: RadioControlValueAccessor) {\n    for (let /** @type {?} */ i = this._accessors.length - 1; i >= 0; --i) {\n      if (this._accessors[i][1] === accessor) {\n        this._accessors.splice(i, 1);\n        return;\n      }\n    }\n  }\n/**\n * @param {?} accessor\n * @return {?}\n */\nselect(accessor: RadioControlValueAccessor) {\n    this._accessors.forEach((c) => {\n      if (this._isSameGroup(c, accessor) && c[1] !== accessor) {\n        c[1].fireUncheck(accessor.value);\n      }\n    });\n  }\n/**\n * @param {?} controlPair\n * @param {?} accessor\n * @return {?}\n */\nprivate _isSameGroup(\n      controlPair: [NgControl, RadioControlValueAccessor],\n      accessor: RadioControlValueAccessor): boolean {\n    if (!controlPair[0].control) return false;\n    return controlPair[0]._parent === accessor._control._parent &&\n        controlPair[1].name === accessor.name;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction RadioControlRegistry_tsickle_Closure_declarations() {\n/** @type {?} */\nRadioControlRegistry.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nRadioControlRegistry.ctorParameters;\n/** @type {?} */\nRadioControlRegistry.prototype._accessors;\n}\n\n/**\n * \\@whatItDoes Writes radio control values and listens to radio control changes.\n * \n * Used by {\\@link NgModel}, {\\@link FormControlDirective}, and {\\@link FormControlName}\n * to keep the view synced with the {\\@link FormControl} model.\n * \n * \\@howToUse \n * \n * If you have imported the {\\@link FormsModule} or the {\\@link ReactiveFormsModule}, this\n * value accessor will be active on any radio control that has a form directive. You do\n * **not** need to add a special selector to activate it.\n * \n * ### How to use radio buttons with form directives\n * \n * To use radio buttons in a template-driven form, you'll want to ensure that radio buttons\n * in the same group have the same `name` attribute.  Radio buttons with different `name`\n * attributes do not affect each other.\n * \n * {\\@example forms/ts/radioButtons/radio_button_example.ts region='TemplateDriven'}\n * \n * When using radio buttons in a reactive form, radio buttons in the same group should have the\n * same `formControlName`. You can also add a `name` attribute, but it's optional.\n * \n * {\\@example forms/ts/reactiveRadioButtons/reactive_radio_button_example.ts region='Reactive'}\n * \n *  * **npm package**: `\\@angular/forms`\n * \n *  \\@stable\n */\nexport class RadioControlValueAccessor implements ControlValueAccessor,\n    OnDestroy, OnInit {\n/**\n * \\@internal\n */\n_state: boolean;\n/**\n * \\@internal\n */\n_control: NgControl;\n/**\n * \\@internal\n */\n_fn: Function;\n  onChange = () => {};\n  onTouched = () => {};\n\n   name: string;\n   formControlName: string;\n   value: any;\n/**\n * @param {?} _renderer\n * @param {?} _elementRef\n * @param {?} _registry\n * @param {?} _injector\n */\nconstructor(\nprivate _renderer: Renderer2,\nprivate _elementRef: ElementRef,\nprivate _registry: RadioControlRegistry,\nprivate _injector: Injector) {}\n/**\n * @return {?}\n */\nngOnInit(): void {\n    this._control = this._injector.get(NgControl);\n    this._checkName();\n    this._registry.add(this._control, this);\n  }\n/**\n * @return {?}\n */\nngOnDestroy(): void { this._registry.remove(this); }\n/**\n * @param {?} value\n * @return {?}\n */\nwriteValue(value: any): void {\n    this._state = value === this.value;\n    this._renderer.setProperty(this._elementRef.nativeElement, 'checked', this._state);\n  }\n/**\n * @param {?} fn\n * @return {?}\n */\nregisterOnChange(fn: (_: any) => {}): void {\n    this._fn = fn;\n    this.onChange = () => {\n      fn(this.value);\n      this._registry.select(this);\n    };\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nfireUncheck(value: any): void { this.writeValue(value); }\n/**\n * @param {?} fn\n * @return {?}\n */\nregisterOnTouched(fn: () => {}): void { this.onTouched = fn; }\n/**\n * @param {?} isDisabled\n * @return {?}\n */\nsetDisabledState(isDisabled: boolean): void {\n    this._renderer.setProperty(this._elementRef.nativeElement, 'disabled', isDisabled);\n  }\n/**\n * @return {?}\n */\nprivate _checkName(): void {\n    if (this.name && this.formControlName && this.name !== this.formControlName) {\n      this._throwNameError();\n    }\n    if (!this.name && this.formControlName) this.name = this.formControlName;\n  }\n/**\n * @return {?}\n */\nprivate _throwNameError(): void {\n    throw new Error(`\n      If you define both a name and a formControlName attribute on your radio button, their values\n      must match. Ex: <input type=\"radio\" formControlName=\"food\" name=\"food\">\n    `);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector:\n      'input[type=radio][formControlName],input[type=radio][formControl],input[type=radio][ngModel]',\n  host: {'(change)': 'onChange()', '(blur)': 'onTouched()'},\n  providers: [RADIO_VALUE_ACCESSOR]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Renderer2, },\n{type: ElementRef, },\n{type: RadioControlRegistry, },\n{type: Injector, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'name': [{ type: Input },],\n'formControlName': [{ type: Input },],\n'value': [{ type: Input },],\n};\n}\n\nfunction RadioControlValueAccessor_tsickle_Closure_declarations() {\n/** @type {?} */\nRadioControlValueAccessor.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nRadioControlValueAccessor.ctorParameters;\n/** @type {?} */\nRadioControlValueAccessor.propDecorators;\n/**\n * \\@internal\n * @type {?}\n */\nRadioControlValueAccessor.prototype._state;\n/**\n * \\@internal\n * @type {?}\n */\nRadioControlValueAccessor.prototype._control;\n/**\n * \\@internal\n * @type {?}\n */\nRadioControlValueAccessor.prototype._fn;\n/** @type {?} */\nRadioControlValueAccessor.prototype.onChange;\n/** @type {?} */\nRadioControlValueAccessor.prototype.onTouched;\n/** @type {?} */\nRadioControlValueAccessor.prototype.name;\n/** @type {?} */\nRadioControlValueAccessor.prototype.formControlName;\n/** @type {?} */\nRadioControlValueAccessor.prototype.value;\n/** @type {?} */\nRadioControlValueAccessor.prototype._renderer;\n/** @type {?} */\nRadioControlValueAccessor.prototype._elementRef;\n/** @type {?} */\nRadioControlValueAccessor.prototype._registry;\n/** @type {?} */\nRadioControlValueAccessor.prototype._injector;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Directive, ElementRef, Provider, Renderer2, forwardRef} from '@angular/core';\n\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from './control_value_accessor';\n\nexport const /** @type {?} */ RANGE_VALUE_ACCESSOR: Provider = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => RangeValueAccessor),\n  multi: true\n};\n/**\n * The accessor for writing a range value and listening to changes that is used by the\n * {\\@link NgModel}, {\\@link FormControlDirective}, and {\\@link FormControlName} directives.\n * \n *  ### Example\n *  ```\n *  <input type=\"range\" [(ngModel)]=\"age\" >\n *  ```\n */\nexport class RangeValueAccessor implements ControlValueAccessor {\n  onChange = (_: any) => {};\n  onTouched = () => {};\n/**\n * @param {?} _renderer\n * @param {?} _elementRef\n */\nconstructor(private _renderer: Renderer2,\nprivate _elementRef: ElementRef) {}\n/**\n * @param {?} value\n * @return {?}\n */\nwriteValue(value: any): void {\n    this._renderer.setProperty(this._elementRef.nativeElement, 'value', parseFloat(value));\n  }\n/**\n * @param {?} fn\n * @return {?}\n */\nregisterOnChange(fn: (_: number|null) => void): void {\n    this.onChange = (value) => { fn(value == '' ? null : parseFloat(value)); };\n  }\n/**\n * @param {?} fn\n * @return {?}\n */\nregisterOnTouched(fn: () => void): void { this.onTouched = fn; }\n/**\n * @param {?} isDisabled\n * @return {?}\n */\nsetDisabledState(isDisabled: boolean): void {\n    this._renderer.setProperty(this._elementRef.nativeElement, 'disabled', isDisabled);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector:\n      'input[type=range][formControlName],input[type=range][formControl],input[type=range][ngModel]',\n  host: {\n    '(change)': 'onChange($event.target.value)',\n    '(input)': 'onChange($event.target.value)',\n    '(blur)': 'onTouched()'\n  },\n  providers: [RANGE_VALUE_ACCESSOR]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Renderer2, },\n{type: ElementRef, },\n];\n}\n\nfunction RangeValueAccessor_tsickle_Closure_declarations() {\n/** @type {?} */\nRangeValueAccessor.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nRangeValueAccessor.ctorParameters;\n/** @type {?} */\nRangeValueAccessor.prototype.onChange;\n/** @type {?} */\nRangeValueAccessor.prototype.onTouched;\n/** @type {?} */\nRangeValueAccessor.prototype._renderer;\n/** @type {?} */\nRangeValueAccessor.prototype._elementRef;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Directive, ElementRef, Host, Input, OnDestroy, Optional, Provider, Renderer2, forwardRef, ɵlooseIdentical as looseIdentical} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from './control_value_accessor';\n\nexport const /** @type {?} */ SELECT_VALUE_ACCESSOR: Provider = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => SelectControlValueAccessor),\n  multi: true\n};\n/**\n * @param {?} id\n * @param {?} value\n * @return {?}\n */\nfunction _buildValueString(id: string | null, value: any): string {\n  if (id == null) return `${value}`;\n  if (value && typeof value === 'object') value = 'Object';\n  return `${id}: ${value}`.slice(0, 50);\n}\n/**\n * @param {?} valueString\n * @return {?}\n */\nfunction _extractId(valueString: string): string {\n  return valueString.split(':')[0];\n}\n/**\n * \\@whatItDoes Writes values and listens to changes on a select element.\n * \n * Used by {\\@link NgModel}, {\\@link FormControlDirective}, and {\\@link FormControlName}\n * to keep the view synced with the {\\@link FormControl} model.\n * \n * \\@howToUse \n * \n * If you have imported the {\\@link FormsModule} or the {\\@link ReactiveFormsModule}, this\n * value accessor will be active on any select control that has a form directive. You do\n * **not** need to add a special selector to activate it.\n * \n * ### How to use select controls with form directives\n * \n * To use a select in a template-driven form, simply add an `ngModel` and a `name`\n * attribute to the main `<select>` tag.\n * \n * If your option values are simple strings, you can bind to the normal `value` property\n * on the option.  If your option values happen to be objects (and you'd like to save the\n * selection in your form as an object), use `ngValue` instead:\n * \n * {\\@example forms/ts/selectControl/select_control_example.ts region='Component'}\n * \n * In reactive forms, you'll also want to add your form directive (`formControlName` or\n * `formControl`) on the main `<select>` tag. Like in the former example, you have the\n * choice of binding to the  `value` or `ngValue` property on the select's options.\n * \n * {\\@example forms/ts/reactiveSelectControl/reactive_select_control_example.ts region='Component'}\n * \n * ### Caveat: Option selection\n * \n * Angular uses object identity to select option. It's possible for the identities of items\n * to change while the data does not. This can happen, for example, if the items are produced\n * from an RPC to the server, and that RPC is re-run. Even if the data hasn't changed, the\n * second response will produce objects with different identities.\n * \n * To customize the default option comparison algorithm, `<select>` supports `compareWith` input.\n * `compareWith` takes a **function** which has two arguments: `option1` and `option2`.\n * If `compareWith` is given, Angular selects option by the return value of the function.\n * \n * #### Syntax\n * \n * ```\n * <select [compareWith]=\"compareFn\"  [(ngModel)]=\"selectedCountries\">\n *     <option *ngFor=\"let country of countries\" [ngValue]=\"country\">\n *         {{country.name}}\n *     </option>\n * </select>\n * \n * compareFn(c1: Country, c2: Country): boolean {\n *     return c1 && c2 ? c1.id === c2.id : c1 === c2;\n * }\n * ```\n * \n * Note: We listen to the 'change' event because 'input' events aren't fired\n * for selects in Firefox and IE:\n * https://bugzilla.mozilla.org/show_bug.cgi?id=1024350\n * https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/4660045/\n * \n * * **npm package**: `\\@angular/forms`\n * \n * \\@stable\n */\nexport class SelectControlValueAccessor implements ControlValueAccessor {\n  value: any;\n/**\n * \\@internal\n */\n_optionMap: Map<string, any> = new Map<string, any>();\n/**\n * \\@internal\n */\n_idCounter: number = 0;\n\n  onChange = (_: any) => {};\n  onTouched = () => {};\n/**\n * @param {?} fn\n * @return {?}\n */\nset compareWith(fn: (o1: any, o2: any) => boolean) {\n    if (typeof fn !== 'function') {\n      throw new Error(`compareWith must be a function, but received ${JSON.stringify(fn)}`);\n    }\n    this._compareWith = fn;\n  }\nprivate _compareWith: (o1: any, o2: any) => boolean = looseIdentical;\n/**\n * @param {?} _renderer\n * @param {?} _elementRef\n */\nconstructor(private _renderer: Renderer2,\nprivate _elementRef: ElementRef) {}\n/**\n * @param {?} value\n * @return {?}\n */\nwriteValue(value: any): void {\n    this.value = value;\n    const /** @type {?} */ id: string|null = this._getOptionId(value);\n    if (id == null) {\n      this._renderer.setProperty(this._elementRef.nativeElement, 'selectedIndex', -1);\n    }\n    const /** @type {?} */ valueString = _buildValueString(id, value);\n    this._renderer.setProperty(this._elementRef.nativeElement, 'value', valueString);\n  }\n/**\n * @param {?} fn\n * @return {?}\n */\nregisterOnChange(fn: (value: any) => any): void {\n    this.onChange = (valueString: string) => {\n      this.value = this._getOptionValue(valueString);\n      fn(this.value);\n    };\n  }\n/**\n * @param {?} fn\n * @return {?}\n */\nregisterOnTouched(fn: () => any): void { this.onTouched = fn; }\n/**\n * @param {?} isDisabled\n * @return {?}\n */\nsetDisabledState(isDisabled: boolean): void {\n    this._renderer.setProperty(this._elementRef.nativeElement, 'disabled', isDisabled);\n  }\n/**\n * \\@internal\n * @return {?}\n */\n_registerOption(): string { return (this._idCounter++).toString(); }\n/**\n * \\@internal\n * @param {?} value\n * @return {?}\n */\n_getOptionId(value: any): string|null {\n    for (const /** @type {?} */ id of Array.from(this._optionMap.keys())) {\n      if (this._compareWith(this._optionMap.get(id), value)) return id;\n    }\n    return null;\n  }\n/**\n * \\@internal\n * @param {?} valueString\n * @return {?}\n */\n_getOptionValue(valueString: string): any {\n    const /** @type {?} */ id: string = _extractId(valueString);\n    return this._optionMap.has(id) ? this._optionMap.get(id) : valueString;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector:\n      'select:not([multiple])[formControlName],select:not([multiple])[formControl],select:not([multiple])[ngModel]',\n  host: {'(change)': 'onChange($event.target.value)', '(blur)': 'onTouched()'},\n  providers: [SELECT_VALUE_ACCESSOR]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Renderer2, },\n{type: ElementRef, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'compareWith': [{ type: Input },],\n};\n}\n\nfunction SelectControlValueAccessor_tsickle_Closure_declarations() {\n/** @type {?} */\nSelectControlValueAccessor.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nSelectControlValueAccessor.ctorParameters;\n/** @type {?} */\nSelectControlValueAccessor.propDecorators;\n/** @type {?} */\nSelectControlValueAccessor.prototype.value;\n/**\n * \\@internal\n * @type {?}\n */\nSelectControlValueAccessor.prototype._optionMap;\n/**\n * \\@internal\n * @type {?}\n */\nSelectControlValueAccessor.prototype._idCounter;\n/** @type {?} */\nSelectControlValueAccessor.prototype.onChange;\n/** @type {?} */\nSelectControlValueAccessor.prototype.onTouched;\n/** @type {?} */\nSelectControlValueAccessor.prototype._compareWith;\n/** @type {?} */\nSelectControlValueAccessor.prototype._renderer;\n/** @type {?} */\nSelectControlValueAccessor.prototype._elementRef;\n}\n\n/**\n * \\@whatItDoes Marks `<option>` as dynamic, so Angular can be notified when options change.\n * \n * \\@howToUse \n * \n * See docs for {\\@link SelectControlValueAccessor} for usage examples.\n * \n * \\@stable\n */\nexport class NgSelectOption implements OnDestroy {\n  id: string;\n/**\n * @param {?} _element\n * @param {?} _renderer\n * @param {?} _select\n */\nconstructor(\nprivate _element: ElementRef,\nprivate _renderer: Renderer2,\nprivate _select: SelectControlValueAccessor) {\n    if (this._select) this.id = this._select._registerOption();\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nset ngValue(value: any) {\n    if (this._select == null) return;\n    this._select._optionMap.set(this.id, value);\n    this._setElementValue(_buildValueString(this.id, value));\n    this._select.writeValue(this._select.value);\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nset value(value: any) {\n    this._setElementValue(value);\n    if (this._select) this._select.writeValue(this._select.value);\n  }\n/**\n * \\@internal\n * @param {?} value\n * @return {?}\n */\n_setElementValue(value: string): void {\n    this._renderer.setProperty(this._element.nativeElement, 'value', value);\n  }\n/**\n * @return {?}\n */\nngOnDestroy(): void {\n    if (this._select) {\n      this._select._optionMap.delete(this.id);\n      this._select.writeValue(this._select.value);\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{selector: 'option'}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: Renderer2, },\n{type: SelectControlValueAccessor, decorators: [{ type: Optional }, { type: Host }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'ngValue': [{ type: Input, args: ['ngValue', ] },],\n'value': [{ type: Input, args: ['value', ] },],\n};\n}\n\nfunction NgSelectOption_tsickle_Closure_declarations() {\n/** @type {?} */\nNgSelectOption.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nNgSelectOption.ctorParameters;\n/** @type {?} */\nNgSelectOption.propDecorators;\n/** @type {?} */\nNgSelectOption.prototype.id;\n/** @type {?} */\nNgSelectOption.prototype._element;\n/** @type {?} */\nNgSelectOption.prototype._renderer;\n/** @type {?} */\nNgSelectOption.prototype._select;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Directive, ElementRef, Host, Input, OnDestroy, Optional, Provider, Renderer2, forwardRef, ɵlooseIdentical as looseIdentical} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from './control_value_accessor';\n\nexport const /** @type {?} */ SELECT_MULTIPLE_VALUE_ACCESSOR: Provider = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => SelectMultipleControlValueAccessor),\n  multi: true\n};\n/**\n * @param {?} id\n * @param {?} value\n * @return {?}\n */\nfunction _buildValueString(id: string, value: any): string {\n  if (id == null) return `${value}`;\n  if (typeof value === 'string') value = `'${value}'`;\n  if (value && typeof value === 'object') value = 'Object';\n  return `${id}: ${value}`.slice(0, 50);\n}\n/**\n * @param {?} valueString\n * @return {?}\n */\nfunction _extractId(valueString: string): string {\n  return valueString.split(':')[0];\n}\n\n/** Mock interface for HTML Options */\ninterface HTMLOption {\n  value: string;\n  selected: boolean;\n}\n/**\n * Mock interface for HTMLCollection\n * @abstract\n */\nabstract class HTMLCollection {\n  length: number;\n/**\n * @abstract\n * @param {?} _\n * @return {?}\n */\nitem(_: number) {}\n}\n\nfunction HTMLCollection_tsickle_Closure_declarations() {\n/** @type {?} */\nHTMLCollection.prototype.length;\n}\n\n/**\n * The accessor for writing a value and listening to changes on a select element.\n * \n *  ### Caveat: Options selection\n * \n * Angular uses object identity to select options. It's possible for the identities of items\n * to change while the data does not. This can happen, for example, if the items are produced\n * from an RPC to the server, and that RPC is re-run. Even if the data hasn't changed, the\n * second response will produce objects with different identities.\n * \n * To customize the default option comparison algorithm, `<select multiple>` supports `compareWith`\n * input. `compareWith` takes a **function** which has two arguments: `option1` and `option2`.\n * If `compareWith` is given, Angular selects options by the return value of the function.\n * \n * #### Syntax\n * \n * ```\n * <select multiple [compareWith]=\"compareFn\"  [(ngModel)]=\"selectedCountries\">\n *     <option *ngFor=\"let country of countries\" [ngValue]=\"country\">\n *         {{country.name}}\n *     </option>\n * </select>\n * \n * compareFn(c1: Country, c2: Country): boolean {\n *     return c1 && c2 ? c1.id === c2.id : c1 === c2;\n * }\n * ```\n * \n * \\@stable\n */\nexport class SelectMultipleControlValueAccessor implements ControlValueAccessor {\n  value: any;\n/**\n * \\@internal\n */\n_optionMap: Map<string, NgSelectMultipleOption> = new Map<string, NgSelectMultipleOption>();\n/**\n * \\@internal\n */\n_idCounter: number = 0;\n\n  onChange = (_: any) => {};\n  onTouched = () => {};\n/**\n * @param {?} fn\n * @return {?}\n */\nset compareWith(fn: (o1: any, o2: any) => boolean) {\n    if (typeof fn !== 'function') {\n      throw new Error(`compareWith must be a function, but received ${JSON.stringify(fn)}`);\n    }\n    this._compareWith = fn;\n  }\nprivate _compareWith: (o1: any, o2: any) => boolean = looseIdentical;\n/**\n * @param {?} _renderer\n * @param {?} _elementRef\n */\nconstructor(private _renderer: Renderer2,\nprivate _elementRef: ElementRef) {}\n/**\n * @param {?} value\n * @return {?}\n */\nwriteValue(value: any): void {\n    this.value = value;\n    let /** @type {?} */ optionSelectedStateSetter: (opt: NgSelectMultipleOption, o: any) => void;\n    if (Array.isArray(value)) {\n      // convert values to ids\n      const /** @type {?} */ ids = value.map((v) => this._getOptionId(v));\n      optionSelectedStateSetter = (opt, o) => { opt._setSelected(ids.indexOf(o.toString()) > -1); };\n    } else {\n      optionSelectedStateSetter = (opt, o) => { opt._setSelected(false); };\n    }\n    this._optionMap.forEach(optionSelectedStateSetter);\n  }\n/**\n * @param {?} fn\n * @return {?}\n */\nregisterOnChange(fn: (value: any) => any): void {\n    this.onChange = (_: any) => {\n      const /** @type {?} */ selected: Array<any> = [];\n      if (_.hasOwnProperty('selectedOptions')) {\n        const /** @type {?} */ options: HTMLCollection = _.selectedOptions;\n        for (let /** @type {?} */ i = 0; i < options.length; i++) {\n          const /** @type {?} */ opt: any = options.item(i);\n          const /** @type {?} */ val: any = this._getOptionValue(opt.value);\n          selected.push(val);\n        }\n      }\n      // Degrade on IE\n      else {\n        const /** @type {?} */ options: HTMLCollection = /** @type {?} */(( <HTMLCollection>_.options));\n        for (let /** @type {?} */ i = 0; i < options.length; i++) {\n          const /** @type {?} */ opt: HTMLOption = options.item(i);\n          if (opt.selected) {\n            const /** @type {?} */ val: any = this._getOptionValue(opt.value);\n            selected.push(val);\n          }\n        }\n      }\n      this.value = selected;\n      fn(selected);\n    };\n  }\n/**\n * @param {?} fn\n * @return {?}\n */\nregisterOnTouched(fn: () => any): void { this.onTouched = fn; }\n/**\n * @param {?} isDisabled\n * @return {?}\n */\nsetDisabledState(isDisabled: boolean): void {\n    this._renderer.setProperty(this._elementRef.nativeElement, 'disabled', isDisabled);\n  }\n/**\n * \\@internal\n * @param {?} value\n * @return {?}\n */\n_registerOption(value: NgSelectMultipleOption): string {\n    const /** @type {?} */ id: string = (this._idCounter++).toString();\n    this._optionMap.set(id, value);\n    return id;\n  }\n/**\n * \\@internal\n * @param {?} value\n * @return {?}\n */\n_getOptionId(value: any): string|null {\n    for (const /** @type {?} */ id of Array.from(this._optionMap.keys())) {\n      if (this._compareWith( /** @type {?} */((this._optionMap.get(id)))._value, value)) return id;\n    }\n    return null;\n  }\n/**\n * \\@internal\n * @param {?} valueString\n * @return {?}\n */\n_getOptionValue(valueString: string): any {\n    const /** @type {?} */ id: string = _extractId(valueString);\n    return this._optionMap.has(id) ? /** @type {?} */(( this._optionMap.get(id)))._value : valueString;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector:\n      'select[multiple][formControlName],select[multiple][formControl],select[multiple][ngModel]',\n  host: {'(change)': 'onChange($event.target)', '(blur)': 'onTouched()'},\n  providers: [SELECT_MULTIPLE_VALUE_ACCESSOR]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Renderer2, },\n{type: ElementRef, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'compareWith': [{ type: Input },],\n};\n}\n\nfunction SelectMultipleControlValueAccessor_tsickle_Closure_declarations() {\n/** @type {?} */\nSelectMultipleControlValueAccessor.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nSelectMultipleControlValueAccessor.ctorParameters;\n/** @type {?} */\nSelectMultipleControlValueAccessor.propDecorators;\n/** @type {?} */\nSelectMultipleControlValueAccessor.prototype.value;\n/**\n * \\@internal\n * @type {?}\n */\nSelectMultipleControlValueAccessor.prototype._optionMap;\n/**\n * \\@internal\n * @type {?}\n */\nSelectMultipleControlValueAccessor.prototype._idCounter;\n/** @type {?} */\nSelectMultipleControlValueAccessor.prototype.onChange;\n/** @type {?} */\nSelectMultipleControlValueAccessor.prototype.onTouched;\n/** @type {?} */\nSelectMultipleControlValueAccessor.prototype._compareWith;\n/** @type {?} */\nSelectMultipleControlValueAccessor.prototype._renderer;\n/** @type {?} */\nSelectMultipleControlValueAccessor.prototype._elementRef;\n}\n\n/**\n * Marks `<option>` as dynamic, so Angular can be notified when options change.\n * \n * ### Example\n * \n * ```\n * <select multiple name=\"city\" ngModel>\n *   <option *ngFor=\"let c of cities\" [value]=\"c\"></option>\n * </select>\n * ```\n */\nexport class NgSelectMultipleOption implements OnDestroy {\n  id: string;\n/**\n * \\@internal\n */\n_value: any;\n/**\n * @param {?} _element\n * @param {?} _renderer\n * @param {?} _select\n */\nconstructor(\nprivate _element: ElementRef,\nprivate _renderer: Renderer2,\nprivate _select: SelectMultipleControlValueAccessor) {\n    if (this._select) {\n      this.id = this._select._registerOption(this);\n    }\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nset ngValue(value: any) {\n    if (this._select == null) return;\n    this._value = value;\n    this._setElementValue(_buildValueString(this.id, value));\n    this._select.writeValue(this._select.value);\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nset value(value: any) {\n    if (this._select) {\n      this._value = value;\n      this._setElementValue(_buildValueString(this.id, value));\n      this._select.writeValue(this._select.value);\n    } else {\n      this._setElementValue(value);\n    }\n  }\n/**\n * \\@internal\n * @param {?} value\n * @return {?}\n */\n_setElementValue(value: string): void {\n    this._renderer.setProperty(this._element.nativeElement, 'value', value);\n  }\n/**\n * \\@internal\n * @param {?} selected\n * @return {?}\n */\n_setSelected(selected: boolean) {\n    this._renderer.setProperty(this._element.nativeElement, 'selected', selected);\n  }\n/**\n * @return {?}\n */\nngOnDestroy(): void {\n    if (this._select) {\n      this._select._optionMap.delete(this.id);\n      this._select.writeValue(this._select.value);\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{selector: 'option'}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: Renderer2, },\n{type: SelectMultipleControlValueAccessor, decorators: [{ type: Optional }, { type: Host }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'ngValue': [{ type: Input, args: ['ngValue', ] },],\n'value': [{ type: Input, args: ['value', ] },],\n};\n}\n\nfunction NgSelectMultipleOption_tsickle_Closure_declarations() {\n/** @type {?} */\nNgSelectMultipleOption.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nNgSelectMultipleOption.ctorParameters;\n/** @type {?} */\nNgSelectMultipleOption.propDecorators;\n/** @type {?} */\nNgSelectMultipleOption.prototype.id;\n/**\n * \\@internal\n * @type {?}\n */\nNgSelectMultipleOption.prototype._value;\n/** @type {?} */\nNgSelectMultipleOption.prototype._element;\n/** @type {?} */\nNgSelectMultipleOption.prototype._renderer;\n/** @type {?} */\nNgSelectMultipleOption.prototype._select;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {ɵlooseIdentical as looseIdentical} from '@angular/core';\nimport {FormArray, FormControl, FormGroup} from '../model';\nimport {Validators} from '../validators';\nimport {AbstractControlDirective} from './abstract_control_directive';\nimport {AbstractFormGroupDirective} from './abstract_form_group_directive';\nimport {CheckboxControlValueAccessor} from './checkbox_value_accessor';\nimport {ControlContainer} from './control_container';\nimport {ControlValueAccessor} from './control_value_accessor';\nimport {DefaultValueAccessor} from './default_value_accessor';\nimport {NgControl} from './ng_control';\nimport {normalizeAsyncValidator, normalizeValidator} from './normalize_validator';\nimport {NumberValueAccessor} from './number_value_accessor';\nimport {RadioControlValueAccessor} from './radio_control_value_accessor';\nimport {RangeValueAccessor} from './range_value_accessor';\nimport {FormArrayName} from './reactive_directives/form_group_name';\nimport {SelectControlValueAccessor} from './select_control_value_accessor';\nimport {SelectMultipleControlValueAccessor} from './select_multiple_control_value_accessor';\nimport {AsyncValidator, AsyncValidatorFn, Validator, ValidatorFn} from './validators';\n/**\n * @param {?} name\n * @param {?} parent\n * @return {?}\n */\nexport function controlPath(name: string, parent: ControlContainer): string[] {\n  return [... /** @type {?} */((parent.path)), name];\n}\n/**\n * @param {?} control\n * @param {?} dir\n * @return {?}\n */\nexport function setUpControl(control: FormControl, dir: NgControl): void {\n  if (!control) _throwError(dir, 'Cannot find control with');\n  if (!dir.valueAccessor) _throwError(dir, 'No value accessor for form control with');\n\n  control.validator = Validators.compose([ /** @type {?} */((control.validator)), dir.validator]);\n  control.asyncValidator = Validators.composeAsync([ /** @type {?} */((control.asyncValidator)), dir.asyncValidator]); /** @type {?} */((\n  dir.valueAccessor)).writeValue(control.value); /** @type {?} */((\n\n  // view -> model\n  dir.valueAccessor)).registerOnChange((newValue: any) => {\n    dir.viewToModelUpdate(newValue);\n    control.markAsDirty();\n    control.setValue(newValue, {emitModelToViewChange: false});\n  }); /** @type {?} */((\n\n  // touched\n  dir.valueAccessor)).registerOnTouched(() => control.markAsTouched());\n\n  control.registerOnChange((newValue: any, emitModelEvent: boolean) => { /** @type {?} */((\n    // control -> view\n    dir.valueAccessor)).writeValue(newValue);\n\n    // control -> ngModel\n    if (emitModelEvent) dir.viewToModelUpdate(newValue);\n  });\n\n  if ( /** @type {?} */((dir.valueAccessor)).setDisabledState) {\n    control.registerOnDisabledChange(\n        (isDisabled: boolean) => { /** @type {?} */(( /** @type {?} */(( dir.valueAccessor)).setDisabledState))(isDisabled); });\n  }\n\n  // re-run validation when validator binding changes, e.g. minlength=3 -> minlength=4\n  dir._rawValidators.forEach((validator: Validator | ValidatorFn) => {\n    if (( /** @type {?} */((<Validator>validator))).registerOnValidatorChange) /** @type {?} */((\n      ( /** @type {?} */((<Validator>validator))).registerOnValidatorChange))(() => control.updateValueAndValidity());\n  });\n\n  dir._rawAsyncValidators.forEach((validator: AsyncValidator | AsyncValidatorFn) => {\n    if (( /** @type {?} */((<Validator>validator))).registerOnValidatorChange) /** @type {?} */((\n      ( /** @type {?} */((<Validator>validator))).registerOnValidatorChange))(() => control.updateValueAndValidity());\n  });\n}\n/**\n * @param {?} control\n * @param {?} dir\n * @return {?}\n */\nexport function cleanUpControl(control: FormControl, dir: NgControl) { /** @type {?} */((\n  dir.valueAccessor)).registerOnChange(() => _noControlError(dir)); /** @type {?} */((\n  dir.valueAccessor)).registerOnTouched(() => _noControlError(dir));\n\n  dir._rawValidators.forEach((validator: any) => {\n    if (validator.registerOnValidatorChange) {\n      validator.registerOnValidatorChange(null);\n    }\n  });\n\n  dir._rawAsyncValidators.forEach((validator: any) => {\n    if (validator.registerOnValidatorChange) {\n      validator.registerOnValidatorChange(null);\n    }\n  });\n\n  if (control) control._clearChangeFns();\n}\n/**\n * @param {?} control\n * @param {?} dir\n * @return {?}\n */\nexport function setUpFormContainer(\n    control: FormGroup | FormArray, dir: AbstractFormGroupDirective | FormArrayName) {\n  if (control == null) _throwError(dir, 'Cannot find control with');\n  control.validator = Validators.compose([control.validator, dir.validator]);\n  control.asyncValidator = Validators.composeAsync([control.asyncValidator, dir.asyncValidator]);\n}\n/**\n * @param {?} dir\n * @return {?}\n */\nfunction _noControlError(dir: NgControl) {\n  return _throwError(dir, 'There is no FormControl instance attached to form control element with');\n}\n/**\n * @param {?} dir\n * @param {?} message\n * @return {?}\n */\nfunction _throwError(dir: AbstractControlDirective, message: string): void {\n  let /** @type {?} */ messageEnd: string;\n  if ( /** @type {?} */((dir.path)).length > 1) {\n    messageEnd = `path: '${ /** @type {?} */((dir.path)).join(' -> ')}'`;\n  } else if ( /** @type {?} */((dir.path))[0]) {\n    messageEnd = `name: '${dir.path}'`;\n  } else {\n    messageEnd = 'unspecified name attribute';\n  }\n  throw new Error(`${message} ${messageEnd}`);\n}\n/**\n * @param {?} validators\n * @return {?}\n */\nexport function composeValidators(validators: Array<Validator|Function>): ValidatorFn|null {\n  return validators != null ? Validators.compose(validators.map(normalizeValidator)) : null;\n}\n/**\n * @param {?} validators\n * @return {?}\n */\nexport function composeAsyncValidators(validators: Array<Validator|Function>): AsyncValidatorFn|\n    null {\n  return validators != null ? Validators.composeAsync(validators.map(normalizeAsyncValidator)) :\n                              null;\n}\n/**\n * @param {?} changes\n * @param {?} viewModel\n * @return {?}\n */\nexport function isPropertyUpdated(changes: {[key: string]: any}, viewModel: any): boolean {\n  if (!changes.hasOwnProperty('model')) return false;\n  const /** @type {?} */ change = changes['model'];\n\n  if (change.isFirstChange()) return true;\n  return !looseIdentical(viewModel, change.currentValue);\n}\n\nconst /** @type {?} */ BUILTIN_ACCESSORS = [\n  CheckboxControlValueAccessor,\n  RangeValueAccessor,\n  NumberValueAccessor,\n  SelectControlValueAccessor,\n  SelectMultipleControlValueAccessor,\n  RadioControlValueAccessor,\n];\n/**\n * @param {?} valueAccessor\n * @return {?}\n */\nexport function isBuiltInAccessor(valueAccessor: ControlValueAccessor): boolean {\n  return BUILTIN_ACCESSORS.some(a => valueAccessor.constructor === a);\n}\n/**\n * @param {?} dir\n * @param {?} valueAccessors\n * @return {?}\n */\nexport function selectValueAccessor(\n    dir: NgControl, valueAccessors: ControlValueAccessor[]): ControlValueAccessor|null {\n  if (!valueAccessors) return null;\n\n  let /** @type {?} */ defaultAccessor: ControlValueAccessor|undefined = undefined;\n  let /** @type {?} */ builtinAccessor: ControlValueAccessor|undefined = undefined;\n  let /** @type {?} */ customAccessor: ControlValueAccessor|undefined = undefined;\n  valueAccessors.forEach((v: ControlValueAccessor) => {\n    if (v.constructor === DefaultValueAccessor) {\n      defaultAccessor = v;\n\n    } else if (isBuiltInAccessor(v)) {\n      if (builtinAccessor)\n        _throwError(dir, 'More than one built-in value accessor matches form control with');\n      builtinAccessor = v;\n\n    } else {\n      if (customAccessor)\n        _throwError(dir, 'More than one custom value accessor matches form control with');\n      customAccessor = v;\n    }\n  });\n\n  if (customAccessor) return customAccessor;\n  if (builtinAccessor) return builtinAccessor;\n  if (defaultAccessor) return defaultAccessor;\n\n  _throwError(dir, 'No valid value accessor for form control with');\n  return null;\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {OnDestroy, OnInit} from '@angular/core';\n\nimport {FormGroup} from '../model';\n\nimport {ControlContainer} from './control_container';\nimport {Form} from './form_interface';\nimport {composeAsyncValidators, composeValidators, controlPath} from './shared';\nimport {AsyncValidatorFn, ValidatorFn} from './validators';\n/**\n * This is a base class for code shared between {\\@link NgModelGroup} and {\\@link FormGroupName}.\n * \n * \\@stable\n */\nexport class AbstractFormGroupDirective extends ControlContainer implements OnInit, OnDestroy {\n/**\n * \\@internal\n */\n_parent: ControlContainer;\n/**\n * \\@internal\n */\n_validators: any[];\n/**\n * \\@internal\n */\n_asyncValidators: any[];\n/**\n * @return {?}\n */\nngOnInit(): void {\n    this._checkParentType(); /** @type {?} */((\n    this.formDirective)).addFormGroup(this);\n  }\n/**\n * @return {?}\n */\nngOnDestroy(): void {\n    if (this.formDirective) {\n      this.formDirective.removeFormGroup(this);\n    }\n  }\n/**\n * Get the {\\@link FormGroup} backing this binding.\n * @return {?}\n */\nget control(): FormGroup { return /** @type {?} */(( this.formDirective)).getFormGroup(this); }\n/**\n * Get the path to this control group.\n * @return {?}\n */\nget path(): string[] { return controlPath(this.name, this._parent); }\n/**\n * Get the {\\@link Form} to which this group belongs.\n * @return {?}\n */\nget formDirective(): Form|null { return this._parent ? this._parent.formDirective : null; }\n/**\n * @return {?}\n */\nget validator(): ValidatorFn|null { return composeValidators(this._validators); }\n/**\n * @return {?}\n */\nget asyncValidator(): AsyncValidatorFn|null {\n    return composeAsyncValidators(this._asyncValidators);\n  }\n/**\n * \\@internal\n * @return {?}\n */\n_checkParentType(): void {}\n}\n\nfunction AbstractFormGroupDirective_tsickle_Closure_declarations() {\n/**\n * \\@internal\n * @type {?}\n */\nAbstractFormGroupDirective.prototype._parent;\n/**\n * \\@internal\n * @type {?}\n */\nAbstractFormGroupDirective.prototype._validators;\n/**\n * \\@internal\n * @type {?}\n */\nAbstractFormGroupDirective.prototype._asyncValidators;\n}\n\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Directive, Self} from '@angular/core';\n\nimport {AbstractControlDirective} from './abstract_control_directive';\nimport {ControlContainer} from './control_container';\nimport {NgControl} from './ng_control';\nexport class AbstractControlStatus {\nprivate _cd: AbstractControlDirective;\n/**\n * @param {?} cd\n */\nconstructor(cd: AbstractControlDirective) { this._cd = cd; }\n/**\n * @return {?}\n */\nget ngClassUntouched(): boolean { return this._cd.control ? this._cd.control.untouched : false; }\n/**\n * @return {?}\n */\nget ngClassTouched(): boolean { return this._cd.control ? this._cd.control.touched : false; }\n/**\n * @return {?}\n */\nget ngClassPristine(): boolean { return this._cd.control ? this._cd.control.pristine : false; }\n/**\n * @return {?}\n */\nget ngClassDirty(): boolean { return this._cd.control ? this._cd.control.dirty : false; }\n/**\n * @return {?}\n */\nget ngClassValid(): boolean { return this._cd.control ? this._cd.control.valid : false; }\n/**\n * @return {?}\n */\nget ngClassInvalid(): boolean { return this._cd.control ? this._cd.control.invalid : false; }\n/**\n * @return {?}\n */\nget ngClassPending(): boolean { return this._cd.control ? this._cd.control.pending : false; }\n}\n\nfunction AbstractControlStatus_tsickle_Closure_declarations() {\n/** @type {?} */\nAbstractControlStatus.prototype._cd;\n}\n\n\nexport const /** @type {?} */ ngControlStatusHost = {\n  '[class.ng-untouched]': 'ngClassUntouched',\n  '[class.ng-touched]': 'ngClassTouched',\n  '[class.ng-pristine]': 'ngClassPristine',\n  '[class.ng-dirty]': 'ngClassDirty',\n  '[class.ng-valid]': 'ngClassValid',\n  '[class.ng-invalid]': 'ngClassInvalid',\n  '[class.ng-pending]': 'ngClassPending',\n};\n/**\n * Directive automatically applied to Angular form controls that sets CSS classes\n * based on control status. The following classes are applied as the properties\n * become true:\n * \n * * ng-valid\n * * ng-invalid\n * * ng-pending\n * * ng-pristine\n * * ng-dirty\n * * ng-untouched\n * * ng-touched\n * \n * \\@stable\n */\nexport class NgControlStatus extends AbstractControlStatus {\n/**\n * @param {?} cd\n */\nconstructor( cd: NgControl) { super(cd); }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{selector: '[formControlName],[ngModel],[formControl]', host: ngControlStatusHost}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: NgControl, decorators: [{ type: Self }, ]},\n];\n}\n\nfunction NgControlStatus_tsickle_Closure_declarations() {\n/** @type {?} */\nNgControlStatus.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nNgControlStatus.ctorParameters;\n}\n\n/**\n * Directive automatically applied to Angular form groups that sets CSS classes\n * based on control status (valid/invalid/dirty/etc).\n * \n * \\@stable\n */\nexport class NgControlStatusGroup extends AbstractControlStatus {\n/**\n * @param {?} cd\n */\nconstructor( cd: ControlContainer) { super(cd); }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector:\n      '[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]',\n  host: ngControlStatusHost\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ControlContainer, decorators: [{ type: Self }, ]},\n];\n}\n\nfunction NgControlStatusGroup_tsickle_Closure_declarations() {\n/** @type {?} */\nNgControlStatusGroup.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nNgControlStatusGroup.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {EventEmitter} from '@angular/core';\nimport {Observable} from 'rxjs/Observable';\nimport {composeAsyncValidators, composeValidators} from './directives/shared';\nimport {AsyncValidatorFn, ValidationErrors, ValidatorFn} from './directives/validators';\nimport {toObservable} from './validators';\n/**\n * Indicates that a FormControl is valid, i.e. that no errors exist in the input value.\n */\nexport const VALID = 'VALID';\n/**\n * Indicates that a FormControl is invalid, i.e. that an error exists in the input value.\n */\nexport const INVALID = 'INVALID';\n/**\n * Indicates that a FormControl is pending, i.e. that async validation is occurring and\n * errors are not yet available for the input value.\n */\nexport const PENDING = 'PENDING';\n/**\n * Indicates that a FormControl is disabled, i.e. that the control is exempt from ancestor\n * calculations of validity or value.\n */\nexport const DISABLED = 'DISABLED';\n/**\n * @param {?} control\n * @param {?} path\n * @param {?} delimiter\n * @return {?}\n */\nfunction _find(control: AbstractControl, path: Array<string|number>| string, delimiter: string) {\n  if (path == null) return null;\n\n  if (!(path instanceof Array)) {\n    path = ( /** @type {?} */((<string>path))).split(delimiter);\n  }\n  if (path instanceof Array && (path.length === 0)) return null;\n\n  return ( /** @type {?} */((<Array<string|number>>path))).reduce((v: AbstractControl, name) => {\n    if (v instanceof FormGroup) {\n      return v.controls[name] || null;\n    }\n\n    if (v instanceof FormArray) {\n      return v.at( /** @type {?} */((<number>name))) || null;\n    }\n\n    return null;\n  }, control);\n}\n/**\n * @param {?=} validator\n * @return {?}\n */\nfunction coerceToValidator(validator?: ValidatorFn | ValidatorFn[] | null): ValidatorFn|null {\n  return Array.isArray(validator) ? composeValidators(validator) : validator || null;\n}\n/**\n * @param {?=} asyncValidator\n * @return {?}\n */\nfunction coerceToAsyncValidator(asyncValidator?: AsyncValidatorFn | AsyncValidatorFn[] | null):\n    AsyncValidatorFn|null {\n  return Array.isArray(asyncValidator) ? composeAsyncValidators(asyncValidator) :\n                                         asyncValidator || null;\n}\n/**\n * \\@whatItDoes This is the base class for {\\@link FormControl}, {\\@link FormGroup}, and\n * {\\@link FormArray}.\n * \n * It provides some of the shared behavior that all controls and groups of controls have, like\n * running validators, calculating status, and resetting state. It also defines the properties\n * that are shared between all sub-classes, like `value`, `valid`, and `dirty`. It shouldn't be\n * instantiated directly.\n * \n * \\@stable\n * @abstract\n */\nexport abstract class AbstractControl {\n/**\n * \\@internal\n */\n_value: any;\n/**\n * \\@internal\n */\n_onCollectionChange = () => {};\nprivate _valueChanges: EventEmitter<any>;\nprivate _statusChanges: EventEmitter<any>;\nprivate _status: string;\nprivate _errors: ValidationErrors|null;\nprivate _pristine: boolean = true;\nprivate _touched: boolean = false;\nprivate _parent: FormGroup|FormArray;\nprivate _asyncValidationSubscription: any;\n/**\n * @param {?} validator\n * @param {?} asyncValidator\n */\nconstructor(public validator: ValidatorFn|null,\npublic asyncValidator: AsyncValidatorFn|null) {}\n/**\n * The value of the control.\n * @return {?}\n */\nget value(): any { return this._value; }\n/**\n * The parent control.\n * @return {?}\n */\nget parent(): FormGroup|FormArray { return this._parent; }\n/**\n * The validation status of the control. There are four possible\n * validation statuses:\n * \n * * **VALID**:  control has passed all validation checks\n * * **INVALID**: control has failed at least one validation check\n * * **PENDING**: control is in the midst of conducting a validation check\n * * **DISABLED**: control is exempt from validation checks\n * \n * These statuses are mutually exclusive, so a control cannot be\n * both valid AND invalid or invalid AND disabled.\n * @return {?}\n */\nget status(): string { return this._status; }\n/**\n * A control is `valid` when its `status === VALID`.\n * \n * In order to have this status, the control must have passed all its\n * validation checks.\n * @return {?}\n */\nget valid(): boolean { return this._status === VALID; }\n/**\n * A control is `invalid` when its `status === INVALID`.\n * \n * In order to have this status, the control must have failed\n * at least one of its validation checks.\n * @return {?}\n */\nget invalid(): boolean { return this._status === INVALID; }\n/**\n * A control is `pending` when its `status === PENDING`.\n * \n * In order to have this status, the control must be in the\n * middle of conducting a validation check.\n * @return {?}\n */\nget pending(): boolean { return this._status == PENDING; }\n/**\n * A control is `disabled` when its `status === DISABLED`.\n * \n * Disabled controls are exempt from validation checks and\n * are not included in the aggregate value of their ancestor\n * controls.\n * @return {?}\n */\nget disabled(): boolean { return this._status === DISABLED; }\n/**\n * A control is `enabled` as long as its `status !== DISABLED`.\n * \n * In other words, it has a status of `VALID`, `INVALID`, or\n * `PENDING`.\n * @return {?}\n */\nget enabled(): boolean { return this._status !== DISABLED; }\n/**\n * Returns any errors generated by failing validation. If there\n * are no errors, it will return null.\n * @return {?}\n */\nget errors(): ValidationErrors|null { return this._errors; }\n/**\n * A control is `pristine` if the user has not yet changed\n * the value in the UI.\n * \n * Note that programmatic changes to a control's value will\n * *not* mark it dirty.\n * @return {?}\n */\nget pristine(): boolean { return this._pristine; }\n/**\n * A control is `dirty` if the user has changed the value\n * in the UI.\n * \n * Note that programmatic changes to a control's value will\n * *not* mark it dirty.\n * @return {?}\n */\nget dirty(): boolean { return !this.pristine; }\n/**\n * A control is marked `touched` once the user has triggered\n * a `blur` event on it.\n * @return {?}\n */\nget touched(): boolean { return this._touched; }\n/**\n * A control is `untouched` if the user has not yet triggered\n * a `blur` event on it.\n * @return {?}\n */\nget untouched(): boolean { return !this._touched; }\n/**\n * Emits an event every time the value of the control changes, in\n * the UI or programmatically.\n * @return {?}\n */\nget valueChanges(): Observable<any> { return this._valueChanges; }\n/**\n * Emits an event every time the validation status of the control\n * is re-calculated.\n * @return {?}\n */\nget statusChanges(): Observable<any> { return this._statusChanges; }\n/**\n * Sets the synchronous validators that are active on this control.  Calling\n * this will overwrite any existing sync validators.\n * @param {?} newValidator\n * @return {?}\n */\nsetValidators(newValidator: ValidatorFn|ValidatorFn[]|null): void {\n    this.validator = coerceToValidator(newValidator);\n  }\n/**\n * Sets the async validators that are active on this control. Calling this\n * will overwrite any existing async validators.\n * @param {?} newValidator\n * @return {?}\n */\nsetAsyncValidators(newValidator: AsyncValidatorFn|AsyncValidatorFn[]): void {\n    this.asyncValidator = coerceToAsyncValidator(newValidator);\n  }\n/**\n * Empties out the sync validator list.\n * @return {?}\n */\nclearValidators(): void { this.validator = null; }\n/**\n * Empties out the async validator list.\n * @return {?}\n */\nclearAsyncValidators(): void { this.asyncValidator = null; }\n/**\n * Marks the control as `touched`.\n * \n * This will also mark all direct ancestors as `touched` to maintain\n * the model.\n * @param {?=} opts\n * @return {?}\n */\nmarkAsTouched(opts: {onlySelf?: boolean} = {}): void {\n    this._touched = true;\n\n    if (this._parent && !opts.onlySelf) {\n      this._parent.markAsTouched(opts);\n    }\n  }\n/**\n * Marks the control as `untouched`.\n * \n * If the control has any children, it will also mark all children as `untouched`\n * to maintain the model, and re-calculate the `touched` status of all parent\n * controls.\n * @param {?=} opts\n * @return {?}\n */\nmarkAsUntouched(opts: {onlySelf?: boolean} = {}): void {\n    this._touched = false;\n\n    this._forEachChild(\n        (control: AbstractControl) => { control.markAsUntouched({onlySelf: true}); });\n\n    if (this._parent && !opts.onlySelf) {\n      this._parent._updateTouched(opts);\n    }\n  }\n/**\n * Marks the control as `dirty`.\n * \n * This will also mark all direct ancestors as `dirty` to maintain\n * the model.\n * @param {?=} opts\n * @return {?}\n */\nmarkAsDirty(opts: {onlySelf?: boolean} = {}): void {\n    this._pristine = false;\n\n    if (this._parent && !opts.onlySelf) {\n      this._parent.markAsDirty(opts);\n    }\n  }\n/**\n * Marks the control as `pristine`.\n * \n * If the control has any children, it will also mark all children as `pristine`\n * to maintain the model, and re-calculate the `pristine` status of all parent\n * controls.\n * @param {?=} opts\n * @return {?}\n */\nmarkAsPristine(opts: {onlySelf?: boolean} = {}): void {\n    this._pristine = true;\n\n    this._forEachChild((control: AbstractControl) => { control.markAsPristine({onlySelf: true}); });\n\n    if (this._parent && !opts.onlySelf) {\n      this._parent._updatePristine(opts);\n    }\n  }\n/**\n * Marks the control as `pending`.\n * @param {?=} opts\n * @return {?}\n */\nmarkAsPending(opts: {onlySelf?: boolean} = {}): void {\n    this._status = PENDING;\n\n    if (this._parent && !opts.onlySelf) {\n      this._parent.markAsPending(opts);\n    }\n  }\n/**\n * Disables the control. This means the control will be exempt from validation checks and\n * excluded from the aggregate value of any parent. Its status is `DISABLED`.\n * \n * If the control has children, all children will be disabled to maintain the model.\n * @param {?=} opts\n * @return {?}\n */\ndisable(opts: {onlySelf?: boolean, emitEvent?: boolean} = {}): void {\n    this._status = DISABLED;\n    this._errors = null;\n    this._forEachChild((control: AbstractControl) => { control.disable({onlySelf: true}); });\n    this._updateValue();\n\n    if (opts.emitEvent !== false) {\n      this._valueChanges.emit(this._value);\n      this._statusChanges.emit(this._status);\n    }\n\n    this._updateAncestors(!!opts.onlySelf);\n    this._onDisabledChange.forEach((changeFn) => changeFn(true));\n  }\n/**\n * Enables the control. This means the control will be included in validation checks and\n * the aggregate value of its parent. Its status is re-calculated based on its value and\n * its validators.\n * \n * If the control has children, all children will be enabled.\n * @param {?=} opts\n * @return {?}\n */\nenable(opts: {onlySelf?: boolean, emitEvent?: boolean} = {}): void {\n    this._status = VALID;\n    this._forEachChild((control: AbstractControl) => { control.enable({onlySelf: true}); });\n    this.updateValueAndValidity({onlySelf: true, emitEvent: opts.emitEvent});\n\n    this._updateAncestors(!!opts.onlySelf);\n    this._onDisabledChange.forEach((changeFn) => changeFn(false));\n  }\n/**\n * @param {?} onlySelf\n * @return {?}\n */\nprivate _updateAncestors(onlySelf: boolean) {\n    if (this._parent && !onlySelf) {\n      this._parent.updateValueAndValidity();\n      this._parent._updatePristine();\n      this._parent._updateTouched();\n    }\n  }\n/**\n * @param {?} parent\n * @return {?}\n */\nsetParent(parent: FormGroup|FormArray): void { this._parent = parent; }\n/**\n * Sets the value of the control. Abstract method (implemented in sub-classes).\n * @abstract\n * @param {?} value\n * @param {?=} options\n * @return {?}\n */\nsetValue(value: any, options?: Object) {}\n/**\n * Patches the value of the control. Abstract method (implemented in sub-classes).\n * @abstract\n * @param {?} value\n * @param {?=} options\n * @return {?}\n */\npatchValue(value: any, options?: Object) {}\n/**\n * Resets the control. Abstract method (implemented in sub-classes).\n * @abstract\n * @param {?=} value\n * @param {?=} options\n * @return {?}\n */\nreset(value?: any, options?: Object) {}\n/**\n * Re-calculates the value and validation status of the control.\n * \n * By default, it will also update the value and validity of its ancestors.\n * @param {?=} opts\n * @return {?}\n */\nupdateValueAndValidity(opts: {onlySelf?: boolean, emitEvent?: boolean} = {}): void {\n    this._setInitialStatus();\n    this._updateValue();\n\n    if (this.enabled) {\n      this._cancelExistingSubscription();\n      this._errors = this._runValidator();\n      this._status = this._calculateStatus();\n\n      if (this._status === VALID || this._status === PENDING) {\n        this._runAsyncValidator(opts.emitEvent);\n      }\n    }\n\n    if (opts.emitEvent !== false) {\n      this._valueChanges.emit(this._value);\n      this._statusChanges.emit(this._status);\n    }\n\n    if (this._parent && !opts.onlySelf) {\n      this._parent.updateValueAndValidity(opts);\n    }\n  }\n/**\n * \\@internal\n * @param {?=} opts\n * @return {?}\n */\n_updateTreeValidity(opts: {emitEvent?: boolean} = {emitEvent: true}) {\n    this._forEachChild((ctrl: AbstractControl) => ctrl._updateTreeValidity(opts));\n    this.updateValueAndValidity({onlySelf: true, emitEvent: opts.emitEvent});\n  }\n/**\n * @return {?}\n */\nprivate _setInitialStatus() { this._status = this._allControlsDisabled() ? DISABLED : VALID; }\n/**\n * @return {?}\n */\nprivate _runValidator(): ValidationErrors|null {\n    return this.validator ? this.validator(this) : null;\n  }\n/**\n * @param {?=} emitEvent\n * @return {?}\n */\nprivate _runAsyncValidator(emitEvent?: boolean): void {\n    if (this.asyncValidator) {\n      this._status = PENDING;\n      const /** @type {?} */ obs = toObservable(this.asyncValidator(this));\n      this._asyncValidationSubscription =\n          obs.subscribe((errors: ValidationErrors | null) => this.setErrors(errors, {emitEvent}));\n    }\n  }\n/**\n * @return {?}\n */\nprivate _cancelExistingSubscription(): void {\n    if (this._asyncValidationSubscription) {\n      this._asyncValidationSubscription.unsubscribe();\n    }\n  }\n/**\n * Sets errors on a form control.\n * \n * This is used when validations are run manually by the user, rather than automatically.\n * \n * Calling `setErrors` will also update the validity of the parent control.\n * \n * ### Example\n * \n * ```\n * const login = new FormControl(\"someLogin\");\n * login.setErrors({\n *   \"notUnique\": true\n * });\n * \n * expect(login.valid).toEqual(false);\n * expect(login.errors).toEqual({\"notUnique\": true});\n * \n * login.setValue(\"someOtherLogin\");\n * \n * expect(login.valid).toEqual(true);\n * ```\n * @param {?} errors\n * @param {?=} opts\n * @return {?}\n */\nsetErrors(errors: ValidationErrors|null, opts: {emitEvent?: boolean} = {}): void {\n    this._errors = errors;\n    this._updateControlsErrors(opts.emitEvent !== false);\n  }\n/**\n * Retrieves a child control given the control's name or path.\n * \n * Paths can be passed in as an array or a string delimited by a dot.\n * \n * To get a control nested within a `person` sub-group:\n * \n * * `this.form.get('person.name');`\n * \n * -OR-\n * \n * * `this.form.get(['person', 'name']);`\n * @param {?} path\n * @return {?}\n */\nget(path: Array<string|number>|string): AbstractControl|null { return _find(this, path, '.'); }\n/**\n * Returns error data if the control with the given path has the error specified. Otherwise\n * returns null or undefined.\n * \n * If no path is given, it checks for the error on the present control.\n * @param {?} errorCode\n * @param {?=} path\n * @return {?}\n */\ngetError(errorCode: string, path?: string[]): any {\n    const /** @type {?} */ control = path ? this.get(path) : this;\n    return control && control._errors ? control._errors[errorCode] : null;\n  }\n/**\n * Returns true if the control with the given path has the error specified. Otherwise\n * returns false.\n * \n * If no path is given, it checks for the error on the present control.\n * @param {?} errorCode\n * @param {?=} path\n * @return {?}\n */\nhasError(errorCode: string, path?: string[]): boolean { return !!this.getError(errorCode, path); }\n/**\n * Retrieves the top-level ancestor of this control.\n * @return {?}\n */\nget root(): AbstractControl {\n    let /** @type {?} */ x: AbstractControl = this;\n\n    while (x._parent) {\n      x = x._parent;\n    }\n\n    return x;\n  }\n/**\n * \\@internal\n * @param {?} emitEvent\n * @return {?}\n */\n_updateControlsErrors(emitEvent: boolean): void {\n    this._status = this._calculateStatus();\n\n    if (emitEvent) {\n      this._statusChanges.emit(this._status);\n    }\n\n    if (this._parent) {\n      this._parent._updateControlsErrors(emitEvent);\n    }\n  }\n/**\n * \\@internal\n * @return {?}\n */\n_initObservables() {\n    this._valueChanges = new EventEmitter();\n    this._statusChanges = new EventEmitter();\n  }\n/**\n * @return {?}\n */\nprivate _calculateStatus(): string {\n    if (this._allControlsDisabled()) return DISABLED;\n    if (this._errors) return INVALID;\n    if (this._anyControlsHaveStatus(PENDING)) return PENDING;\n    if (this._anyControlsHaveStatus(INVALID)) return INVALID;\n    return VALID;\n  }\n/**\n * \\@internal\n * @abstract\n * @return {?}\n */\n_updateValue() {}\n/**\n * \\@internal\n * @abstract\n * @param {?} cb\n * @return {?}\n */\n_forEachChild(cb: Function) {}\n/**\n * \\@internal\n * @abstract\n * @param {?} condition\n * @return {?}\n */\n_anyControls(condition: Function) {}\n/**\n * \\@internal\n * @abstract\n * @return {?}\n */\n_allControlsDisabled() {}\n/**\n * \\@internal\n * @param {?} status\n * @return {?}\n */\n_anyControlsHaveStatus(status: string): boolean {\n    return this._anyControls((control: AbstractControl) => control.status === status);\n  }\n/**\n * \\@internal\n * @return {?}\n */\n_anyControlsDirty(): boolean {\n    return this._anyControls((control: AbstractControl) => control.dirty);\n  }\n/**\n * \\@internal\n * @return {?}\n */\n_anyControlsTouched(): boolean {\n    return this._anyControls((control: AbstractControl) => control.touched);\n  }\n/**\n * \\@internal\n * @param {?=} opts\n * @return {?}\n */\n_updatePristine(opts: {onlySelf?: boolean} = {}): void {\n    this._pristine = !this._anyControlsDirty();\n\n    if (this._parent && !opts.onlySelf) {\n      this._parent._updatePristine(opts);\n    }\n  }\n/**\n * \\@internal\n * @param {?=} opts\n * @return {?}\n */\n_updateTouched(opts: {onlySelf?: boolean} = {}): void {\n    this._touched = this._anyControlsTouched();\n\n    if (this._parent && !opts.onlySelf) {\n      this._parent._updateTouched(opts);\n    }\n  }\n/**\n * \\@internal\n */\n_onDisabledChange: Function[] = [];\n/**\n * \\@internal\n * @param {?} formState\n * @return {?}\n */\n_isBoxedValue(formState: any): boolean {\n    return typeof formState === 'object' && formState !== null &&\n        Object.keys(formState).length === 2 && 'value' in formState && 'disabled' in formState;\n  }\n/**\n * \\@internal\n * @param {?} fn\n * @return {?}\n */\n_registerOnCollectionChange(fn: () => void): void { this._onCollectionChange = fn; }\n}\n\nfunction AbstractControl_tsickle_Closure_declarations() {\n/**\n * \\@internal\n * @type {?}\n */\nAbstractControl.prototype._value;\n/**\n * \\@internal\n * @type {?}\n */\nAbstractControl.prototype._onCollectionChange;\n/** @type {?} */\nAbstractControl.prototype._valueChanges;\n/** @type {?} */\nAbstractControl.prototype._statusChanges;\n/** @type {?} */\nAbstractControl.prototype._status;\n/** @type {?} */\nAbstractControl.prototype._errors;\n/** @type {?} */\nAbstractControl.prototype._pristine;\n/** @type {?} */\nAbstractControl.prototype._touched;\n/** @type {?} */\nAbstractControl.prototype._parent;\n/** @type {?} */\nAbstractControl.prototype._asyncValidationSubscription;\n/**\n * \\@internal\n * @type {?}\n */\nAbstractControl.prototype._onDisabledChange;\n/** @type {?} */\nAbstractControl.prototype.validator;\n/** @type {?} */\nAbstractControl.prototype.asyncValidator;\n}\n\n/**\n * \\@whatItDoes Tracks the value and validation status of an individual form control.\n * \n * It is one of the three fundamental building blocks of Angular forms, along with\n * {\\@link FormGroup} and {\\@link FormArray}.\n * \n * \\@howToUse \n * \n * When instantiating a {\\@link FormControl}, you can pass in an initial value as the\n * first argument. Example:\n * \n * ```ts\n * const ctrl = new FormControl('some value');\n * console.log(ctrl.value);     // 'some value'\n * ```\n * \n * You can also initialize the control with a form state object on instantiation,\n * which includes both the value and whether or not the control is disabled.\n * You can't use the value key without the disabled key; both are required\n * to use this way of initialization.\n * \n * ```ts\n * const ctrl = new FormControl({value: 'n/a', disabled: true});\n * console.log(ctrl.value);     // 'n/a'\n * console.log(ctrl.status);   // 'DISABLED'\n * ```\n * \n * To include a sync validator (or an array of sync validators) with the control,\n * pass it in as the second argument. Async validators are also supported, but\n * have to be passed in separately as the third arg.\n * \n * ```ts\n * const ctrl = new FormControl('', Validators.required);\n * console.log(ctrl.value);     // ''\n * console.log(ctrl.status);   // 'INVALID'\n * ```\n * \n * See its superclass, {\\@link AbstractControl}, for more properties and methods.\n * \n * * **npm package**: `\\@angular/forms`\n * \n * \\@stable\n */\nexport class FormControl extends AbstractControl {\n/**\n * \\@internal\n */\n_onChange: Function[] = [];\n/**\n * @param {?=} formState\n * @param {?=} validator\n * @param {?=} asyncValidator\n */\nconstructor(\n      formState: any = null, validator?: ValidatorFn|ValidatorFn[]|null,\n      asyncValidator?: AsyncValidatorFn|AsyncValidatorFn[]|null) {\n    super(coerceToValidator(validator), coerceToAsyncValidator(asyncValidator));\n    this._applyFormState(formState);\n    this.updateValueAndValidity({onlySelf: true, emitEvent: false});\n    this._initObservables();\n  }\n/**\n * Set the value of the form control to `value`.\n * \n * If `onlySelf` is `true`, this change will only affect the validation of this `FormControl`\n * and not its parent component. This defaults to false.\n * \n * If `emitEvent` is `true`, this\n * change will cause a `valueChanges` event on the `FormControl` to be emitted. This defaults\n * to true (as it falls through to `updateValueAndValidity`).\n * \n * If `emitModelToViewChange` is `true`, the view will be notified about the new value\n * via an `onChange` event. This is the default behavior if `emitModelToViewChange` is not\n * specified.\n * \n * If `emitViewToModelChange` is `true`, an ngModelChange event will be fired to update the\n * model.  This is the default behavior if `emitViewToModelChange` is not specified.\n * @param {?} value\n * @param {?=} options\n * @return {?}\n */\nsetValue(value: any, options: {\n    onlySelf?: boolean,\n    emitEvent?: boolean,\n    emitModelToViewChange?: boolean,\n    emitViewToModelChange?: boolean\n  } = {}): void {\n    this._value = value;\n    if (this._onChange.length && options.emitModelToViewChange !== false) {\n      this._onChange.forEach(\n          (changeFn) => changeFn(this._value, options.emitViewToModelChange !== false));\n    }\n    this.updateValueAndValidity(options);\n  }\n/**\n * Patches the value of a control.\n * \n * This function is functionally the same as {\\@link FormControl#setValue} at this level.\n * It exists for symmetry with {\\@link FormGroup#patchValue} on `FormGroups` and `FormArrays`,\n * where it does behave differently.\n * @param {?} value\n * @param {?=} options\n * @return {?}\n */\npatchValue(value: any, options: {\n    onlySelf?: boolean,\n    emitEvent?: boolean,\n    emitModelToViewChange?: boolean,\n    emitViewToModelChange?: boolean\n  } = {}): void {\n    this.setValue(value, options);\n  }\n/**\n * Resets the form control. This means by default:\n * \n * * it is marked as `pristine`\n * * it is marked as `untouched`\n * * value is set to null\n * \n * You can also reset to a specific form state by passing through a standalone\n * value or a form state object that contains both a value and a disabled state\n * (these are the only two properties that cannot be calculated).\n * \n * Ex:\n * \n * ```ts\n * this.control.reset('Nancy');\n * \n * console.log(this.control.value);  // 'Nancy'\n * ```\n * \n * OR\n * \n * ```\n * this.control.reset({value: 'Nancy', disabled: true});\n * \n * console.log(this.control.value);  // 'Nancy'\n * console.log(this.control.status);  // 'DISABLED'\n * ```\n * @param {?=} formState\n * @param {?=} options\n * @return {?}\n */\nreset(formState: any = null, options: {onlySelf?: boolean, emitEvent?: boolean} = {}): void {\n    this._applyFormState(formState);\n    this.markAsPristine(options);\n    this.markAsUntouched(options);\n    this.setValue(this._value, options);\n  }\n/**\n * \\@internal\n * @return {?}\n */\n_updateValue() {}\n/**\n * \\@internal\n * @param {?} condition\n * @return {?}\n */\n_anyControls(condition: Function): boolean { return false; }\n/**\n * \\@internal\n * @return {?}\n */\n_allControlsDisabled(): boolean { return this.disabled; }\n/**\n * Register a listener for change events.\n * @param {?} fn\n * @return {?}\n */\nregisterOnChange(fn: Function): void { this._onChange.push(fn); }\n/**\n * \\@internal\n * @return {?}\n */\n_clearChangeFns(): void {\n    this._onChange = [];\n    this._onDisabledChange = [];\n    this._onCollectionChange = () => {};\n  }\n/**\n * Register a listener for disabled events.\n * @param {?} fn\n * @return {?}\n */\nregisterOnDisabledChange(fn: (isDisabled: boolean) => void): void {\n    this._onDisabledChange.push(fn);\n  }\n/**\n * \\@internal\n * @param {?} cb\n * @return {?}\n */\n_forEachChild(cb: Function): void {}\n/**\n * @param {?} formState\n * @return {?}\n */\nprivate _applyFormState(formState: any) {\n    if (this._isBoxedValue(formState)) {\n      this._value = formState.value;\n      formState.disabled ? this.disable({onlySelf: true, emitEvent: false}) :\n                           this.enable({onlySelf: true, emitEvent: false});\n    } else {\n      this._value = formState;\n    }\n  }\n}\n\nfunction FormControl_tsickle_Closure_declarations() {\n/**\n * \\@internal\n * @type {?}\n */\nFormControl.prototype._onChange;\n}\n\n/**\n * \\@whatItDoes Tracks the value and validity state of a group of {\\@link FormControl}\n * instances.\n * \n * A `FormGroup` aggregates the values of each child {\\@link FormControl} into one object,\n * with each control name as the key.  It calculates its status by reducing the statuses\n * of its children. For example, if one of the controls in a group is invalid, the entire\n * group becomes invalid.\n * \n * `FormGroup` is one of the three fundamental building blocks used to define forms in Angular,\n * along with {\\@link FormControl} and {\\@link FormArray}.\n * \n * \\@howToUse \n * \n * When instantiating a {\\@link FormGroup}, pass in a collection of child controls as the first\n * argument. The key for each child will be the name under which it is registered.\n * \n * ### Example\n * \n * ```\n * const form = new FormGroup({\n *   first: new FormControl('Nancy', Validators.minLength(2)),\n *   last: new FormControl('Drew'),\n * });\n * \n * console.log(form.value);   // {first: 'Nancy', last; 'Drew'}\n * console.log(form.status);  // 'VALID'\n * ```\n * \n * You can also include group-level validators as the second arg, or group-level async\n * validators as the third arg. These come in handy when you want to perform validation\n * that considers the value of more than one child control.\n * \n * ### Example\n * \n * ```\n * const form = new FormGroup({\n *   password: new FormControl('', Validators.minLength(2)),\n *   passwordConfirm: new FormControl('', Validators.minLength(2)),\n * }, passwordMatchValidator);\n * \n * \n * function passwordMatchValidator(g: FormGroup) {\n *    return g.get('password').value === g.get('passwordConfirm').value\n *       ? null : {'mismatch': true};\n * }\n * ```\n * \n * * **npm package**: `\\@angular/forms`\n * \n * \\@stable\n */\nexport class FormGroup extends AbstractControl {\n/**\n * @param {?} controls\n * @param {?=} validator\n * @param {?=} asyncValidator\n */\nconstructor(\npublic controls: {[key: string]: AbstractControl}, validator?: ValidatorFn|null,\n      asyncValidator?: AsyncValidatorFn|null) {\n    super(validator || null, asyncValidator || null);\n    this._initObservables();\n    this._setUpControls();\n    this.updateValueAndValidity({onlySelf: true, emitEvent: false});\n  }\n/**\n * Registers a control with the group's list of controls.\n * \n * This method does not update value or validity of the control, so for\n * most cases you'll want to use {\\@link FormGroup#addControl} instead.\n * @param {?} name\n * @param {?} control\n * @return {?}\n */\nregisterControl(name: string, control: AbstractControl): AbstractControl {\n    if (this.controls[name]) return this.controls[name];\n    this.controls[name] = control;\n    control.setParent(this);\n    control._registerOnCollectionChange(this._onCollectionChange);\n    return control;\n  }\n/**\n * Add a control to this group.\n * @param {?} name\n * @param {?} control\n * @return {?}\n */\naddControl(name: string, control: AbstractControl): void {\n    this.registerControl(name, control);\n    this.updateValueAndValidity();\n    this._onCollectionChange();\n  }\n/**\n * Remove a control from this group.\n * @param {?} name\n * @return {?}\n */\nremoveControl(name: string): void {\n    if (this.controls[name]) this.controls[name]._registerOnCollectionChange(() => {});\n    delete (this.controls[name]);\n    this.updateValueAndValidity();\n    this._onCollectionChange();\n  }\n/**\n * Replace an existing control.\n * @param {?} name\n * @param {?} control\n * @return {?}\n */\nsetControl(name: string, control: AbstractControl): void {\n    if (this.controls[name]) this.controls[name]._registerOnCollectionChange(() => {});\n    delete (this.controls[name]);\n    if (control) this.registerControl(name, control);\n    this.updateValueAndValidity();\n    this._onCollectionChange();\n  }\n/**\n * Check whether there is an enabled control with the given name in the group.\n * \n * It will return false for disabled controls. If you'd like to check for\n * existence in the group only, use {\\@link AbstractControl#get} instead.\n * @param {?} controlName\n * @return {?}\n */\ncontains(controlName: string): boolean {\n    return this.controls.hasOwnProperty(controlName) && this.controls[controlName].enabled;\n  }\n/**\n *  Sets the value of the {\\@link FormGroup}. It accepts an object that matches\n *  the structure of the group, with control names as keys.\n * \n * This method performs strict checks, so it will throw an error if you try\n * to set the value of a control that doesn't exist or if you exclude the\n * value of a control.\n * \n *  ### Example\n * \n *  ```\n *  const form = new FormGroup({\n *     first: new FormControl(),\n *     last: new FormControl()\n *  });\n *  console.log(form.value);   // {first: null, last: null}\n * \n *  form.setValue({first: 'Nancy', last: 'Drew'});\n *  console.log(form.value);   // {first: 'Nancy', last: 'Drew'}\n * \n *  ```\n * @param {?} value\n * @param {?=} options\n * @return {?}\n */\nsetValue(value: {[key: string]: any}, options: {onlySelf?: boolean, emitEvent?: boolean} = {}):\n      void {\n    this._checkAllValuesPresent(value);\n    Object.keys(value).forEach(name => {\n      this._throwIfControlMissing(name);\n      this.controls[name].setValue(value[name], {onlySelf: true, emitEvent: options.emitEvent});\n    });\n    this.updateValueAndValidity(options);\n  }\n/**\n *  Patches the value of the {\\@link FormGroup}. It accepts an object with control\n *  names as keys, and will do its best to match the values to the correct controls\n *  in the group.\n * \n *  It accepts both super-sets and sub-sets of the group without throwing an error.\n * \n *  ### Example\n * \n *  ```\n *  const form = new FormGroup({\n *     first: new FormControl(),\n *     last: new FormControl()\n *  });\n *  console.log(form.value);   // {first: null, last: null}\n * \n *  form.patchValue({first: 'Nancy'});\n *  console.log(form.value);   // {first: 'Nancy', last: null}\n * \n *  ```\n * @param {?} value\n * @param {?=} options\n * @return {?}\n */\npatchValue(value: {[key: string]: any}, options: {onlySelf?: boolean, emitEvent?: boolean} = {}):\n      void {\n    Object.keys(value).forEach(name => {\n      if (this.controls[name]) {\n        this.controls[name].patchValue(value[name], {onlySelf: true, emitEvent: options.emitEvent});\n      }\n    });\n    this.updateValueAndValidity(options);\n  }\n/**\n * Resets the {\\@link FormGroup}. This means by default:\n * \n * * The group and all descendants are marked `pristine`\n * * The group and all descendants are marked `untouched`\n * * The value of all descendants will be null or null maps\n * \n * You can also reset to a specific form state by passing in a map of states\n * that matches the structure of your form, with control names as keys. The state\n * can be a standalone value or a form state object with both a value and a disabled\n * status.\n * \n * ### Example\n * \n * ```ts\n * this.form.reset({first: 'name', last: 'last name'});\n * \n * console.log(this.form.value);  // {first: 'name', last: 'last name'}\n * ```\n * \n * - OR -\n * \n * ```\n * this.form.reset({\n *   first: {value: 'name', disabled: true},\n *   last: 'last'\n * });\n * \n * console.log(this.form.value);  // {first: 'name', last: 'last name'}\n * console.log(this.form.get('first').status);  // 'DISABLED'\n * ```\n * @param {?=} value\n * @param {?=} options\n * @return {?}\n */\nreset(value: any = {}, options: {onlySelf?: boolean, emitEvent?: boolean} = {}): void {\n    this._forEachChild((control: AbstractControl, name: string) => {\n      control.reset(value[name], {onlySelf: true, emitEvent: options.emitEvent});\n    });\n    this.updateValueAndValidity(options);\n    this._updatePristine(options);\n    this._updateTouched(options);\n  }\n/**\n * The aggregate value of the {\\@link FormGroup}, including any disabled controls.\n * \n * If you'd like to include all values regardless of disabled status, use this method.\n * Otherwise, the `value` property is the best way to get the value of the group.\n * @return {?}\n */\ngetRawValue(): any {\n    return this._reduceChildren(\n        {}, (acc: {[k: string]: AbstractControl}, control: AbstractControl, name: string) => {\n          acc[name] = control instanceof FormControl ? control.value : ( /** @type {?} */((<any>control))).getRawValue();\n          return acc;\n        });\n  }\n/**\n * \\@internal\n * @param {?} name\n * @return {?}\n */\n_throwIfControlMissing(name: string): void {\n    if (!Object.keys(this.controls).length) {\n      throw new Error(`\n        There are no form controls registered with this group yet.  If you're using ngModel,\n        you may want to check next tick (e.g. use setTimeout).\n      `);\n    }\n    if (!this.controls[name]) {\n      throw new Error(`Cannot find form control with name: ${name}.`);\n    }\n  }\n/**\n * \\@internal\n * @param {?} cb\n * @return {?}\n */\n_forEachChild(cb: (v: any, k: string) => void): void {\n    Object.keys(this.controls).forEach(k => cb(this.controls[k], k));\n  }\n/**\n * \\@internal\n * @return {?}\n */\n_setUpControls(): void {\n    this._forEachChild((control: AbstractControl) => {\n      control.setParent(this);\n      control._registerOnCollectionChange(this._onCollectionChange);\n    });\n  }\n/**\n * \\@internal\n * @return {?}\n */\n_updateValue(): void { this._value = this._reduceValue(); }\n/**\n * \\@internal\n * @param {?} condition\n * @return {?}\n */\n_anyControls(condition: Function): boolean {\n    let /** @type {?} */ res = false;\n    this._forEachChild((control: AbstractControl, name: string) => {\n      res = res || (this.contains(name) && condition(control));\n    });\n    return res;\n  }\n/**\n * \\@internal\n * @return {?}\n */\n_reduceValue() {\n    return this._reduceChildren(\n        {}, (acc: {[k: string]: AbstractControl}, control: AbstractControl, name: string) => {\n          if (control.enabled || this.disabled) {\n            acc[name] = control.value;\n          }\n          return acc;\n        });\n  }\n/**\n * \\@internal\n * @param {?} initValue\n * @param {?} fn\n * @return {?}\n */\n_reduceChildren(initValue: any, fn: Function) {\n    let /** @type {?} */ res = initValue;\n    this._forEachChild(\n        (control: AbstractControl, name: string) => { res = fn(res, control, name); });\n    return res;\n  }\n/**\n * \\@internal\n * @return {?}\n */\n_allControlsDisabled(): boolean {\n    for (const /** @type {?} */ controlName of Object.keys(this.controls)) {\n      if (this.controls[controlName].enabled) {\n        return false;\n      }\n    }\n    return Object.keys(this.controls).length > 0 || this.disabled;\n  }\n/**\n * \\@internal\n * @param {?} value\n * @return {?}\n */\n_checkAllValuesPresent(value: any): void {\n    this._forEachChild((control: AbstractControl, name: string) => {\n      if (value[name] === undefined) {\n        throw new Error(`Must supply a value for form control with name: '${name}'.`);\n      }\n    });\n  }\n}\n\nfunction FormGroup_tsickle_Closure_declarations() {\n/** @type {?} */\nFormGroup.prototype.controls;\n}\n\n/**\n * \\@whatItDoes Tracks the value and validity state of an array of {\\@link FormControl},\n * {\\@link FormGroup} or {\\@link FormArray} instances.\n * \n * A `FormArray` aggregates the values of each child {\\@link FormControl} into an array.\n * It calculates its status by reducing the statuses of its children. For example, if one of\n * the controls in a `FormArray` is invalid, the entire array becomes invalid.\n * \n * `FormArray` is one of the three fundamental building blocks used to define forms in Angular,\n * along with {\\@link FormControl} and {\\@link FormGroup}.\n * \n * \\@howToUse \n * \n * When instantiating a {\\@link FormArray}, pass in an array of child controls as the first\n * argument.\n * \n * ### Example\n * \n * ```\n * const arr = new FormArray([\n *   new FormControl('Nancy', Validators.minLength(2)),\n *   new FormControl('Drew'),\n * ]);\n * \n * console.log(arr.value);   // ['Nancy', 'Drew']\n * console.log(arr.status);  // 'VALID'\n * ```\n * \n * You can also include array-level validators as the second arg, or array-level async\n * validators as the third arg. These come in handy when you want to perform validation\n * that considers the value of more than one child control.\n * \n * ### Adding or removing controls\n * \n * To change the controls in the array, use the `push`, `insert`, or `removeAt` methods\n * in `FormArray` itself. These methods ensure the controls are properly tracked in the\n * form's hierarchy. Do not modify the array of `AbstractControl`s used to instantiate\n * the `FormArray` directly, as that will result in strange and unexpected behavior such\n * as broken change detection.\n * \n * * **npm package**: `\\@angular/forms`\n * \n * \\@stable\n */\nexport class FormArray extends AbstractControl {\n/**\n * @param {?} controls\n * @param {?=} validator\n * @param {?=} asyncValidator\n */\nconstructor(\npublic controls: AbstractControl[], validator?: ValidatorFn|null,\n      asyncValidator?: AsyncValidatorFn|null) {\n    super(validator || null, asyncValidator || null);\n    this._initObservables();\n    this._setUpControls();\n    this.updateValueAndValidity({onlySelf: true, emitEvent: false});\n  }\n/**\n * Get the {\\@link AbstractControl} at the given `index` in the array.\n * @param {?} index\n * @return {?}\n */\nat(index: number): AbstractControl { return this.controls[index]; }\n/**\n * Insert a new {\\@link AbstractControl} at the end of the array.\n * @param {?} control\n * @return {?}\n */\npush(control: AbstractControl): void {\n    this.controls.push(control);\n    this._registerControl(control);\n    this.updateValueAndValidity();\n    this._onCollectionChange();\n  }\n/**\n * Insert a new {\\@link AbstractControl} at the given `index` in the array.\n * @param {?} index\n * @param {?} control\n * @return {?}\n */\ninsert(index: number, control: AbstractControl): void {\n    this.controls.splice(index, 0, control);\n\n    this._registerControl(control);\n    this.updateValueAndValidity();\n    this._onCollectionChange();\n  }\n/**\n * Remove the control at the given `index` in the array.\n * @param {?} index\n * @return {?}\n */\nremoveAt(index: number): void {\n    if (this.controls[index]) this.controls[index]._registerOnCollectionChange(() => {});\n    this.controls.splice(index, 1);\n    this.updateValueAndValidity();\n    this._onCollectionChange();\n  }\n/**\n * Replace an existing control.\n * @param {?} index\n * @param {?} control\n * @return {?}\n */\nsetControl(index: number, control: AbstractControl): void {\n    if (this.controls[index]) this.controls[index]._registerOnCollectionChange(() => {});\n    this.controls.splice(index, 1);\n\n    if (control) {\n      this.controls.splice(index, 0, control);\n      this._registerControl(control);\n    }\n\n    this.updateValueAndValidity();\n    this._onCollectionChange();\n  }\n/**\n * Length of the control array.\n * @return {?}\n */\nget length(): number { return this.controls.length; }\n/**\n *  Sets the value of the {\\@link FormArray}. It accepts an array that matches\n *  the structure of the control.\n * \n * This method performs strict checks, so it will throw an error if you try\n * to set the value of a control that doesn't exist or if you exclude the\n * value of a control.\n * \n *  ### Example\n * \n *  ```\n *  const arr = new FormArray([\n *     new FormControl(),\n *     new FormControl()\n *  ]);\n *  console.log(arr.value);   // [null, null]\n * \n *  arr.setValue(['Nancy', 'Drew']);\n *  console.log(arr.value);   // ['Nancy', 'Drew']\n *  ```\n * @param {?} value\n * @param {?=} options\n * @return {?}\n */\nsetValue(value: any[], options: {onlySelf?: boolean, emitEvent?: boolean} = {}): void {\n    this._checkAllValuesPresent(value);\n    value.forEach((newValue: any, index: number) => {\n      this._throwIfControlMissing(index);\n      this.at(index).setValue(newValue, {onlySelf: true, emitEvent: options.emitEvent});\n    });\n    this.updateValueAndValidity(options);\n  }\n/**\n *  Patches the value of the {\\@link FormArray}. It accepts an array that matches the\n *  structure of the control, and will do its best to match the values to the correct\n *  controls in the group.\n * \n *  It accepts both super-sets and sub-sets of the array without throwing an error.\n * \n *  ### Example\n * \n *  ```\n *  const arr = new FormArray([\n *     new FormControl(),\n *     new FormControl()\n *  ]);\n *  console.log(arr.value);   // [null, null]\n * \n *  arr.patchValue(['Nancy']);\n *  console.log(arr.value);   // ['Nancy', null]\n *  ```\n * @param {?} value\n * @param {?=} options\n * @return {?}\n */\npatchValue(value: any[], options: {onlySelf?: boolean, emitEvent?: boolean} = {}): void {\n    value.forEach((newValue: any, index: number) => {\n      if (this.at(index)) {\n        this.at(index).patchValue(newValue, {onlySelf: true, emitEvent: options.emitEvent});\n      }\n    });\n    this.updateValueAndValidity(options);\n  }\n/**\n * Resets the {\\@link FormArray}. This means by default:\n * \n * * The array and all descendants are marked `pristine`\n * * The array and all descendants are marked `untouched`\n * * The value of all descendants will be null or null maps\n * \n * You can also reset to a specific form state by passing in an array of states\n * that matches the structure of the control. The state can be a standalone value\n * or a form state object with both a value and a disabled status.\n * \n * ### Example\n * \n * ```ts\n * this.arr.reset(['name', 'last name']);\n * \n * console.log(this.arr.value);  // ['name', 'last name']\n * ```\n * \n * - OR -\n * \n * ```\n * this.arr.reset([\n *   {value: 'name', disabled: true},\n *   'last'\n * ]);\n * \n * console.log(this.arr.value);  // ['name', 'last name']\n * console.log(this.arr.get(0).status);  // 'DISABLED'\n * ```\n * @param {?=} value\n * @param {?=} options\n * @return {?}\n */\nreset(value: any = [], options: {onlySelf?: boolean, emitEvent?: boolean} = {}): void {\n    this._forEachChild((control: AbstractControl, index: number) => {\n      control.reset(value[index], {onlySelf: true, emitEvent: options.emitEvent});\n    });\n    this.updateValueAndValidity(options);\n    this._updatePristine(options);\n    this._updateTouched(options);\n  }\n/**\n * The aggregate value of the array, including any disabled controls.\n * \n * If you'd like to include all values regardless of disabled status, use this method.\n * Otherwise, the `value` property is the best way to get the value of the array.\n * @return {?}\n */\ngetRawValue(): any[] {\n    return this.controls.map((control: AbstractControl) => {\n      return control instanceof FormControl ? control.value : ( /** @type {?} */((<any>control))).getRawValue();\n    });\n  }\n/**\n * \\@internal\n * @param {?} index\n * @return {?}\n */\n_throwIfControlMissing(index: number): void {\n    if (!this.controls.length) {\n      throw new Error(`\n        There are no form controls registered with this array yet.  If you're using ngModel,\n        you may want to check next tick (e.g. use setTimeout).\n      `);\n    }\n    if (!this.at(index)) {\n      throw new Error(`Cannot find form control at index ${index}`);\n    }\n  }\n/**\n * \\@internal\n * @param {?} cb\n * @return {?}\n */\n_forEachChild(cb: Function): void {\n    this.controls.forEach((control: AbstractControl, index: number) => { cb(control, index); });\n  }\n/**\n * \\@internal\n * @return {?}\n */\n_updateValue(): void {\n    this._value = this.controls.filter((control) => control.enabled || this.disabled)\n                      .map((control) => control.value);\n  }\n/**\n * \\@internal\n * @param {?} condition\n * @return {?}\n */\n_anyControls(condition: Function): boolean {\n    return this.controls.some((control: AbstractControl) => control.enabled && condition(control));\n  }\n/**\n * \\@internal\n * @return {?}\n */\n_setUpControls(): void {\n    this._forEachChild((control: AbstractControl) => this._registerControl(control));\n  }\n/**\n * \\@internal\n * @param {?} value\n * @return {?}\n */\n_checkAllValuesPresent(value: any): void {\n    this._forEachChild((control: AbstractControl, i: number) => {\n      if (value[i] === undefined) {\n        throw new Error(`Must supply a value for form control at index: ${i}.`);\n      }\n    });\n  }\n/**\n * \\@internal\n * @return {?}\n */\n_allControlsDisabled(): boolean {\n    for (const /** @type {?} */ control of this.controls) {\n      if (control.enabled) return false;\n    }\n    return this.controls.length > 0 || this.disabled;\n  }\n/**\n * @param {?} control\n * @return {?}\n */\nprivate _registerControl(control: AbstractControl) {\n    control.setParent(this);\n    control._registerOnCollectionChange(this._onCollectionChange);\n  }\n}\n\nfunction FormArray_tsickle_Closure_declarations() {\n/** @type {?} */\nFormArray.prototype.controls;\n}\n\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Directive, EventEmitter, Inject, Optional, Self, forwardRef} from '@angular/core';\n\nimport {AbstractControl, FormControl, FormGroup} from '../model';\nimport {NG_ASYNC_VALIDATORS, NG_VALIDATORS} from '../validators';\n\nimport {ControlContainer} from './control_container';\nimport {Form} from './form_interface';\nimport {NgControl} from './ng_control';\nimport {NgModel} from './ng_model';\nimport {NgModelGroup} from './ng_model_group';\nimport {composeAsyncValidators, composeValidators, setUpControl, setUpFormContainer} from './shared';\n\nexport const /** @type {?} */ formDirectiveProvider: any = {\n  provide: ControlContainer,\n  useExisting: forwardRef(() => NgForm)\n};\n\nconst /** @type {?} */ resolvedPromise = Promise.resolve(null);\n/**\n * \\@whatItDoes Creates a top-level {\\@link FormGroup} instance and binds it to a form\n * to track aggregate form value and validation status.\n * \n * \\@howToUse \n * \n * As soon as you import the `FormsModule`, this directive becomes active by default on\n * all `<form>` tags.  You don't need to add a special selector.\n * \n * You can export the directive into a local template variable using `ngForm` as the key\n * (ex: `#myForm=\"ngForm\"`). This is optional, but useful.  Many properties from the underlying\n * {\\@link FormGroup} instance are duplicated on the directive itself, so a reference to it\n * will give you access to the aggregate value and validity status of the form, as well as\n * user interaction properties like `dirty` and `touched`.\n * \n * To register child controls with the form, you'll want to use {\\@link NgModel} with a\n * `name` attribute.  You can also use {\\@link NgModelGroup} if you'd like to create\n * sub-groups within the form.\n * \n * You can listen to the directive's `ngSubmit` event to be notified when the user has\n * triggered a form submission. The `ngSubmit` event will be emitted with the original form\n * submission event.\n * \n * In template driven forms, all `<form>` tags are automatically tagged as `NgForm`.\n * If you want to import the `FormsModule` but skip its usage in some forms,\n * for example, to use native HTML5 validation, you can add `ngNoForm` and the `<form>`\n * tags won't create an `NgForm` directive. In reactive forms, using `ngNoForm` is\n * unnecessary because the `<form>` tags are inert. In that case, you would\n * refrain from using the `formGroup` directive.\n * \n * {\\@example forms/ts/simpleForm/simple_form_example.ts region='Component'}\n * \n * * **npm package**: `\\@angular/forms`\n * \n * * **NgModule**: `FormsModule`\n * \n *  \\@stable\n */\nexport class NgForm extends ControlContainer implements Form {\nprivate _submitted: boolean = false;\n\n  form: FormGroup;\n  ngSubmit = new EventEmitter();\n/**\n * @param {?} validators\n * @param {?} asyncValidators\n */\nconstructor(\n         validators: any[],\n         asyncValidators: any[]) {\n    super();\n    this.form =\n        new FormGroup({}, composeValidators(validators), composeAsyncValidators(asyncValidators));\n  }\n/**\n * @return {?}\n */\nget submitted(): boolean { return this._submitted; }\n/**\n * @return {?}\n */\nget formDirective(): Form { return this; }\n/**\n * @return {?}\n */\nget control(): FormGroup { return this.form; }\n/**\n * @return {?}\n */\nget path(): string[] { return []; }\n/**\n * @return {?}\n */\nget controls(): {[key: string]: AbstractControl} { return this.form.controls; }\n/**\n * @param {?} dir\n * @return {?}\n */\naddControl(dir: NgModel): void {\n    resolvedPromise.then(() => {\n      const /** @type {?} */ container = this._findContainer(dir.path);\n      dir._control = /** @type {?} */(( <FormControl>container.registerControl(dir.name, dir.control)));\n      setUpControl(dir.control, dir);\n      dir.control.updateValueAndValidity({emitEvent: false});\n    });\n  }\n/**\n * @param {?} dir\n * @return {?}\n */\ngetControl(dir: NgModel): FormControl { return /** @type {?} */(( <FormControl>this.form.get(dir.path))); }\n/**\n * @param {?} dir\n * @return {?}\n */\nremoveControl(dir: NgModel): void {\n    resolvedPromise.then(() => {\n      const /** @type {?} */ container = this._findContainer(dir.path);\n      if (container) {\n        container.removeControl(dir.name);\n      }\n    });\n  }\n/**\n * @param {?} dir\n * @return {?}\n */\naddFormGroup(dir: NgModelGroup): void {\n    resolvedPromise.then(() => {\n      const /** @type {?} */ container = this._findContainer(dir.path);\n      const /** @type {?} */ group = new FormGroup({});\n      setUpFormContainer(group, dir);\n      container.registerControl(dir.name, group);\n      group.updateValueAndValidity({emitEvent: false});\n    });\n  }\n/**\n * @param {?} dir\n * @return {?}\n */\nremoveFormGroup(dir: NgModelGroup): void {\n    resolvedPromise.then(() => {\n      const /** @type {?} */ container = this._findContainer(dir.path);\n      if (container) {\n        container.removeControl(dir.name);\n      }\n    });\n  }\n/**\n * @param {?} dir\n * @return {?}\n */\ngetFormGroup(dir: NgModelGroup): FormGroup { return /** @type {?} */(( <FormGroup>this.form.get(dir.path))); }\n/**\n * @param {?} dir\n * @param {?} value\n * @return {?}\n */\nupdateModel(dir: NgControl, value: any): void {\n    resolvedPromise.then(() => {\n      const /** @type {?} */ ctrl = /** @type {?} */(( <FormControl>this.form.get( /** @type {?} */((dir.path)))));\n      ctrl.setValue(value);\n    });\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nsetValue(value: {[key: string]: any}): void { this.control.setValue(value); }\n/**\n * @param {?} $event\n * @return {?}\n */\nonSubmit($event: Event): boolean {\n    this._submitted = true;\n    this.ngSubmit.emit($event);\n    return false;\n  }\n/**\n * @return {?}\n */\nonReset(): void { this.resetForm(); }\n/**\n * @param {?=} value\n * @return {?}\n */\nresetForm(value: any = undefined): void {\n    this.form.reset(value);\n    this._submitted = false;\n  }\n/**\n * \\@internal\n * @param {?} path\n * @return {?}\n */\n_findContainer(path: string[]): FormGroup {\n    path.pop();\n    return path.length ? /** @type {?} */(( <FormGroup>this.form.get(path))) : this.form;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'form:not([ngNoForm]):not([formGroup]),ngForm,[ngForm]',\n  providers: [formDirectiveProvider],\n  host: {'(submit)': 'onSubmit($event)', '(reset)': 'onReset()'},\n  outputs: ['ngSubmit'],\n  exportAs: 'ngForm'\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Array, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [NG_VALIDATORS, ] }, ]},\n{type: Array, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [NG_ASYNC_VALIDATORS, ] }, ]},\n];\n}\n\nfunction NgForm_tsickle_Closure_declarations() {\n/** @type {?} */\nNgForm.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nNgForm.ctorParameters;\n/** @type {?} */\nNgForm.prototype._submitted;\n/** @type {?} */\nNgForm.prototype.form;\n/** @type {?} */\nNgForm.prototype.ngSubmit;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","\n/**\n * @license \n * Copyright Google Inc. All Rights Reserved.\n * \n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport const FormErrorExamples = {\n  formControlName: `\n    <div [formGroup]=\"myGroup\">\n      <input formControlName=\"firstName\">\n    </div>\n\n    In your class:\n\n    this.myGroup = new FormGroup({\n       firstName: new FormControl()\n    });`,\n\n  formGroupName: `\n    <div [formGroup]=\"myGroup\">\n       <div formGroupName=\"person\">\n          <input formControlName=\"firstName\">\n       </div>\n    </div>\n\n    In your class:\n\n    this.myGroup = new FormGroup({\n       person: new FormGroup({ firstName: new FormControl() })\n    });`,\n\n  formArrayName: `\n    <div [formGroup]=\"myGroup\">\n      <div formArrayName=\"cities\">\n        <div *ngFor=\"let city of cityArray.controls; index as i\">\n          <input [formControlName]=\"i\">\n        </div>\n      </div>\n    </div>\n\n    In your class:\n\n    this.cityArray = new FormArray([new FormControl('SF')]);\n    this.myGroup = new FormGroup({\n      cities: this.cityArray\n    });`,\n\n  ngModelGroup: `\n    <form>\n       <div ngModelGroup=\"person\">\n          <input [(ngModel)]=\"person.name\" name=\"firstName\">\n       </div>\n    </form>`,\n\n  ngModelWithFormGroup: `\n    <div [formGroup]=\"myGroup\">\n       <input formControlName=\"firstName\">\n       <input [(ngModel)]=\"showMoreControls\" [ngModelOptions]=\"{standalone: true}\">\n    </div>\n  `\n};\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {ɵparseCookieValue as parseCookieValue} from '@angular/common';\nimport {ɵglobal as global} from '@angular/core';\n\nimport {setRootDomAdapter} from '../dom/dom_adapter';\n\nimport {GenericBrowserDomAdapter} from './generic_browser_adapter';\n\nconst /** @type {?} */ _attrToPropMap = {\n  'class': 'className',\n  'innerHtml': 'innerHTML',\n  'readonly': 'readOnly',\n  'tabindex': 'tabIndex',\n};\n\nconst /** @type {?} */ DOM_KEY_LOCATION_NUMPAD = 3;\n\n// Map to convert some key or keyIdentifier values to what will be returned by getEventKey\nconst /** @type {?} */ _keyMap: {[k: string]: string} = {\n  // The following values are here for cross-browser compatibility and to match the W3C standard\n  // cf http://www.w3.org/TR/DOM-Level-3-Events-key/\n  '\\b': 'Backspace',\n  '\\t': 'Tab',\n  '\\x7F': 'Delete',\n  '\\x1B': 'Escape',\n  'Del': 'Delete',\n  'Esc': 'Escape',\n  'Left': 'ArrowLeft',\n  'Right': 'ArrowRight',\n  'Up': 'ArrowUp',\n  'Down': 'ArrowDown',\n  'Menu': 'ContextMenu',\n  'Scroll': 'ScrollLock',\n  'Win': 'OS'\n};\n\n// There is a bug in Chrome for numeric keypad keys:\n// https://code.google.com/p/chromium/issues/detail?id=155654\n// 1, 2, 3 ... are reported as A, B, C ...\nconst /** @type {?} */ _chromeNumKeyPadMap = {\n  'A': '1',\n  'B': '2',\n  'C': '3',\n  'D': '4',\n  'E': '5',\n  'F': '6',\n  'G': '7',\n  'H': '8',\n  'I': '9',\n  'J': '*',\n  'K': '+',\n  'M': '-',\n  'N': '.',\n  'O': '/',\n  '\\x60': '0',\n  '\\x90': 'NumLock'\n};\n\nlet /** @type {?} */ nodeContains: (a: any, b: any) => boolean;\n\nif (global['Node']) {\n  nodeContains = global['Node'].prototype.contains || function(node) {\n    return !!(this.compareDocumentPosition(node) & 16);\n  };\n}\nexport class BrowserDomAdapter extends GenericBrowserDomAdapter {\n/**\n * @param {?} templateHtml\n * @return {?}\n */\nparse(templateHtml: string) { throw new Error('parse not implemented'); }\n/**\n * @return {?}\n */\nstatic makeCurrent() { setRootDomAdapter(new BrowserDomAdapter()); }\n/**\n * @param {?} element\n * @param {?} name\n * @return {?}\n */\nhasProperty(element: Node, name: string): boolean { return name in element; }\n/**\n * @param {?} el\n * @param {?} name\n * @param {?} value\n * @return {?}\n */\nsetProperty(el: Node, name: string, value: any) { ( /** @type {?} */((<any>el)))[name] = value; }\n/**\n * @param {?} el\n * @param {?} name\n * @return {?}\n */\ngetProperty(el: Node, name: string): any { return ( /** @type {?} */((<any>el)))[name]; }\n/**\n * @param {?} el\n * @param {?} methodName\n * @param {?} args\n * @return {?}\n */\ninvoke(el: Node, methodName: string, args: any[]): any { ( /** @type {?} */((<any>el)))[methodName](...args); }\n/**\n * @param {?} error\n * @return {?}\n */\nlogError(error: string): void {\n    if (window.console) {\n      if (console.error) {\n        console.error(error);\n      } else {\n        console.log(error);\n      }\n    }\n  }\n/**\n * @param {?} error\n * @return {?}\n */\nlog(error: string): void {\n    if (window.console) {\n      window.console.log && window.console.log(error);\n    }\n  }\n/**\n * @param {?} error\n * @return {?}\n */\nlogGroup(error: string): void {\n    if (window.console) {\n      window.console.group && window.console.group(error);\n    }\n  }\n/**\n * @return {?}\n */\nlogGroupEnd(): void {\n    if (window.console) {\n      window.console.groupEnd && window.console.groupEnd();\n    }\n  }\n/**\n * @return {?}\n */\nget attrToPropMap(): any { return _attrToPropMap; }\n/**\n * @param {?} nodeA\n * @param {?} nodeB\n * @return {?}\n */\ncontains(nodeA: any, nodeB: any): boolean { return nodeContains.call(nodeA, nodeB); }\n/**\n * @param {?} el\n * @param {?} selector\n * @return {?}\n */\nquerySelector(el: Element, selector: string): any { return el.querySelector(selector); }\n/**\n * @param {?} el\n * @param {?} selector\n * @return {?}\n */\nquerySelectorAll(el: any, selector: string): any[] { return el.querySelectorAll(selector); }\n/**\n * @param {?} el\n * @param {?} evt\n * @param {?} listener\n * @return {?}\n */\non(el: Node, evt: any, listener: any) { el.addEventListener(evt, listener, false); }\n/**\n * @param {?} el\n * @param {?} evt\n * @param {?} listener\n * @return {?}\n */\nonAndCancel(el: Node, evt: any, listener: any): Function {\n    el.addEventListener(evt, listener, false);\n    // Needed to follow Dart's subscription semantic, until fix of\n    // https://code.google.com/p/dart/issues/detail?id=17406\n    return () => { el.removeEventListener(evt, listener, false); };\n  }\n/**\n * @param {?} el\n * @param {?} evt\n * @return {?}\n */\ndispatchEvent(el: Node, evt: any) { el.dispatchEvent(evt); }\n/**\n * @param {?} eventType\n * @return {?}\n */\ncreateMouseEvent(eventType: string): MouseEvent {\n    const /** @type {?} */ evt: MouseEvent = document.createEvent('MouseEvent');\n    evt.initEvent(eventType, true, true);\n    return evt;\n  }\n/**\n * @param {?} eventType\n * @return {?}\n */\ncreateEvent(eventType: any): Event {\n    const /** @type {?} */ evt: Event = document.createEvent('Event');\n    evt.initEvent(eventType, true, true);\n    return evt;\n  }\n/**\n * @param {?} evt\n * @return {?}\n */\npreventDefault(evt: Event) {\n    evt.preventDefault();\n    evt.returnValue = false;\n  }\n/**\n * @param {?} evt\n * @return {?}\n */\nisPrevented(evt: Event): boolean {\n    return evt.defaultPrevented || evt.returnValue != null && !evt.returnValue;\n  }\n/**\n * @param {?} el\n * @return {?}\n */\ngetInnerHTML(el: HTMLElement): string { return el.innerHTML; }\n/**\n * @param {?} el\n * @return {?}\n */\ngetTemplateContent(el: Node): Node|null {\n    return 'content' in el && el instanceof HTMLTemplateElement ? el.content : null;\n  }\n/**\n * @param {?} el\n * @return {?}\n */\ngetOuterHTML(el: HTMLElement): string { return el.outerHTML; }\n/**\n * @param {?} node\n * @return {?}\n */\nnodeName(node: Node): string { return node.nodeName; }\n/**\n * @param {?} node\n * @return {?}\n */\nnodeValue(node: Node): string|null { return node.nodeValue; }\n/**\n * @param {?} node\n * @return {?}\n */\ntype(node: HTMLInputElement): string { return node.type; }\n/**\n * @param {?} node\n * @return {?}\n */\ncontent(node: Node): Node {\n    if (this.hasProperty(node, 'content')) {\n      return ( /** @type {?} */((<any>node))).content;\n    } else {\n      return node;\n    }\n  }\n/**\n * @param {?} el\n * @return {?}\n */\nfirstChild(el: Node): Node|null { return el.firstChild; }\n/**\n * @param {?} el\n * @return {?}\n */\nnextSibling(el: Node): Node|null { return el.nextSibling; }\n/**\n * @param {?} el\n * @return {?}\n */\nparentElement(el: Node): Node|null { return el.parentNode; }\n/**\n * @param {?} el\n * @return {?}\n */\nchildNodes(el: any): Node[] { return el.childNodes; }\n/**\n * @param {?} el\n * @return {?}\n */\nchildNodesAsList(el: Node): any[] {\n    const /** @type {?} */ childNodes = el.childNodes;\n    const /** @type {?} */ res = new Array(childNodes.length);\n    for (let /** @type {?} */ i = 0; i < childNodes.length; i++) {\n      res[i] = childNodes[i];\n    }\n    return res;\n  }\n/**\n * @param {?} el\n * @return {?}\n */\nclearNodes(el: Node) {\n    while (el.firstChild) {\n      el.removeChild(el.firstChild);\n    }\n  }\n/**\n * @param {?} el\n * @param {?} node\n * @return {?}\n */\nappendChild(el: Node, node: Node) { el.appendChild(node); }\n/**\n * @param {?} el\n * @param {?} node\n * @return {?}\n */\nremoveChild(el: Node, node: Node) { el.removeChild(node); }\n/**\n * @param {?} el\n * @param {?} newChild\n * @param {?} oldChild\n * @return {?}\n */\nreplaceChild(el: Node, newChild: Node, oldChild: Node) { el.replaceChild(newChild, oldChild); }\n/**\n * @param {?} node\n * @return {?}\n */\nremove(node: Node): Node {\n    if (node.parentNode) {\n      node.parentNode.removeChild(node);\n    }\n    return node;\n  }\n/**\n * @param {?} parent\n * @param {?} ref\n * @param {?} node\n * @return {?}\n */\ninsertBefore(parent: Node, ref: Node, node: Node) { parent.insertBefore(node, ref); }\n/**\n * @param {?} parent\n * @param {?} ref\n * @param {?} nodes\n * @return {?}\n */\ninsertAllBefore(parent: Node, ref: Node, nodes: Node[]) {\n    nodes.forEach((n: any) => parent.insertBefore(n, ref));\n  }\n/**\n * @param {?} parent\n * @param {?} ref\n * @param {?} node\n * @return {?}\n */\ninsertAfter(parent: Node, ref: Node, node: any) { parent.insertBefore(node, ref.nextSibling); }\n/**\n * @param {?} el\n * @param {?} value\n * @return {?}\n */\nsetInnerHTML(el: Element, value: string) { el.innerHTML = value; }\n/**\n * @param {?} el\n * @return {?}\n */\ngetText(el: Node): string|null { return el.textContent; }\n/**\n * @param {?} el\n * @param {?} value\n * @return {?}\n */\nsetText(el: Node, value: string) { el.textContent = value; }\n/**\n * @param {?} el\n * @return {?}\n */\ngetValue(el: any): string { return el.value; }\n/**\n * @param {?} el\n * @param {?} value\n * @return {?}\n */\nsetValue(el: any, value: string) { el.value = value; }\n/**\n * @param {?} el\n * @return {?}\n */\ngetChecked(el: any): boolean { return el.checked; }\n/**\n * @param {?} el\n * @param {?} value\n * @return {?}\n */\nsetChecked(el: any, value: boolean) { el.checked = value; }\n/**\n * @param {?} text\n * @return {?}\n */\ncreateComment(text: string): Comment { return document.createComment(text); }\n/**\n * @param {?} html\n * @return {?}\n */\ncreateTemplate(html: any): HTMLElement {\n    const /** @type {?} */ t = document.createElement('template');\n    t.innerHTML = html;\n    return t;\n  }\n/**\n * @param {?} tagName\n * @param {?=} doc\n * @return {?}\n */\ncreateElement(tagName: string, doc = document): HTMLElement { return doc.createElement(tagName); }\n/**\n * @param {?} ns\n * @param {?} tagName\n * @param {?=} doc\n * @return {?}\n */\ncreateElementNS(ns: string, tagName: string, doc = document): Element {\n    return doc.createElementNS(ns, tagName);\n  }\n/**\n * @param {?} text\n * @param {?=} doc\n * @return {?}\n */\ncreateTextNode(text: string, doc = document): Text { return doc.createTextNode(text); }\n/**\n * @param {?} attrName\n * @param {?} attrValue\n * @param {?=} doc\n * @return {?}\n */\ncreateScriptTag(attrName: string, attrValue: string, doc = document): HTMLScriptElement {\n    const /** @type {?} */ el = /** @type {?} */(( <HTMLScriptElement>doc.createElement('SCRIPT')));\n    el.setAttribute(attrName, attrValue);\n    return el;\n  }\n/**\n * @param {?} css\n * @param {?=} doc\n * @return {?}\n */\ncreateStyleElement(css: string, doc = document): HTMLStyleElement {\n    const /** @type {?} */ style = /** @type {?} */(( <HTMLStyleElement>doc.createElement('style')));\n    this.appendChild(style, this.createTextNode(css));\n    return style;\n  }\n/**\n * @param {?} el\n * @return {?}\n */\ncreateShadowRoot(el: HTMLElement): DocumentFragment { return ( /** @type {?} */((<any>el))).createShadowRoot(); }\n/**\n * @param {?} el\n * @return {?}\n */\ngetShadowRoot(el: HTMLElement): DocumentFragment { return ( /** @type {?} */((<any>el))).shadowRoot; }\n/**\n * @param {?} el\n * @return {?}\n */\ngetHost(el: HTMLElement): HTMLElement { return ( /** @type {?} */((<any>el))).host; }\n/**\n * @param {?} node\n * @return {?}\n */\nclone(node: Node): Node { return node.cloneNode(true); }\n/**\n * @param {?} element\n * @param {?} name\n * @return {?}\n */\ngetElementsByClassName(element: any, name: string): HTMLElement[] {\n    return element.getElementsByClassName(name);\n  }\n/**\n * @param {?} element\n * @param {?} name\n * @return {?}\n */\ngetElementsByTagName(element: any, name: string): HTMLElement[] {\n    return element.getElementsByTagName(name);\n  }\n/**\n * @param {?} element\n * @return {?}\n */\nclassList(element: any): any[] { return Array.prototype.slice.call(element.classList, 0); }\n/**\n * @param {?} element\n * @param {?} className\n * @return {?}\n */\naddClass(element: any, className: string) { element.classList.add(className); }\n/**\n * @param {?} element\n * @param {?} className\n * @return {?}\n */\nremoveClass(element: any, className: string) { element.classList.remove(className); }\n/**\n * @param {?} element\n * @param {?} className\n * @return {?}\n */\nhasClass(element: any, className: string): boolean {\n    return element.classList.contains(className);\n  }\n/**\n * @param {?} element\n * @param {?} styleName\n * @param {?} styleValue\n * @return {?}\n */\nsetStyle(element: any, styleName: string, styleValue: string) {\n    element.style[styleName] = styleValue;\n  }\n/**\n * @param {?} element\n * @param {?} stylename\n * @return {?}\n */\nremoveStyle(element: any, stylename: string) {\n    // IE requires '' instead of null\n    // see https://github.com/angular/angular/issues/7916\n    element.style[stylename] = '';\n  }\n/**\n * @param {?} element\n * @param {?} stylename\n * @return {?}\n */\ngetStyle(element: any, stylename: string): string { return element.style[stylename]; }\n/**\n * @param {?} element\n * @param {?} styleName\n * @param {?=} styleValue\n * @return {?}\n */\nhasStyle(element: any, styleName: string, styleValue?: string|null): boolean {\n    const /** @type {?} */ value = this.getStyle(element, styleName) || '';\n    return styleValue ? value == styleValue : value.length > 0;\n  }\n/**\n * @param {?} element\n * @return {?}\n */\ntagName(element: any): string { return element.tagName; }\n/**\n * @param {?} element\n * @return {?}\n */\nattributeMap(element: any): Map<string, string> {\n    const /** @type {?} */ res = new Map<string, string>();\n    const /** @type {?} */ elAttrs = element.attributes;\n    for (let /** @type {?} */ i = 0; i < elAttrs.length; i++) {\n      const /** @type {?} */ attrib = elAttrs[i];\n      res.set(attrib.name, attrib.value);\n    }\n    return res;\n  }\n/**\n * @param {?} element\n * @param {?} attribute\n * @return {?}\n */\nhasAttribute(element: Element, attribute: string): boolean {\n    return element.hasAttribute(attribute);\n  }\n/**\n * @param {?} element\n * @param {?} ns\n * @param {?} attribute\n * @return {?}\n */\nhasAttributeNS(element: Element, ns: string, attribute: string): boolean {\n    return element.hasAttributeNS(ns, attribute);\n  }\n/**\n * @param {?} element\n * @param {?} attribute\n * @return {?}\n */\ngetAttribute(element: Element, attribute: string): string|null {\n    return element.getAttribute(attribute);\n  }\n/**\n * @param {?} element\n * @param {?} ns\n * @param {?} name\n * @return {?}\n */\ngetAttributeNS(element: Element, ns: string, name: string): string {\n    return element.getAttributeNS(ns, name);\n  }\n/**\n * @param {?} element\n * @param {?} name\n * @param {?} value\n * @return {?}\n */\nsetAttribute(element: Element, name: string, value: string) { element.setAttribute(name, value); }\n/**\n * @param {?} element\n * @param {?} ns\n * @param {?} name\n * @param {?} value\n * @return {?}\n */\nsetAttributeNS(element: Element, ns: string, name: string, value: string) {\n    element.setAttributeNS(ns, name, value);\n  }\n/**\n * @param {?} element\n * @param {?} attribute\n * @return {?}\n */\nremoveAttribute(element: Element, attribute: string) { element.removeAttribute(attribute); }\n/**\n * @param {?} element\n * @param {?} ns\n * @param {?} name\n * @return {?}\n */\nremoveAttributeNS(element: Element, ns: string, name: string) {\n    element.removeAttributeNS(ns, name);\n  }\n/**\n * @param {?} el\n * @return {?}\n */\ntemplateAwareRoot(el: Node): any { return this.isTemplateElement(el) ? this.content(el) : el; }\n/**\n * @return {?}\n */\ncreateHtmlDocument(): HTMLDocument {\n    return document.implementation.createHTMLDocument('fakeTitle');\n  }\n/**\n * @param {?} el\n * @return {?}\n */\ngetBoundingClientRect(el: Element): any {\n    try {\n      return el.getBoundingClientRect();\n    } catch ( /** @type {?} */e) {\n      return {top: 0, bottom: 0, left: 0, right: 0, width: 0, height: 0};\n    }\n  }\n/**\n * @param {?} doc\n * @return {?}\n */\ngetTitle(doc: Document): string { return document.title; }\n/**\n * @param {?} doc\n * @param {?} newTitle\n * @return {?}\n */\nsetTitle(doc: Document, newTitle: string) { document.title = newTitle || ''; }\n/**\n * @param {?} n\n * @param {?} selector\n * @return {?}\n */\nelementMatches(n: any, selector: string): boolean {\n    if (n instanceof HTMLElement) {\n      return n.matches && n.matches(selector) ||\n          n.msMatchesSelector && n.msMatchesSelector(selector) ||\n          n.webkitMatchesSelector && n.webkitMatchesSelector(selector);\n    }\n\n    return false;\n  }\n/**\n * @param {?} el\n * @return {?}\n */\nisTemplateElement(el: Node): boolean {\n    return el instanceof HTMLElement && el.nodeName == 'TEMPLATE';\n  }\n/**\n * @param {?} node\n * @return {?}\n */\nisTextNode(node: Node): boolean { return node.nodeType === Node.TEXT_NODE; }\n/**\n * @param {?} node\n * @return {?}\n */\nisCommentNode(node: Node): boolean { return node.nodeType === Node.COMMENT_NODE; }\n/**\n * @param {?} node\n * @return {?}\n */\nisElementNode(node: Node): boolean { return node.nodeType === Node.ELEMENT_NODE; }\n/**\n * @param {?} node\n * @return {?}\n */\nhasShadowRoot(node: any): boolean {\n    return node.shadowRoot != null && node instanceof HTMLElement;\n  }\n/**\n * @param {?} node\n * @return {?}\n */\nisShadowRoot(node: any): boolean { return node instanceof DocumentFragment; }\n/**\n * @param {?} node\n * @return {?}\n */\nimportIntoDoc(node: Node): any { return document.importNode(this.templateAwareRoot(node), true); }\n/**\n * @param {?} node\n * @return {?}\n */\nadoptNode(node: Node): any { return document.adoptNode(node); }\n/**\n * @param {?} el\n * @return {?}\n */\ngetHref(el: Element): string { return ( /** @type {?} */((<any>el))).href; }\n/**\n * @param {?} event\n * @return {?}\n */\ngetEventKey(event: any): string {\n    let /** @type {?} */ key = event.key;\n    if (key == null) {\n      key = event.keyIdentifier;\n      // keyIdentifier is defined in the old draft of DOM Level 3 Events implemented by Chrome and\n      // Safari cf\n      // http://www.w3.org/TR/2007/WD-DOM-Level-3-Events-20071221/events.html#Events-KeyboardEvents-Interfaces\n      if (key == null) {\n        return 'Unidentified';\n      }\n      if (key.startsWith('U+')) {\n        key = String.fromCharCode(parseInt(key.substring(2), 16));\n        if (event.location === DOM_KEY_LOCATION_NUMPAD && _chromeNumKeyPadMap.hasOwnProperty(key)) {\n          // There is a bug in Chrome for numeric keypad keys:\n          // https://code.google.com/p/chromium/issues/detail?id=155654\n          // 1, 2, 3 ... are reported as A, B, C ...\n          key = ( /** @type {?} */((_chromeNumKeyPadMap as any)))[key];\n        }\n      }\n    }\n\n    return _keyMap[key] || key;\n  }\n/**\n * @param {?} doc\n * @param {?} target\n * @return {?}\n */\ngetGlobalEventTarget(doc: Document, target: string): EventTarget|null {\n    if (target === 'window') {\n      return window;\n    }\n    if (target === 'document') {\n      return document;\n    }\n    if (target === 'body') {\n      return document.body;\n    }\n    return null;\n  }\n/**\n * @return {?}\n */\ngetHistory(): History { return window.history; }\n/**\n * @return {?}\n */\ngetLocation(): Location { return window.location; }\n/**\n * @param {?} doc\n * @return {?}\n */\ngetBaseHref(doc: Document): string|null {\n    const /** @type {?} */ href = getBaseElementHref();\n    return href == null ? null : relativePath(href);\n  }\n/**\n * @return {?}\n */\nresetBaseElement(): void { baseElement = null; }\n/**\n * @return {?}\n */\ngetUserAgent(): string { return window.navigator.userAgent; }\n/**\n * @param {?} element\n * @param {?} name\n * @param {?} value\n * @return {?}\n */\nsetData(element: Element, name: string, value: string) {\n    this.setAttribute(element, 'data-' + name, value);\n  }\n/**\n * @param {?} element\n * @param {?} name\n * @return {?}\n */\ngetData(element: Element, name: string): string|null {\n    return this.getAttribute(element, 'data-' + name);\n  }\n/**\n * @param {?} element\n * @return {?}\n */\ngetComputedStyle(element: any): any { return getComputedStyle(element); }\n/**\n * @return {?}\n */\nsupportsWebAnimation(): boolean {\n    return typeof( /** @type {?} */((<any>Element))).prototype['animate'] === 'function';\n  }\n/**\n * @return {?}\n */\nperformanceNow(): number {\n    // performance.now() is not available in all browsers, see\n    // http://caniuse.com/#search=performance.now\n    return window.performance && window.performance.now ? window.performance.now() :\n                                                          new Date().getTime();\n  }\n/**\n * @return {?}\n */\nsupportsCookies(): boolean { return true; }\n/**\n * @param {?} name\n * @return {?}\n */\ngetCookie(name: string): string|null { return parseCookieValue(document.cookie, name); }\n/**\n * @param {?} name\n * @param {?} value\n * @return {?}\n */\nsetCookie(name: string, value: string) {\n    // document.cookie is magical, assigning into it assigns/overrides one cookie value, but does\n    // not clear other cookies.\n    document.cookie = encodeURIComponent(name) + '=' + encodeURIComponent(value);\n  }\n}\n\nlet /** @type {?} */ baseElement: HTMLElement|null = null;\n/**\n * @return {?}\n */\nfunction getBaseElementHref(): string|null {\n  if (!baseElement) {\n    baseElement = /** @type {?} */(( document.querySelector('base')));\n    if (!baseElement) {\n      return null;\n    }\n  }\n  return baseElement.getAttribute('href');\n}\n\n// based on urlUtils.js in AngularJS 1\nlet /** @type {?} */ urlParsingNode: any;\n/**\n * @param {?} url\n * @return {?}\n */\nfunction relativePath(url: any): string {\n  if (!urlParsingNode) {\n    urlParsingNode = document.createElement('a');\n  }\n  urlParsingNode.setAttribute('href', url);\n  return (urlParsingNode.pathname.charAt(0) === '/') ? urlParsingNode.pathname :\n                                                       '/' + urlParsingNode.pathname;\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {LocationChangeListener, PlatformLocation} from '@angular/common';\nimport {Inject, Injectable} from '@angular/core';\n\nimport {getDOM} from '../../dom/dom_adapter';\nimport {DOCUMENT} from '../../dom/dom_tokens';\n\nimport {supportsState} from './history';\n/**\n * `PlatformLocation` encapsulates all of the direct calls to platform APIs.\n * This class should not be used directly by an application developer. Instead, use\n * {\\@link Location}.\n */\nexport class BrowserPlatformLocation extends PlatformLocation {\nprivate _location: Location;\nprivate _history: History;\n/**\n * @param {?} _doc\n */\nconstructor(\nprivate _doc: any) {\n    super();\n    this._init();\n  }\n/**\n * \\@internal\n * @return {?}\n */\n_init() {\n    this._location = getDOM().getLocation();\n    this._history = getDOM().getHistory();\n  }\n/**\n * @return {?}\n */\nget location(): Location { return this._location; }\n/**\n * @return {?}\n */\ngetBaseHrefFromDOM(): string { return /** @type {?} */(( getDOM().getBaseHref(this._doc))); }\n/**\n * @param {?} fn\n * @return {?}\n */\nonPopState(fn: LocationChangeListener): void {\n    getDOM().getGlobalEventTarget(this._doc, 'window').addEventListener('popstate', fn, false);\n  }\n/**\n * @param {?} fn\n * @return {?}\n */\nonHashChange(fn: LocationChangeListener): void {\n    getDOM().getGlobalEventTarget(this._doc, 'window').addEventListener('hashchange', fn, false);\n  }\n/**\n * @return {?}\n */\nget pathname(): string { return this._location.pathname; }\n/**\n * @return {?}\n */\nget search(): string { return this._location.search; }\n/**\n * @return {?}\n */\nget hash(): string { return this._location.hash; }\n/**\n * @param {?} newPath\n * @return {?}\n */\nset pathname(newPath: string) { this._location.pathname = newPath; }\n/**\n * @param {?} state\n * @param {?} title\n * @param {?} url\n * @return {?}\n */\npushState(state: any, title: string, url: string): void {\n    if (supportsState()) {\n      this._history.pushState(state, title, url);\n    } else {\n      this._location.hash = url;\n    }\n  }\n/**\n * @param {?} state\n * @param {?} title\n * @param {?} url\n * @return {?}\n */\nreplaceState(state: any, title: string, url: string): void {\n    if (supportsState()) {\n      this._history.replaceState(state, title, url);\n    } else {\n      this._location.hash = url;\n    }\n  }\n/**\n * @return {?}\n */\nforward(): void { this._history.forward(); }\n/**\n * @return {?}\n */\nback(): void { this._history.back(); }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: undefined, decorators: [{ type: Inject, args: [DOCUMENT, ] }, ]},\n];\n}\n\nfunction BrowserPlatformLocation_tsickle_Closure_declarations() {\n/** @type {?} */\nBrowserPlatformLocation.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nBrowserPlatformLocation.ctorParameters;\n/** @type {?} */\nBrowserPlatformLocation.prototype._location;\n/** @type {?} */\nBrowserPlatformLocation.prototype._history;\n/** @type {?} */\nBrowserPlatformLocation.prototype._doc;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Inject, Injectable} from '@angular/core';\n\nimport {DomAdapter, getDOM} from '../dom/dom_adapter';\nimport {DOCUMENT} from '../dom/dom_tokens';\n\n\n/**\n * Represents a meta element.\n *\n * @experimental\n */\nexport type MetaDefinition = {\n  charset?: string; content?: string; httpEquiv?: string; id?: string; itemprop?: string;\n  name?: string;\n  property?: string;\n  scheme?: string;\n  url?: string;\n} &\n{\n  // TODO(IgorMinar): this type looks wrong\n  [prop: string]: string;\n};\n/**\n * A service that can be used to get and add meta tags.\n * \n * \\@experimental\n */\nexport class Meta {\nprivate _dom: DomAdapter;\n/**\n * @param {?} _doc\n */\nconstructor(\nprivate _doc: any) { this._dom = getDOM(); }\n/**\n * @param {?} tag\n * @param {?=} forceCreation\n * @return {?}\n */\naddTag(tag: MetaDefinition, forceCreation: boolean = false): HTMLMetaElement|null {\n    if (!tag) return null;\n    return this._getOrCreateElement(tag, forceCreation);\n  }\n/**\n * @param {?} tags\n * @param {?=} forceCreation\n * @return {?}\n */\naddTags(tags: MetaDefinition[], forceCreation: boolean = false): HTMLMetaElement[] {\n    if (!tags) return [];\n    return tags.reduce((result: HTMLMetaElement[], tag: MetaDefinition) => {\n      if (tag) {\n        result.push(this._getOrCreateElement(tag, forceCreation));\n      }\n      return result;\n    }, []);\n  }\n/**\n * @param {?} attrSelector\n * @return {?}\n */\ngetTag(attrSelector: string): HTMLMetaElement|null {\n    if (!attrSelector) return null;\n    return this._dom.querySelector(this._doc, `meta[${attrSelector}]`);\n  }\n/**\n * @param {?} attrSelector\n * @return {?}\n */\ngetTags(attrSelector: string): HTMLMetaElement[] {\n    if (!attrSelector) return [];\n    const /** @type {?} */ list /*NodeList*/ = this._dom.querySelectorAll(this._doc, `meta[${attrSelector}]`);\n    return list ? [].slice.call(list) : [];\n  }\n/**\n * @param {?} tag\n * @param {?=} selector\n * @return {?}\n */\nupdateTag(tag: MetaDefinition, selector?: string): HTMLMetaElement|null {\n    if (!tag) return null;\n    selector = selector || this._parseSelector(tag);\n    const /** @type {?} */ meta: HTMLMetaElement = /** @type {?} */(( this.getTag(selector)));\n    if (meta) {\n      return this._setMetaElementAttributes(tag, meta);\n    }\n    return this._getOrCreateElement(tag, true);\n  }\n/**\n * @param {?} attrSelector\n * @return {?}\n */\nremoveTag(attrSelector: string): void { this.removeTagElement( /** @type {?} */((this.getTag(attrSelector)))); }\n/**\n * @param {?} meta\n * @return {?}\n */\nremoveTagElement(meta: HTMLMetaElement): void {\n    if (meta) {\n      this._dom.remove(meta);\n    }\n  }\n/**\n * @param {?} meta\n * @param {?=} forceCreation\n * @return {?}\n */\nprivate _getOrCreateElement(meta: MetaDefinition, forceCreation: boolean = false):\n      HTMLMetaElement {\n    if (!forceCreation) {\n      const /** @type {?} */ selector: string = this._parseSelector(meta);\n      const /** @type {?} */ elem: HTMLMetaElement = /** @type {?} */(( this.getTag(selector)));\n      // It's allowed to have multiple elements with the same name so it's not enough to\n      // just check that element with the same name already present on the page. We also need to\n      // check if element has tag attributes\n      if (elem && this._containsAttributes(meta, elem)) return elem;\n    }\n    const /** @type {?} */ element: HTMLMetaElement = /** @type {?} */(( this._dom.createElement('meta') as HTMLMetaElement));\n    this._setMetaElementAttributes(meta, element);\n    const /** @type {?} */ head = this._dom.getElementsByTagName(this._doc, 'head')[0];\n    this._dom.appendChild(head, element);\n    return element;\n  }\n/**\n * @param {?} tag\n * @param {?} el\n * @return {?}\n */\nprivate _setMetaElementAttributes(tag: MetaDefinition, el: HTMLMetaElement): HTMLMetaElement {\n    Object.keys(tag).forEach((prop: string) => this._dom.setAttribute(el, prop, tag[prop]));\n    return el;\n  }\n/**\n * @param {?} tag\n * @return {?}\n */\nprivate _parseSelector(tag: MetaDefinition): string {\n    const /** @type {?} */ attr: string = tag.name ? 'name' : 'property';\n    return `${attr}=\"${tag[attr]}\"`;\n  }\n/**\n * @param {?} tag\n * @param {?} elem\n * @return {?}\n */\nprivate _containsAttributes(tag: MetaDefinition, elem: HTMLMetaElement): boolean {\n    return Object.keys(tag).every((key: string) => this._dom.getAttribute(elem, key) === tag[key]);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: undefined, decorators: [{ type: Inject, args: [DOCUMENT, ] }, ]},\n];\n}\n\nfunction Meta_tsickle_Closure_declarations() {\n/** @type {?} */\nMeta.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMeta.ctorParameters;\n/** @type {?} */\nMeta.prototype._dom;\n/** @type {?} */\nMeta.prototype._doc;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {APP_INITIALIZER, ApplicationInitStatus, Inject, InjectionToken, Injector, Provider} from '@angular/core';\n\nimport {getDOM} from '../dom/dom_adapter';\nimport {DOCUMENT} from '../dom/dom_tokens';\n/**\n * An id that identifies a particular application being bootstrapped, that should\n * match across the client/server boundary.\n */\nexport const TRANSITION_ID = new InjectionToken('TRANSITION_ID');\n/**\n * @param {?} transitionId\n * @param {?} document\n * @param {?} injector\n * @return {?}\n */\nexport function appInitializerFactory(transitionId: string, document: any, injector: Injector) {\n  return () => {\n    // Wait for all application initializers to be completed before removing the styles set by\n    // the server.\n    injector.get(ApplicationInitStatus).donePromise.then(() => {\n      const /** @type {?} */ dom = getDOM();\n      const /** @type {?} */ styles: any[] =\n          Array.prototype.slice.apply(dom.querySelectorAll(document, `style[ng-transition]`));\n      styles.filter(el => dom.getAttribute(el, 'ng-transition') === transitionId)\n          .forEach(el => dom.remove(el));\n    });\n  };\n}\n\nexport const /** @type {?} */ SERVER_TRANSITION_PROVIDERS: Provider[] = [\n  {\n    provide: APP_INITIALIZER,\n    useFactory: appInitializerFactory,\n    deps: [TRANSITION_ID, DOCUMENT, Injector],\n    multi: true\n  },\n];\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {GetTestability, Testability, TestabilityRegistry, setTestabilityGetter, ɵglobal as global} from '@angular/core';\n\nimport {getDOM} from '../dom/dom_adapter';\nexport class BrowserGetTestability implements GetTestability {\n/**\n * @return {?}\n */\nstatic init() { setTestabilityGetter(new BrowserGetTestability()); }\n/**\n * @param {?} registry\n * @return {?}\n */\naddToWindow(registry: TestabilityRegistry): void {\n    global['getAngularTestability'] = (elem: any, findInAncestors: boolean = true) => {\n      const /** @type {?} */ testability = registry.findTestabilityInTree(elem, findInAncestors);\n      if (testability == null) {\n        throw new Error('Could not find testability for element.');\n      }\n      return testability;\n    };\n\n    global['getAllAngularTestabilities'] = () => registry.getAllTestabilities();\n\n    global['getAllAngularRootElements'] = () => registry.getAllRootElements();\n\n    const /** @type {?} */ whenAllStable = (callback: any /** TODO #9100 */) => {\n      const /** @type {?} */ testabilities = global['getAllAngularTestabilities']();\n      let /** @type {?} */ count = testabilities.length;\n      let /** @type {?} */ didWork = false;\n      const /** @type {?} */ decrement = function(didWork_: any /** TODO #9100 */) {\n        didWork = didWork || didWork_;\n        count--;\n        if (count == 0) {\n          callback(didWork);\n        }\n      };\n      testabilities.forEach(function(testability: any /** TODO #9100 */) {\n        testability.whenStable(decrement);\n      });\n    };\n\n    if (!global['frameworkStabilizers']) {\n      global['frameworkStabilizers'] = [];\n    }\n    global['frameworkStabilizers'].push(whenAllStable);\n  }\n/**\n * @param {?} registry\n * @param {?} elem\n * @param {?} findInAncestors\n * @return {?}\n */\nfindTestabilityInTree(registry: TestabilityRegistry, elem: any, findInAncestors: boolean):\n      Testability|null {\n    if (elem == null) {\n      return null;\n    }\n    const /** @type {?} */ t = registry.getTestability(elem);\n    if (t != null) {\n      return t;\n    } else if (!findInAncestors) {\n      return null;\n    }\n    if (getDOM().isShadowRoot(elem)) {\n      return this.findTestabilityInTree(registry, getDOM().getHost(elem), true);\n    }\n    return this.findTestabilityInTree(registry, getDOM().parentElement(elem), true);\n  }\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Inject, Injectable} from '@angular/core';\n\nimport {getDOM} from '../dom/dom_adapter';\nimport {DOCUMENT} from '../dom/dom_tokens';\n/**\n * A service that can be used to get and set the title of a current HTML document.\n * \n * Since an Angular application can't be bootstrapped on the entire HTML document (`<html>` tag)\n * it is not possible to bind to the `text` property of the `HTMLTitleElement` elements\n * (representing the `<title>` tag). Instead, this service can be used to set and get the current\n * title value.\n * \n * \\@experimental\n */\nexport class Title {\n/**\n * @param {?} _doc\n */\nconstructor(\nprivate _doc: any) {}\n/**\n * Get the title of the current HTML document.\n * @return {?}\n */\ngetTitle(): string { return getDOM().getTitle(this._doc); }\n/**\n * Set the title of the current HTML document.\n * @param {?} newTitle\n * @return {?}\n */\nsetTitle(newTitle: string) { getDOM().setTitle(this._doc, newTitle); }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: undefined, decorators: [{ type: Inject, args: [DOCUMENT, ] }, ]},\n];\n}\n\nfunction Title_tsickle_Closure_declarations() {\n/** @type {?} */\nTitle.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nTitle.ctorParameters;\n/** @type {?} */\nTitle.prototype._doc;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport * as core from '@angular/core';\nimport {exportNgVar} from '../util';\n\nconst /** @type {?} */ CORE_TOKENS = {\n  'ApplicationRef': core.ApplicationRef,\n  'NgZone': core.NgZone,\n};\n\nconst /** @type {?} */ INSPECT_GLOBAL_NAME = 'probe';\nconst /** @type {?} */ CORE_TOKENS_GLOBAL_NAME = 'coreTokens';\n/**\n * Returns a {\\@link DebugElement} for the given native DOM element, or\n * null if the given native element does not have an Angular view associated\n * with it.\n * @param {?} element\n * @return {?}\n */\nexport function inspectNativeElement(element: any): core.DebugNode|null {\n  return core.getDebugNode(element);\n}\n/**\n * Deprecated. Use the one from '\\@angular/core'.\n * @deprecated\n */\nexport class NgProbeToken {\n/**\n * @param {?} name\n * @param {?} token\n */\nconstructor(public name: string,\npublic token: any) {}\n}\n\nfunction NgProbeToken_tsickle_Closure_declarations() {\n/** @type {?} */\nNgProbeToken.prototype.name;\n/** @type {?} */\nNgProbeToken.prototype.token;\n}\n\n/**\n * @param {?} extraTokens\n * @param {?} coreTokens\n * @return {?}\n */\nexport function _createNgProbe(extraTokens: NgProbeToken[], coreTokens: core.NgProbeToken[]): any {\n  const /** @type {?} */ tokens = (extraTokens || []).concat(coreTokens || []);\n  exportNgVar(INSPECT_GLOBAL_NAME, inspectNativeElement);\n  exportNgVar(CORE_TOKENS_GLOBAL_NAME, {...CORE_TOKENS, ..._ngProbeTokensToMap(tokens || [])});\n  return () => inspectNativeElement;\n}\n/**\n * @param {?} tokens\n * @return {?}\n */\nfunction _ngProbeTokensToMap(tokens: NgProbeToken[]): {[name: string]: any} {\n  return tokens.reduce((prev: any, t: any) => (prev[t.name] = t.token, prev), {});\n}\n/**\n * Providers which support debugging Angular applications (e.g. via `ng.probe`).\n */\nexport const ELEMENT_PROBE_PROVIDERS: core.Provider[] = [\n  {\n    provide: core.APP_INITIALIZER,\n    useFactory: _createNgProbe,\n    deps: [\n      [NgProbeToken, new core.Optional()],\n      [core.NgProbeToken, new core.Optional()],\n    ],\n    multi: true,\n  },\n];\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Inject, Injectable, InjectionToken, NgZone} from '@angular/core';\n\nimport {getDOM} from '../dom_adapter';\n/**\n * \\@stable\n */\nexport const EVENT_MANAGER_PLUGINS =\n    new InjectionToken<EventManagerPlugin[]>('EventManagerPlugins');\n/**\n * \\@stable\n */\nexport class EventManager {\nprivate _plugins: EventManagerPlugin[];\nprivate _eventNameToPlugin = new Map<string, EventManagerPlugin>();\n/**\n * @param {?} plugins\n * @param {?} _zone\n */\nconstructor( plugins: EventManagerPlugin[],\nprivate _zone: NgZone) {\n    plugins.forEach(p => p.manager = this);\n    this._plugins = plugins.slice().reverse();\n  }\n/**\n * @param {?} element\n * @param {?} eventName\n * @param {?} handler\n * @return {?}\n */\naddEventListener(element: HTMLElement, eventName: string, handler: Function): Function {\n    const /** @type {?} */ plugin = this._findPluginFor(eventName);\n    return plugin.addEventListener(element, eventName, handler);\n  }\n/**\n * @param {?} target\n * @param {?} eventName\n * @param {?} handler\n * @return {?}\n */\naddGlobalEventListener(target: string, eventName: string, handler: Function): Function {\n    const /** @type {?} */ plugin = this._findPluginFor(eventName);\n    return plugin.addGlobalEventListener(target, eventName, handler);\n  }\n/**\n * @return {?}\n */\ngetZone(): NgZone { return this._zone; }\n/**\n * \\@internal\n * @param {?} eventName\n * @return {?}\n */\n_findPluginFor(eventName: string): EventManagerPlugin {\n    const /** @type {?} */ plugin = this._eventNameToPlugin.get(eventName);\n    if (plugin) {\n      return plugin;\n    }\n\n    const /** @type {?} */ plugins = this._plugins;\n    for (let /** @type {?} */ i = 0; i < plugins.length; i++) {\n      const /** @type {?} */ plugin = plugins[i];\n      if (plugin.supports(eventName)) {\n        this._eventNameToPlugin.set(eventName, plugin);\n        return plugin;\n      }\n    }\n    throw new Error(`No event manager plugin found for event ${eventName}`);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Array, decorators: [{ type: Inject, args: [EVENT_MANAGER_PLUGINS, ] }, ]},\n{type: NgZone, },\n];\n}\n\nfunction EventManager_tsickle_Closure_declarations() {\n/** @type {?} */\nEventManager.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nEventManager.ctorParameters;\n/** @type {?} */\nEventManager.prototype._plugins;\n/** @type {?} */\nEventManager.prototype._eventNameToPlugin;\n/** @type {?} */\nEventManager.prototype._zone;\n}\n\n/**\n * @abstract\n */\nexport abstract class EventManagerPlugin {\n/**\n * @param {?} _doc\n */\nconstructor(private _doc: any) {}\n\n  manager: EventManager;\n/**\n * @abstract\n * @param {?} eventName\n * @return {?}\n */\nsupports(eventName: string) {}\n/**\n * @abstract\n * @param {?} element\n * @param {?} eventName\n * @param {?} handler\n * @return {?}\n */\naddEventListener(element: HTMLElement, eventName: string, handler: Function) {}\n/**\n * @param {?} element\n * @param {?} eventName\n * @param {?} handler\n * @return {?}\n */\naddGlobalEventListener(element: string, eventName: string, handler: Function): Function {\n    const /** @type {?} */ target: HTMLElement = getDOM().getGlobalEventTarget(this._doc, element);\n    if (!target) {\n      throw new Error(`Unsupported event target ${target} for event ${eventName}`);\n    }\n    return this.addEventListener(target, eventName, handler);\n  }\n}\n\nfunction EventManagerPlugin_tsickle_Closure_declarations() {\n/** @type {?} */\nEventManagerPlugin.prototype.manager;\n/** @type {?} */\nEventManagerPlugin.prototype._doc;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Inject, Injectable, OnDestroy} from '@angular/core';\nimport {getDOM} from './dom_adapter';\nimport {DOCUMENT} from './dom_tokens';\nexport class SharedStylesHost {\n/**\n * \\@internal\n */\nprotected _stylesSet = new Set<string>();\n/**\n * @param {?} styles\n * @return {?}\n */\naddStyles(styles: string[]): void {\n    const /** @type {?} */ additions = new Set<string>();\n    styles.forEach(style => {\n      if (!this._stylesSet.has(style)) {\n        this._stylesSet.add(style);\n        additions.add(style);\n      }\n    });\n    this.onStylesAdded(additions);\n  }\n/**\n * @param {?} additions\n * @return {?}\n */\nonStylesAdded(additions: Set<string>): void {}\n/**\n * @return {?}\n */\ngetAllStyles(): string[] { return Array.from(this._stylesSet); }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction SharedStylesHost_tsickle_Closure_declarations() {\n/** @type {?} */\nSharedStylesHost.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nSharedStylesHost.ctorParameters;\n/**\n * \\@internal\n * @type {?}\n */\nSharedStylesHost.prototype._stylesSet;\n}\n\nexport class DomSharedStylesHost extends SharedStylesHost implements OnDestroy {\nprivate _hostNodes = new Set<Node>();\nprivate _styleNodes = new Set<Node>();\n/**\n * @param {?} _doc\n */\nconstructor(\nprivate _doc: any) {\n    super();\n    this._hostNodes.add(_doc.head);\n  }\n/**\n * @param {?} styles\n * @param {?} host\n * @return {?}\n */\nprivate _addStylesToHost(styles: Set<string>, host: Node): void {\n    styles.forEach((style: string) => {\n      const /** @type {?} */ styleEl = this._doc.createElement('style');\n      styleEl.textContent = style;\n      this._styleNodes.add(host.appendChild(styleEl));\n    });\n  }\n/**\n * @param {?} hostNode\n * @return {?}\n */\naddHost(hostNode: Node): void {\n    this._addStylesToHost(this._stylesSet, hostNode);\n    this._hostNodes.add(hostNode);\n  }\n/**\n * @param {?} hostNode\n * @return {?}\n */\nremoveHost(hostNode: Node): void { this._hostNodes.delete(hostNode); }\n/**\n * @param {?} additions\n * @return {?}\n */\nonStylesAdded(additions: Set<string>): void {\n    this._hostNodes.forEach(hostNode => this._addStylesToHost(additions, hostNode));\n  }\n/**\n * @return {?}\n */\nngOnDestroy(): void { this._styleNodes.forEach(styleNode => getDOM().remove(styleNode)); }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: undefined, decorators: [{ type: Inject, args: [DOCUMENT, ] }, ]},\n];\n}\n\nfunction DomSharedStylesHost_tsickle_Closure_declarations() {\n/** @type {?} */\nDomSharedStylesHost.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nDomSharedStylesHost.ctorParameters;\n/** @type {?} */\nDomSharedStylesHost.prototype._hostNodes;\n/** @type {?} */\nDomSharedStylesHost.prototype._styleNodes;\n/** @type {?} */\nDomSharedStylesHost.prototype._doc;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Injectable, Renderer2, RendererFactory2, RendererStyleFlags2, RendererType2, ViewEncapsulation} from '@angular/core';\n\nimport {EventManager} from './events/event_manager';\nimport {DomSharedStylesHost} from './shared_styles_host';\n\nexport const /** @type {?} */ NAMESPACE_URIS: {[ns: string]: string} = {\n  'svg': 'http://www.w3.org/2000/svg',\n  'xhtml': 'http://www.w3.org/1999/xhtml',\n  'xlink': 'http://www.w3.org/1999/xlink',\n  'xml': 'http://www.w3.org/XML/1998/namespace',\n  'xmlns': 'http://www.w3.org/2000/xmlns/',\n};\n\nconst /** @type {?} */ COMPONENT_REGEX = /%COMP%/g;\nexport const /** @type {?} */ COMPONENT_VARIABLE = '%COMP%';\nexport const /** @type {?} */ HOST_ATTR = `_nghost-${COMPONENT_VARIABLE}`;\nexport const /** @type {?} */ CONTENT_ATTR = `_ngcontent-${COMPONENT_VARIABLE}`;\n/**\n * @param {?} componentShortId\n * @return {?}\n */\nexport function shimContentAttribute(componentShortId: string): string {\n  return CONTENT_ATTR.replace(COMPONENT_REGEX, componentShortId);\n}\n/**\n * @param {?} componentShortId\n * @return {?}\n */\nexport function shimHostAttribute(componentShortId: string): string {\n  return HOST_ATTR.replace(COMPONENT_REGEX, componentShortId);\n}\n/**\n * @param {?} compId\n * @param {?} styles\n * @param {?} target\n * @return {?}\n */\nexport function flattenStyles(\n    compId: string, styles: Array<any|any[]>, target: string[]): string[] {\n  for (let /** @type {?} */ i = 0; i < styles.length; i++) {\n    let /** @type {?} */ style = styles[i];\n\n    if (Array.isArray(style)) {\n      flattenStyles(compId, style, target);\n    } else {\n      style = style.replace(COMPONENT_REGEX, compId);\n      target.push(style);\n    }\n  }\n  return target;\n}\n/**\n * @param {?} eventHandler\n * @return {?}\n */\nfunction decoratePreventDefault(eventHandler: Function): Function {\n  return (event: any) => {\n    const /** @type {?} */ allowDefaultBehavior = eventHandler(event);\n    if (allowDefaultBehavior === false) {\n      // TODO(tbosch): move preventDefault into event plugins...\n      event.preventDefault();\n      event.returnValue = false;\n    }\n  };\n}\nexport class DomRendererFactory2 implements RendererFactory2 {\nprivate rendererByCompId = new Map<string, Renderer2>();\nprivate defaultRenderer: Renderer2;\n/**\n * @param {?} eventManager\n * @param {?} sharedStylesHost\n */\nconstructor(private eventManager: EventManager,\nprivate sharedStylesHost: DomSharedStylesHost) {\n    this.defaultRenderer = new DefaultDomRenderer2(eventManager);\n  }\n/**\n * @param {?} element\n * @param {?} type\n * @return {?}\n */\ncreateRenderer(element: any, type: RendererType2|null): Renderer2 {\n    if (!element || !type) {\n      return this.defaultRenderer;\n    }\n    switch (type.encapsulation) {\n      case ViewEncapsulation.Emulated: {\n        let /** @type {?} */ renderer = this.rendererByCompId.get(type.id);\n        if (!renderer) {\n          renderer =\n              new EmulatedEncapsulationDomRenderer2(this.eventManager, this.sharedStylesHost, type);\n          this.rendererByCompId.set(type.id, renderer);\n        }\n        ( /** @type {?} */((<EmulatedEncapsulationDomRenderer2>renderer))).applyToHost(element);\n        return renderer;\n      }\n      case ViewEncapsulation.Native:\n        return new ShadowDomRenderer(this.eventManager, this.sharedStylesHost, element, type);\n      default: {\n        if (!this.rendererByCompId.has(type.id)) {\n          const /** @type {?} */ styles = flattenStyles(type.id, type.styles, []);\n          this.sharedStylesHost.addStyles(styles);\n          this.rendererByCompId.set(type.id, this.defaultRenderer);\n        }\n        return this.defaultRenderer;\n      }\n    }\n  }\n/**\n * @return {?}\n */\nbegin() {}\n/**\n * @return {?}\n */\nend() {}\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: EventManager, },\n{type: DomSharedStylesHost, },\n];\n}\n\nfunction DomRendererFactory2_tsickle_Closure_declarations() {\n/** @type {?} */\nDomRendererFactory2.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nDomRendererFactory2.ctorParameters;\n/** @type {?} */\nDomRendererFactory2.prototype.rendererByCompId;\n/** @type {?} */\nDomRendererFactory2.prototype.defaultRenderer;\n/** @type {?} */\nDomRendererFactory2.prototype.eventManager;\n/** @type {?} */\nDomRendererFactory2.prototype.sharedStylesHost;\n}\n\nclass DefaultDomRenderer2 implements Renderer2 {\n  data: {[key: string]: any} = Object.create(null);\n/**\n * @param {?} eventManager\n */\nconstructor(private eventManager: EventManager) {}\n/**\n * @return {?}\n */\ndestroy(): void {}\n\n  destroyNode: null;\n/**\n * @param {?} name\n * @param {?=} namespace\n * @return {?}\n */\ncreateElement(name: string, namespace?: string): any {\n    if (namespace) {\n      return document.createElementNS(NAMESPACE_URIS[namespace], name);\n    }\n\n    return document.createElement(name);\n  }\n/**\n * @param {?} value\n * @return {?}\n */\ncreateComment(value: string): any { return document.createComment(value); }\n/**\n * @param {?} value\n * @return {?}\n */\ncreateText(value: string): any { return document.createTextNode(value); }\n/**\n * @param {?} parent\n * @param {?} newChild\n * @return {?}\n */\nappendChild(parent: any, newChild: any): void { parent.appendChild(newChild); }\n/**\n * @param {?} parent\n * @param {?} newChild\n * @param {?} refChild\n * @return {?}\n */\ninsertBefore(parent: any, newChild: any, refChild: any): void {\n    if (parent) {\n      parent.insertBefore(newChild, refChild);\n    }\n  }\n/**\n * @param {?} parent\n * @param {?} oldChild\n * @return {?}\n */\nremoveChild(parent: any, oldChild: any): void {\n    if (parent) {\n      parent.removeChild(oldChild);\n    }\n  }\n/**\n * @param {?} selectorOrNode\n * @return {?}\n */\nselectRootElement(selectorOrNode: string|any): any {\n    let /** @type {?} */ el: any = typeof selectorOrNode === 'string' ? document.querySelector(selectorOrNode) :\n                                                       selectorOrNode;\n    if (!el) {\n      throw new Error(`The selector \"${selectorOrNode}\" did not match any elements`);\n    }\n    el.textContent = '';\n    return el;\n  }\n/**\n * @param {?} node\n * @return {?}\n */\nparentNode(node: any): any { return node.parentNode; }\n/**\n * @param {?} node\n * @return {?}\n */\nnextSibling(node: any): any { return node.nextSibling; }\n/**\n * @param {?} el\n * @param {?} name\n * @param {?} value\n * @param {?=} namespace\n * @return {?}\n */\nsetAttribute(el: any, name: string, value: string, namespace?: string): void {\n    if (namespace) {\n      name = `${namespace}:${name}`;\n      const /** @type {?} */ namespaceUri = NAMESPACE_URIS[namespace];\n      if (namespaceUri) {\n        el.setAttributeNS(namespaceUri, name, value);\n      } else {\n        el.setAttribute(name, value);\n      }\n    } else {\n      el.setAttribute(name, value);\n    }\n  }\n/**\n * @param {?} el\n * @param {?} name\n * @param {?=} namespace\n * @return {?}\n */\nremoveAttribute(el: any, name: string, namespace?: string): void {\n    if (namespace) {\n      const /** @type {?} */ namespaceUri = NAMESPACE_URIS[namespace];\n      if (namespaceUri) {\n        el.removeAttributeNS(namespaceUri, name);\n      } else {\n        el.removeAttribute(`${namespace}:${name}`);\n      }\n    } else {\n      el.removeAttribute(name);\n    }\n  }\n/**\n * @param {?} el\n * @param {?} name\n * @return {?}\n */\naddClass(el: any, name: string): void { el.classList.add(name); }\n/**\n * @param {?} el\n * @param {?} name\n * @return {?}\n */\nremoveClass(el: any, name: string): void { el.classList.remove(name); }\n/**\n * @param {?} el\n * @param {?} style\n * @param {?} value\n * @param {?} flags\n * @return {?}\n */\nsetStyle(el: any, style: string, value: any, flags: RendererStyleFlags2): void {\n    if (flags & RendererStyleFlags2.DashCase) {\n      el.style.setProperty(\n          style, value, !!(flags & RendererStyleFlags2.Important) ? 'important' : '');\n    } else {\n      el.style[style] = value;\n    }\n  }\n/**\n * @param {?} el\n * @param {?} style\n * @param {?} flags\n * @return {?}\n */\nremoveStyle(el: any, style: string, flags: RendererStyleFlags2): void {\n    if (flags & RendererStyleFlags2.DashCase) {\n      el.style.removeProperty(style);\n    } else {\n      // IE requires '' instead of null\n      // see https://github.com/angular/angular/issues/7916\n      el.style[style] = '';\n    }\n  }\n/**\n * @param {?} el\n * @param {?} name\n * @param {?} value\n * @return {?}\n */\nsetProperty(el: any, name: string, value: any): void {\n    checkNoSyntheticProp(name, 'property');\n    el[name] = value;\n  }\n/**\n * @param {?} node\n * @param {?} value\n * @return {?}\n */\nsetValue(node: any, value: string): void { node.nodeValue = value; }\n/**\n * @param {?} target\n * @param {?} event\n * @param {?} callback\n * @return {?}\n */\nlisten(target: 'window'|'document'|'body'|any, event: string, callback: (event: any) => boolean):\n      () => void {\n    checkNoSyntheticProp(event, 'listener');\n    if (typeof target === 'string') {\n      return /** @type {?} */(( <() => void>this.eventManager.addGlobalEventListener(\n          target, event, decoratePreventDefault(callback))));\n    }\n    return /** @type {?} */(( /** @type {?} */(( <() => void>this.eventManager.addEventListener(\n               target, event, decoratePreventDefault(callback)))) as() => void));\n  }\n}\n\nfunction DefaultDomRenderer2_tsickle_Closure_declarations() {\n/** @type {?} */\nDefaultDomRenderer2.prototype.data;\n/** @type {?} */\nDefaultDomRenderer2.prototype.destroyNode;\n/** @type {?} */\nDefaultDomRenderer2.prototype.eventManager;\n}\n\n\nconst /** @type {?} */ AT_CHARCODE = '@'.charCodeAt(0);\n/**\n * @param {?} name\n * @param {?} nameKind\n * @return {?}\n */\nfunction checkNoSyntheticProp(name: string, nameKind: string) {\n  if (name.charCodeAt(0) === AT_CHARCODE) {\n    throw new Error(\n        `Found the synthetic ${nameKind} ${name}. Please include either \"BrowserAnimationsModule\" or \"NoopAnimationsModule\" in your application.`);\n  }\n}\nclass EmulatedEncapsulationDomRenderer2 extends DefaultDomRenderer2 {\nprivate contentAttr: string;\nprivate hostAttr: string;\n/**\n * @param {?} eventManager\n * @param {?} sharedStylesHost\n * @param {?} component\n */\nconstructor(\n      eventManager: EventManager, sharedStylesHost: DomSharedStylesHost,\nprivate component: RendererType2) {\n    super(eventManager);\n    const styles = flattenStyles(component.id, component.styles, []);\n    sharedStylesHost.addStyles(styles);\n\n    this.contentAttr = shimContentAttribute(component.id);\n    this.hostAttr = shimHostAttribute(component.id);\n  }\n/**\n * @param {?} element\n * @return {?}\n */\napplyToHost(element: any) { super.setAttribute(element, this.hostAttr, ''); }\n/**\n * @param {?} parent\n * @param {?} name\n * @return {?}\n */\ncreateElement(parent: any, name: string): Element {\n    const /** @type {?} */ el = super.createElement(parent, name);\n    super.setAttribute(el, this.contentAttr, '');\n    return el;\n  }\n}\n\nfunction EmulatedEncapsulationDomRenderer2_tsickle_Closure_declarations() {\n/** @type {?} */\nEmulatedEncapsulationDomRenderer2.prototype.contentAttr;\n/** @type {?} */\nEmulatedEncapsulationDomRenderer2.prototype.hostAttr;\n/** @type {?} */\nEmulatedEncapsulationDomRenderer2.prototype.component;\n}\n\nclass ShadowDomRenderer extends DefaultDomRenderer2 {\nprivate shadowRoot: any;\n/**\n * @param {?} eventManager\n * @param {?} sharedStylesHost\n * @param {?} hostEl\n * @param {?} component\n */\nconstructor(\n      eventManager: EventManager,\nprivate sharedStylesHost: DomSharedStylesHost,\nprivate hostEl: any,\nprivate component: RendererType2) {\n    super(eventManager);\n    this.shadowRoot = (hostEl as any).createShadowRoot();\n    this.sharedStylesHost.addHost(this.shadowRoot);\n    const styles = flattenStyles(component.id, component.styles, []);\n    for (let i = 0; i < styles.length; i++) {\n      const styleEl = document.createElement('style');\n      styleEl.textContent = styles[i];\n      this.shadowRoot.appendChild(styleEl);\n    }\n  }\n/**\n * @param {?} node\n * @return {?}\n */\nprivate nodeOrShadowRoot(node: any): any { return node === this.hostEl ? this.shadowRoot : node; }\n/**\n * @return {?}\n */\ndestroy() { this.sharedStylesHost.removeHost(this.shadowRoot); }\n/**\n * @param {?} parent\n * @param {?} newChild\n * @return {?}\n */\nappendChild(parent: any, newChild: any): void {\n    return super.appendChild(this.nodeOrShadowRoot(parent), newChild);\n  }\n/**\n * @param {?} parent\n * @param {?} newChild\n * @param {?} refChild\n * @return {?}\n */\ninsertBefore(parent: any, newChild: any, refChild: any): void {\n    return super.insertBefore(this.nodeOrShadowRoot(parent), newChild, refChild);\n  }\n/**\n * @param {?} parent\n * @param {?} oldChild\n * @return {?}\n */\nremoveChild(parent: any, oldChild: any): void {\n    return super.removeChild(this.nodeOrShadowRoot(parent), oldChild);\n  }\n/**\n * @param {?} node\n * @return {?}\n */\nparentNode(node: any): any {\n    return this.nodeOrShadowRoot(super.parentNode(this.nodeOrShadowRoot(node)));\n  }\n}\n\nfunction ShadowDomRenderer_tsickle_Closure_declarations() {\n/** @type {?} */\nShadowDomRenderer.prototype.shadowRoot;\n/** @type {?} */\nShadowDomRenderer.prototype.sharedStylesHost;\n/** @type {?} */\nShadowDomRenderer.prototype.hostEl;\n/** @type {?} */\nShadowDomRenderer.prototype.component;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Inject, Injectable} from '@angular/core';\n\nimport {DOCUMENT} from '../dom_tokens';\n\nimport {EventManagerPlugin} from './event_manager';\nexport class DomEventsPlugin extends EventManagerPlugin {\n/**\n * @param {?} doc\n */\nconstructor( doc: any) { super(doc); }\n/**\n * @param {?} eventName\n * @return {?}\n */\nsupports(eventName: string): boolean { return true; }\n/**\n * @param {?} element\n * @param {?} eventName\n * @param {?} handler\n * @return {?}\n */\naddEventListener(element: HTMLElement, eventName: string, handler: Function): Function {\n    element.addEventListener(eventName, /** @type {?} */(( handler as any)), false);\n    return () => element.removeEventListener(eventName, /** @type {?} */(( handler as any)), false);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: undefined, decorators: [{ type: Inject, args: [DOCUMENT, ] }, ]},\n];\n}\n\nfunction DomEventsPlugin_tsickle_Closure_declarations() {\n/** @type {?} */\nDomEventsPlugin.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nDomEventsPlugin.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Inject, Injectable, InjectionToken} from '@angular/core';\n\nimport {DOCUMENT} from '../dom_tokens';\n\nimport {EventManagerPlugin} from './event_manager';\n\nconst /** @type {?} */ EVENT_NAMES = {\n  // pan\n  'pan': true,\n  'panstart': true,\n  'panmove': true,\n  'panend': true,\n  'pancancel': true,\n  'panleft': true,\n  'panright': true,\n  'panup': true,\n  'pandown': true,\n  // pinch\n  'pinch': true,\n  'pinchstart': true,\n  'pinchmove': true,\n  'pinchend': true,\n  'pinchcancel': true,\n  'pinchin': true,\n  'pinchout': true,\n  // press\n  'press': true,\n  'pressup': true,\n  // rotate\n  'rotate': true,\n  'rotatestart': true,\n  'rotatemove': true,\n  'rotateend': true,\n  'rotatecancel': true,\n  // swipe\n  'swipe': true,\n  'swipeleft': true,\n  'swiperight': true,\n  'swipeup': true,\n  'swipedown': true,\n  // tap\n  'tap': true,\n};\n/**\n * A DI token that you can use to provide{\\@link HammerGestureConfig} to Angular. Use it to configure\n * Hammer gestures.\n * \n * \\@experimental\n */\nexport const HAMMER_GESTURE_CONFIG = new InjectionToken<HammerGestureConfig>('HammerGestureConfig');\n\nexport interface HammerInstance {\n  on(eventName: string, callback?: Function): void;\n  off(eventName: string, callback?: Function): void;\n}\n/**\n * \\@experimental\n */\nexport class HammerGestureConfig {\n  events: string[] = [];\n\n  overrides: {[key: string]: Object} = {};\n/**\n * @param {?} element\n * @return {?}\n */\nbuildHammer(element: HTMLElement): HammerInstance {\n    const /** @type {?} */ mc = new Hammer(element);\n\n    mc.get('pinch').set({enable: true});\n    mc.get('rotate').set({enable: true});\n\n    for (const /** @type {?} */ eventName in this.overrides) {\n      mc.get(eventName).set(this.overrides[eventName]);\n    }\n\n    return mc;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction HammerGestureConfig_tsickle_Closure_declarations() {\n/** @type {?} */\nHammerGestureConfig.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nHammerGestureConfig.ctorParameters;\n/** @type {?} */\nHammerGestureConfig.prototype.events;\n/** @type {?} */\nHammerGestureConfig.prototype.overrides;\n}\n\nexport class HammerGesturesPlugin extends EventManagerPlugin {\n/**\n * @param {?} doc\n * @param {?} _config\n */\nconstructor(\n       doc: any,\nprivate _config: HammerGestureConfig) {\n    super(doc);\n  }\n/**\n * @param {?} eventName\n * @return {?}\n */\nsupports(eventName: string): boolean {\n    if (!EVENT_NAMES.hasOwnProperty(eventName.toLowerCase()) && !this.isCustomEvent(eventName)) {\n      return false;\n    }\n\n    if (!( /** @type {?} */((window as any))).Hammer) {\n      throw new Error(`Hammer.js is not loaded, can not bind ${eventName} event`);\n    }\n\n    return true;\n  }\n/**\n * @param {?} element\n * @param {?} eventName\n * @param {?} handler\n * @return {?}\n */\naddEventListener(element: HTMLElement, eventName: string, handler: Function): Function {\n    const /** @type {?} */ zone = this.manager.getZone();\n    eventName = eventName.toLowerCase();\n\n    return zone.runOutsideAngular(() => {\n      // Creating the manager bind events, must be done outside of angular\n      const /** @type {?} */ mc = this._config.buildHammer(element);\n      const /** @type {?} */ callback = function(eventObj: HammerInput) {\n        zone.runGuarded(function() { handler(eventObj); });\n      };\n      mc.on(eventName, callback);\n      return () => mc.off(eventName, callback);\n    });\n  }\n/**\n * @param {?} eventName\n * @return {?}\n */\nisCustomEvent(eventName: string): boolean { return this._config.events.indexOf(eventName) > -1; }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: undefined, decorators: [{ type: Inject, args: [DOCUMENT, ] }, ]},\n{type: HammerGestureConfig, decorators: [{ type: Inject, args: [HAMMER_GESTURE_CONFIG, ] }, ]},\n];\n}\n\nfunction HammerGesturesPlugin_tsickle_Closure_declarations() {\n/** @type {?} */\nHammerGesturesPlugin.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nHammerGesturesPlugin.ctorParameters;\n/** @type {?} */\nHammerGesturesPlugin.prototype._config;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Inject, Injectable, NgZone} from '@angular/core';\n\nimport {getDOM} from '../dom_adapter';\nimport {DOCUMENT} from '../dom_tokens';\n\nimport {EventManagerPlugin} from './event_manager';\n\nconst /** @type {?} */ MODIFIER_KEYS = ['alt', 'control', 'meta', 'shift'];\nconst /** @type {?} */ MODIFIER_KEY_GETTERS: {[key: string]: (event: KeyboardEvent) => boolean} = {\n  'alt': (event: KeyboardEvent) => event.altKey,\n  'control': (event: KeyboardEvent) => event.ctrlKey,\n  'meta': (event: KeyboardEvent) => event.metaKey,\n  'shift': (event: KeyboardEvent) => event.shiftKey\n};\n/**\n * \\@experimental\n */\nexport class KeyEventsPlugin extends EventManagerPlugin {\n/**\n * @param {?} doc\n */\nconstructor( doc: any) { super(doc); }\n/**\n * @param {?} eventName\n * @return {?}\n */\nsupports(eventName: string): boolean { return KeyEventsPlugin.parseEventName(eventName) != null; }\n/**\n * @param {?} element\n * @param {?} eventName\n * @param {?} handler\n * @return {?}\n */\naddEventListener(element: HTMLElement, eventName: string, handler: Function): Function {\n    const /** @type {?} */ parsedEvent = /** @type {?} */(( KeyEventsPlugin.parseEventName(eventName)));\n\n    const /** @type {?} */ outsideHandler =\n        KeyEventsPlugin.eventCallback(parsedEvent['fullKey'], handler, this.manager.getZone());\n\n    return this.manager.getZone().runOutsideAngular(() => {\n      return getDOM().onAndCancel(element, parsedEvent['domEventName'], outsideHandler);\n    });\n  }\n/**\n * @param {?} eventName\n * @return {?}\n */\nstatic parseEventName(eventName: string): {[key: string]: string}|null {\n    const /** @type {?} */ parts: string[] = eventName.toLowerCase().split('.');\n\n    const /** @type {?} */ domEventName = parts.shift();\n    if ((parts.length === 0) || !(domEventName === 'keydown' || domEventName === 'keyup')) {\n      return null;\n    }\n\n    const /** @type {?} */ key = KeyEventsPlugin._normalizeKey( /** @type {?} */((parts.pop())));\n\n    let /** @type {?} */ fullKey = '';\n    MODIFIER_KEYS.forEach(modifierName => {\n      const /** @type {?} */ index: number = parts.indexOf(modifierName);\n      if (index > -1) {\n        parts.splice(index, 1);\n        fullKey += modifierName + '.';\n      }\n    });\n    fullKey += key;\n\n    if (parts.length != 0 || key.length === 0) {\n      // returning null instead of throwing to let another plugin process the event\n      return null;\n    }\n\n    const /** @type {?} */ result: {[k: string]: string} = {};\n    result['domEventName'] = domEventName;\n    result['fullKey'] = fullKey;\n    return result;\n  }\n/**\n * @param {?} event\n * @return {?}\n */\nstatic getEventFullKey(event: KeyboardEvent): string {\n    let /** @type {?} */ fullKey = '';\n    let /** @type {?} */ key = getDOM().getEventKey(event);\n    key = key.toLowerCase();\n    if (key === ' ') {\n      key = 'space';  // for readability\n    } else if (key === '.') {\n      key = 'dot';  // because '.' is used as a separator in event names\n    }\n    MODIFIER_KEYS.forEach(modifierName => {\n      if (modifierName != key) {\n        const /** @type {?} */ modifierGetter = MODIFIER_KEY_GETTERS[modifierName];\n        if (modifierGetter(event)) {\n          fullKey += modifierName + '.';\n        }\n      }\n    });\n    fullKey += key;\n    return fullKey;\n  }\n/**\n * @param {?} fullKey\n * @param {?} handler\n * @param {?} zone\n * @return {?}\n */\nstatic eventCallback(fullKey: any, handler: Function, zone: NgZone): Function {\n    return (event: any /** TODO #9100 */) => {\n      if (KeyEventsPlugin.getEventFullKey(event) === fullKey) {\n        zone.runGuarded(() => handler(event));\n      }\n    };\n  }\n/**\n * \\@internal\n * @param {?} keyName\n * @return {?}\n */\nstatic _normalizeKey(keyName: string): string {\n    // TODO: switch to a Map if the mapping grows too much\n    switch (keyName) {\n      case 'esc':\n        return 'escape';\n      default:\n        return keyName;\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: undefined, decorators: [{ type: Inject, args: [DOCUMENT, ] }, ]},\n];\n}\n\nfunction KeyEventsPlugin_tsickle_Closure_declarations() {\n/** @type {?} */\nKeyEventsPlugin.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nKeyEventsPlugin.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {isDevMode} from '@angular/core';\n\nimport {getDOM} from '../dom/dom_adapter';\n/**\n * A pattern that recognizes a commonly useful subset of URLs that are safe.\n * \n * This regular expression matches a subset of URLs that will not cause script\n * execution if used in URL context within a HTML document. Specifically, this\n * regular expression matches if (comment from here on and regex copied from\n * Soy's EscapingConventions):\n * (1) Either a protocol in a whitelist (http, https, mailto or ftp).\n * (2) or no protocol.  A protocol must be followed by a colon. The below\n *     allows that by allowing colons only after one of the characters [/?#].\n *     A colon after a hash (#) must be in the fragment.\n *     Otherwise, a colon after a (?) must be in a query.\n *     Otherwise, a colon after a single solidus (/) must be in a path.\n *     Otherwise, a colon after a double solidus (//) must be in the authority\n *     (before port).\n * \n * The pattern disallows &, used in HTML entity declarations before\n * one of the characters in [/?#]. This disallows HTML entities used in the\n * protocol name, which should never happen, e.g. \"h&#116;tp\" for \"http\".\n * It also disallows HTML entities in the first path part of a relative path,\n * e.g. \"foo&lt;bar/baz\".  Our existing escaping functions should not produce\n * that. More importantly, it disallows masking of a colon,\n * e.g. \"javascript&#58;...\".\n * \n * This regular expression was taken from the Closure sanitization library.\n */\nconst SAFE_URL_PATTERN = /^(?:(?:https?|mailto|ftp|tel|file):|[^&:/?#]*(?:[/?#]|$))/gi;\n\n/* A pattern that matches safe srcset values */\nconst /** @type {?} */ SAFE_SRCSET_PATTERN = /^(?:(?:https?|file):|[^&:/?#]*(?:[/?#]|$))/gi;\n/**\n * A pattern that matches safe data URLs. Only matches image, video and audio types.\n */\nconst DATA_URL_PATTERN =\n    /^data:(?:image\\/(?:bmp|gif|jpeg|jpg|png|tiff|webp)|video\\/(?:mpeg|mp4|ogg|webm)|audio\\/(?:mp3|oga|ogg|opus));base64,[a-z0-9+\\/]+=*$/i;\n/**\n * @param {?} url\n * @return {?}\n */\nexport function sanitizeUrl(url: string): string {\n  url = String(url);\n  if (url.match(SAFE_URL_PATTERN) || url.match(DATA_URL_PATTERN)) return url;\n\n  if (isDevMode()) {\n    getDOM().log(`WARNING: sanitizing unsafe URL value ${url} (see http://g.co/ng/security#xss)`);\n  }\n\n  return 'unsafe:' + url;\n}\n/**\n * @param {?} srcset\n * @return {?}\n */\nexport function sanitizeSrcset(srcset: string): string {\n  srcset = String(srcset);\n  return srcset.split(',').map((srcset) => sanitizeUrl(srcset.trim())).join(', ');\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {isDevMode} from '@angular/core';\n\nimport {DomAdapter, getDOM} from '../dom/dom_adapter';\n\nimport {sanitizeSrcset, sanitizeUrl} from './url_sanitizer';\n/**\n * A <body> element that can be safely used to parse untrusted HTML. Lazily initialized below.\n */\nlet inertElement: HTMLElement|null = null;\n/**\n * Lazily initialized to make sure the DOM adapter gets set before use.\n */\nlet DOM: DomAdapter = null !;\n/**\n * Returns an HTML element that is guaranteed to not execute code when creating elements in it.\n * @return {?}\n */\nfunction getInertElement() {\n  if (inertElement) return inertElement;\n  DOM = getDOM();\n\n  // Prefer using <template> element if supported.\n  const /** @type {?} */ templateEl = DOM.createElement('template');\n  if ('content' in templateEl) return templateEl;\n\n  const /** @type {?} */ doc = DOM.createHtmlDocument();\n  inertElement = DOM.querySelector(doc, 'body');\n  if (inertElement == null) {\n    // usually there should be only one body element in the document, but IE doesn't have any, so we\n    // need to create one.\n    const /** @type {?} */ html = DOM.createElement('html', doc);\n    inertElement = DOM.createElement('body', doc);\n    DOM.appendChild(html, inertElement);\n    DOM.appendChild(doc, html);\n  }\n  return inertElement;\n}\n/**\n * @param {?} tags\n * @return {?}\n */\nfunction tagSet(tags: string): {[k: string]: boolean} {\n  const /** @type {?} */ res: {[k: string]: boolean} = {};\n  for (const /** @type {?} */ t of tags.split(',')) res[t] = true;\n  return res;\n}\n/**\n * @param {...?} sets\n * @return {?}\n */\nfunction merge(...sets: {[k: string]: boolean}[]): {[k: string]: boolean} {\n  const /** @type {?} */ res: {[k: string]: boolean} = {};\n  for (const /** @type {?} */ s of sets) {\n    for (const /** @type {?} */ v in s) {\n      if (s.hasOwnProperty(v)) res[v] = true;\n    }\n  }\n  return res;\n}\n\n// Good source of info about elements and attributes\n// http://dev.w3.org/html5/spec/Overview.html#semantics\n// http://simon.html5.org/html-elements\n\n// Safe Void Elements - HTML5\n// http://dev.w3.org/html5/spec/Overview.html#void-elements\nconst /** @type {?} */ VOID_ELEMENTS = tagSet('area,br,col,hr,img,wbr');\n\n// Elements that you can, intentionally, leave open (and which close themselves)\n// http://dev.w3.org/html5/spec/Overview.html#optional-tags\nconst /** @type {?} */ OPTIONAL_END_TAG_BLOCK_ELEMENTS = tagSet('colgroup,dd,dt,li,p,tbody,td,tfoot,th,thead,tr');\nconst /** @type {?} */ OPTIONAL_END_TAG_INLINE_ELEMENTS = tagSet('rp,rt');\nconst /** @type {?} */ OPTIONAL_END_TAG_ELEMENTS =\n    merge(OPTIONAL_END_TAG_INLINE_ELEMENTS, OPTIONAL_END_TAG_BLOCK_ELEMENTS);\n\n// Safe Block Elements - HTML5\nconst /** @type {?} */ BLOCK_ELEMENTS = merge(\n    OPTIONAL_END_TAG_BLOCK_ELEMENTS,\n    tagSet(\n        'address,article,' +\n        'aside,blockquote,caption,center,del,details,dialog,dir,div,dl,figure,figcaption,footer,h1,h2,h3,h4,h5,' +\n        'h6,header,hgroup,hr,ins,main,map,menu,nav,ol,pre,section,summary,table,ul'));\n\n// Inline Elements - HTML5\nconst /** @type {?} */ INLINE_ELEMENTS = merge(\n    OPTIONAL_END_TAG_INLINE_ELEMENTS,\n    tagSet(\n        'a,abbr,acronym,audio,b,' +\n        'bdi,bdo,big,br,cite,code,del,dfn,em,font,i,img,ins,kbd,label,map,mark,picture,q,ruby,rp,rt,s,' +\n        'samp,small,source,span,strike,strong,sub,sup,time,track,tt,u,var,video'));\n\nconst /** @type {?} */ VALID_ELEMENTS =\n    merge(VOID_ELEMENTS, BLOCK_ELEMENTS, INLINE_ELEMENTS, OPTIONAL_END_TAG_ELEMENTS);\n\n// Attributes that have href and hence need to be sanitized\nconst /** @type {?} */ URI_ATTRS = tagSet('background,cite,href,itemtype,longdesc,poster,src,xlink:href');\n\n// Attributes that have special href set hence need to be sanitized\nconst /** @type {?} */ SRCSET_ATTRS = tagSet('srcset');\n\nconst /** @type {?} */ HTML_ATTRS = tagSet(\n    'abbr,accesskey,align,alt,autoplay,axis,bgcolor,border,cellpadding,cellspacing,class,clear,color,cols,colspan,' +\n    'compact,controls,coords,datetime,default,dir,download,face,headers,height,hidden,hreflang,hspace,' +\n    'ismap,itemscope,itemprop,kind,label,lang,language,loop,media,muted,nohref,nowrap,open,preload,rel,rev,role,rows,rowspan,rules,' +\n    'scope,scrolling,shape,size,sizes,span,srclang,start,summary,tabindex,target,title,translate,type,usemap,' +\n    'valign,value,vspace,width');\n\n// NB: This currently consciously doesn't support SVG. SVG sanitization has had several security\n// issues in the past, so it seems safer to leave it out if possible. If support for binding SVG via\n// innerHTML is required, SVG attributes should be added here.\n\n// NB: Sanitization does not allow <form> elements or other active elements (<button> etc). Those\n// can be sanitized, but they increase security surface area without a legitimate use case, so they\n// are left out here.\n\nconst /** @type {?} */ VALID_ATTRS = merge(URI_ATTRS, SRCSET_ATTRS, HTML_ATTRS);\n/**\n * SanitizingHtmlSerializer serializes a DOM fragment, stripping out any unsafe elements and unsafe\n * attributes.\n */\nclass SanitizingHtmlSerializer {\npublic sanitizedSomething = false;\nprivate buf: string[] = [];\n/**\n * @param {?} el\n * @return {?}\n */\nsanitizeChildren(el: Element): string {\n    // This cannot use a TreeWalker, as it has to run on Angular's various DOM adapters.\n    // However this code never accesses properties off of `document` before deleting its contents\n    // again, so it shouldn't be vulnerable to DOM clobbering.\n    let /** @type {?} */ current: Node = /** @type {?} */(( el.firstChild));\n    while (current) {\n      if (DOM.isElementNode(current)) {\n        this.startElement( /** @type {?} */((current as Element)));\n      } else if (DOM.isTextNode(current)) {\n        this.chars( /** @type {?} */((DOM.nodeValue(current))));\n      } else {\n        // Strip non-element, non-text nodes.\n        this.sanitizedSomething = true;\n      }\n      if (DOM.firstChild(current)) {\n        current = /** @type {?} */(( DOM.firstChild(current)));\n        continue;\n      }\n      while (current) {\n        // Leaving the element. Walk up and to the right, closing tags as we go.\n        if (DOM.isElementNode(current)) {\n          this.endElement( /** @type {?} */((current as Element)));\n        }\n\n        let /** @type {?} */ next = checkClobberedElement(current, /** @type {?} */(( DOM.nextSibling(current))));\n\n        if (next) {\n          current = next;\n          break;\n        }\n\n        current = checkClobberedElement(current, /** @type {?} */(( DOM.parentElement(current))));\n      }\n    }\n    return this.buf.join('');\n  }\n/**\n * @param {?} element\n * @return {?}\n */\nprivate startElement(element: Element) {\n    const /** @type {?} */ tagName = DOM.nodeName(element).toLowerCase();\n    if (!VALID_ELEMENTS.hasOwnProperty(tagName)) {\n      this.sanitizedSomething = true;\n      return;\n    }\n    this.buf.push('<');\n    this.buf.push(tagName);\n    DOM.attributeMap(element).forEach((value: string, attrName: string) => {\n      const /** @type {?} */ lower = attrName.toLowerCase();\n      if (!VALID_ATTRS.hasOwnProperty(lower)) {\n        this.sanitizedSomething = true;\n        return;\n      }\n      // TODO(martinprobst): Special case image URIs for data:image/...\n      if (URI_ATTRS[lower]) value = sanitizeUrl(value);\n      if (SRCSET_ATTRS[lower]) value = sanitizeSrcset(value);\n      this.buf.push(' ');\n      this.buf.push(attrName);\n      this.buf.push('=\"');\n      this.buf.push(encodeEntities(value));\n      this.buf.push('\"');\n    });\n    this.buf.push('>');\n  }\n/**\n * @param {?} current\n * @return {?}\n */\nprivate endElement(current: Element) {\n    const /** @type {?} */ tagName = DOM.nodeName(current).toLowerCase();\n    if (VALID_ELEMENTS.hasOwnProperty(tagName) && !VOID_ELEMENTS.hasOwnProperty(tagName)) {\n      this.buf.push('</');\n      this.buf.push(tagName);\n      this.buf.push('>');\n    }\n  }\n/**\n * @param {?} chars\n * @return {?}\n */\nprivate chars(chars: string) { this.buf.push(encodeEntities(chars)); }\n}\n\nfunction SanitizingHtmlSerializer_tsickle_Closure_declarations() {\n/** @type {?} */\nSanitizingHtmlSerializer.prototype.sanitizedSomething;\n/** @type {?} */\nSanitizingHtmlSerializer.prototype.buf;\n}\n\n/**\n * @param {?} node\n * @param {?} nextNode\n * @return {?}\n */\nfunction checkClobberedElement(node: Node, nextNode: Node): Node {\n  if (nextNode && DOM.contains(node, nextNode)) {\n    throw new Error(\n        `Failed to sanitize html because the element is clobbered: ${DOM.getOuterHTML(node)}`);\n  }\n  return nextNode;\n}\n\n// Regular Expressions for parsing tags and attributes\nconst /** @type {?} */ SURROGATE_PAIR_REGEXP = /[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]/g;\n// ! to ~ is the ASCII range.\nconst /** @type {?} */ NON_ALPHANUMERIC_REGEXP = /([^\\#-~ |!])/g;\n/**\n * Escapes all potentially dangerous characters, so that the\n * resulting string can be safely inserted into attribute or\n * element text.\n * @param {?} value\n * @return {?}\n */\nfunction encodeEntities(value: string) {\n  return value.replace(/&/g, '&amp;')\n      .replace(\n          SURROGATE_PAIR_REGEXP,\n          function(match: string) {\n            const /** @type {?} */ hi = match.charCodeAt(0);\n            const /** @type {?} */ low = match.charCodeAt(1);\n            return '&#' + (((hi - 0xD800) * 0x400) + (low - 0xDC00) + 0x10000) + ';';\n          })\n      .replace(\n          NON_ALPHANUMERIC_REGEXP,\n          function(match: string) { return '&#' + match.charCodeAt(0) + ';'; })\n      .replace(/</g, '&lt;')\n      .replace(/>/g, '&gt;');\n}\n/**\n * When IE9-11 comes across an unknown namespaced attribute e.g. 'xlink:foo' it adds 'xmlns:ns1'\n * attribute to declare ns1 namespace and prefixes the attribute with 'ns1' (e.g. 'ns1:xlink:foo').\n * \n * This is undesirable since we don't want to allow any of these custom attributes. This method\n * strips them all.\n * @param {?} el\n * @return {?}\n */\nfunction stripCustomNsAttrs(el: Element) {\n  DOM.attributeMap(el).forEach((_, attrName) => {\n    if (attrName === 'xmlns:ns1' || attrName.indexOf('ns1:') === 0) {\n      DOM.removeAttribute(el, attrName);\n    }\n  });\n  for (const /** @type {?} */ n of DOM.childNodesAsList(el)) {\n    if (DOM.isElementNode(n)) stripCustomNsAttrs( /** @type {?} */((n as Element)));\n  }\n}\n/**\n * Sanitizes the given unsafe, untrusted HTML fragment, and returns HTML text that is safe to add to\n * the DOM in a browser environment.\n * @param {?} defaultDoc\n * @param {?} unsafeHtmlInput\n * @return {?}\n */\nexport function sanitizeHtml(defaultDoc: any, unsafeHtmlInput: string): string {\n  try {\n    const /** @type {?} */ containerEl = getInertElement();\n    // Make sure unsafeHtml is actually a string (TypeScript types are not enforced at runtime).\n    let /** @type {?} */ unsafeHtml = unsafeHtmlInput ? String(unsafeHtmlInput) : '';\n\n    // mXSS protection. Repeatedly parse the document to make sure it stabilizes, so that a browser\n    // trying to auto-correct incorrect HTML cannot cause formerly inert HTML to become dangerous.\n    let /** @type {?} */ mXSSAttempts = 5;\n    let /** @type {?} */ parsedHtml = unsafeHtml;\n\n    do {\n      if (mXSSAttempts === 0) {\n        throw new Error('Failed to sanitize html because the input is unstable');\n      }\n      mXSSAttempts--;\n\n      unsafeHtml = parsedHtml;\n      DOM.setInnerHTML(containerEl, unsafeHtml);\n      if (defaultDoc.documentMode) {\n        // strip custom-namespaced attributes on IE<=11\n        stripCustomNsAttrs(containerEl);\n      }\n      parsedHtml = DOM.getInnerHTML(containerEl);\n    } while (unsafeHtml !== parsedHtml);\n\n    const /** @type {?} */ sanitizer = new SanitizingHtmlSerializer();\n    const /** @type {?} */ safeHtml = sanitizer.sanitizeChildren(DOM.getTemplateContent(containerEl) || containerEl);\n\n    // Clear out the body element.\n    const /** @type {?} */ parent = DOM.getTemplateContent(containerEl) || containerEl;\n    for (const /** @type {?} */ child of DOM.childNodesAsList(parent)) {\n      DOM.removeChild(parent, child);\n    }\n\n    if (isDevMode() && sanitizer.sanitizedSomething) {\n      DOM.log('WARNING: sanitizing HTML stripped some content (see http://g.co/ng/security#xss).');\n    }\n\n    return safeHtml;\n  } catch ( /** @type {?} */e) {\n    // In case anything goes wrong, clear out inertElement to reset the entire DOM structure.\n    inertElement = null;\n    throw e;\n  }\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Inject, Injectable, Sanitizer, SecurityContext} from '@angular/core';\n\nimport {DOCUMENT} from '../dom/dom_tokens';\n\nimport {sanitizeHtml} from './html_sanitizer';\nimport {sanitizeStyle} from './style_sanitizer';\nimport {sanitizeUrl} from './url_sanitizer';\n\nexport {SecurityContext};\n\n\n\n/**\n * Marker interface for a value that's safe to use in a particular context.\n *\n * @stable\n */\nexport interface SafeValue {}\n\n/**\n * Marker interface for a value that's safe to use as HTML.\n *\n * @stable\n */\nexport interface SafeHtml extends SafeValue {}\n\n/**\n * Marker interface for a value that's safe to use as style (CSS).\n *\n * @stable\n */\nexport interface SafeStyle extends SafeValue {}\n\n/**\n * Marker interface for a value that's safe to use as JavaScript.\n *\n * @stable\n */\nexport interface SafeScript extends SafeValue {}\n\n/**\n * Marker interface for a value that's safe to use as a URL linking to a document.\n *\n * @stable\n */\nexport interface SafeUrl extends SafeValue {}\n\n/**\n * Marker interface for a value that's safe to use as a URL to load executable code from.\n *\n * @stable\n */\nexport interface SafeResourceUrl extends SafeValue {}\n/**\n * DomSanitizer helps preventing Cross Site Scripting Security bugs (XSS) by sanitizing\n * values to be safe to use in the different DOM contexts.\n * \n * For example, when binding a URL in an `<a [href]=\"someValue\">` hyperlink, `someValue` will be\n * sanitized so that an attacker cannot inject e.g. a `javascript:` URL that would execute code on\n * the website.\n * \n * In specific situations, it might be necessary to disable sanitization, for example if the\n * application genuinely needs to produce a `javascript:` style link with a dynamic value in it.\n * Users can bypass security by constructing a value with one of the `bypassSecurityTrust...`\n * methods, and then binding to that value from the template.\n * \n * These situations should be very rare, and extraordinary care must be taken to avoid creating a\n * Cross Site Scripting (XSS) security bug!\n * \n * When using `bypassSecurityTrust...`, make sure to call the method as early as possible and as\n * close as possible to the source of the value, to make it easy to verify no security bug is\n * created by its use.\n * \n * It is not required (and not recommended) to bypass security if the value is safe, e.g. a URL that\n * does not start with a suspicious protocol, or an HTML snippet that does not contain dangerous\n * code. The sanitizer leaves safe values intact.\n * \n * \\@security Calling any of the `bypassSecurityTrust...` APIs disables Angular's built-in\n * sanitization for the value passed in. Carefully check and audit all values and code paths going\n * into this call. Make sure any user data is appropriately escaped for this security context.\n * For more detail, see the [Security Guide](http://g.co/ng/security).\n * \n * \\@stable\n * @abstract\n */\nexport abstract class DomSanitizer implements Sanitizer {\n/**\n * Sanitizes a value for use in the given SecurityContext.\n * \n * If value is trusted for the context, this method will unwrap the contained safe value and use\n * it directly. Otherwise, value will be sanitized to be safe in the given context, for example\n * by replacing URLs that have an unsafe protocol part (such as `javascript:`). The implementation\n * is responsible to make sure that the value can definitely be safely used in the given context.\n * @abstract\n * @param {?} context\n * @param {?} value\n * @return {?}\n */\nsanitize(context: SecurityContext, value: SafeValue|string|null) {}\n/**\n * Bypass security and trust the given value to be safe HTML. Only use this when the bound HTML\n * is unsafe (e.g. contains `<script>` tags) and the code should be executed. The sanitizer will\n * leave safe HTML intact, so in most situations this method should not be used.\n * \n * **WARNING:** calling this method with untrusted user data exposes your application to XSS\n * security risks!\n * @abstract\n * @param {?} value\n * @return {?}\n */\nbypassSecurityTrustHtml(value: string) {}\n/**\n * Bypass security and trust the given value to be safe style value (CSS).\n * \n * **WARNING:** calling this method with untrusted user data exposes your application to XSS\n * security risks!\n * @abstract\n * @param {?} value\n * @return {?}\n */\nbypassSecurityTrustStyle(value: string) {}\n/**\n * Bypass security and trust the given value to be safe JavaScript.\n * \n * **WARNING:** calling this method with untrusted user data exposes your application to XSS\n * security risks!\n * @abstract\n * @param {?} value\n * @return {?}\n */\nbypassSecurityTrustScript(value: string) {}\n/**\n * Bypass security and trust the given value to be a safe style URL, i.e. a value that can be used\n * in hyperlinks or `<img src>`.\n * \n * **WARNING:** calling this method with untrusted user data exposes your application to XSS\n * security risks!\n * @abstract\n * @param {?} value\n * @return {?}\n */\nbypassSecurityTrustUrl(value: string) {}\n/**\n * Bypass security and trust the given value to be a safe resource URL, i.e. a location that may\n * be used to load executable code from, like `<script src>`, or `<iframe src>`.\n * \n * **WARNING:** calling this method with untrusted user data exposes your application to XSS\n * security risks!\n * @abstract\n * @param {?} value\n * @return {?}\n */\nbypassSecurityTrustResourceUrl(value: string) {}\n}\nexport class DomSanitizerImpl extends DomSanitizer {\n/**\n * @param {?} _doc\n */\nconstructor(\nprivate _doc: any) { super(); }\n/**\n * @param {?} ctx\n * @param {?} value\n * @return {?}\n */\nsanitize(ctx: SecurityContext, value: SafeValue|string|null): string|null {\n    if (value == null) return null;\n    switch (ctx) {\n      case SecurityContext.NONE:\n        return /** @type {?} */(( value as string));\n      case SecurityContext.HTML:\n        if (value instanceof SafeHtmlImpl) return value.changingThisBreaksApplicationSecurity;\n        this.checkNotSafeValue(value, 'HTML');\n        return sanitizeHtml(this._doc, String(value));\n      case SecurityContext.STYLE:\n        if (value instanceof SafeStyleImpl) return value.changingThisBreaksApplicationSecurity;\n        this.checkNotSafeValue(value, 'Style');\n        return sanitizeStyle( /** @type {?} */((value as string)));\n      case SecurityContext.SCRIPT:\n        if (value instanceof SafeScriptImpl) return value.changingThisBreaksApplicationSecurity;\n        this.checkNotSafeValue(value, 'Script');\n        throw new Error('unsafe value used in a script context');\n      case SecurityContext.URL:\n        if (value instanceof SafeResourceUrlImpl || value instanceof SafeUrlImpl) {\n          // Allow resource URLs in URL contexts, they are strictly more trusted.\n          return value.changingThisBreaksApplicationSecurity;\n        }\n        this.checkNotSafeValue(value, 'URL');\n        return sanitizeUrl(String(value));\n      case SecurityContext.RESOURCE_URL:\n        if (value instanceof SafeResourceUrlImpl) {\n          return value.changingThisBreaksApplicationSecurity;\n        }\n        this.checkNotSafeValue(value, 'ResourceURL');\n        throw new Error(\n            'unsafe value used in a resource URL context (see http://g.co/ng/security#xss)');\n      default:\n        throw new Error(`Unexpected SecurityContext ${ctx} (see http://g.co/ng/security#xss)`);\n    }\n  }\n/**\n * @param {?} value\n * @param {?} expectedType\n * @return {?}\n */\nprivate checkNotSafeValue(value: any, expectedType: string) {\n    if (value instanceof SafeValueImpl) {\n      throw new Error(\n          `Required a safe ${expectedType}, got a ${value.getTypeName()} ` +\n          `(see http://g.co/ng/security#xss)`);\n    }\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nbypassSecurityTrustHtml(value: string): SafeHtml { return new SafeHtmlImpl(value); }\n/**\n * @param {?} value\n * @return {?}\n */\nbypassSecurityTrustStyle(value: string): SafeStyle { return new SafeStyleImpl(value); }\n/**\n * @param {?} value\n * @return {?}\n */\nbypassSecurityTrustScript(value: string): SafeScript { return new SafeScriptImpl(value); }\n/**\n * @param {?} value\n * @return {?}\n */\nbypassSecurityTrustUrl(value: string): SafeUrl { return new SafeUrlImpl(value); }\n/**\n * @param {?} value\n * @return {?}\n */\nbypassSecurityTrustResourceUrl(value: string): SafeResourceUrl {\n    return new SafeResourceUrlImpl(value);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: undefined, decorators: [{ type: Inject, args: [DOCUMENT, ] }, ]},\n];\n}\n\nfunction DomSanitizerImpl_tsickle_Closure_declarations() {\n/** @type {?} */\nDomSanitizerImpl.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nDomSanitizerImpl.ctorParameters;\n/** @type {?} */\nDomSanitizerImpl.prototype._doc;\n}\n\n/**\n * @abstract\n */\nabstract class SafeValueImpl implements SafeValue {\n/**\n * @param {?} changingThisBreaksApplicationSecurity\n */\nconstructor(public changingThisBreaksApplicationSecurity: string) {\n    // empty\n  }\n/**\n * @abstract\n * @return {?}\n */\ngetTypeName() {}\n/**\n * @return {?}\n */\ntoString() {\n    return `SafeValue must use [property]=binding: ${this.changingThisBreaksApplicationSecurity}` +\n        ` (see http://g.co/ng/security#xss)`;\n  }\n}\n\nfunction SafeValueImpl_tsickle_Closure_declarations() {\n/** @type {?} */\nSafeValueImpl.prototype.changingThisBreaksApplicationSecurity;\n}\n\nclass SafeHtmlImpl extends SafeValueImpl implements SafeHtml {\n/**\n * @return {?}\n */\ngetTypeName() { return 'HTML'; }\n}\nclass SafeStyleImpl extends SafeValueImpl implements SafeStyle {\n/**\n * @return {?}\n */\ngetTypeName() { return 'Style'; }\n}\nclass SafeScriptImpl extends SafeValueImpl implements SafeScript {\n/**\n * @return {?}\n */\ngetTypeName() { return 'Script'; }\n}\nclass SafeUrlImpl extends SafeValueImpl implements SafeUrl {\n/**\n * @return {?}\n */\ngetTypeName() { return 'URL'; }\n}\nclass SafeResourceUrlImpl extends SafeValueImpl implements SafeResourceUrl {\n/**\n * @return {?}\n */\ngetTypeName() { return 'ResourceURL'; }\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {CommonModule, PlatformLocation, ɵPLATFORM_BROWSER_ID as PLATFORM_BROWSER_ID} from '@angular/common';\nimport {APP_ID, ApplicationModule, ErrorHandler, ModuleWithProviders, NgModule, Optional, PLATFORM_ID, PLATFORM_INITIALIZER, PlatformRef, Provider, RendererFactory2, RootRenderer, Sanitizer, SkipSelf, Testability, createPlatformFactory, platformCore} from '@angular/core';\n\nimport {BrowserDomAdapter} from './browser/browser_adapter';\nimport {BrowserPlatformLocation} from './browser/location/browser_platform_location';\nimport {Meta} from './browser/meta';\nimport {SERVER_TRANSITION_PROVIDERS, TRANSITION_ID} from './browser/server-transition';\nimport {BrowserGetTestability} from './browser/testability';\nimport {Title} from './browser/title';\nimport {ELEMENT_PROBE_PROVIDERS} from './dom/debug/ng_probe';\nimport {getDOM} from './dom/dom_adapter';\nimport {DomRendererFactory2} from './dom/dom_renderer';\nimport {DOCUMENT} from './dom/dom_tokens';\nimport {DomEventsPlugin} from './dom/events/dom_events';\nimport {EVENT_MANAGER_PLUGINS, EventManager} from './dom/events/event_manager';\nimport {HAMMER_GESTURE_CONFIG, HammerGestureConfig, HammerGesturesPlugin} from './dom/events/hammer_gestures';\nimport {KeyEventsPlugin} from './dom/events/key_events';\nimport {DomSharedStylesHost, SharedStylesHost} from './dom/shared_styles_host';\nimport {DomSanitizer, DomSanitizerImpl} from './security/dom_sanitization_service';\n\nexport const /** @type {?} */ INTERNAL_BROWSER_PLATFORM_PROVIDERS: Provider[] = [\n  {provide: PLATFORM_ID, useValue: PLATFORM_BROWSER_ID},\n  {provide: PLATFORM_INITIALIZER, useValue: initDomAdapter, multi: true},\n  {provide: PlatformLocation, useClass: BrowserPlatformLocation},\n  {provide: DOCUMENT, useFactory: _document, deps: []},\n];\n/**\n * \\@security Replacing built-in sanitization providers exposes the application to XSS risks.\n * Attacker-controlled data introduced by an unsanitized provider could expose your\n * application to XSS risks. For more detail, see the [Security Guide](http://g.co/ng/security).\n * \\@experimental\n */\nexport const BROWSER_SANITIZATION_PROVIDERS: Array<any> = [\n  {provide: Sanitizer, useExisting: DomSanitizer},\n  {provide: DomSanitizer, useClass: DomSanitizerImpl},\n];\n/**\n * \\@stable\n */\nexport const platformBrowser: (extraProviders?: Provider[]) => PlatformRef =\n    createPlatformFactory(platformCore, 'browser', INTERNAL_BROWSER_PLATFORM_PROVIDERS);\n/**\n * @return {?}\n */\nexport function initDomAdapter() {\n  BrowserDomAdapter.makeCurrent();\n  BrowserGetTestability.init();\n}\n/**\n * @return {?}\n */\nexport function errorHandler(): ErrorHandler {\n  return new ErrorHandler();\n}\n/**\n * @return {?}\n */\nexport function _document(): any {\n  return document;\n}\n/**\n * The ng module for the browser.\n * \n * \\@stable\n */\nexport class BrowserModule {\n/**\n * @param {?} parentModule\n */\nconstructor(  parentModule: BrowserModule) {\n    if (parentModule) {\n      throw new Error(\n          `BrowserModule has already been loaded. If you need access to common directives such as NgIf and NgFor from a lazy loaded module, import CommonModule instead.`);\n    }\n  }\n/**\n * Configures a browser-based application to transition from a server-rendered app, if\n * one is present on the page. The specified parameters must include an application id,\n * which must match between the client and server applications.\n * \n * \\@experimental\n * @param {?} params\n * @return {?}\n */\nstatic withServerTransition(params: {appId: string}): ModuleWithProviders {\n    return {\n      ngModule: BrowserModule,\n      providers: [\n        {provide: APP_ID, useValue: params.appId},\n        {provide: TRANSITION_ID, useExisting: APP_ID},\n        SERVER_TRANSITION_PROVIDERS,\n      ],\n    };\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  providers: [\n    BROWSER_SANITIZATION_PROVIDERS,\n    {provide: ErrorHandler, useFactory: errorHandler, deps: []},\n    {provide: EVENT_MANAGER_PLUGINS, useClass: DomEventsPlugin, multi: true},\n    {provide: EVENT_MANAGER_PLUGINS, useClass: KeyEventsPlugin, multi: true},\n    {provide: EVENT_MANAGER_PLUGINS, useClass: HammerGesturesPlugin, multi: true},\n    {provide: HAMMER_GESTURE_CONFIG, useClass: HammerGestureConfig},\n    DomRendererFactory2,\n    {provide: RendererFactory2, useExisting: DomRendererFactory2},\n    {provide: SharedStylesHost, useExisting: DomSharedStylesHost},\n    DomSharedStylesHost,\n    Testability,\n    EventManager,\n    ELEMENT_PROBE_PROVIDERS,\n    Meta,\n    Title,\n  ],\n  exports: [CommonModule, ApplicationModule]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: BrowserModule, decorators: [{ type: Optional }, { type: SkipSelf }, ]},\n];\n}\n\nfunction BrowserModule_tsickle_Closure_declarations() {\n/** @type {?} */\nBrowserModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nBrowserModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Observable} from 'rxjs/Observable';\nimport {AbstractControl} from '../model';\nimport {ValidationErrors} from './validators';\n/**\n * Base class for control directives.\n * \n * Only used internally in the forms module.\n * \n * \\@stable\n * @abstract\n */\nexport abstract class AbstractControlDirective {\n/**\n * The {\\@link FormControl}, {\\@link FormGroup}, or {\\@link FormArray}\n * that backs this directive. Most properties fall through to that\n * instance.\n * @abstract\n * @return {?}\n */\ncontrol() {}\n/**\n * The value of the control.\n * @return {?}\n */\nget value(): any { return this.control ? this.control.value : null; }\n/**\n * A control is `valid` when its `status === VALID`.\n * \n * In order to have this status, the control must have passed all its\n * validation checks.\n * @return {?}\n */\nget valid(): boolean|null { return this.control ? this.control.valid : null; }\n/**\n * A control is `invalid` when its `status === INVALID`.\n * \n * In order to have this status, the control must have failed\n * at least one of its validation checks.\n * @return {?}\n */\nget invalid(): boolean|null { return this.control ? this.control.invalid : null; }\n/**\n * A control is `pending` when its `status === PENDING`.\n * \n * In order to have this status, the control must be in the\n * middle of conducting a validation check.\n * @return {?}\n */\nget pending(): boolean|null { return this.control ? this.control.pending : null; }\n/**\n * A control is `disabled` when its `status === DISABLED`.\n * \n * Disabled controls are exempt from validation checks and\n * are not included in the aggregate value of their ancestor\n * controls.\n * @return {?}\n */\nget disabled(): boolean|null { return this.control ? this.control.disabled : null; }\n/**\n * A control is `enabled` as long as its `status !== DISABLED`.\n * \n * In other words, it has a status of `VALID`, `INVALID`, or\n * `PENDING`.\n * @return {?}\n */\nget enabled(): boolean|null { return this.control ? this.control.enabled : null; }\n/**\n * Returns any errors generated by failing validation. If there\n * are no errors, it will return null.\n * @return {?}\n */\nget errors(): ValidationErrors|null { return this.control ? this.control.errors : null; }\n/**\n * A control is `pristine` if the user has not yet changed\n * the value in the UI.\n * \n * Note that programmatic changes to a control's value will\n * *not* mark it dirty.\n * @return {?}\n */\nget pristine(): boolean|null { return this.control ? this.control.pristine : null; }\n/**\n * A control is `dirty` if the user has changed the value\n * in the UI.\n * \n * Note that programmatic changes to a control's value will\n * *not* mark it dirty.\n * @return {?}\n */\nget dirty(): boolean|null { return this.control ? this.control.dirty : null; }\n/**\n * A control is marked `touched` once the user has triggered\n * a `blur` event on it.\n * @return {?}\n */\nget touched(): boolean|null { return this.control ? this.control.touched : null; }\n/**\n * A control is `untouched` if the user has not yet triggered\n * a `blur` event on it.\n * @return {?}\n */\nget untouched(): boolean|null { return this.control ? this.control.untouched : null; }\n/**\n * Emits an event every time the validation status of the control\n * is re-calculated.\n * @return {?}\n */\nget statusChanges(): Observable<any>|null {\n    return this.control ? this.control.statusChanges : null;\n  }\n/**\n * Emits an event every time the value of the control changes, in\n * the UI or programmatically.\n * @return {?}\n */\nget valueChanges(): Observable<any>|null {\n    return this.control ? this.control.valueChanges : null;\n  }\n/**\n * Returns an array that represents the path from the top-level form\n * to this control. Each index is the string name of the control on\n * that level.\n * @return {?}\n */\nget path(): string[]|null { return null; }\n/**\n * Resets the form control. This means by default:\n * \n * * it is marked as `pristine`\n * * it is marked as `untouched`\n * * value is set to null\n * \n * For more information, see {\\@link AbstractControl}.\n * @param {?=} value\n * @return {?}\n */\nreset(value: any = undefined): void {\n    if (this.control) this.control.reset(value);\n  }\n/**\n * Returns true if the control with the given path has the error specified. Otherwise\n * returns false.\n * \n * If no path is given, it checks for the error on the present control.\n * @param {?} errorCode\n * @param {?=} path\n * @return {?}\n */\nhasError(errorCode: string, path?: string[]): boolean {\n    return this.control ? this.control.hasError(errorCode, path) : false;\n  }\n/**\n * Returns error data if the control with the given path has the error specified. Otherwise\n * returns null or undefined.\n * \n * If no path is given, it checks for the error on the present control.\n * @param {?} errorCode\n * @param {?=} path\n * @return {?}\n */\ngetError(errorCode: string, path?: string[]): any {\n    return this.control ? this.control.getError(errorCode, path) : null;\n  }\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {AbstractControlDirective} from './abstract_control_directive';\nimport {Form} from './form_interface';\n/**\n * A directive that contains multiple {\\@link NgControl}s.\n * \n * Only used by the forms module.\n * \n * \\@stable\n * @abstract\n */\nexport abstract class ControlContainer extends AbstractControlDirective {\n  name: string;\n/**\n * Get the form to which this container belongs.\n * @return {?}\n */\nget formDirective(): Form|null { return null; }\n/**\n * Get the path to this container.\n * @return {?}\n */\nget path(): string[]|null { return null; }\n}\n\nfunction ControlContainer_tsickle_Closure_declarations() {\n/** @type {?} */\nControlContainer.prototype.name;\n}\n\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {InjectionToken, ɵisObservable as isObservable, ɵisPromise as isPromise} from '@angular/core';\nimport {Observable} from 'rxjs/Observable';\nimport {forkJoin} from 'rxjs/observable/forkJoin';\nimport {fromPromise} from 'rxjs/observable/fromPromise';\nimport {map} from 'rxjs/operator/map';\nimport {AsyncValidatorFn, ValidationErrors, Validator, ValidatorFn} from './directives/validators';\nimport {AbstractControl, FormControl} from './model';\n/**\n * @param {?} value\n * @return {?}\n */\nfunction isEmptyInputValue(value: any): boolean {\n  // we don't check for string here so it also works with arrays\n  return value == null || value.length === 0;\n}\n/**\n * Providers for validators to be used for {\\@link FormControl}s in a form.\n * \n * Provide this using `multi: true` to add validators.\n * \n * \\@stable\n */\nexport const NG_VALIDATORS = new InjectionToken<Array<Validator|Function>>('NgValidators');\n/**\n * Providers for asynchronous validators to be used for {\\@link FormControl}s\n * in a form.\n * \n * Provide this using `multi: true` to add validators.\n * \n * See {\\@link NG_VALIDATORS} for more details.\n * \n * \\@stable\n */\nexport const NG_ASYNC_VALIDATORS =\n    new InjectionToken<Array<Validator|Function>>('NgAsyncValidators');\n\nconst /** @type {?} */ EMAIL_REGEXP =\n    /^(?=.{1,254}$)(?=.{1,64}@)[-!#$%&'*+/0-9=?A-Z^_`a-z{|}~]+(\\.[-!#$%&'*+/0-9=?A-Z^_`a-z{|}~]+)*@[A-Za-z0-9]([A-Za-z0-9-]{0,61}[A-Za-z0-9])?(\\.[A-Za-z0-9]([A-Za-z0-9-]{0,61}[A-Za-z0-9])?)*$/;\n/**\n * Provides a set of validators used by form controls.\n * \n * A validator is a function that processes a {\\@link FormControl} or collection of\n * controls and returns a map of errors. A null map means that validation has passed.\n * \n * ### Example\n * \n * ```typescript\n * var loginControl = new FormControl(\"\", Validators.required)\n * ```\n * \n * \\@stable\n */\nexport class Validators {\n/**\n * Validator that requires controls to have a value greater than a number.\n * @param {?} min\n * @return {?}\n */\nstatic min(min: number): ValidatorFn {\n    return (control: AbstractControl): ValidationErrors | null => {\n      if (isEmptyInputValue(control.value) || isEmptyInputValue(min)) {\n        return null;  // don't validate empty values to allow optional controls\n      }\n      const /** @type {?} */ value = parseFloat(control.value);\n      // Controls with NaN values after parsing should be treated as not having a\n      // minimum, per the HTML forms spec: https://www.w3.org/TR/html5/forms.html#attr-input-min\n      return !isNaN(value) && value < min ? {'min': {'min': min, 'actual': control.value}} : null;\n    };\n  }\n/**\n * Validator that requires controls to have a value less than a number.\n * @param {?} max\n * @return {?}\n */\nstatic max(max: number): ValidatorFn {\n    return (control: AbstractControl): ValidationErrors | null => {\n      if (isEmptyInputValue(control.value) || isEmptyInputValue(max)) {\n        return null;  // don't validate empty values to allow optional controls\n      }\n      const /** @type {?} */ value = parseFloat(control.value);\n      // Controls with NaN values after parsing should be treated as not having a\n      // maximum, per the HTML forms spec: https://www.w3.org/TR/html5/forms.html#attr-input-max\n      return !isNaN(value) && value > max ? {'max': {'max': max, 'actual': control.value}} : null;\n    };\n  }\n/**\n * Validator that requires controls to have a non-empty value.\n * @param {?} control\n * @return {?}\n */\nstatic required(control: AbstractControl): ValidationErrors|null {\n    return isEmptyInputValue(control.value) ? {'required': true} : null;\n  }\n/**\n * Validator that requires control value to be true.\n * @param {?} control\n * @return {?}\n */\nstatic requiredTrue(control: AbstractControl): ValidationErrors|null {\n    return control.value === true ? null : {'required': true};\n  }\n/**\n * Validator that performs email validation.\n * @param {?} control\n * @return {?}\n */\nstatic email(control: AbstractControl): ValidationErrors|null {\n    return EMAIL_REGEXP.test(control.value) ? null : {'email': true};\n  }\n/**\n * Validator that requires controls to have a value of a minimum length.\n * @param {?} minLength\n * @return {?}\n */\nstatic minLength(minLength: number): ValidatorFn {\n    return (control: AbstractControl): ValidationErrors | null => {\n      if (isEmptyInputValue(control.value)) {\n        return null;  // don't validate empty values to allow optional controls\n      }\n      const /** @type {?} */ length: number = control.value ? control.value.length : 0;\n      return length < minLength ?\n          {'minlength': {'requiredLength': minLength, 'actualLength': length}} :\n          null;\n    };\n  }\n/**\n * Validator that requires controls to have a value of a maximum length.\n * @param {?} maxLength\n * @return {?}\n */\nstatic maxLength(maxLength: number): ValidatorFn {\n    return (control: AbstractControl): ValidationErrors | null => {\n      const /** @type {?} */ length: number = control.value ? control.value.length : 0;\n      return length > maxLength ?\n          {'maxlength': {'requiredLength': maxLength, 'actualLength': length}} :\n          null;\n    };\n  }\n/**\n * Validator that requires a control to match a regex to its value.\n * @param {?} pattern\n * @return {?}\n */\nstatic pattern(pattern: string|RegExp): ValidatorFn {\n    if (!pattern) return Validators.nullValidator;\n    let /** @type {?} */ regex: RegExp;\n    let /** @type {?} */ regexStr: string;\n    if (typeof pattern === 'string') {\n      regexStr = `^${pattern}$`;\n      regex = new RegExp(regexStr);\n    } else {\n      regexStr = pattern.toString();\n      regex = pattern;\n    }\n    return (control: AbstractControl): ValidationErrors | null => {\n      if (isEmptyInputValue(control.value)) {\n        return null;  // don't validate empty values to allow optional controls\n      }\n      const /** @type {?} */ value: string = control.value;\n      return regex.test(value) ? null :\n                                 {'pattern': {'requiredPattern': regexStr, 'actualValue': value}};\n    };\n  }\n/**\n * No-op validator.\n * @param {?} c\n * @return {?}\n */\nstatic nullValidator(c: AbstractControl): ValidationErrors|null { return null; }\n\n  /**\n   * Compose multiple validators into a single function that returns the union\n   * of the individual error maps.\n   */\n  static compose(validators: null): null;\n  static compose(validators: (ValidatorFn|null|undefined)[]): ValidatorFn|null;\n/**\n * @param {?} validators\n * @return {?}\n */\nstatic compose(validators: (ValidatorFn|null|undefined)[]|null): ValidatorFn|null {\n    if (!validators) return null;\n    const /** @type {?} */ presentValidators: ValidatorFn[] = /** @type {?} */(( validators.filter(isPresent) as any));\n    if (presentValidators.length == 0) return null;\n\n    return function(control: AbstractControl) {\n      return _mergeErrors(_executeValidators(control, presentValidators));\n    };\n  }\n/**\n * @param {?} validators\n * @return {?}\n */\nstatic composeAsync(validators: (AsyncValidatorFn|null)[]): AsyncValidatorFn|null {\n    if (!validators) return null;\n    const /** @type {?} */ presentValidators: AsyncValidatorFn[] = /** @type {?} */(( validators.filter(isPresent) as any));\n    if (presentValidators.length == 0) return null;\n\n    return function(control: AbstractControl) {\n      const /** @type {?} */ observables = _executeAsyncValidators(control, presentValidators).map(toObservable);\n      return map.call(forkJoin(observables), _mergeErrors);\n    };\n  }\n}\n/**\n * @param {?} o\n * @return {?}\n */\nfunction isPresent(o: any): boolean {\n  return o != null;\n}\n/**\n * @param {?} r\n * @return {?}\n */\nexport function toObservable(r: any): Observable<any> {\n  const /** @type {?} */ obs = isPromise(r) ? fromPromise(r) : r;\n  if (!(isObservable(obs))) {\n    throw new Error(`Expected validator to return Promise or Observable.`);\n  }\n  return obs;\n}\n/**\n * @param {?} control\n * @param {?} validators\n * @return {?}\n */\nfunction _executeValidators(control: AbstractControl, validators: ValidatorFn[]): any[] {\n  return validators.map(v => v(control));\n}\n/**\n * @param {?} control\n * @param {?} validators\n * @return {?}\n */\nfunction _executeAsyncValidators(control: AbstractControl, validators: AsyncValidatorFn[]): any[] {\n  return validators.map(v => v(control));\n}\n/**\n * @param {?} arrayOfErrors\n * @return {?}\n */\nfunction _mergeErrors(arrayOfErrors: ValidationErrors[]): ValidationErrors|null {\n  const /** @type {?} */ res: {[key: string]: any} =\n      arrayOfErrors.reduce((res: ValidationErrors | null, errors: ValidationErrors | null) => {\n        return errors != null ? {... /** @type {?} */((res)), ...errors} : /** @type {?} */(( res));\n      }, {});\n  return Object.keys(res).length === 0 ? null : res;\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Directive, ElementRef, Renderer2, forwardRef} from '@angular/core';\n\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from './control_value_accessor';\n\nexport const /** @type {?} */ CHECKBOX_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => CheckboxControlValueAccessor),\n  multi: true,\n};\n/**\n * The accessor for writing a value and listening to changes on a checkbox input element.\n * \n *  ### Example\n *  ```\n *  <input type=\"checkbox\" name=\"rememberLogin\" ngModel>\n *  ```\n * \n *  \\@stable\n */\nexport class CheckboxControlValueAccessor implements ControlValueAccessor {\n  onChange = (_: any) => {};\n  onTouched = () => {};\n/**\n * @param {?} _renderer\n * @param {?} _elementRef\n */\nconstructor(private _renderer: Renderer2,\nprivate _elementRef: ElementRef) {}\n/**\n * @param {?} value\n * @return {?}\n */\nwriteValue(value: any): void {\n    this._renderer.setProperty(this._elementRef.nativeElement, 'checked', value);\n  }\n/**\n * @param {?} fn\n * @return {?}\n */\nregisterOnChange(fn: (_: any) => {}): void { this.onChange = fn; }\n/**\n * @param {?} fn\n * @return {?}\n */\nregisterOnTouched(fn: () => {}): void { this.onTouched = fn; }\n/**\n * @param {?} isDisabled\n * @return {?}\n */\nsetDisabledState(isDisabled: boolean): void {\n    this._renderer.setProperty(this._elementRef.nativeElement, 'disabled', isDisabled);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector:\n      'input[type=checkbox][formControlName],input[type=checkbox][formControl],input[type=checkbox][ngModel]',\n  host: {'(change)': 'onChange($event.target.checked)', '(blur)': 'onTouched()'},\n  providers: [CHECKBOX_VALUE_ACCESSOR]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Renderer2, },\n{type: ElementRef, },\n];\n}\n\nfunction CheckboxControlValueAccessor_tsickle_Closure_declarations() {\n/** @type {?} */\nCheckboxControlValueAccessor.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nCheckboxControlValueAccessor.ctorParameters;\n/** @type {?} */\nCheckboxControlValueAccessor.prototype.onChange;\n/** @type {?} */\nCheckboxControlValueAccessor.prototype.onTouched;\n/** @type {?} */\nCheckboxControlValueAccessor.prototype._renderer;\n/** @type {?} */\nCheckboxControlValueAccessor.prototype._elementRef;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Directive, ElementRef, Inject, InjectionToken, Optional, Renderer2, forwardRef} from '@angular/core';\nimport {ɵgetDOM as getDOM} from '@angular/platform-browser';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from './control_value_accessor';\n\nexport const /** @type {?} */ DEFAULT_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => DefaultValueAccessor),\n  multi: true\n};\n/**\n * We must check whether the agent is Android because composition events\n * behave differently between iOS and Android.\n * @return {?}\n */\nfunction _isAndroid(): boolean {\n  const /** @type {?} */ userAgent = getDOM() ? getDOM().getUserAgent() : '';\n  return /android (\\d+)/.test(userAgent.toLowerCase());\n}\n/**\n * Turn this mode on if you want form directives to buffer IME input until compositionend\n * \\@experimental\n */\nexport const COMPOSITION_BUFFER_MODE = new InjectionToken<boolean>('CompositionEventMode');\n/**\n * The default accessor for writing a value and listening to changes that is used by the\n * {\\@link NgModel}, {\\@link FormControlDirective}, and {\\@link FormControlName} directives.\n * \n *  ### Example\n *  ```\n *  <input type=\"text\" name=\"searchQuery\" ngModel>\n *  ```\n * \n *  \\@stable\n */\nexport class DefaultValueAccessor implements ControlValueAccessor {\n  onChange = (_: any) => {};\n  onTouched = () => {};\n/**\n * Whether the user is creating a composition string (IME events).\n */\nprivate _composing = false;\n/**\n * @param {?} _renderer\n * @param {?} _elementRef\n * @param {?} _compositionMode\n */\nconstructor(\nprivate _renderer: Renderer2,\nprivate _elementRef: ElementRef,\nprivate _compositionMode: boolean) {\n    if (this._compositionMode == null) {\n      this._compositionMode = !_isAndroid();\n    }\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nwriteValue(value: any): void {\n    const /** @type {?} */ normalizedValue = value == null ? '' : value;\n    this._renderer.setProperty(this._elementRef.nativeElement, 'value', normalizedValue);\n  }\n/**\n * @param {?} fn\n * @return {?}\n */\nregisterOnChange(fn: (_: any) => void): void { this.onChange = fn; }\n/**\n * @param {?} fn\n * @return {?}\n */\nregisterOnTouched(fn: () => void): void { this.onTouched = fn; }\n/**\n * @param {?} isDisabled\n * @return {?}\n */\nsetDisabledState(isDisabled: boolean): void {\n    this._renderer.setProperty(this._elementRef.nativeElement, 'disabled', isDisabled);\n  }\n/**\n * \\@internal\n * @param {?} value\n * @return {?}\n */\n_handleInput(value: any): void {\n    if (!this._compositionMode || (this._compositionMode && !this._composing)) {\n      this.onChange(value);\n    }\n  }\n/**\n * \\@internal\n * @return {?}\n */\n_compositionStart(): void { this._composing = true; }\n/**\n * \\@internal\n * @param {?} value\n * @return {?}\n */\n_compositionEnd(value: any): void {\n    this._composing = false;\n    this._compositionMode && this.onChange(value);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector:\n      'input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]',\n  // TODO: vsavkin replace the above selector with the one below it once\n  // https://github.com/angular/angular/issues/3011 is implemented\n  // selector: '[ngModel],[formControl],[formControlName]',\n  host: {\n    '(input)': '_handleInput($event.target.value)',\n    '(blur)': 'onTouched()',\n    '(compositionstart)': '_compositionStart()',\n    '(compositionend)': '_compositionEnd($event.target.value)'\n  },\n  providers: [DEFAULT_VALUE_ACCESSOR]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Renderer2, },\n{type: ElementRef, },\n{type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [COMPOSITION_BUFFER_MODE, ] }, ]},\n];\n}\n\nfunction DefaultValueAccessor_tsickle_Closure_declarations() {\n/** @type {?} */\nDefaultValueAccessor.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nDefaultValueAccessor.ctorParameters;\n/** @type {?} */\nDefaultValueAccessor.prototype.onChange;\n/** @type {?} */\nDefaultValueAccessor.prototype.onTouched;\n/**\n * Whether the user is creating a composition string (IME events).\n * @type {?}\n */\nDefaultValueAccessor.prototype._composing;\n/** @type {?} */\nDefaultValueAccessor.prototype._renderer;\n/** @type {?} */\nDefaultValueAccessor.prototype._elementRef;\n/** @type {?} */\nDefaultValueAccessor.prototype._compositionMode;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {AbstractControl} from '../model';\nimport {AsyncValidator, AsyncValidatorFn, Validator, ValidatorFn} from './validators';\n/**\n * @param {?} validator\n * @return {?}\n */\nexport function normalizeValidator(validator: ValidatorFn | Validator): ValidatorFn {\n  if (( /** @type {?} */((<Validator>validator))).validate) {\n    return (c: AbstractControl) => ( /** @type {?} */((<Validator>validator))).validate(c);\n  } else {\n    return /** @type {?} */(( <ValidatorFn>validator));\n  }\n}\n/**\n * @param {?} validator\n * @return {?}\n */\nexport function normalizeAsyncValidator(validator: AsyncValidatorFn | AsyncValidator):\n    AsyncValidatorFn {\n  if (( /** @type {?} */((<AsyncValidator>validator))).validate) {\n    return (c: AbstractControl) => ( /** @type {?} */((<AsyncValidator>validator))).validate(c);\n  } else {\n    return /** @type {?} */(( <AsyncValidatorFn>validator));\n  }\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Directive, DoCheck, ElementRef, Input, IterableChanges, IterableDiffer, IterableDiffers, KeyValueChanges, KeyValueDiffer, KeyValueDiffers, Renderer, ɵisListLikeIterable as isListLikeIterable, ɵstringify as stringify} from '@angular/core';\n/**\n * \\@ngModule CommonModule\n * \n * \\@whatItDoes Adds and removes CSS classes on an HTML element.\n * \n * \\@howToUse \n * ```\n *     <some-element [ngClass]=\"'first second'\">...</some-element>\n * \n *     <some-element [ngClass]=\"['first', 'second']\">...</some-element>\n * \n *     <some-element [ngClass]=\"{'first': true, 'second': true, 'third': false}\">...</some-element>\n * \n *     <some-element [ngClass]=\"stringExp|arrayExp|objExp\">...</some-element>\n * \n *     <some-element [ngClass]=\"{'class1 class2 class3' : true}\">...</some-element>\n * ```\n * \n * \\@description \n * \n * The CSS classes are updated as follows, depending on the type of the expression evaluation:\n * - `string` - the CSS classes listed in the string (space delimited) are added,\n * - `Array` - the CSS classes declared as Array elements are added,\n * - `Object` - keys are CSS classes that get added when the expression given in the value\n *              evaluates to a truthy value, otherwise they are removed.\n * \n * \\@stable\n */\nexport class NgClass implements DoCheck {\nprivate _iterableDiffer: IterableDiffer<string>|null;\nprivate _keyValueDiffer: KeyValueDiffer<string, any>|null;\nprivate _initialClasses: string[] = [];\nprivate _rawClass: string[]|Set<string>|{[klass: string]: any};\n/**\n * @param {?} _iterableDiffers\n * @param {?} _keyValueDiffers\n * @param {?} _ngEl\n * @param {?} _renderer\n */\nconstructor(\nprivate _iterableDiffers: IterableDiffers,\nprivate _keyValueDiffers: KeyValueDiffers,\nprivate _ngEl: ElementRef,\nprivate _renderer: Renderer) {}\n/**\n * @param {?} v\n * @return {?}\n */\nset klass(v: string) {\n    this._applyInitialClasses(true);\n    this._initialClasses = typeof v === 'string' ? v.split(/\\s+/) : [];\n    this._applyInitialClasses(false);\n    this._applyClasses(this._rawClass, false);\n  }\n/**\n * @param {?} v\n * @return {?}\n */\nset ngClass(v: string|string[]|Set<string>|{[klass: string]: any}) {\n    this._cleanupClasses(this._rawClass);\n\n    this._iterableDiffer = null;\n    this._keyValueDiffer = null;\n\n    this._rawClass = typeof v === 'string' ? v.split(/\\s+/) : v;\n\n    if (this._rawClass) {\n      if (isListLikeIterable(this._rawClass)) {\n        this._iterableDiffer = this._iterableDiffers.find(this._rawClass).create();\n      } else {\n        this._keyValueDiffer = this._keyValueDiffers.find(this._rawClass).create();\n      }\n    }\n  }\n/**\n * @return {?}\n */\nngDoCheck(): void {\n    if (this._iterableDiffer) {\n      const /** @type {?} */ iterableChanges = this._iterableDiffer.diff( /** @type {?} */((this._rawClass as string[])));\n      if (iterableChanges) {\n        this._applyIterableChanges(iterableChanges);\n      }\n    } else if (this._keyValueDiffer) {\n      const /** @type {?} */ keyValueChanges = this._keyValueDiffer.diff( /** @type {?} */((this._rawClass as{[k: string]: any})));\n      if (keyValueChanges) {\n        this._applyKeyValueChanges(keyValueChanges);\n      }\n    }\n  }\n/**\n * @param {?} rawClassVal\n * @return {?}\n */\nprivate _cleanupClasses(rawClassVal: string[]|{[klass: string]: any}): void {\n    this._applyClasses(rawClassVal, true);\n    this._applyInitialClasses(false);\n  }\n/**\n * @param {?} changes\n * @return {?}\n */\nprivate _applyKeyValueChanges(changes: KeyValueChanges<string, any>): void {\n    changes.forEachAddedItem((record) => this._toggleClass(record.key, record.currentValue));\n    changes.forEachChangedItem((record) => this._toggleClass(record.key, record.currentValue));\n    changes.forEachRemovedItem((record) => {\n      if (record.previousValue) {\n        this._toggleClass(record.key, false);\n      }\n    });\n  }\n/**\n * @param {?} changes\n * @return {?}\n */\nprivate _applyIterableChanges(changes: IterableChanges<string>): void {\n    changes.forEachAddedItem((record) => {\n      if (typeof record.item === 'string') {\n        this._toggleClass(record.item, true);\n      } else {\n        throw new Error(\n            `NgClass can only toggle CSS classes expressed as strings, got ${stringify(record.item)}`);\n      }\n    });\n\n    changes.forEachRemovedItem((record) => this._toggleClass(record.item, false));\n  }\n/**\n * @param {?} isCleanup\n * @return {?}\n */\nprivate _applyInitialClasses(isCleanup: boolean) {\n    this._initialClasses.forEach(klass => this._toggleClass(klass, !isCleanup));\n  }\n/**\n * @param {?} rawClassVal\n * @param {?} isCleanup\n * @return {?}\n */\nprivate _applyClasses(\n      rawClassVal: string[]|Set<string>|{[klass: string]: any}, isCleanup: boolean) {\n    if (rawClassVal) {\n      if (Array.isArray(rawClassVal) || rawClassVal instanceof Set) {\n        ( /** @type {?} */((<any>rawClassVal))).forEach((klass: string) => this._toggleClass(klass, !isCleanup));\n      } else {\n        Object.keys(rawClassVal).forEach(klass => {\n          if (rawClassVal[klass] != null) this._toggleClass(klass, !isCleanup);\n        });\n      }\n    }\n  }\n/**\n * @param {?} klass\n * @param {?} enabled\n * @return {?}\n */\nprivate _toggleClass(klass: string, enabled: any): void {\n    klass = klass.trim();\n    if (klass) {\n      klass.split(/\\s+/g).forEach(\n          klass => { this._renderer.setElementClass(this._ngEl.nativeElement, klass, !!enabled); });\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{selector: '[ngClass]'}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: IterableDiffers, },\n{type: KeyValueDiffers, },\n{type: ElementRef, },\n{type: Renderer, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'klass': [{ type: Input, args: ['class', ] },],\n'ngClass': [{ type: Input },],\n};\n}\n\nfunction NgClass_tsickle_Closure_declarations() {\n/** @type {?} */\nNgClass.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nNgClass.ctorParameters;\n/** @type {?} */\nNgClass.propDecorators;\n/** @type {?} */\nNgClass.prototype._iterableDiffer;\n/** @type {?} */\nNgClass.prototype._keyValueDiffer;\n/** @type {?} */\nNgClass.prototype._initialClasses;\n/** @type {?} */\nNgClass.prototype._rawClass;\n/** @type {?} */\nNgClass.prototype._iterableDiffers;\n/** @type {?} */\nNgClass.prototype._keyValueDiffers;\n/** @type {?} */\nNgClass.prototype._ngEl;\n/** @type {?} */\nNgClass.prototype._renderer;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {ComponentFactoryResolver, ComponentRef, Directive, Injector, Input, NgModuleFactory, NgModuleRef, OnChanges, OnDestroy, Provider, SimpleChanges, Type, ViewContainerRef} from '@angular/core';\n/**\n * Instantiates a single {\\@link Component} type and inserts its Host View into current View.\n * `NgComponentOutlet` provides a declarative approach for dynamic component creation.\n * \n * `NgComponentOutlet` requires a component type, if a falsy value is set the view will clear and\n * any existing component will get destroyed.\n * \n * ### Fine tune control\n * \n * You can control the component creation process by using the following optional attributes:\n * \n * * `ngComponentOutletInjector`: Optional custom {\\@link Injector} that will be used as parent for\n * the Component. Defaults to the injector of the current view container.\n * \n * * `ngComponentOutletContent`: Optional list of projectable nodes to insert into the content\n * section of the component, if exists.\n * \n * * `ngComponentOutletNgModuleFactory`: Optional module factory to allow dynamically loading other\n * module, then load a component from that module.\n * \n * ### Syntax\n * \n * Simple\n * ```\n * <ng-container *ngComponentOutlet=\"componentTypeExpression\"></ng-container>\n * ```\n * \n * Customized injector/content\n * ```\n * <ng-container *ngComponentOutlet=\"componentTypeExpression;\n *                                   injector: injectorExpression;\n *                                   content: contentNodesExpression;\">\n * </ng-container>\n * ```\n * \n * Customized ngModuleFactory\n * ```\n * <ng-container *ngComponentOutlet=\"componentTypeExpression;\n *                                   ngModuleFactory: moduleFactory;\">\n * </ng-container>\n * ```\n * ## Example\n * \n * {\\@example common/ngComponentOutlet/ts/module.ts region='SimpleExample'}\n * \n * A more complete example with additional options:\n * \n * {\\@example common/ngComponentOutlet/ts/module.ts region='CompleteExample'}\n * A more complete example with ngModuleFactory:\n * \n * {\\@example common/ngComponentOutlet/ts/module.ts region='NgModuleFactoryExample'}\n * \n * \\@experimental\n */\nexport class NgComponentOutlet implements OnChanges, OnDestroy {\n   ngComponentOutlet: Type<any>;\n   ngComponentOutletInjector: Injector;\n   ngComponentOutletContent: any[][];\n   ngComponentOutletNgModuleFactory: NgModuleFactory<any>;\nprivate _componentRef: ComponentRef<any>|null = null;\nprivate _moduleRef: NgModuleRef<any>|null = null;\n/**\n * @param {?} _viewContainerRef\n */\nconstructor(private _viewContainerRef: ViewContainerRef) {}\n/**\n * @param {?} changes\n * @return {?}\n */\nngOnChanges(changes: SimpleChanges) {\n    this._viewContainerRef.clear();\n    this._componentRef = null;\n\n    if (this.ngComponentOutlet) {\n      const /** @type {?} */ elInjector = this.ngComponentOutletInjector || this._viewContainerRef.parentInjector;\n\n      if (changes['ngComponentOutletNgModuleFactory']) {\n        if (this._moduleRef) this._moduleRef.destroy();\n\n        if (this.ngComponentOutletNgModuleFactory) {\n          const /** @type {?} */ parentModule = elInjector.get(NgModuleRef);\n          this._moduleRef = this.ngComponentOutletNgModuleFactory.create(parentModule.injector);\n        } else {\n          this._moduleRef = null;\n        }\n      }\n\n      const /** @type {?} */ componentFactoryResolver = this._moduleRef ? this._moduleRef.componentFactoryResolver :\n                                                         elInjector.get(ComponentFactoryResolver);\n\n      const /** @type {?} */ componentFactory =\n          componentFactoryResolver.resolveComponentFactory(this.ngComponentOutlet);\n\n      this._componentRef = this._viewContainerRef.createComponent(\n          componentFactory, this._viewContainerRef.length, elInjector,\n          this.ngComponentOutletContent);\n    }\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    if (this._moduleRef) this._moduleRef.destroy();\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{selector: '[ngComponentOutlet]'}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ViewContainerRef, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'ngComponentOutlet': [{ type: Input },],\n'ngComponentOutletInjector': [{ type: Input },],\n'ngComponentOutletContent': [{ type: Input },],\n'ngComponentOutletNgModuleFactory': [{ type: Input },],\n};\n}\n\nfunction NgComponentOutlet_tsickle_Closure_declarations() {\n/** @type {?} */\nNgComponentOutlet.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nNgComponentOutlet.ctorParameters;\n/** @type {?} */\nNgComponentOutlet.propDecorators;\n/** @type {?} */\nNgComponentOutlet.prototype.ngComponentOutlet;\n/** @type {?} */\nNgComponentOutlet.prototype.ngComponentOutletInjector;\n/** @type {?} */\nNgComponentOutlet.prototype.ngComponentOutletContent;\n/** @type {?} */\nNgComponentOutlet.prototype.ngComponentOutletNgModuleFactory;\n/** @type {?} */\nNgComponentOutlet.prototype._componentRef;\n/** @type {?} */\nNgComponentOutlet.prototype._moduleRef;\n/** @type {?} */\nNgComponentOutlet.prototype._viewContainerRef;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {ChangeDetectorRef, Directive, DoCheck, EmbeddedViewRef, Input, IterableChangeRecord, IterableChanges, IterableDiffer, IterableDiffers, NgIterable, OnChanges, SimpleChanges, TemplateRef, TrackByFunction, ViewContainerRef, forwardRef, isDevMode} from '@angular/core';\n/**\n * \\@stable\n */\nexport class NgForOfContext<T> {\n/**\n * @param {?} $implicit\n * @param {?} ngForOf\n * @param {?} index\n * @param {?} count\n */\nconstructor(\npublic $implicit: T,\npublic ngForOf: NgIterable<T>,\npublic index: number,\npublic count: number) {}\n/**\n * @return {?}\n */\nget first(): boolean { return this.index === 0; }\n/**\n * @return {?}\n */\nget last(): boolean { return this.index === this.count - 1; }\n/**\n * @return {?}\n */\nget even(): boolean { return this.index % 2 === 0; }\n/**\n * @return {?}\n */\nget odd(): boolean { return !this.even; }\n}\n\nfunction NgForOfContext_tsickle_Closure_declarations() {\n/** @type {?} */\nNgForOfContext.prototype.$implicit;\n/** @type {?} */\nNgForOfContext.prototype.ngForOf;\n/** @type {?} */\nNgForOfContext.prototype.index;\n/** @type {?} */\nNgForOfContext.prototype.count;\n}\n\n/**\n * The `NgForOf` directive instantiates a template once per item from an iterable. The context\n * for each instantiated template inherits from the outer context with the given loop variable\n * set to the current item from the iterable.\n * \n * ### Local Variables\n * \n * `NgForOf` provides several exported values that can be aliased to local variables:\n * \n * - `$implicit: T`: The value of the individual items in the iterable (`ngForOf`).\n * - `ngForOf: NgIterable<T>`: The value of the iterable expression. Useful when the expression is\n * more complex then a property access, for example when using the async pipe (`userStreams |\n * async`).\n * - `index: number`: The index of the current item in the iterable.\n * - `first: boolean`: True when the item is the first item in the iterable.\n * - `last: boolean`: True when the item is the last item in the iterable.\n * - `even: boolean`: True when the item has an even index in the iterable.\n * - `odd: boolean`: True when the item has an odd index in the iterable.\n * \n * ```\n * <li *ngFor=\"let user of userObservable | async as users; index as i; first as isFirst\">\n *    {{i}}/{{users.length}}. {{user}} <span *ngIf=\"isFirst\">default</span>\n * </li>\n * ```\n * \n * ### Change Propagation\n * \n * When the contents of the iterator changes, `NgForOf` makes the corresponding changes to the DOM:\n * \n * * When an item is added, a new instance of the template is added to the DOM.\n * * When an item is removed, its template instance is removed from the DOM.\n * * When items are reordered, their respective templates are reordered in the DOM.\n * * Otherwise, the DOM element for that item will remain the same.\n * \n * Angular uses object identity to track insertions and deletions within the iterator and reproduce\n * those changes in the DOM. This has important implications for animations and any stateful\n * controls (such as `<input>` elements which accept user input) that are present. Inserted rows can\n * be animated in, deleted rows can be animated out, and unchanged rows retain any unsaved state\n * such as user input.\n * \n * It is possible for the identities of elements in the iterator to change while the data does not.\n * This can happen, for example, if the iterator produced from an RPC to the server, and that\n * RPC is re-run. Even if the data hasn't changed, the second response will produce objects with\n * different identities, and Angular will tear down the entire DOM and rebuild it (as if all old\n * elements were deleted and all new elements inserted). This is an expensive operation and should\n * be avoided if possible.\n * \n * To customize the default tracking algorithm, `NgForOf` supports `trackBy` option.\n * `trackBy` takes a function which has two arguments: `index` and `item`.\n * If `trackBy` is given, Angular tracks changes by the return value of the function.\n * \n * ### Syntax\n * \n * - `<li *ngFor=\"let item of items; index as i; trackBy: trackByFn\">...</li>`\n * - `<li template=\"ngFor let item of items; index as i; trackBy: trackByFn\">...</li>`\n * \n * With `<ng-template>` element:\n * \n * ```\n * <ng-template ngFor let-item [ngForOf]=\"items\" let-i=\"index\" [ngForTrackBy]=\"trackByFn\">\n *   <li>...</li>\n * </ng-template>\n * ```\n * \n * ### Example\n * \n * See a [live demo](http://plnkr.co/edit/KVuXxDp0qinGDyo307QW?p=preview) for a more detailed\n * example.\n * \n * \\@stable\n */\nexport class NgForOf<T> implements DoCheck, OnChanges {\n   ngForOf: NgIterable<T>;\n/**\n * @param {?} fn\n * @return {?}\n */\nset ngForTrackBy(fn: TrackByFunction<T>) {\n    if (isDevMode() && fn != null && typeof fn !== 'function') {\n      // TODO(vicb): use a log service once there is a public one available\n      if ( /** @type {?} */((<any>console)) && /** @type {?} */(( <any>console.warn))) {\n        console.warn(\n            `trackBy must be a function, but received ${JSON.stringify(fn)}. ` +\n            `See https://angular.io/docs/ts/latest/api/common/index/NgFor-directive.html#!#change-propagation for more information.`);\n      }\n    }\n    this._trackByFn = fn;\n  }\n/**\n * @return {?}\n */\nget ngForTrackBy(): TrackByFunction<T> { return this._trackByFn; }\nprivate _differ: IterableDiffer<T>|null = null;\nprivate _trackByFn: TrackByFunction<T>;\n/**\n * @param {?} _viewContainer\n * @param {?} _template\n * @param {?} _differs\n */\nconstructor(\nprivate _viewContainer: ViewContainerRef,\nprivate _template: TemplateRef<NgForOfContext<T>>,\nprivate _differs: IterableDiffers) {}\n/**\n * @param {?} value\n * @return {?}\n */\nset ngForTemplate(value: TemplateRef<NgForOfContext<T>>) {\n    // TODO(TS2.1): make TemplateRef<Partial<NgForRowOf<T>>> once we move to TS v2.1\n    // The current type is too restrictive; a template that just uses index, for example,\n    // should be acceptable.\n    if (value) {\n      this._template = value;\n    }\n  }\n/**\n * @param {?} changes\n * @return {?}\n */\nngOnChanges(changes: SimpleChanges): void {\n    if ('ngForOf' in changes) {\n      // React on ngForOf changes only once all inputs have been initialized\n      const /** @type {?} */ value = changes['ngForOf'].currentValue;\n      if (!this._differ && value) {\n        try {\n          this._differ = this._differs.find(value).create(this.ngForTrackBy);\n        } catch ( /** @type {?} */e) {\n          throw new Error(\n              `Cannot find a differ supporting object '${value}' of type '${getTypeNameForDebugging(value)}'. NgFor only supports binding to Iterables such as Arrays.`);\n        }\n      }\n    }\n  }\n/**\n * @return {?}\n */\nngDoCheck(): void {\n    if (this._differ) {\n      const /** @type {?} */ changes = this._differ.diff(this.ngForOf);\n      if (changes) this._applyChanges(changes);\n    }\n  }\n/**\n * @param {?} changes\n * @return {?}\n */\nprivate _applyChanges(changes: IterableChanges<T>) {\n    const /** @type {?} */ insertTuples: RecordViewTuple<T>[] = [];\n    changes.forEachOperation(\n        (item: IterableChangeRecord<any>, adjustedPreviousIndex: number, currentIndex: number) => {\n          if (item.previousIndex == null) {\n            const /** @type {?} */ view = this._viewContainer.createEmbeddedView(\n                this._template, new NgForOfContext<T>( /** @type {?} */((null)), this.ngForOf, -1, -1), currentIndex);\n            const /** @type {?} */ tuple = new RecordViewTuple<T>(item, view);\n            insertTuples.push(tuple);\n          } else if (currentIndex == null) {\n            this._viewContainer.remove(adjustedPreviousIndex);\n          } else {\n            const /** @type {?} */ view = /** @type {?} */(( this._viewContainer.get(adjustedPreviousIndex)));\n            this._viewContainer.move(view, currentIndex);\n            const /** @type {?} */ tuple = new RecordViewTuple(item, /** @type {?} */(( <EmbeddedViewRef<NgForOfContext<T>>>view)));\n            insertTuples.push(tuple);\n          }\n        });\n\n    for (let /** @type {?} */ i = 0; i < insertTuples.length; i++) {\n      this._perViewChange(insertTuples[i].view, insertTuples[i].record);\n    }\n\n    for (let /** @type {?} */ i = 0, /** @type {?} */ ilen = this._viewContainer.length; i < ilen; i++) {\n      const /** @type {?} */ viewRef = /** @type {?} */(( <EmbeddedViewRef<NgForOfContext<T>>>this._viewContainer.get(i)));\n      viewRef.context.index = i;\n      viewRef.context.count = ilen;\n    }\n\n    changes.forEachIdentityChange((record: any) => {\n      const /** @type {?} */ viewRef = /** @type {?} */((\n          <EmbeddedViewRef<NgForOfContext<T>>>this._viewContainer.get(record.currentIndex)));\n      viewRef.context.$implicit = record.item;\n    });\n  }\n/**\n * @param {?} view\n * @param {?} record\n * @return {?}\n */\nprivate _perViewChange(\n      view: EmbeddedViewRef<NgForOfContext<T>>, record: IterableChangeRecord<any>) {\n    view.context.$implicit = record.item;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{selector: '[ngFor][ngForOf]'}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ViewContainerRef, },\n{type: TemplateRef, },\n{type: IterableDiffers, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'ngForOf': [{ type: Input },],\n'ngForTrackBy': [{ type: Input },],\n'ngForTemplate': [{ type: Input },],\n};\n}\n\nfunction NgForOf_tsickle_Closure_declarations() {\n/** @type {?} */\nNgForOf.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nNgForOf.ctorParameters;\n/** @type {?} */\nNgForOf.propDecorators;\n/** @type {?} */\nNgForOf.prototype.ngForOf;\n/** @type {?} */\nNgForOf.prototype._differ;\n/** @type {?} */\nNgForOf.prototype._trackByFn;\n/** @type {?} */\nNgForOf.prototype._viewContainer;\n/** @type {?} */\nNgForOf.prototype._template;\n/** @type {?} */\nNgForOf.prototype._differs;\n}\n\nclass RecordViewTuple<T> {\n/**\n * @param {?} record\n * @param {?} view\n */\nconstructor(public record: any,\npublic view: EmbeddedViewRef<NgForOfContext<T>>) {}\n}\n\nfunction RecordViewTuple_tsickle_Closure_declarations() {\n/** @type {?} */\nRecordViewTuple.prototype.record;\n/** @type {?} */\nRecordViewTuple.prototype.view;\n}\n\n\n/**\n * @deprecated from v4.0.0 - Use NgForOf<any> instead.\n */\nexport type NgFor = NgForOf<any>;\n/**\n * @deprecated from v4.0.0 - Use NgForOf instead.\n */\nexport const NgFor = NgForOf;\n/**\n * @param {?} type\n * @return {?}\n */\nexport function getTypeNameForDebugging(type: any): string {\n  return type['name'] || typeof type;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Directive, EmbeddedViewRef, Input, TemplateRef, ViewContainerRef} from '@angular/core';\n/**\n * Conditionally includes a template based on the value of an `expression`.\n * \n * `ngIf` evaluates the `expression` and then renders the `then` or `else` template in its place\n * when expression is truthy or falsy respectively. Typically the:\n *  - `then` template is the inline template of `ngIf` unless bound to a different value.\n *  - `else` template is blank unless it is bound.\n * \n * ## Most common usage\n * \n * The most common usage of the `ngIf` directive is to conditionally show the inline template as\n * seen in this example:\n * {\\@example common/ngIf/ts/module.ts region='NgIfSimple'}\n * \n * ## Showing an alternative template using `else`\n * \n * If it is necessary to display a template when the `expression` is falsy use the `else` template\n * binding as shown. Note that the `else` binding points to a `<ng-template>` labeled `#elseBlock`.\n * The template can be defined anywhere in the component view but is typically placed right after\n * `ngIf` for readability.\n * \n * {\\@example common/ngIf/ts/module.ts region='NgIfElse'}\n * \n * ## Using non-inlined `then` template\n * \n * Usually the `then` template is the inlined template of the `ngIf`, but it can be changed using\n * a binding (just like `else`). Because `then` and `else` are bindings, the template references can\n * change at runtime as shown in this example.\n * \n * {\\@example common/ngIf/ts/module.ts region='NgIfThenElse'}\n * \n * ## Storing conditional result in a variable\n * \n * A common pattern is that we need to show a set of properties from the same object. If the\n * object is undefined, then we have to use the safe-traversal-operator `?.` to guard against\n * dereferencing a `null` value. This is especially the case when waiting on async data such as\n * when using the `async` pipe as shown in following example:\n * \n * ```\n * Hello {{ (userStream|async)?.last }}, {{ (userStream|async)?.first }}!\n * ```\n * \n * There are several inefficiencies in the above example:\n *  - We create multiple subscriptions on `userStream`. One for each `async` pipe, or two in the\n *    example above.\n *  - We cannot display an alternative screen while waiting for the data to arrive asynchronously.\n *  - We have to use the safe-traversal-operator `?.` to access properties, which is cumbersome.\n *  - We have to place the `async` pipe in parenthesis.\n * \n * A better way to do this is to use `ngIf` and store the result of the condition in a local\n * variable as shown in the the example below:\n * \n * {\\@example common/ngIf/ts/module.ts region='NgIfAs'}\n * \n * Notice that:\n *  - We use only one `async` pipe and hence only one subscription gets created.\n *  - `ngIf` stores the result of the `userStream|async` in the local variable `user`.\n *  - The local `user` can then be bound repeatedly in a more efficient way.\n *  - No need to use the safe-traversal-operator `?.` to access properties as `ngIf` will only\n *    display the data if `userStream` returns a value.\n *  - We can display an alternative template while waiting for the data.\n * \n * ### Syntax\n * \n * Simple form:\n * - `<div *ngIf=\"condition\">...</div>`\n * - `<div template=\"ngIf condition\">...</div>`\n * - `<ng-template [ngIf]=\"condition\"><div>...</div></ng-template>`\n * \n * Form with an else block:\n * ```\n * <div *ngIf=\"condition; else elseBlock\">...</div>\n * <ng-template #elseBlock>...</ng-template>\n * ```\n * \n * Form with a `then` and `else` block:\n * ```\n * <div *ngIf=\"condition; then thenBlock else elseBlock\"></div>\n * <ng-template #thenBlock>...</ng-template>\n * <ng-template #elseBlock>...</ng-template>\n * ```\n * \n * Form with storing the value locally:\n * ```\n * <div *ngIf=\"condition as value; else elseBlock\">{{value}}</div>\n * <ng-template #elseBlock>...</ng-template>\n * ```\n * \n * \\@stable\n */\nexport class NgIf {\nprivate _context: NgIfContext = new NgIfContext();\nprivate _thenTemplateRef: TemplateRef<NgIfContext>|null = null;\nprivate _elseTemplateRef: TemplateRef<NgIfContext>|null = null;\nprivate _thenViewRef: EmbeddedViewRef<NgIfContext>|null = null;\nprivate _elseViewRef: EmbeddedViewRef<NgIfContext>|null = null;\n/**\n * @param {?} _viewContainer\n * @param {?} templateRef\n */\nconstructor(private _viewContainer: ViewContainerRef, templateRef: TemplateRef<NgIfContext>) {\n    this._thenTemplateRef = templateRef;\n  }\n/**\n * @param {?} condition\n * @return {?}\n */\nset ngIf(condition: any) {\n    this._context.$implicit = this._context.ngIf = condition;\n    this._updateView();\n  }\n/**\n * @param {?} templateRef\n * @return {?}\n */\nset ngIfThen(templateRef: TemplateRef<NgIfContext>) {\n    this._thenTemplateRef = templateRef;\n    this._thenViewRef = null;  // clear previous view if any.\n    this._updateView();\n  }\n/**\n * @param {?} templateRef\n * @return {?}\n */\nset ngIfElse(templateRef: TemplateRef<NgIfContext>) {\n    this._elseTemplateRef = templateRef;\n    this._elseViewRef = null;  // clear previous view if any.\n    this._updateView();\n  }\n/**\n * @return {?}\n */\nprivate _updateView() {\n    if (this._context.$implicit) {\n      if (!this._thenViewRef) {\n        this._viewContainer.clear();\n        this._elseViewRef = null;\n        if (this._thenTemplateRef) {\n          this._thenViewRef =\n              this._viewContainer.createEmbeddedView(this._thenTemplateRef, this._context);\n        }\n      }\n    } else {\n      if (!this._elseViewRef) {\n        this._viewContainer.clear();\n        this._thenViewRef = null;\n        if (this._elseTemplateRef) {\n          this._elseViewRef =\n              this._viewContainer.createEmbeddedView(this._elseTemplateRef, this._context);\n        }\n      }\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{selector: '[ngIf]'}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ViewContainerRef, },\n{type: TemplateRef, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'ngIf': [{ type: Input },],\n'ngIfThen': [{ type: Input },],\n'ngIfElse': [{ type: Input },],\n};\n}\n\nfunction NgIf_tsickle_Closure_declarations() {\n/** @type {?} */\nNgIf.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nNgIf.ctorParameters;\n/** @type {?} */\nNgIf.propDecorators;\n/** @type {?} */\nNgIf.prototype._context;\n/** @type {?} */\nNgIf.prototype._thenTemplateRef;\n/** @type {?} */\nNgIf.prototype._elseTemplateRef;\n/** @type {?} */\nNgIf.prototype._thenViewRef;\n/** @type {?} */\nNgIf.prototype._elseViewRef;\n/** @type {?} */\nNgIf.prototype._viewContainer;\n}\n\n/**\n * \\@stable\n */\nexport class NgIfContext {\npublic $implicit: any = null;\npublic ngIf: any = null;\n}\n\nfunction NgIfContext_tsickle_Closure_declarations() {\n/** @type {?} */\nNgIfContext.prototype.$implicit;\n/** @type {?} */\nNgIfContext.prototype.ngIf;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Directive, DoCheck, Host, Input, TemplateRef, ViewContainerRef} from '@angular/core';\nexport class SwitchView {\nprivate _created = false;\n/**\n * @param {?} _viewContainerRef\n * @param {?} _templateRef\n */\nconstructor(\nprivate _viewContainerRef: ViewContainerRef,\nprivate _templateRef: TemplateRef<Object>) {}\n/**\n * @return {?}\n */\ncreate(): void {\n    this._created = true;\n    this._viewContainerRef.createEmbeddedView(this._templateRef);\n  }\n/**\n * @return {?}\n */\ndestroy(): void {\n    this._created = false;\n    this._viewContainerRef.clear();\n  }\n/**\n * @param {?} created\n * @return {?}\n */\nenforceState(created: boolean) {\n    if (created && !this._created) {\n      this.create();\n    } else if (!created && this._created) {\n      this.destroy();\n    }\n  }\n}\n\nfunction SwitchView_tsickle_Closure_declarations() {\n/** @type {?} */\nSwitchView.prototype._created;\n/** @type {?} */\nSwitchView.prototype._viewContainerRef;\n/** @type {?} */\nSwitchView.prototype._templateRef;\n}\n\n/**\n * \\@ngModule CommonModule\n * \n * \\@whatItDoes Adds / removes DOM sub-trees when the nest match expressions matches the switch\n *             expression.\n * \n * \\@howToUse \n * ```\n *     <container-element [ngSwitch]=\"switch_expression\">\n *       <some-element *ngSwitchCase=\"match_expression_1\">...</some-element>\n *       <some-element *ngSwitchCase=\"match_expression_2\">...</some-element>\n *       <some-other-element *ngSwitchCase=\"match_expression_3\">...</some-other-element>\n *       <ng-container *ngSwitchCase=\"match_expression_3\">\n *         <!-- use a ng-container to group multiple root nodes -->\n *         <inner-element></inner-element>\n *         <inner-other-element></inner-other-element>\n *       </ng-container>\n *       <some-element *ngSwitchDefault>...</some-element>\n *     </container-element>\n * ```\n * \\@description \n * \n * `NgSwitch` stamps out nested views when their match expression value matches the value of the\n * switch expression.\n * \n * In other words:\n * - you define a container element (where you place the directive with a switch expression on the\n * `[ngSwitch]=\"...\"` attribute)\n * - you define inner views inside the `NgSwitch` and place a `*ngSwitchCase` attribute on the view\n * root elements.\n * \n * Elements within `NgSwitch` but outside of a `NgSwitchCase` or `NgSwitchDefault` directives will\n * be preserved at the location.\n * \n * The `ngSwitchCase` directive informs the parent `NgSwitch` of which view to display when the\n * expression is evaluated.\n * When no matching expression is found on a `ngSwitchCase` view, the `ngSwitchDefault` view is\n * stamped out.\n * \n * \\@stable\n */\nexport class NgSwitch {\nprivate _defaultViews: SwitchView[];\nprivate _defaultUsed = false;\nprivate _caseCount = 0;\nprivate _lastCaseCheckIndex = 0;\nprivate _lastCasesMatched = false;\nprivate _ngSwitch: any;\n/**\n * @param {?} newValue\n * @return {?}\n */\nset ngSwitch(newValue: any) {\n    this._ngSwitch = newValue;\n    if (this._caseCount === 0) {\n      this._updateDefaultCases(true);\n    }\n  }\n/**\n * \\@internal\n * @return {?}\n */\n_addCase(): number { return this._caseCount++; }\n/**\n * \\@internal\n * @param {?} view\n * @return {?}\n */\n_addDefault(view: SwitchView) {\n    if (!this._defaultViews) {\n      this._defaultViews = [];\n    }\n    this._defaultViews.push(view);\n  }\n/**\n * \\@internal\n * @param {?} value\n * @return {?}\n */\n_matchCase(value: any): boolean {\n    const /** @type {?} */ matched = value == this._ngSwitch;\n    this._lastCasesMatched = this._lastCasesMatched || matched;\n    this._lastCaseCheckIndex++;\n    if (this._lastCaseCheckIndex === this._caseCount) {\n      this._updateDefaultCases(!this._lastCasesMatched);\n      this._lastCaseCheckIndex = 0;\n      this._lastCasesMatched = false;\n    }\n    return matched;\n  }\n/**\n * @param {?} useDefault\n * @return {?}\n */\nprivate _updateDefaultCases(useDefault: boolean) {\n    if (this._defaultViews && useDefault !== this._defaultUsed) {\n      this._defaultUsed = useDefault;\n      for (let /** @type {?} */ i = 0; i < this._defaultViews.length; i++) {\n        const /** @type {?} */ defaultView = this._defaultViews[i];\n        defaultView.enforceState(useDefault);\n      }\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{selector: '[ngSwitch]'}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'ngSwitch': [{ type: Input },],\n};\n}\n\nfunction NgSwitch_tsickle_Closure_declarations() {\n/** @type {?} */\nNgSwitch.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nNgSwitch.ctorParameters;\n/** @type {?} */\nNgSwitch.propDecorators;\n/** @type {?} */\nNgSwitch.prototype._defaultViews;\n/** @type {?} */\nNgSwitch.prototype._defaultUsed;\n/** @type {?} */\nNgSwitch.prototype._caseCount;\n/** @type {?} */\nNgSwitch.prototype._lastCaseCheckIndex;\n/** @type {?} */\nNgSwitch.prototype._lastCasesMatched;\n/** @type {?} */\nNgSwitch.prototype._ngSwitch;\n}\n\n/**\n * \\@ngModule CommonModule\n * \n * \\@whatItDoes Creates a view that will be added/removed from the parent {\\@link NgSwitch} when the\n *             given expression evaluate to respectively the same/different value as the switch\n *             expression.\n * \n * \\@howToUse \n * ```\n * <container-element [ngSwitch]=\"switch_expression\">\n *   <some-element *ngSwitchCase=\"match_expression_1\">...</some-element>\n * </container-element>\n * ```\n * \\@description \n * \n * Insert the sub-tree when the expression evaluates to the same value as the enclosing switch\n * expression.\n * \n * If multiple match expressions match the switch expression value, all of them are displayed.\n * \n * See {\\@link NgSwitch} for more details and example.\n * \n * \\@stable\n */\nexport class NgSwitchCase implements DoCheck {\nprivate _view: SwitchView;\n\n  \n  ngSwitchCase: any;\n/**\n * @param {?} viewContainer\n * @param {?} templateRef\n * @param {?} ngSwitch\n */\nconstructor(\n      viewContainer: ViewContainerRef, templateRef: TemplateRef<Object>,\nprivate ngSwitch: NgSwitch) {\n    ngSwitch._addCase();\n    this._view = new SwitchView(viewContainer, templateRef);\n  }\n/**\n * @return {?}\n */\nngDoCheck() { this._view.enforceState(this.ngSwitch._matchCase(this.ngSwitchCase)); }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{selector: '[ngSwitchCase]'}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ViewContainerRef, },\n{type: TemplateRef, },\n{type: NgSwitch, decorators: [{ type: Host }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'ngSwitchCase': [{ type: Input },],\n};\n}\n\nfunction NgSwitchCase_tsickle_Closure_declarations() {\n/** @type {?} */\nNgSwitchCase.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nNgSwitchCase.ctorParameters;\n/** @type {?} */\nNgSwitchCase.propDecorators;\n/** @type {?} */\nNgSwitchCase.prototype._view;\n/** @type {?} */\nNgSwitchCase.prototype.ngSwitchCase;\n/** @type {?} */\nNgSwitchCase.prototype.ngSwitch;\n}\n\n/**\n * \\@ngModule CommonModule\n * \\@whatItDoes Creates a view that is added to the parent {\\@link NgSwitch} when no case expressions\n * match the\n *             switch expression.\n * \n * \\@howToUse \n * ```\n * <container-element [ngSwitch]=\"switch_expression\">\n *   <some-element *ngSwitchCase=\"match_expression_1\">...</some-element>\n *   <some-other-element *ngSwitchDefault>...</some-other-element>\n * </container-element>\n * ```\n * \n * \\@description \n * \n * Insert the sub-tree when no case expressions evaluate to the same value as the enclosing switch\n * expression.\n * \n * See {\\@link NgSwitch} for more details and example.\n * \n * \\@stable\n */\nexport class NgSwitchDefault {\n/**\n * @param {?} viewContainer\n * @param {?} templateRef\n * @param {?} ngSwitch\n */\nconstructor(\n      viewContainer: ViewContainerRef, templateRef: TemplateRef<Object>,\n       ngSwitch: NgSwitch) {\n    ngSwitch._addDefault(new SwitchView(viewContainer, templateRef));\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{selector: '[ngSwitchDefault]'}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ViewContainerRef, },\n{type: TemplateRef, },\n{type: NgSwitch, decorators: [{ type: Host }, ]},\n];\n}\n\nfunction NgSwitchDefault_tsickle_Closure_declarations() {\n/** @type {?} */\nNgSwitchDefault.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nNgSwitchDefault.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Attribute, Directive, Host, Input, TemplateRef, ViewContainerRef} from '@angular/core';\n\nimport {NgLocalization, getPluralCategory} from '../localization';\n\nimport {SwitchView} from './ng_switch';\n/**\n * \\@ngModule CommonModule\n * \n * \\@whatItDoes Adds / removes DOM sub-trees based on a numeric value. Tailored for pluralization.\n * \n * \\@howToUse \n * ```\n * <some-element [ngPlural]=\"value\">\n *   <ng-template ngPluralCase=\"=0\">there is nothing</ng-template>\n *   <ng-template ngPluralCase=\"=1\">there is one</ng-template>\n *   <ng-template ngPluralCase=\"few\">there are a few</ng-template>\n * </some-element>\n * ```\n * \n * \\@description \n * \n * Displays DOM sub-trees that match the switch expression value, or failing that, DOM sub-trees\n * that match the switch expression's pluralization category.\n * \n * To use this directive you must provide a container element that sets the `[ngPlural]` attribute\n * to a switch expression. Inner elements with a `[ngPluralCase]` will display based on their\n * expression:\n * - if `[ngPluralCase]` is set to a value starting with `=`, it will only display if the value\n *   matches the switch expression exactly,\n * - otherwise, the view will be treated as a \"category match\", and will only display if exact\n *   value matches aren't found and the value maps to its category for the defined locale.\n * \n * See http://cldr.unicode.org/index/cldr-spec/plural-rules\n * \n * \\@experimental\n */\nexport class NgPlural {\nprivate _switchValue: number;\nprivate _activeView: SwitchView;\nprivate _caseViews: {[k: string]: SwitchView} = {};\n/**\n * @param {?} _localization\n */\nconstructor(private _localization: NgLocalization) {}\n/**\n * @param {?} value\n * @return {?}\n */\nset ngPlural(value: number) {\n    this._switchValue = value;\n    this._updateView();\n  }\n/**\n * @param {?} value\n * @param {?} switchView\n * @return {?}\n */\naddCase(value: string, switchView: SwitchView): void { this._caseViews[value] = switchView; }\n/**\n * @return {?}\n */\nprivate _updateView(): void {\n    this._clearViews();\n\n    const /** @type {?} */ cases = Object.keys(this._caseViews);\n    const /** @type {?} */ key = getPluralCategory(this._switchValue, cases, this._localization);\n    this._activateView(this._caseViews[key]);\n  }\n/**\n * @return {?}\n */\nprivate _clearViews() {\n    if (this._activeView) this._activeView.destroy();\n  }\n/**\n * @param {?} view\n * @return {?}\n */\nprivate _activateView(view: SwitchView) {\n    if (view) {\n      this._activeView = view;\n      this._activeView.create();\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{selector: '[ngPlural]'}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: NgLocalization, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'ngPlural': [{ type: Input },],\n};\n}\n\nfunction NgPlural_tsickle_Closure_declarations() {\n/** @type {?} */\nNgPlural.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nNgPlural.ctorParameters;\n/** @type {?} */\nNgPlural.propDecorators;\n/** @type {?} */\nNgPlural.prototype._switchValue;\n/** @type {?} */\nNgPlural.prototype._activeView;\n/** @type {?} */\nNgPlural.prototype._caseViews;\n/** @type {?} */\nNgPlural.prototype._localization;\n}\n\n/**\n * \\@ngModule CommonModule\n * \n * \\@whatItDoes Creates a view that will be added/removed from the parent {\\@link NgPlural} when the\n *             given expression matches the plural expression according to CLDR rules.\n * \n * \\@howToUse \n * ```\n * <some-element [ngPlural]=\"value\">\n *   <ng-template ngPluralCase=\"=0\">...</ng-template>\n *   <ng-template ngPluralCase=\"other\">...</ng-template>\n * </some-element>\n * ```\n * \n * See {\\@link NgPlural} for more details and example.\n * \n * \\@experimental\n */\nexport class NgPluralCase {\n/**\n * @param {?} value\n * @param {?} template\n * @param {?} viewContainer\n * @param {?} ngPlural\n */\nconstructor(\npublic value: string, template: TemplateRef<Object>,\n      viewContainer: ViewContainerRef,  ngPlural: NgPlural) {\n    const isANumber: boolean = !isNaN(Number(value));\n    ngPlural.addCase(isANumber ? `=${value}` : value, new SwitchView(viewContainer, template));\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{selector: '[ngPluralCase]'}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: undefined, decorators: [{ type: Attribute, args: ['ngPluralCase', ] }, ]},\n{type: TemplateRef, },\n{type: ViewContainerRef, },\n{type: NgPlural, decorators: [{ type: Host }, ]},\n];\n}\n\nfunction NgPluralCase_tsickle_Closure_declarations() {\n/** @type {?} */\nNgPluralCase.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nNgPluralCase.ctorParameters;\n/** @type {?} */\nNgPluralCase.prototype.value;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Directive, DoCheck, ElementRef, Input, KeyValueChanges, KeyValueDiffer, KeyValueDiffers, Renderer} from '@angular/core';\n/**\n * \\@ngModule CommonModule\n * \n * \\@whatItDoes Update an HTML element styles.\n * \n * \\@howToUse \n * ```\n * <some-element [ngStyle]=\"{'font-style': styleExp}\">...</some-element>\n * \n * <some-element [ngStyle]=\"{'max-width.px': widthExp}\">...</some-element>\n * \n * <some-element [ngStyle]=\"objExp\">...</some-element>\n * ```\n * \n * \\@description \n * \n * The styles are updated according to the value of the expression evaluation:\n * - keys are style names with an optional `.<unit>` suffix (ie 'top.px', 'font-style.em'),\n * - values are the values assigned to those properties (expressed in the given unit).\n * \n * \\@stable\n */\nexport class NgStyle implements DoCheck {\nprivate _ngStyle: {[key: string]: string};\nprivate _differ: KeyValueDiffer<string, string|number>;\n/**\n * @param {?} _differs\n * @param {?} _ngEl\n * @param {?} _renderer\n */\nconstructor(\nprivate _differs: KeyValueDiffers,\nprivate _ngEl: ElementRef,\nprivate _renderer: Renderer) {}\n/**\n * @param {?} v\n * @return {?}\n */\nset ngStyle(v: {[key: string]: string}) {\n    this._ngStyle = v;\n    if (!this._differ && v) {\n      this._differ = this._differs.find(v).create();\n    }\n  }\n/**\n * @return {?}\n */\nngDoCheck() {\n    if (this._differ) {\n      const /** @type {?} */ changes = this._differ.diff(this._ngStyle);\n      if (changes) {\n        this._applyChanges(changes);\n      }\n    }\n  }\n/**\n * @param {?} changes\n * @return {?}\n */\nprivate _applyChanges(changes: KeyValueChanges<string, string|number>): void {\n    changes.forEachRemovedItem((record) => this._setStyle(record.key, null));\n    changes.forEachAddedItem((record) => this._setStyle(record.key, record.currentValue));\n    changes.forEachChangedItem((record) => this._setStyle(record.key, record.currentValue));\n  }\n/**\n * @param {?} nameAndUnit\n * @param {?} value\n * @return {?}\n */\nprivate _setStyle(nameAndUnit: string, value: string|number|null|undefined): void {\n    const [name, unit] = nameAndUnit.split('.');\n    value = value != null && unit ? `${value}${unit}` : value;\n\n    this._renderer.setElementStyle(this._ngEl.nativeElement, name, /** @type {?} */(( value as string)));\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{selector: '[ngStyle]'}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: KeyValueDiffers, },\n{type: ElementRef, },\n{type: Renderer, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'ngStyle': [{ type: Input },],\n};\n}\n\nfunction NgStyle_tsickle_Closure_declarations() {\n/** @type {?} */\nNgStyle.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nNgStyle.ctorParameters;\n/** @type {?} */\nNgStyle.propDecorators;\n/** @type {?} */\nNgStyle.prototype._ngStyle;\n/** @type {?} */\nNgStyle.prototype._differ;\n/** @type {?} */\nNgStyle.prototype._differs;\n/** @type {?} */\nNgStyle.prototype._ngEl;\n/** @type {?} */\nNgStyle.prototype._renderer;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Directive, EmbeddedViewRef, Input, OnChanges, SimpleChanges, TemplateRef, ViewContainerRef} from '@angular/core';\n/**\n * \\@ngModule CommonModule\n * \n * \\@whatItDoes Inserts an embedded view from a prepared `TemplateRef`\n * \n * \\@howToUse \n * ```\n * <ng-container *ngTemplateOutlet=\"templateRefExp; context: contextExp\"></ng-container>\n * ```\n * \n * \\@description \n * \n * You can attach a context object to the `EmbeddedViewRef` by setting `[ngTemplateOutletContext]`.\n * `[ngTemplateOutletContext]` should be an object, the object's keys will be available for binding\n * by the local template `let` declarations.\n * \n * Note: using the key `$implicit` in the context object will set it's value as default.\n * \n * ## Example\n * \n * {\\@example common/ngTemplateOutlet/ts/module.ts region='NgTemplateOutlet'}\n * \n * \\@experimental\n */\nexport class NgTemplateOutlet implements OnChanges {\nprivate _viewRef: EmbeddedViewRef<any>;\npublic ngTemplateOutletContext: Object;\npublic ngTemplateOutlet: TemplateRef<any>;\n/**\n * @param {?} _viewContainerRef\n */\nconstructor(private _viewContainerRef: ViewContainerRef) {}\n/**\n * @deprecated v4.0.0 - Renamed to ngTemplateOutletContext.\n * @param {?} context\n * @return {?}\n */\nset ngOutletContext(context: Object) { this.ngTemplateOutletContext = context; }\n/**\n * @param {?} changes\n * @return {?}\n */\nngOnChanges(changes: SimpleChanges) {\n    if (this._viewRef) {\n      this._viewContainerRef.remove(this._viewContainerRef.indexOf(this._viewRef));\n    }\n\n    if (this.ngTemplateOutlet) {\n      this._viewRef = this._viewContainerRef.createEmbeddedView(\n          this.ngTemplateOutlet, this.ngTemplateOutletContext);\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{selector: '[ngTemplateOutlet]'}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ViewContainerRef, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'ngTemplateOutletContext': [{ type: Input },],\n'ngTemplateOutlet': [{ type: Input },],\n'ngOutletContext': [{ type: Input },],\n};\n}\n\nfunction NgTemplateOutlet_tsickle_Closure_declarations() {\n/** @type {?} */\nNgTemplateOutlet.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nNgTemplateOutlet.ctorParameters;\n/** @type {?} */\nNgTemplateOutlet.propDecorators;\n/** @type {?} */\nNgTemplateOutlet.prototype._viewRef;\n/** @type {?} */\nNgTemplateOutlet.prototype.ngTemplateOutletContext;\n/** @type {?} */\nNgTemplateOutlet.prototype.ngTemplateOutlet;\n/** @type {?} */\nNgTemplateOutlet.prototype._viewContainerRef;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Provider} from '@angular/core';\n\nimport {NgClass} from './ng_class';\nimport {NgComponentOutlet} from './ng_component_outlet';\nimport {NgFor, NgForOf, NgForOfContext} from './ng_for_of';\nimport {NgIf, NgIfContext} from './ng_if';\nimport {NgPlural, NgPluralCase} from './ng_plural';\nimport {NgStyle} from './ng_style';\nimport {NgSwitch, NgSwitchCase, NgSwitchDefault} from './ng_switch';\nimport {NgTemplateOutlet} from './ng_template_outlet';\n\nexport {\n  NgClass,\n  NgComponentOutlet,\n  NgFor,\n  NgForOf,\n  NgForOfContext,\n  NgIf,\n  NgIfContext,\n  NgPlural,\n  NgPluralCase,\n  NgStyle,\n  NgSwitch,\n  NgSwitchCase,\n  NgSwitchDefault,\n  NgTemplateOutlet\n};\n/**\n * A collection of Angular directives that are likely to be used in each and every Angular\n * application.\n */\nexport const COMMON_DIRECTIVES: Provider[] = [\n  NgClass,\n  NgComponentOutlet,\n  NgForOf,\n  NgIf,\n  NgTemplateOutlet,\n  NgStyle,\n  NgSwitch,\n  NgSwitchCase,\n  NgSwitchDefault,\n  NgPlural,\n  NgPluralCase,\n];\n/**\n * A collection of deprecated directives that are no longer part of the core module.\n */\nexport const COMMON_DEPRECATED_DIRECTIVES: Provider[] = [NgFor];\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {ChangeDetectorRef, EventEmitter, OnDestroy, Pipe, PipeTransform, WrappedValue, ɵisObservable, ɵisPromise} from '@angular/core';\nimport {Observable} from 'rxjs/Observable';\nimport {ISubscription} from 'rxjs/Subscription';\nimport {invalidPipeArgumentError} from './invalid_pipe_argument_error';\n\ninterface SubscriptionStrategy {\n  createSubscription(async: Observable<any>|Promise<any>, updateLatestValue: any): ISubscription\n      |Promise<any>;\n  dispose(subscription: ISubscription|Promise<any>): void;\n  onDestroy(subscription: ISubscription|Promise<any>): void;\n}\nclass ObservableStrategy implements SubscriptionStrategy {\n/**\n * @param {?} async\n * @param {?} updateLatestValue\n * @return {?}\n */\ncreateSubscription(async: Observable<any>, updateLatestValue: any): ISubscription {\n    return async.subscribe({next: updateLatestValue, error: (e: any) => { throw e; }});\n  }\n/**\n * @param {?} subscription\n * @return {?}\n */\ndispose(subscription: ISubscription): void { subscription.unsubscribe(); }\n/**\n * @param {?} subscription\n * @return {?}\n */\nonDestroy(subscription: ISubscription): void { subscription.unsubscribe(); }\n}\nclass PromiseStrategy implements SubscriptionStrategy {\n/**\n * @param {?} async\n * @param {?} updateLatestValue\n * @return {?}\n */\ncreateSubscription(async: Promise<any>, updateLatestValue: (v: any) => any): Promise<any> {\n    return async.then(updateLatestValue, e => { throw e; });\n  }\n/**\n * @param {?} subscription\n * @return {?}\n */\ndispose(subscription: Promise<any>): void {}\n/**\n * @param {?} subscription\n * @return {?}\n */\nonDestroy(subscription: Promise<any>): void {}\n}\n\nconst /** @type {?} */ _promiseStrategy = new PromiseStrategy();\nconst /** @type {?} */ _observableStrategy = new ObservableStrategy();\n/**\n * \\@ngModule CommonModule\n * \\@whatItDoes Unwraps a value from an asynchronous primitive.\n * \\@howToUse `observable_or_promise_expression | async`\n * \\@description \n * The `async` pipe subscribes to an `Observable` or `Promise` and returns the latest value it has\n * emitted. When a new value is emitted, the `async` pipe marks the component to be checked for\n * changes. When the component gets destroyed, the `async` pipe unsubscribes automatically to avoid\n * potential memory leaks.\n * \n * \n * ## Examples\n * \n * This example binds a `Promise` to the view. Clicking the `Resolve` button resolves the\n * promise.\n * \n * {\\@example common/pipes/ts/async_pipe.ts region='AsyncPipePromise'}\n * \n * It's also possible to use `async` with Observables. The example below binds the `time` Observable\n * to the view. The Observable continuously updates the view with the current time.\n * \n * {\\@example common/pipes/ts/async_pipe.ts region='AsyncPipeObservable'}\n * \n * \\@stable\n */\nexport class AsyncPipe implements OnDestroy, PipeTransform {\nprivate _latestValue: any = null;\nprivate _latestReturnedValue: any = null;\nprivate _subscription: ISubscription|Promise<any>|null = null;\nprivate _obj: Observable<any>|Promise<any>|EventEmitter<any>|null = null;\nprivate _strategy: SubscriptionStrategy = /** @type {?} */(( null));\n/**\n * @param {?} _ref\n */\nconstructor(private _ref: ChangeDetectorRef) {}\n/**\n * @return {?}\n */\nngOnDestroy(): void {\n    if (this._subscription) {\n      this._dispose();\n    }\n  }\n\n  transform<T>(obj: null): null;\n  transform<T>(obj: undefined): undefined;\n  transform<T>(obj: Observable<T>): T|null;\n  transform<T>(obj: Promise<T>): T|null;\n/**\n * @param {?} obj\n * @return {?}\n */\ntransform(obj: Observable<any>|Promise<any>|null|undefined): any {\n    if (!this._obj) {\n      if (obj) {\n        this._subscribe(obj);\n      }\n      this._latestReturnedValue = this._latestValue;\n      return this._latestValue;\n    }\n\n    if (obj !== this._obj) {\n      this._dispose();\n      return this.transform( /** @type {?} */((obj as any)));\n    }\n\n    if (this._latestValue === this._latestReturnedValue) {\n      return this._latestReturnedValue;\n    }\n\n    this._latestReturnedValue = this._latestValue;\n    return WrappedValue.wrap(this._latestValue);\n  }\n/**\n * @param {?} obj\n * @return {?}\n */\nprivate _subscribe(obj: Observable<any>|Promise<any>|EventEmitter<any>): void {\n    this._obj = obj;\n    this._strategy = this._selectStrategy(obj);\n    this._subscription = this._strategy.createSubscription(\n        obj, (value: Object) => this._updateLatestValue(obj, value));\n  }\n/**\n * @param {?} obj\n * @return {?}\n */\nprivate _selectStrategy(obj: Observable<any>|Promise<any>|EventEmitter<any>): any {\n    if (ɵisPromise(obj)) {\n      return _promiseStrategy;\n    }\n\n    if (ɵisObservable(obj)) {\n      return _observableStrategy;\n    }\n\n    throw invalidPipeArgumentError(AsyncPipe, obj);\n  }\n/**\n * @return {?}\n */\nprivate _dispose(): void {\n    this._strategy.dispose( /** @type {?} */((this._subscription)));\n    this._latestValue = null;\n    this._latestReturnedValue = null;\n    this._subscription = null;\n    this._obj = null;\n  }\n/**\n * @param {?} async\n * @param {?} value\n * @return {?}\n */\nprivate _updateLatestValue(async: any, value: Object): void {\n    if (async === this._obj) {\n      this._latestValue = value;\n      this._ref.markForCheck();\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Pipe, args: [{name: 'async', pure: false}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ChangeDetectorRef, },\n];\n}\n\nfunction AsyncPipe_tsickle_Closure_declarations() {\n/** @type {?} */\nAsyncPipe.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nAsyncPipe.ctorParameters;\n/** @type {?} */\nAsyncPipe.prototype._latestValue;\n/** @type {?} */\nAsyncPipe.prototype._latestReturnedValue;\n/** @type {?} */\nAsyncPipe.prototype._subscription;\n/** @type {?} */\nAsyncPipe.prototype._obj;\n/** @type {?} */\nAsyncPipe.prototype._strategy;\n/** @type {?} */\nAsyncPipe.prototype._ref;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Pipe, PipeTransform} from '@angular/core';\nimport {invalidPipeArgumentError} from './invalid_pipe_argument_error';\n/**\n * Transforms text to lowercase.\n * \n * {\\@example  common/pipes/ts/lowerupper_pipe.ts region='LowerUpperPipe' }\n * \n * \\@stable\n */\nexport class LowerCasePipe implements PipeTransform {\n/**\n * @param {?} value\n * @return {?}\n */\ntransform(value: string): string {\n    if (!value) return value;\n    if (typeof value !== 'string') {\n      throw invalidPipeArgumentError(LowerCasePipe, value);\n    }\n    return value.toLowerCase();\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Pipe, args: [{name: 'lowercase'}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction LowerCasePipe_tsickle_Closure_declarations() {\n/** @type {?} */\nLowerCasePipe.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nLowerCasePipe.ctorParameters;\n}\n\n/**\n * Helper method to transform a single word to titlecase.\n * \n * \\@stable\n * @param {?} word\n * @return {?}\n */\nfunction titleCaseWord(word: string) {\n  if (!word) return word;\n  return word[0].toUpperCase() + word.substr(1).toLowerCase();\n}\n/**\n * Transforms text to titlecase.\n * \n * \\@stable\n */\nexport class TitleCasePipe implements PipeTransform {\n/**\n * @param {?} value\n * @return {?}\n */\ntransform(value: string): string {\n    if (!value) return value;\n    if (typeof value !== 'string') {\n      throw invalidPipeArgumentError(TitleCasePipe, value);\n    }\n\n    return value.split(/\\b/g).map(word => titleCaseWord(word)).join('');\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Pipe, args: [{name: 'titlecase'}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction TitleCasePipe_tsickle_Closure_declarations() {\n/** @type {?} */\nTitleCasePipe.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nTitleCasePipe.ctorParameters;\n}\n\n/**\n * Transforms text to uppercase.\n * \n * \\@stable\n */\nexport class UpperCasePipe implements PipeTransform {\n/**\n * @param {?} value\n * @return {?}\n */\ntransform(value: string): string {\n    if (!value) return value;\n    if (typeof value !== 'string') {\n      throw invalidPipeArgumentError(UpperCasePipe, value);\n    }\n    return value.toUpperCase();\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Pipe, args: [{name: 'uppercase'}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction UpperCasePipe_tsickle_Closure_declarations() {\n/** @type {?} */\nUpperCasePipe.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nUpperCasePipe.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","\nexport type NumberFormatStyle = number;\nexport let NumberFormatStyle: any = {};\nNumberFormatStyle.Decimal = 0;\nNumberFormatStyle.Percent = 1;\nNumberFormatStyle.Currency = 2;\nNumberFormatStyle[NumberFormatStyle.Decimal] = \"Decimal\";\nNumberFormatStyle[NumberFormatStyle.Percent] = \"Percent\";\nNumberFormatStyle[NumberFormatStyle.Currency] = \"Currency\";\n\nexport class NumberFormatter {\n/**\n * @param {?} num\n * @param {?} locale\n * @param {?} style\n * @param {?=} opts\n * @return {?}\n */\nstatic format(num: number, locale: string, style: NumberFormatStyle, opts: {\n    minimumIntegerDigits?: number,\n    minimumFractionDigits?: number,\n    maximumFractionDigits?: number,\n    currency?: string|null,\n    currencyAsSymbol?: boolean\n  } = {}): string {\n    const {minimumIntegerDigits, minimumFractionDigits, maximumFractionDigits, currency,\n           currencyAsSymbol = false} = opts;\n    const /** @type {?} */ options: Intl.NumberFormatOptions = {\n      minimumIntegerDigits,\n      minimumFractionDigits,\n      maximumFractionDigits,\n      style: NumberFormatStyle[style].toLowerCase()\n    };\n\n    if (style == NumberFormatStyle.Currency) {\n      options.currency = typeof currency == 'string' ? currency : undefined;\n      options.currencyDisplay = currencyAsSymbol ? 'symbol' : 'code';\n    }\n    return new Intl.NumberFormat(locale, options).format(num);\n  }\n}\n\ntype DateFormatterFn = (date: Date, locale: string) => string;\n\nconst /** @type {?} */ DATE_FORMATS_SPLIT =\n    /((?:[^yMLdHhmsazZEwGjJ']+)|(?:'(?:[^']|'')*')|(?:E+|y+|M+|L+|d+|H+|h+|J+|j+|m+|s+|a|z|Z|G+|w+))(.*)/;\n\nconst /** @type {?} */ PATTERN_ALIASES: {[format: string]: DateFormatterFn} = {\n  // Keys are quoted so they do not get renamed during closure compilation.\n  'yMMMdjms': datePartGetterFactory(combine([\n    digitCondition('year', 1),\n    nameCondition('month', 3),\n    digitCondition('day', 1),\n    digitCondition('hour', 1),\n    digitCondition('minute', 1),\n    digitCondition('second', 1),\n  ])),\n  'yMdjm': datePartGetterFactory(combine([\n    digitCondition('year', 1), digitCondition('month', 1), digitCondition('day', 1),\n    digitCondition('hour', 1), digitCondition('minute', 1)\n  ])),\n  'yMMMMEEEEd': datePartGetterFactory(combine([\n    digitCondition('year', 1), nameCondition('month', 4), nameCondition('weekday', 4),\n    digitCondition('day', 1)\n  ])),\n  'yMMMMd': datePartGetterFactory(\n      combine([digitCondition('year', 1), nameCondition('month', 4), digitCondition('day', 1)])),\n  'yMMMd': datePartGetterFactory(\n      combine([digitCondition('year', 1), nameCondition('month', 3), digitCondition('day', 1)])),\n  'yMd': datePartGetterFactory(\n      combine([digitCondition('year', 1), digitCondition('month', 1), digitCondition('day', 1)])),\n  'jms': datePartGetterFactory(combine(\n      [digitCondition('hour', 1), digitCondition('second', 1), digitCondition('minute', 1)])),\n  'jm': datePartGetterFactory(combine([digitCondition('hour', 1), digitCondition('minute', 1)]))\n};\n\nconst /** @type {?} */ DATE_FORMATS: {[format: string]: DateFormatterFn} = {\n  // Keys are quoted so they do not get renamed.\n  'yyyy': datePartGetterFactory(digitCondition('year', 4)),\n  'yy': datePartGetterFactory(digitCondition('year', 2)),\n  'y': datePartGetterFactory(digitCondition('year', 1)),\n  'MMMM': datePartGetterFactory(nameCondition('month', 4)),\n  'MMM': datePartGetterFactory(nameCondition('month', 3)),\n  'MM': datePartGetterFactory(digitCondition('month', 2)),\n  'M': datePartGetterFactory(digitCondition('month', 1)),\n  'LLLL': datePartGetterFactory(nameCondition('month', 4)),\n  'L': datePartGetterFactory(nameCondition('month', 1)),\n  'dd': datePartGetterFactory(digitCondition('day', 2)),\n  'd': datePartGetterFactory(digitCondition('day', 1)),\n  'HH': digitModifier(\n      hourExtractor(datePartGetterFactory(hour12Modify(digitCondition('hour', 2), false)))),\n  'H': hourExtractor(datePartGetterFactory(hour12Modify(digitCondition('hour', 1), false))),\n  'hh': digitModifier(\n      hourExtractor(datePartGetterFactory(hour12Modify(digitCondition('hour', 2), true)))),\n  'h': hourExtractor(datePartGetterFactory(hour12Modify(digitCondition('hour', 1), true))),\n  'jj': datePartGetterFactory(digitCondition('hour', 2)),\n  'j': datePartGetterFactory(digitCondition('hour', 1)),\n  'mm': digitModifier(datePartGetterFactory(digitCondition('minute', 2))),\n  'm': datePartGetterFactory(digitCondition('minute', 1)),\n  'ss': digitModifier(datePartGetterFactory(digitCondition('second', 2))),\n  's': datePartGetterFactory(digitCondition('second', 1)),\n  // while ISO 8601 requires fractions to be prefixed with `.` or `,`\n  // we can be just safely rely on using `sss` since we currently don't support single or two digit\n  // fractions\n  'sss': datePartGetterFactory(digitCondition('second', 3)),\n  'EEEE': datePartGetterFactory(nameCondition('weekday', 4)),\n  'EEE': datePartGetterFactory(nameCondition('weekday', 3)),\n  'EE': datePartGetterFactory(nameCondition('weekday', 2)),\n  'E': datePartGetterFactory(nameCondition('weekday', 1)),\n  'a': hourClockExtractor(datePartGetterFactory(hour12Modify(digitCondition('hour', 1), true))),\n  'Z': timeZoneGetter('short'),\n  'z': timeZoneGetter('long'),\n  'ww': datePartGetterFactory({}),  // Week of year, padded (00-53). Week 01 is the week with the\n                                    // first Thursday of the year. not support ?\n  'w':\n      datePartGetterFactory({}),  // Week of year (0-53). Week 1 is the week with the first Thursday\n                                  // of the year not support ?\n  'G': datePartGetterFactory(nameCondition('era', 1)),\n  'GG': datePartGetterFactory(nameCondition('era', 2)),\n  'GGG': datePartGetterFactory(nameCondition('era', 3)),\n  'GGGG': datePartGetterFactory(nameCondition('era', 4))\n};\n/**\n * @param {?} inner\n * @return {?}\n */\nfunction digitModifier(inner: DateFormatterFn): DateFormatterFn {\n  return function(date: Date, locale: string): string {\n    const /** @type {?} */ result = inner(date, locale);\n    return result.length == 1 ? '0' + result : result;\n  };\n}\n/**\n * @param {?} inner\n * @return {?}\n */\nfunction hourClockExtractor(inner: DateFormatterFn): DateFormatterFn {\n  return function(date: Date, locale: string): string { return inner(date, locale).split(' ')[1]; };\n}\n/**\n * @param {?} inner\n * @return {?}\n */\nfunction hourExtractor(inner: DateFormatterFn): DateFormatterFn {\n  return function(date: Date, locale: string): string { return inner(date, locale).split(' ')[0]; };\n}\n/**\n * @param {?} date\n * @param {?} locale\n * @param {?} options\n * @return {?}\n */\nfunction intlDateFormat(date: Date, locale: string, options: Intl.DateTimeFormatOptions): string {\n  return new Intl.DateTimeFormat(locale, options).format(date).replace(/[\\u200e\\u200f]/g, '');\n}\n/**\n * @param {?} timezone\n * @return {?}\n */\nfunction timeZoneGetter(timezone: string): DateFormatterFn {\n  // To workaround `Intl` API restriction for single timezone let format with 24 hours\n  const /** @type {?} */ options = {hour: '2-digit', hour12: false, timeZoneName: timezone};\n  return function(date: Date, locale: string): string {\n    const /** @type {?} */ result = intlDateFormat(date, locale, options);\n    // Then extract first 3 letters that related to hours\n    return result ? result.substring(3) : '';\n  };\n}\n/**\n * @param {?} options\n * @param {?} value\n * @return {?}\n */\nfunction hour12Modify(\n    options: Intl.DateTimeFormatOptions, value: boolean): Intl.DateTimeFormatOptions {\n  options.hour12 = value;\n  return options;\n}\n/**\n * @param {?} prop\n * @param {?} len\n * @return {?}\n */\nfunction digitCondition(prop: string, len: number): Intl.DateTimeFormatOptions {\n  const /** @type {?} */ result: {[k: string]: string} = {};\n  result[prop] = len === 2 ? '2-digit' : 'numeric';\n  return result;\n}\n/**\n * @param {?} prop\n * @param {?} len\n * @return {?}\n */\nfunction nameCondition(prop: string, len: number): Intl.DateTimeFormatOptions {\n  const /** @type {?} */ result: {[k: string]: string} = {};\n  if (len < 4) {\n    result[prop] = len > 1 ? 'short' : 'narrow';\n  } else {\n    result[prop] = 'long';\n  }\n\n  return result;\n}\n/**\n * @param {?} options\n * @return {?}\n */\nfunction combine(options: Intl.DateTimeFormatOptions[]): Intl.DateTimeFormatOptions {\n  return options.reduce((merged, opt) => ({...merged, ...opt}), {});\n}\n/**\n * @param {?} ret\n * @return {?}\n */\nfunction datePartGetterFactory(ret: Intl.DateTimeFormatOptions): DateFormatterFn {\n  return (date: Date, locale: string): string => intlDateFormat(date, locale, ret);\n}\n\nconst /** @type {?} */ DATE_FORMATTER_CACHE = new Map<string, string[]>();\n/**\n * @param {?} format\n * @param {?} date\n * @param {?} locale\n * @return {?}\n */\nfunction dateFormatter(format: string, date: Date, locale: string): string {\n  const /** @type {?} */ fn = PATTERN_ALIASES[format];\n\n  if (fn) return fn(date, locale);\n\n  const /** @type {?} */ cacheKey = format;\n  let /** @type {?} */ parts = DATE_FORMATTER_CACHE.get(cacheKey);\n\n  if (!parts) {\n    parts = [];\n    let /** @type {?} */ match: RegExpExecArray|null;\n    DATE_FORMATS_SPLIT.exec(format);\n\n    let /** @type {?} */ _format: string|null = format;\n    while (_format) {\n      match = DATE_FORMATS_SPLIT.exec(_format);\n      if (match) {\n        parts = parts.concat(match.slice(1));\n        _format = /** @type {?} */(( parts.pop()));\n      } else {\n        parts.push(_format);\n        _format = null;\n      }\n    }\n\n    DATE_FORMATTER_CACHE.set(cacheKey, parts);\n  }\n\n  return parts.reduce((text, part) => {\n    const /** @type {?} */ fn = DATE_FORMATS[part];\n    return text + (fn ? fn(date, locale) : partToTime(part));\n  }, '');\n}\n/**\n * @param {?} part\n * @return {?}\n */\nfunction partToTime(part: string): string {\n  return part === '\\'\\'' ? '\\'' : part.replace(/(^'|'$)/g, '').replace(/''/g, '\\'');\n}\nexport class DateFormatter {\n/**\n * @param {?} date\n * @param {?} locale\n * @param {?} pattern\n * @return {?}\n */\nstatic format(date: Date, locale: string, pattern: string): string {\n    return dateFormatter(pattern, date, locale);\n  }\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Inject, LOCALE_ID, Pipe, PipeTransform, Type} from '@angular/core';\nimport {NumberFormatStyle, NumberFormatter} from './intl';\nimport {invalidPipeArgumentError} from './invalid_pipe_argument_error';\n\nconst /** @type {?} */ _NUMBER_FORMAT_REGEXP = /^(\\d+)?\\.((\\d+)(-(\\d+))?)?$/;\n/**\n * @param {?} pipe\n * @param {?} locale\n * @param {?} value\n * @param {?} style\n * @param {?=} digits\n * @param {?=} currency\n * @param {?=} currencyAsSymbol\n * @return {?}\n */\nfunction formatNumber(\n    pipe: Type<any>, locale: string, value: number | string, style: NumberFormatStyle,\n    digits?: string | null, currency: string | null = null,\n    currencyAsSymbol: boolean = false): string|null {\n  if (value == null) return null;\n\n  // Convert strings to numbers\n  value = typeof value === 'string' && isNumeric(value) ? +value : value;\n  if (typeof value !== 'number') {\n    throw invalidPipeArgumentError(pipe, value);\n  }\n\n  let /** @type {?} */ minInt: number|undefined = undefined;\n  let /** @type {?} */ minFraction: number|undefined = undefined;\n  let /** @type {?} */ maxFraction: number|undefined = undefined;\n  if (style !== NumberFormatStyle.Currency) {\n    // rely on Intl default for currency\n    minInt = 1;\n    minFraction = 0;\n    maxFraction = 3;\n  }\n\n  if (digits) {\n    const /** @type {?} */ parts = digits.match(_NUMBER_FORMAT_REGEXP);\n    if (parts === null) {\n      throw new Error(`${digits} is not a valid digit info for number pipes`);\n    }\n    if (parts[1] != null) {  // min integer digits\n      minInt = parseIntAutoRadix(parts[1]);\n    }\n    if (parts[3] != null) {  // min fraction digits\n      minFraction = parseIntAutoRadix(parts[3]);\n    }\n    if (parts[5] != null) {  // max fraction digits\n      maxFraction = parseIntAutoRadix(parts[5]);\n    }\n  }\n\n  return NumberFormatter.format( /** @type {?} */((value as number)), locale, style, {\n    minimumIntegerDigits: minInt,\n    minimumFractionDigits: minFraction,\n    maximumFractionDigits: maxFraction,\n    currency: currency,\n    currencyAsSymbol: currencyAsSymbol,\n  });\n}\n/**\n * \\@ngModule CommonModule\n * \\@whatItDoes Formats a number according to locale rules.\n * \\@howToUse `number_expression | number[:digitInfo]`\n * \n * Formats a number as text. Group sizing and separator and other locale-specific\n * configurations are based on the active locale.\n * \n * where `expression` is a number:\n *  - `digitInfo` is a `string` which has a following format: <br>\n *     <code>{minIntegerDigits}.{minFractionDigits}-{maxFractionDigits}</code>\n *   - `minIntegerDigits` is the minimum number of integer digits to use. Defaults to `1`.\n *   - `minFractionDigits` is the minimum number of digits after fraction. Defaults to `0`.\n *   - `maxFractionDigits` is the maximum number of digits after fraction. Defaults to `3`.\n * \n * For more information on the acceptable range for each of these numbers and other\n * details see your native internationalization library.\n * \n * WARNING: this pipe uses the Internationalization API which is not yet available in all browsers\n * and may require a polyfill. See [Browser Support](guide/browser-support) for details.\n * \n * ### Example\n * \n * {\\@example common/pipes/ts/number_pipe.ts region='NumberPipe'}\n * \n * \\@stable\n */\nexport class DecimalPipe implements PipeTransform {\n/**\n * @param {?} _locale\n */\nconstructor(\nprivate _locale: string) {}\n/**\n * @param {?} value\n * @param {?=} digits\n * @return {?}\n */\ntransform(value: any, digits?: string): string|null {\n    return formatNumber(DecimalPipe, this._locale, value, NumberFormatStyle.Decimal, digits);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Pipe, args: [{name: 'number'}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: undefined, decorators: [{ type: Inject, args: [LOCALE_ID, ] }, ]},\n];\n}\n\nfunction DecimalPipe_tsickle_Closure_declarations() {\n/** @type {?} */\nDecimalPipe.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nDecimalPipe.ctorParameters;\n/** @type {?} */\nDecimalPipe.prototype._locale;\n}\n\n/**\n * \\@ngModule CommonModule\n * \\@whatItDoes Formats a number as a percentage according to locale rules.\n * \\@howToUse `number_expression | percent[:digitInfo]`\n * \n * \\@description \n * \n * Formats a number as percentage.\n * \n * - `digitInfo` See {\\@link DecimalPipe} for detailed description.\n * \n * WARNING: this pipe uses the Internationalization API which is not yet available in all browsers\n * and may require a polyfill. See [Browser Support](guide/browser-support) for details.\n * \n * ### Example\n * \n * {\\@example common/pipes/ts/number_pipe.ts region='PercentPipe'}\n * \n * \\@stable\n */\nexport class PercentPipe implements PipeTransform {\n/**\n * @param {?} _locale\n */\nconstructor(\nprivate _locale: string) {}\n/**\n * @param {?} value\n * @param {?=} digits\n * @return {?}\n */\ntransform(value: any, digits?: string): string|null {\n    return formatNumber(PercentPipe, this._locale, value, NumberFormatStyle.Percent, digits);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Pipe, args: [{name: 'percent'}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: undefined, decorators: [{ type: Inject, args: [LOCALE_ID, ] }, ]},\n];\n}\n\nfunction PercentPipe_tsickle_Closure_declarations() {\n/** @type {?} */\nPercentPipe.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nPercentPipe.ctorParameters;\n/** @type {?} */\nPercentPipe.prototype._locale;\n}\n\n/**\n * \\@ngModule CommonModule\n * \\@whatItDoes Formats a number as currency using locale rules.\n * \\@howToUse `number_expression | currency[:currencyCode[:symbolDisplay[:digitInfo]]]`\n * \\@description \n * \n * Use `currency` to format a number as currency.\n * \n * - `currencyCode` is the [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) currency code, such\n *    as `USD` for the US dollar and `EUR` for the euro.\n * - `symbolDisplay` is a boolean indicating whether to use the currency symbol or code.\n *   - `true`: use symbol (e.g. `$`).\n *   - `false`(default): use code (e.g. `USD`).\n * - `digitInfo` See {\\@link DecimalPipe} for detailed description.\n * \n * WARNING: this pipe uses the Internationalization API which is not yet available in all browsers\n * and may require a polyfill. See [Browser Support](guide/browser-support) for details.\n * \n * ### Example\n * \n * {\\@example common/pipes/ts/number_pipe.ts region='CurrencyPipe'}\n * \n * \\@stable\n */\nexport class CurrencyPipe implements PipeTransform {\n/**\n * @param {?} _locale\n */\nconstructor(\nprivate _locale: string) {}\n/**\n * @param {?} value\n * @param {?=} currencyCode\n * @param {?=} symbolDisplay\n * @param {?=} digits\n * @return {?}\n */\ntransform(\n      value: any, currencyCode: string = 'USD', symbolDisplay: boolean = false,\n      digits?: string): string|null {\n    return formatNumber(\n        CurrencyPipe, this._locale, value, NumberFormatStyle.Currency, digits, currencyCode,\n        symbolDisplay);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Pipe, args: [{name: 'currency'}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: undefined, decorators: [{ type: Inject, args: [LOCALE_ID, ] }, ]},\n];\n}\n\nfunction CurrencyPipe_tsickle_Closure_declarations() {\n/** @type {?} */\nCurrencyPipe.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nCurrencyPipe.ctorParameters;\n/** @type {?} */\nCurrencyPipe.prototype._locale;\n}\n\n/**\n * @param {?} text\n * @return {?}\n */\nfunction parseIntAutoRadix(text: string): number {\n  const /** @type {?} */ result: number = parseInt(text);\n  if (isNaN(result)) {\n    throw new Error('Invalid integer literal when parsing ' + text);\n  }\n  return result;\n}\n/**\n * @param {?} value\n * @return {?}\n */\nexport function isNumeric(value: any): boolean {\n  return !isNaN(value - parseFloat(value));\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Inject, LOCALE_ID, Pipe, PipeTransform} from '@angular/core';\nimport {DateFormatter} from './intl';\nimport {invalidPipeArgumentError} from './invalid_pipe_argument_error';\nimport {isNumeric} from './number_pipe';\n\nconst /** @type {?} */ ISO8601_DATE_REGEX =\n    /^(\\d{4})-?(\\d\\d)-?(\\d\\d)(?:T(\\d\\d)(?::?(\\d\\d)(?::?(\\d\\d)(?:\\.(\\d+))?)?)?(Z|([+-])(\\d\\d):?(\\d\\d))?)?$/;\n/**\n * \\@ngModule CommonModule\n * \\@whatItDoes Formats a date according to locale rules.\n * \\@howToUse `date_expression | date[:format]`\n * \\@description \n * \n * Where:\n * - `expression` is a date object or a number (milliseconds since UTC epoch) or an ISO string\n * (https://www.w3.org/TR/NOTE-datetime).\n * - `format` indicates which date/time components to include. The format can be predefined as\n *   shown below or custom as shown in the table.\n *   - `'medium'`: equivalent to `'yMMMdjms'` (e.g. `Sep 3, 2010, 12:05:08 PM` for `en-US`)\n *   - `'short'`: equivalent to `'yMdjm'` (e.g. `9/3/2010, 12:05 PM` for `en-US`)\n *   - `'fullDate'`: equivalent to `'yMMMMEEEEd'` (e.g. `Friday, September 3, 2010` for `en-US`)\n *   - `'longDate'`: equivalent to `'yMMMMd'` (e.g. `September 3, 2010` for `en-US`)\n *   - `'mediumDate'`: equivalent to `'yMMMd'` (e.g. `Sep 3, 2010` for `en-US`)\n *   - `'shortDate'`: equivalent to `'yMd'` (e.g. `9/3/2010` for `en-US`)\n *   - `'mediumTime'`: equivalent to `'jms'` (e.g. `12:05:08 PM` for `en-US`)\n *   - `'shortTime'`: equivalent to `'jm'` (e.g. `12:05 PM` for `en-US`)\n * \n * \n *  | Component | Symbol | Narrow | Short Form   | Long Form         | Numeric   | 2-digit   |\n *  |-----------|:------:|--------|--------------|-------------------|-----------|-----------|\n *  | era       |   G    | G (A)  | GGG (AD)     | GGGG (Anno Domini)| -         | -         |\n *  | year      |   y    | -      | -            | -                 | y (2015)  | yy (15)   |\n *  | month     |   M    | L (S)  | MMM (Sep)    | MMMM (September)  | M (9)     | MM (09)   |\n *  | day       |   d    | -      | -            | -                 | d (3)     | dd (03)   |\n *  | weekday   |   E    | E (S)  | EEE (Sun)    | EEEE (Sunday)     | -         | -         |\n *  | hour      |   j    | -      | -            | -                 | j (1 PM)  | jj (1 PM) |\n *  | hour12    |   h    | -      | -            | -                 | h (1)     | hh (01)   |\n *  | hour24    |   H    | -      | -            | -                 | H (13)    | HH (13)   |\n *  | minute    |   m    | -      | -            | -                 | m (5)     | mm (05)   |\n *  | second    |   s    | -      | -            | -                 | s (9)     | ss (09)   |\n *  | timezone  |   z    | -      | -            | z (Pacific Standard Time)| -  | -         |\n *  | timezone  |   Z    | -      | Z (GMT-8:00) | -                 | -         | -         |\n *  | timezone  |   a    | -      | a (PM)       | -                 | -         | -         |\n * \n * In javascript, only the components specified will be respected (not the ordering,\n * punctuations, ...) and details of the formatting will be dependent on the locale.\n * \n * Timezone of the formatted text will be the local system timezone of the end-user's machine.\n * \n * When the expression is a ISO string without time (e.g. 2016-09-19) the time zone offset is not\n * applied and the formatted text will have the same day, month and year of the expression.\n * \n * WARNINGS:\n * - this pipe is marked as pure hence it will not be re-evaluated when the input is mutated.\n *   Instead users should treat the date as an immutable object and change the reference when the\n *   pipe needs to re-run (this is to avoid reformatting the date on every change detection run\n *   which would be an expensive operation).\n * - this pipe uses the Internationalization API. Therefore it is only reliable in Chrome and Opera\n *   browsers.\n * \n * ### Examples\n * \n * Assuming `dateObj` is (year: 2015, month: 6, day: 15, hour: 21, minute: 43, second: 11)\n * in the _local_ time and locale is 'en-US':\n * \n * ```\n *     {{ dateObj | date }}               // output is 'Jun 15, 2015'\n *     {{ dateObj | date:'medium' }}      // output is 'Jun 15, 2015, 9:43:11 PM'\n *     {{ dateObj | date:'shortTime' }}   // output is '9:43 PM'\n *     {{ dateObj | date:'mmss' }}        // output is '43:11'\n * ```\n * \n * {\\@example common/pipes/ts/date_pipe.ts region='DatePipe'}\n * \n * \\@stable\n */\nexport class DatePipe implements PipeTransform {\n/**\n * \\@internal\n */\nstatic _ALIASES: {[key: string]: string} = {\n    'medium': 'yMMMdjms',\n    'short': 'yMdjm',\n    'fullDate': 'yMMMMEEEEd',\n    'longDate': 'yMMMMd',\n    'mediumDate': 'yMMMd',\n    'shortDate': 'yMd',\n    'mediumTime': 'jms',\n    'shortTime': 'jm'\n  };\n/**\n * @param {?} _locale\n */\nconstructor(\nprivate _locale: string) {}\n/**\n * @param {?} value\n * @param {?=} pattern\n * @return {?}\n */\ntransform(value: any, pattern: string = 'mediumDate'): string|null {\n    let /** @type {?} */ date: Date;\n\n    if (isBlank(value) || value !== value) return null;\n\n    if (typeof value === 'string') {\n      value = value.trim();\n    }\n\n    if (isDate(value)) {\n      date = value;\n    } else if (isNumeric(value)) {\n      date = new Date(parseFloat(value));\n    } else if (typeof value === 'string' && /^(\\d{4}-\\d{1,2}-\\d{1,2})$/.test(value)) {\n/**\n * For ISO Strings without time the day, month and year must be extracted from the ISO String\n * before Date creation to avoid time offset and errors in the new Date.\n * If we only replace '-' with ',' in the ISO String (\"2015,01,01\"), and try to create a new\n * date, some browsers (e.g. IE 9) will throw an invalid Date error\n * If we leave the '-' (\"2015-01-01\") and try to create a new Date(\"2015-01-01\") the timeoffset\n * is applied\n * Note: ISO months are 0 for January, 1 for February, ...\n */\nconst [y, m, d] = value.split('-').map((val: string) => parseInt(val, 10));\n      date = new Date(y, m - 1, d);\n    } else {\n      date = new Date(value);\n    }\n\n    if (!isDate(date)) {\n      let /** @type {?} */ match: RegExpMatchArray|null;\n      if ((typeof value === 'string') && (match = value.match(ISO8601_DATE_REGEX))) {\n        date = isoStringToDate(match);\n      } else {\n        throw invalidPipeArgumentError(DatePipe, value);\n      }\n    }\n\n    return DateFormatter.format(date, this._locale, DatePipe._ALIASES[pattern] || pattern);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Pipe, args: [{name: 'date', pure: true}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: undefined, decorators: [{ type: Inject, args: [LOCALE_ID, ] }, ]},\n];\n}\n\nfunction DatePipe_tsickle_Closure_declarations() {\n/**\n * \\@internal\n * @type {?}\n */\nDatePipe._ALIASES;\n/** @type {?} */\nDatePipe.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nDatePipe.ctorParameters;\n/** @type {?} */\nDatePipe.prototype._locale;\n}\n\n/**\n * @param {?} obj\n * @return {?}\n */\nfunction isBlank(obj: any): boolean {\n  return obj == null || obj === '';\n}\n/**\n * @param {?} obj\n * @return {?}\n */\nfunction isDate(obj: any): obj is Date {\n  return obj instanceof Date && !isNaN(obj.valueOf());\n}\n/**\n * @param {?} match\n * @return {?}\n */\nfunction isoStringToDate(match: RegExpMatchArray): Date {\n  const /** @type {?} */ date = new Date(0);\n  let /** @type {?} */ tzHour = 0;\n  let /** @type {?} */ tzMin = 0;\n  const /** @type {?} */ dateSetter = match[8] ? date.setUTCFullYear : date.setFullYear;\n  const /** @type {?} */ timeSetter = match[8] ? date.setUTCHours : date.setHours;\n\n  if (match[9]) {\n    tzHour = toInt(match[9] + match[10]);\n    tzMin = toInt(match[9] + match[11]);\n  }\n  dateSetter.call(date, toInt(match[1]), toInt(match[2]) - 1, toInt(match[3]));\n  const /** @type {?} */ h = toInt(match[4] || '0') - tzHour;\n  const /** @type {?} */ m = toInt(match[5] || '0') - tzMin;\n  const /** @type {?} */ s = toInt(match[6] || '0');\n  const /** @type {?} */ ms = Math.round(parseFloat('0.' + (match[7] || 0)) * 1000);\n  timeSetter.call(date, h, m, s, ms);\n  return date;\n}\n/**\n * @param {?} str\n * @return {?}\n */\nfunction toInt(str: string): number {\n  return parseInt(str, 10);\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Pipe, PipeTransform} from '@angular/core';\nimport {NgLocalization, getPluralCategory} from '../localization';\nimport {invalidPipeArgumentError} from './invalid_pipe_argument_error';\n\nconst /** @type {?} */ _INTERPOLATION_REGEXP: RegExp = /#/g;\n/**\n * \\@ngModule CommonModule\n * \\@whatItDoes Maps a value to a string that pluralizes the value according to locale rules.\n * \\@howToUse `expression | i18nPlural:mapping`\n * \\@description \n * \n *  Where:\n *  - `expression` is a number.\n *  - `mapping` is an object that mimics the ICU format, see\n *    http://userguide.icu-project.org/formatparse/messages\n * \n *  ## Example\n * \n * {\\@example common/pipes/ts/i18n_pipe.ts region='I18nPluralPipeComponent'}\n * \n * \\@experimental\n */\nexport class I18nPluralPipe implements PipeTransform {\n/**\n * @param {?} _localization\n */\nconstructor(private _localization: NgLocalization) {}\n/**\n * @param {?} value\n * @param {?} pluralMap\n * @return {?}\n */\ntransform(value: number, pluralMap: {[count: string]: string}): string {\n    if (value == null) return '';\n\n    if (typeof pluralMap !== 'object' || pluralMap === null) {\n      throw invalidPipeArgumentError(I18nPluralPipe, pluralMap);\n    }\n\n    const /** @type {?} */ key = getPluralCategory(value, Object.keys(pluralMap), this._localization);\n\n    return pluralMap[key].replace(_INTERPOLATION_REGEXP, value.toString());\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Pipe, args: [{name: 'i18nPlural', pure: true}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: NgLocalization, },\n];\n}\n\nfunction I18nPluralPipe_tsickle_Closure_declarations() {\n/** @type {?} */\nI18nPluralPipe.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nI18nPluralPipe.ctorParameters;\n/** @type {?} */\nI18nPluralPipe.prototype._localization;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Pipe, PipeTransform} from '@angular/core';\nimport {invalidPipeArgumentError} from './invalid_pipe_argument_error';\n/**\n * \\@ngModule CommonModule\n * \\@whatItDoes Generic selector that displays the string that matches the current value.\n * \\@howToUse `expression | i18nSelect:mapping`\n * \\@description \n * \n *  Where `mapping` is an object that indicates the text that should be displayed\n *  for different values of the provided `expression`.\n *  If none of the keys of the mapping match the value of the `expression`, then the content\n *  of the `other` key is returned when present, otherwise an empty string is returned.\n * \n *  ## Example\n * \n * {\\@example common/pipes/ts/i18n_pipe.ts region='I18nSelectPipeComponent'}\n * \n *  \\@experimental\n */\nexport class I18nSelectPipe implements PipeTransform {\n/**\n * @param {?} value\n * @param {?} mapping\n * @return {?}\n */\ntransform(value: string|null|undefined, mapping: {[key: string]: string}): string {\n    if (value == null) return '';\n\n    if (typeof mapping !== 'object' || typeof value !== 'string') {\n      throw invalidPipeArgumentError(I18nSelectPipe, mapping);\n    }\n\n    if (mapping.hasOwnProperty(value)) {\n      return mapping[value];\n    }\n\n    if (mapping.hasOwnProperty('other')) {\n      return mapping['other'];\n    }\n\n    return '';\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Pipe, args: [{name: 'i18nSelect', pure: true}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction I18nSelectPipe_tsickle_Closure_declarations() {\n/** @type {?} */\nI18nSelectPipe.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nI18nSelectPipe.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Pipe, PipeTransform} from '@angular/core';\n/**\n * \\@ngModule CommonModule\n * \\@whatItDoes Converts value into JSON string.\n * \\@howToUse `expression | json`\n * \\@description \n * \n * Converts value into string using `JSON.stringify`. Useful for debugging.\n * \n * ### Example\n * {\\@example common/pipes/ts/json_pipe.ts region='JsonPipe'}\n * \n * \\@stable\n */\nexport class JsonPipe implements PipeTransform {\n/**\n * @param {?} value\n * @return {?}\n */\ntransform(value: any): string { return JSON.stringify(value, null, 2); }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Pipe, args: [{name: 'json', pure: false}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction JsonPipe_tsickle_Closure_declarations() {\n/** @type {?} */\nJsonPipe.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nJsonPipe.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Pipe, PipeTransform} from '@angular/core';\nimport {invalidPipeArgumentError} from './invalid_pipe_argument_error';\n/**\n * \\@ngModule CommonModule\n * \\@whatItDoes Creates a new List or String containing a subset (slice) of the elements.\n * \\@howToUse `array_or_string_expression | slice:start[:end]`\n * \\@description \n * \n * Where the input expression is a `List` or `String`, and:\n * - `start`: The starting index of the subset to return.\n *   - **a positive integer**: return the item at `start` index and all items after\n *     in the list or string expression.\n *   - **a negative integer**: return the item at `start` index from the end and all items after\n *     in the list or string expression.\n *   - **if positive and greater than the size of the expression**: return an empty list or string.\n *   - **if negative and greater than the size of the expression**: return entire list or string.\n * - `end`: The ending index of the subset to return.\n *   - **omitted**: return all items until the end.\n *   - **if positive**: return all items before `end` index of the list or string.\n *   - **if negative**: return all items before `end` index from the end of the list or string.\n * \n * All behavior is based on the expected behavior of the JavaScript API `Array.prototype.slice()`\n * and `String.prototype.slice()`.\n * \n * When operating on a [List], the returned list is always a copy even when all\n * the elements are being returned.\n * \n * When operating on a blank value, the pipe returns the blank value.\n * \n * ## List Example\n * \n * This `ngFor` example:\n * \n * {\\@example common/pipes/ts/slice_pipe.ts region='SlicePipe_list'}\n * \n * produces the following:\n * \n *     <li>b</li>\n *     <li>c</li>\n * \n * ## String Examples\n * \n * {\\@example common/pipes/ts/slice_pipe.ts region='SlicePipe_string'}\n * \n * \\@stable\n */\nexport class SlicePipe implements PipeTransform {\n/**\n * @param {?} value\n * @param {?} start\n * @param {?=} end\n * @return {?}\n */\ntransform(value: any, start: number, end?: number): any {\n    if (value == null) return value;\n\n    if (!this.supports(value)) {\n      throw invalidPipeArgumentError(SlicePipe, value);\n    }\n\n    return value.slice(start, end);\n  }\n/**\n * @param {?} obj\n * @return {?}\n */\nprivate supports(obj: any): boolean { return typeof obj === 'string' || Array.isArray(obj); }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Pipe, args: [{name: 'slice', pure: false}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction SlicePipe_tsickle_Closure_declarations() {\n/** @type {?} */\nSlicePipe.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nSlicePipe.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @module\n * @description\n * This module provides a set of common Pipes.\n */\n\nimport {AsyncPipe} from './async_pipe';\nimport {LowerCasePipe, TitleCasePipe, UpperCasePipe} from './case_conversion_pipes';\nimport {DatePipe} from './date_pipe';\nimport {I18nPluralPipe} from './i18n_plural_pipe';\nimport {I18nSelectPipe} from './i18n_select_pipe';\nimport {JsonPipe} from './json_pipe';\nimport {CurrencyPipe, DecimalPipe, PercentPipe} from './number_pipe';\nimport {SlicePipe} from './slice_pipe';\n\nexport {\n  AsyncPipe,\n  CurrencyPipe,\n  DatePipe,\n  DecimalPipe,\n  I18nPluralPipe,\n  I18nSelectPipe,\n  JsonPipe,\n  LowerCasePipe,\n  PercentPipe,\n  SlicePipe,\n  TitleCasePipe,\n  UpperCasePipe\n};\n/**\n * A collection of Angular pipes that are likely to be used in each and every application.\n */\nexport const COMMON_PIPES = [\n  AsyncPipe,\n  UpperCasePipe,\n  LowerCasePipe,\n  JsonPipe,\n  SlicePipe,\n  DecimalPipe,\n  PercentPipe,\n  TitleCasePipe,\n  CurrencyPipe,\n  DatePipe,\n  I18nPluralPipe,\n  I18nSelectPipe,\n];\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {NgModule} from '@angular/core';\n\nimport {COMMON_DEPRECATED_DIRECTIVES, COMMON_DIRECTIVES} from './directives/index';\nimport {NgLocaleLocalization, NgLocalization} from './localization';\nimport {COMMON_PIPES} from './pipes/index';\n/**\n * The module that includes all the basic Angular directives like {\\@link NgIf}, {\\@link NgForOf}, ...\n * \n * \\@stable\n */\nexport class CommonModule {\nstatic decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  declarations: [COMMON_DIRECTIVES, COMMON_PIPES],\n  exports: [COMMON_DIRECTIVES, COMMON_PIPES],\n  providers: [\n    {provide: NgLocalization, useClass: NgLocaleLocalization},\n  ],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction CommonModule_tsickle_Closure_declarations() {\n/** @type {?} */\nCommonModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nCommonModule.ctorParameters;\n}\n\n/**\n * I18N pipes are being changed to move away from using the JS Intl API.\n * \n * The former pipes relying on the Intl API will be moved to this module while the `CommonModule`\n * will contain the new pipes that do not rely on Intl.\n * \n * As a first step this module is created empty to ease the migration.\n * \n * see https://github.com/angular/angular/pull/18284\n * \n * @deprecated from v5\n */\nexport class DeprecatedI18NPipesModule {\nstatic decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{declarations: [], exports: []}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction DeprecatedI18NPipesModule_tsickle_Closure_declarations() {\n/** @type {?} */\nDeprecatedI18NPipesModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nDeprecatedI18NPipesModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Type} from '@angular/core';\n\nlet /** @type {?} */ _DOM: DomAdapter = /** @type {?} */(( null));\n/**\n * @return {?}\n */\nexport function getDOM() {\n  return _DOM;\n}\n/**\n * @param {?} adapter\n * @return {?}\n */\nexport function setDOM(adapter: DomAdapter) {\n  _DOM = adapter;\n}\n/**\n * @param {?} adapter\n * @return {?}\n */\nexport function setRootDomAdapter(adapter: DomAdapter) {\n  if (!_DOM) {\n    _DOM = adapter;\n  }\n}\n/**\n * Provides DOM operations in an environment-agnostic way.\n * \n * \\@security Tread carefully! Interacting with the DOM directly is dangerous and\n * can introduce XSS risks.\n * @abstract\n */\nexport abstract class DomAdapter {\npublic resourceLoaderType: Type<any> = /** @type {?} */(( null));\n/**\n * @abstract\n * @param {?} element\n * @param {?} name\n * @return {?}\n */\nhasProperty(element: any, name: string) {}\n/**\n * @abstract\n * @param {?} el\n * @param {?} name\n * @param {?} value\n * @return {?}\n */\nsetProperty(el: Element, name: string, value: any) {}\n/**\n * @abstract\n * @param {?} el\n * @param {?} name\n * @return {?}\n */\ngetProperty(el: Element, name: string) {}\n/**\n * @abstract\n * @param {?} el\n * @param {?} methodName\n * @param {?} args\n * @return {?}\n */\ninvoke(el: Element, methodName: string, args: any[]) {}\n/**\n * @abstract\n * @param {?} error\n * @return {?}\n */\nlogError(error: any) {}\n/**\n * @abstract\n * @param {?} error\n * @return {?}\n */\nlog(error: any) {}\n/**\n * @abstract\n * @param {?} error\n * @return {?}\n */\nlogGroup(error: any) {}\n/**\n * @abstract\n * @return {?}\n */\nlogGroupEnd() {}\n/**\n * Maps attribute names to their corresponding property names for cases\n * where attribute name doesn't match property name.\n * @return {?}\n */\nget attrToPropMap(): {[key: string]: string} { return this._attrToPropMap; }\n/**\n * @param {?} value\n * @return {?}\n */\nset attrToPropMap(value: {[key: string]: string}) { this._attrToPropMap = value; }\n/**\n * \\@internal\n */\n_attrToPropMap: {[key: string]: string};\n/**\n * @abstract\n * @param {?} nodeA\n * @param {?} nodeB\n * @return {?}\n */\ncontains(nodeA: any, nodeB: any) {}\n/**\n * @abstract\n * @param {?} templateHtml\n * @return {?}\n */\nparse(templateHtml: string) {}\n/**\n * @abstract\n * @param {?} el\n * @param {?} selector\n * @return {?}\n */\nquerySelector(el: any, selector: string) {}\n/**\n * @abstract\n * @param {?} el\n * @param {?} selector\n * @return {?}\n */\nquerySelectorAll(el: any, selector: string) {}\n/**\n * @abstract\n * @param {?} el\n * @param {?} evt\n * @param {?} listener\n * @return {?}\n */\non(el: any, evt: any, listener: any) {}\n/**\n * @abstract\n * @param {?} el\n * @param {?} evt\n * @param {?} listener\n * @return {?}\n */\nonAndCancel(el: any, evt: any, listener: any) {}\n/**\n * @abstract\n * @param {?} el\n * @param {?} evt\n * @return {?}\n */\ndispatchEvent(el: any, evt: any) {}\n/**\n * @abstract\n * @param {?} eventType\n * @return {?}\n */\ncreateMouseEvent(eventType: any) {}\n/**\n * @abstract\n * @param {?} eventType\n * @return {?}\n */\ncreateEvent(eventType: string) {}\n/**\n * @abstract\n * @param {?} evt\n * @return {?}\n */\npreventDefault(evt: any) {}\n/**\n * @abstract\n * @param {?} evt\n * @return {?}\n */\nisPrevented(evt: any) {}\n/**\n * @abstract\n * @param {?} el\n * @return {?}\n */\ngetInnerHTML(el: any) {}\n/**\n * Returns content if el is a <template> element, null otherwise.\n * @abstract\n * @param {?} el\n * @return {?}\n */\ngetTemplateContent(el: any) {}\n/**\n * @abstract\n * @param {?} el\n * @return {?}\n */\ngetOuterHTML(el: any) {}\n/**\n * @abstract\n * @param {?} node\n * @return {?}\n */\nnodeName(node: any) {}\n/**\n * @abstract\n * @param {?} node\n * @return {?}\n */\nnodeValue(node: any) {}\n/**\n * @abstract\n * @param {?} node\n * @return {?}\n */\ntype(node: any) {}\n/**\n * @abstract\n * @param {?} node\n * @return {?}\n */\ncontent(node: any) {}\n/**\n * @abstract\n * @param {?} el\n * @return {?}\n */\nfirstChild(el: any) {}\n/**\n * @abstract\n * @param {?} el\n * @return {?}\n */\nnextSibling(el: any) {}\n/**\n * @abstract\n * @param {?} el\n * @return {?}\n */\nparentElement(el: any) {}\n/**\n * @abstract\n * @param {?} el\n * @return {?}\n */\nchildNodes(el: any) {}\n/**\n * @abstract\n * @param {?} el\n * @return {?}\n */\nchildNodesAsList(el: any) {}\n/**\n * @abstract\n * @param {?} el\n * @return {?}\n */\nclearNodes(el: any) {}\n/**\n * @abstract\n * @param {?} el\n * @param {?} node\n * @return {?}\n */\nappendChild(el: any, node: any) {}\n/**\n * @abstract\n * @param {?} el\n * @param {?} node\n * @return {?}\n */\nremoveChild(el: any, node: any) {}\n/**\n * @abstract\n * @param {?} el\n * @param {?} newNode\n * @param {?} oldNode\n * @return {?}\n */\nreplaceChild(el: any, newNode: any, oldNode: any) {}\n/**\n * @abstract\n * @param {?} el\n * @return {?}\n */\nremove(el: any) {}\n/**\n * @abstract\n * @param {?} parent\n * @param {?} ref\n * @param {?} node\n * @return {?}\n */\ninsertBefore(parent: any, ref: any, node: any) {}\n/**\n * @abstract\n * @param {?} parent\n * @param {?} ref\n * @param {?} nodes\n * @return {?}\n */\ninsertAllBefore(parent: any, ref: any, nodes: any) {}\n/**\n * @abstract\n * @param {?} parent\n * @param {?} el\n * @param {?} node\n * @return {?}\n */\ninsertAfter(parent: any, el: any, node: any) {}\n/**\n * @abstract\n * @param {?} el\n * @param {?} value\n * @return {?}\n */\nsetInnerHTML(el: any, value: any) {}\n/**\n * @abstract\n * @param {?} el\n * @return {?}\n */\ngetText(el: any) {}\n/**\n * @abstract\n * @param {?} el\n * @param {?} value\n * @return {?}\n */\nsetText(el: any, value: string) {}\n/**\n * @abstract\n * @param {?} el\n * @return {?}\n */\ngetValue(el: any) {}\n/**\n * @abstract\n * @param {?} el\n * @param {?} value\n * @return {?}\n */\nsetValue(el: any, value: string) {}\n/**\n * @abstract\n * @param {?} el\n * @return {?}\n */\ngetChecked(el: any) {}\n/**\n * @abstract\n * @param {?} el\n * @param {?} value\n * @return {?}\n */\nsetChecked(el: any, value: boolean) {}\n/**\n * @abstract\n * @param {?} text\n * @return {?}\n */\ncreateComment(text: string) {}\n/**\n * @abstract\n * @param {?} html\n * @return {?}\n */\ncreateTemplate(html: any) {}\n/**\n * @abstract\n * @param {?} tagName\n * @param {?=} doc\n * @return {?}\n */\ncreateElement(tagName: any, doc?: any) {}\n/**\n * @abstract\n * @param {?} ns\n * @param {?} tagName\n * @param {?=} doc\n * @return {?}\n */\ncreateElementNS(ns: string, tagName: string, doc?: any) {}\n/**\n * @abstract\n * @param {?} text\n * @param {?=} doc\n * @return {?}\n */\ncreateTextNode(text: string, doc?: any) {}\n/**\n * @abstract\n * @param {?} attrName\n * @param {?} attrValue\n * @param {?=} doc\n * @return {?}\n */\ncreateScriptTag(attrName: string, attrValue: string, doc?: any) {}\n/**\n * @abstract\n * @param {?} css\n * @param {?=} doc\n * @return {?}\n */\ncreateStyleElement(css: string, doc?: any) {}\n/**\n * @abstract\n * @param {?} el\n * @return {?}\n */\ncreateShadowRoot(el: any) {}\n/**\n * @abstract\n * @param {?} el\n * @return {?}\n */\ngetShadowRoot(el: any) {}\n/**\n * @abstract\n * @param {?} el\n * @return {?}\n */\ngetHost(el: any) {}\n/**\n * @abstract\n * @param {?} el\n * @return {?}\n */\ngetDistributedNodes(el: any) {}\n/**\n * @abstract\n * @param {?} node\n * @return {?}\n */\nclone /*<T extends Node>*/ (node: Node) {}\n/**\n * @abstract\n * @param {?} element\n * @param {?} name\n * @return {?}\n */\ngetElementsByClassName(element: any, name: string) {}\n/**\n * @abstract\n * @param {?} element\n * @param {?} name\n * @return {?}\n */\ngetElementsByTagName(element: any, name: string) {}\n/**\n * @abstract\n * @param {?} element\n * @return {?}\n */\nclassList(element: any) {}\n/**\n * @abstract\n * @param {?} element\n * @param {?} className\n * @return {?}\n */\naddClass(element: any, className: string) {}\n/**\n * @abstract\n * @param {?} element\n * @param {?} className\n * @return {?}\n */\nremoveClass(element: any, className: string) {}\n/**\n * @abstract\n * @param {?} element\n * @param {?} className\n * @return {?}\n */\nhasClass(element: any, className: string) {}\n/**\n * @abstract\n * @param {?} element\n * @param {?} styleName\n * @param {?} styleValue\n * @return {?}\n */\nsetStyle(element: any, styleName: string, styleValue: string) {}\n/**\n * @abstract\n * @param {?} element\n * @param {?} styleName\n * @return {?}\n */\nremoveStyle(element: any, styleName: string) {}\n/**\n * @abstract\n * @param {?} element\n * @param {?} styleName\n * @return {?}\n */\ngetStyle(element: any, styleName: string) {}\n/**\n * @abstract\n * @param {?} element\n * @param {?} styleName\n * @param {?=} styleValue\n * @return {?}\n */\nhasStyle(element: any, styleName: string, styleValue?: string) {}\n/**\n * @abstract\n * @param {?} element\n * @return {?}\n */\ntagName(element: any) {}\n/**\n * @abstract\n * @param {?} element\n * @return {?}\n */\nattributeMap(element: any) {}\n/**\n * @abstract\n * @param {?} element\n * @param {?} attribute\n * @return {?}\n */\nhasAttribute(element: any, attribute: string) {}\n/**\n * @abstract\n * @param {?} element\n * @param {?} ns\n * @param {?} attribute\n * @return {?}\n */\nhasAttributeNS(element: any, ns: string, attribute: string) {}\n/**\n * @abstract\n * @param {?} element\n * @param {?} attribute\n * @return {?}\n */\ngetAttribute(element: any, attribute: string) {}\n/**\n * @abstract\n * @param {?} element\n * @param {?} ns\n * @param {?} attribute\n * @return {?}\n */\ngetAttributeNS(element: any, ns: string, attribute: string) {}\n/**\n * @abstract\n * @param {?} element\n * @param {?} name\n * @param {?} value\n * @return {?}\n */\nsetAttribute(element: any, name: string, value: string) {}\n/**\n * @abstract\n * @param {?} element\n * @param {?} ns\n * @param {?} name\n * @param {?} value\n * @return {?}\n */\nsetAttributeNS(element: any, ns: string, name: string, value: string) {}\n/**\n * @abstract\n * @param {?} element\n * @param {?} attribute\n * @return {?}\n */\nremoveAttribute(element: any, attribute: string) {}\n/**\n * @abstract\n * @param {?} element\n * @param {?} ns\n * @param {?} attribute\n * @return {?}\n */\nremoveAttributeNS(element: any, ns: string, attribute: string) {}\n/**\n * @abstract\n * @param {?} el\n * @return {?}\n */\ntemplateAwareRoot(el: any) {}\n/**\n * @abstract\n * @return {?}\n */\ncreateHtmlDocument() {}\n/**\n * @abstract\n * @param {?} el\n * @return {?}\n */\ngetBoundingClientRect(el: any) {}\n/**\n * @abstract\n * @param {?} doc\n * @return {?}\n */\ngetTitle(doc: Document) {}\n/**\n * @abstract\n * @param {?} doc\n * @param {?} newTitle\n * @return {?}\n */\nsetTitle(doc: Document, newTitle: string) {}\n/**\n * @abstract\n * @param {?} n\n * @param {?} selector\n * @return {?}\n */\nelementMatches(n: any, selector: string) {}\n/**\n * @abstract\n * @param {?} el\n * @return {?}\n */\nisTemplateElement(el: any) {}\n/**\n * @abstract\n * @param {?} node\n * @return {?}\n */\nisTextNode(node: any) {}\n/**\n * @abstract\n * @param {?} node\n * @return {?}\n */\nisCommentNode(node: any) {}\n/**\n * @abstract\n * @param {?} node\n * @return {?}\n */\nisElementNode(node: any) {}\n/**\n * @abstract\n * @param {?} node\n * @return {?}\n */\nhasShadowRoot(node: any) {}\n/**\n * @abstract\n * @param {?} node\n * @return {?}\n */\nisShadowRoot(node: any) {}\n/**\n * @abstract\n * @param {?} node\n * @return {?}\n */\nimportIntoDoc /*<T extends Node>*/ (node: Node) {}\n/**\n * @abstract\n * @param {?} node\n * @return {?}\n */\nadoptNode /*<T extends Node>*/ (node: Node) {}\n/**\n * @abstract\n * @param {?} element\n * @return {?}\n */\ngetHref(element: any) {}\n/**\n * @abstract\n * @param {?} event\n * @return {?}\n */\ngetEventKey(event: any) {}\n/**\n * @abstract\n * @param {?} element\n * @param {?} baseUrl\n * @param {?} href\n * @return {?}\n */\nresolveAndSetHref(element: any, baseUrl: string, href: string) {}\n/**\n * @abstract\n * @return {?}\n */\nsupportsDOMEvents() {}\n/**\n * @abstract\n * @return {?}\n */\nsupportsNativeShadowDOM() {}\n/**\n * @abstract\n * @param {?} doc\n * @param {?} target\n * @return {?}\n */\ngetGlobalEventTarget(doc: Document, target: string) {}\n/**\n * @abstract\n * @return {?}\n */\ngetHistory() {}\n/**\n * @abstract\n * @return {?}\n */\ngetLocation() {}\n/**\n * @abstract\n * @param {?} doc\n * @return {?}\n */\ngetBaseHref(doc: Document) {}\n/**\n * @abstract\n * @return {?}\n */\nresetBaseElement() {}\n/**\n * @abstract\n * @return {?}\n */\ngetUserAgent() {}\n/**\n * @abstract\n * @param {?} element\n * @param {?} name\n * @param {?} value\n * @return {?}\n */\nsetData(element: any, name: string, value: string) {}\n/**\n * @abstract\n * @param {?} element\n * @return {?}\n */\ngetComputedStyle(element: any) {}\n/**\n * @abstract\n * @param {?} element\n * @param {?} name\n * @return {?}\n */\ngetData(element: any, name: string) {}\n/**\n * @abstract\n * @return {?}\n */\nsupportsWebAnimation() {}\n/**\n * @abstract\n * @return {?}\n */\nperformanceNow() {}\n/**\n * @abstract\n * @return {?}\n */\ngetAnimationPrefix() {}\n/**\n * @abstract\n * @return {?}\n */\ngetTransitionEnd() {}\n/**\n * @abstract\n * @return {?}\n */\nsupportsAnimation() {}\n/**\n * @abstract\n * @return {?}\n */\nsupportsCookies() {}\n/**\n * @abstract\n * @param {?} name\n * @return {?}\n */\ngetCookie(name: string) {}\n/**\n * @abstract\n * @param {?} name\n * @param {?} value\n * @return {?}\n */\nsetCookie(name: string, value: string) {}\n}\n\nfunction DomAdapter_tsickle_Closure_declarations() {\n/** @type {?} */\nDomAdapter.prototype.resourceLoaderType;\n/**\n * \\@internal\n * @type {?}\n */\nDomAdapter.prototype._attrToPropMap;\n}\n\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {DomAdapter} from '../dom/dom_adapter';\n/**\n * Provides DOM operations in any browser environment.\n * \n * \\@security Tread carefully! Interacting with the DOM directly is dangerous and\n * can introduce XSS risks.\n * @abstract\n */\nexport abstract class GenericBrowserDomAdapter extends DomAdapter {\nprivate _animationPrefix: string|null = null;\nprivate _transitionEnd: string|null = null;\nconstructor() {\n    super();\n    try {\n      const element = this.createElement('div', document);\n      if (this.getStyle(element, 'animationName') != null) {\n        this._animationPrefix = '';\n      } else {\n        const domPrefixes = ['Webkit', 'Moz', 'O', 'ms'];\n\n        for (let i = 0; i < domPrefixes.length; i++) {\n          if (this.getStyle(element, domPrefixes[i] + 'AnimationName') != null) {\n            this._animationPrefix = '-' + domPrefixes[i].toLowerCase() + '-';\n            break;\n          }\n        }\n      }\n\n      const transEndEventNames: {[key: string]: string} = {\n        WebkitTransition: 'webkitTransitionEnd',\n        MozTransition: 'transitionend',\n        OTransition: 'oTransitionEnd otransitionend',\n        transition: 'transitionend'\n      };\n\n      Object.keys(transEndEventNames).forEach((key: string) => {\n        if (this.getStyle(element, key) != null) {\n          this._transitionEnd = transEndEventNames[key];\n        }\n      });\n    } catch (e) {\n      this._animationPrefix = null;\n      this._transitionEnd = null;\n    }\n  }\n/**\n * @param {?} el\n * @return {?}\n */\ngetDistributedNodes(el: HTMLElement): Node[] { return ( /** @type {?} */((<any>el))).getDistributedNodes(); }\n/**\n * @param {?} el\n * @param {?} baseUrl\n * @param {?} href\n * @return {?}\n */\nresolveAndSetHref(el: HTMLAnchorElement, baseUrl: string, href: string) {\n    el.href = href == null ? baseUrl : baseUrl + '/../' + href;\n  }\n/**\n * @return {?}\n */\nsupportsDOMEvents(): boolean { return true; }\n/**\n * @return {?}\n */\nsupportsNativeShadowDOM(): boolean {\n    return typeof( /** @type {?} */((<any>document.body))).createShadowRoot === 'function';\n  }\n/**\n * @return {?}\n */\ngetAnimationPrefix(): string { return this._animationPrefix ? this._animationPrefix : ''; }\n/**\n * @return {?}\n */\ngetTransitionEnd(): string { return this._transitionEnd ? this._transitionEnd : ''; }\n/**\n * @return {?}\n */\nsupportsAnimation(): boolean {\n    return this._animationPrefix != null && this._transitionEnd != null;\n  }\n}\n\nfunction GenericBrowserDomAdapter_tsickle_Closure_declarations() {\n/** @type {?} */\nGenericBrowserDomAdapter.prototype._animationPrefix;\n/** @type {?} */\nGenericBrowserDomAdapter.prototype._transitionEnd;\n}\n\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {looseIdentical, stringify} from '../../util';\nimport {isListLikeIterable, iterateListLike} from '../change_detection_util';\nimport {ChangeDetectorRef} from '../change_detector_ref';\n\nimport {IterableChangeRecord, IterableChanges, IterableDiffer, IterableDifferFactory, NgIterable, TrackByFunction} from './iterable_differs';\nexport class DefaultIterableDifferFactory implements IterableDifferFactory {\nconstructor() {}\n/**\n * @param {?} obj\n * @return {?}\n */\nsupports(obj: Object|null|undefined): boolean { return isListLikeIterable(obj); }\n\n  create<V>(trackByFn?: TrackByFunction<V>): DefaultIterableDiffer<V>;\n/**\n * @deprecated v4.0.0 - ChangeDetectorRef is not used and is no longer a parameter\n * @template V\n * @param {?=} cdRefOrTrackBy\n * @param {?=} trackByFn\n * @return {?}\n */\ncreate<V>(cdRefOrTrackBy?: ChangeDetectorRef|TrackByFunction<V>, trackByFn?: TrackByFunction<V>):\n      DefaultIterableDiffer<V> {\n    return new DefaultIterableDiffer<V>(trackByFn || /** @type {?} */(( <TrackByFunction<any>>cdRefOrTrackBy)));\n  }\n}\n\nconst /** @type {?} */ trackByIdentity = (index: number, item: any) => item;\n/**\n * @deprecated v4.0.0 - Should not be part of public API.\n */\nexport class DefaultIterableDiffer<V> implements IterableDiffer<V>, IterableChanges<V> {\nprivate _length: number = 0;\nprivate _collection: NgIterable<V>|null = null;\nprivate _linkedRecords: _DuplicateMap<V>|null = null;\nprivate _unlinkedRecords: _DuplicateMap<V>|null = null;\nprivate _previousItHead: IterableChangeRecord_<V>|null = null;\nprivate _itHead: IterableChangeRecord_<V>|null = null;\nprivate _itTail: IterableChangeRecord_<V>|null = null;\nprivate _additionsHead: IterableChangeRecord_<V>|null = null;\nprivate _additionsTail: IterableChangeRecord_<V>|null = null;\nprivate _movesHead: IterableChangeRecord_<V>|null = null;\nprivate _movesTail: IterableChangeRecord_<V>|null = null;\nprivate _removalsHead: IterableChangeRecord_<V>|null = null;\nprivate _removalsTail: IterableChangeRecord_<V>|null = null;\nprivate _identityChangesHead: IterableChangeRecord_<V>|null = null;\nprivate _identityChangesTail: IterableChangeRecord_<V>|null = null;\nprivate _trackByFn: TrackByFunction<V>;\n/**\n * @param {?=} trackByFn\n */\nconstructor(trackByFn?: TrackByFunction<V>) { this._trackByFn = trackByFn || trackByIdentity; }\n/**\n * @return {?}\n */\nget collection() { return this._collection; }\n/**\n * @return {?}\n */\nget length(): number { return this._length; }\n/**\n * @param {?} fn\n * @return {?}\n */\nforEachItem(fn: (record: IterableChangeRecord_<V>) => void) {\n    let /** @type {?} */ record: IterableChangeRecord_<V>|null;\n    for (record = this._itHead; record !== null; record = record._next) {\n      fn(record);\n    }\n  }\n/**\n * @param {?} fn\n * @return {?}\n */\nforEachOperation(\n      fn: (item: IterableChangeRecord<V>, previousIndex: number|null, currentIndex: number|null) =>\n          void) {\n    let /** @type {?} */ nextIt = this._itHead;\n    let /** @type {?} */ nextRemove = this._removalsHead;\n    let /** @type {?} */ addRemoveOffset = 0;\n    let /** @type {?} */ moveOffsets: number[]|null = null;\n    while (nextIt || nextRemove) {\n      // Figure out which is the next record to process\n      // Order: remove, add, move\n      const /** @type {?} */ record: IterableChangeRecord<V> = !nextRemove ||\n              nextIt && /** @type {?} */((\n                  nextIt.currentIndex)) <\n                      getPreviousIndex(nextRemove, addRemoveOffset, moveOffsets) ? /** @type {?} */((\n          nextIt)) :\n          nextRemove;\n      const /** @type {?} */ adjPreviousIndex = getPreviousIndex(record, addRemoveOffset, moveOffsets);\n      const /** @type {?} */ currentIndex = record.currentIndex;\n\n      // consume the item, and adjust the addRemoveOffset and update moveDistance if necessary\n      if (record === nextRemove) {\n        addRemoveOffset--;\n        nextRemove = nextRemove._nextRemoved;\n      } else {\n        nextIt = /** @type {?} */(( nextIt))._next;\n        if (record.previousIndex == null) {\n          addRemoveOffset++;\n        } else {\n          // INVARIANT:  currentIndex < previousIndex\n          if (!moveOffsets) moveOffsets = [];\n          const /** @type {?} */ localMovePreviousIndex = adjPreviousIndex - addRemoveOffset;\n          const /** @type {?} */ localCurrentIndex = /** @type {?} */(( currentIndex)) - addRemoveOffset;\n          if (localMovePreviousIndex != localCurrentIndex) {\n            for (let /** @type {?} */ i = 0; i < localMovePreviousIndex; i++) {\n              const /** @type {?} */ offset = i < moveOffsets.length ? moveOffsets[i] : (moveOffsets[i] = 0);\n              const /** @type {?} */ index = offset + i;\n              if (localCurrentIndex <= index && index < localMovePreviousIndex) {\n                moveOffsets[i] = offset + 1;\n              }\n            }\n            const /** @type {?} */ previousIndex = record.previousIndex;\n            moveOffsets[previousIndex] = localCurrentIndex - localMovePreviousIndex;\n          }\n        }\n      }\n\n      if (adjPreviousIndex !== currentIndex) {\n        fn(record, adjPreviousIndex, currentIndex);\n      }\n    }\n  }\n/**\n * @param {?} fn\n * @return {?}\n */\nforEachPreviousItem(fn: (record: IterableChangeRecord_<V>) => void) {\n    let /** @type {?} */ record: IterableChangeRecord_<V>|null;\n    for (record = this._previousItHead; record !== null; record = record._nextPrevious) {\n      fn(record);\n    }\n  }\n/**\n * @param {?} fn\n * @return {?}\n */\nforEachAddedItem(fn: (record: IterableChangeRecord_<V>) => void) {\n    let /** @type {?} */ record: IterableChangeRecord_<V>|null;\n    for (record = this._additionsHead; record !== null; record = record._nextAdded) {\n      fn(record);\n    }\n  }\n/**\n * @param {?} fn\n * @return {?}\n */\nforEachMovedItem(fn: (record: IterableChangeRecord_<V>) => void) {\n    let /** @type {?} */ record: IterableChangeRecord_<V>|null;\n    for (record = this._movesHead; record !== null; record = record._nextMoved) {\n      fn(record);\n    }\n  }\n/**\n * @param {?} fn\n * @return {?}\n */\nforEachRemovedItem(fn: (record: IterableChangeRecord_<V>) => void) {\n    let /** @type {?} */ record: IterableChangeRecord_<V>|null;\n    for (record = this._removalsHead; record !== null; record = record._nextRemoved) {\n      fn(record);\n    }\n  }\n/**\n * @param {?} fn\n * @return {?}\n */\nforEachIdentityChange(fn: (record: IterableChangeRecord_<V>) => void) {\n    let /** @type {?} */ record: IterableChangeRecord_<V>|null;\n    for (record = this._identityChangesHead; record !== null; record = record._nextIdentityChange) {\n      fn(record);\n    }\n  }\n/**\n * @param {?} collection\n * @return {?}\n */\ndiff(collection: NgIterable<V>): DefaultIterableDiffer<V>|null {\n    if (collection == null) collection = [];\n    if (!isListLikeIterable(collection)) {\n      throw new Error(\n          `Error trying to diff '${stringify(collection)}'. Only arrays and iterables are allowed`);\n    }\n\n    if (this.check(collection)) {\n      return this;\n    } else {\n      return null;\n    }\n  }\n/**\n * @return {?}\n */\nonDestroy() {}\n/**\n * @param {?} collection\n * @return {?}\n */\ncheck(collection: NgIterable<V>): boolean {\n    this._reset();\n\n    let /** @type {?} */ record: IterableChangeRecord_<V>|null = this._itHead;\n    let /** @type {?} */ mayBeDirty: boolean = false;\n    let /** @type {?} */ index: number;\n    let /** @type {?} */ item: V;\n    let /** @type {?} */ itemTrackBy: any;\n    if (Array.isArray(collection)) {\n      this._length = collection.length;\n\n      for (let /** @type {?} */ index = 0; index < this._length; index++) {\n        item = collection[index];\n        itemTrackBy = this._trackByFn(index, item);\n        if (record === null || !looseIdentical(record.trackById, itemTrackBy)) {\n          record = this._mismatch(record, item, itemTrackBy, index);\n          mayBeDirty = true;\n        } else {\n          if (mayBeDirty) {\n            // TODO(misko): can we limit this to duplicates only?\n            record = this._verifyReinsertion(record, item, itemTrackBy, index);\n          }\n          if (!looseIdentical(record.item, item)) this._addIdentityChange(record, item);\n        }\n\n        record = record._next;\n      }\n    } else {\n      index = 0;\n      iterateListLike(collection, (item: V) => {\n        itemTrackBy = this._trackByFn(index, item);\n        if (record === null || !looseIdentical(record.trackById, itemTrackBy)) {\n          record = this._mismatch(record, item, itemTrackBy, index);\n          mayBeDirty = true;\n        } else {\n          if (mayBeDirty) {\n            // TODO(misko): can we limit this to duplicates only?\n            record = this._verifyReinsertion(record, item, itemTrackBy, index);\n          }\n          if (!looseIdentical(record.item, item)) this._addIdentityChange(record, item);\n        }\n        record = record._next;\n        index++;\n      });\n      this._length = index;\n    }\n\n    this._truncate(record);\n    this._collection = collection;\n    return this.isDirty;\n  }\n/**\n * @return {?}\n */\nget isDirty(): boolean {\n    return this._additionsHead !== null || this._movesHead !== null ||\n        this._removalsHead !== null || this._identityChangesHead !== null;\n  }\n/**\n * Reset the state of the change objects to show no changes. This means set previousKey to\n * currentKey, and clear all of the queues (additions, moves, removals).\n * Set the previousIndexes of moved and added items to their currentIndexes\n * Reset the list of additions, moves and removals\n * \n * \\@internal\n * @return {?}\n */\n_reset() {\n    if (this.isDirty) {\n      let /** @type {?} */ record: IterableChangeRecord_<V>|null;\n      let /** @type {?} */ nextRecord: IterableChangeRecord_<V>|null;\n\n      for (record = this._previousItHead = this._itHead; record !== null; record = record._next) {\n        record._nextPrevious = record._next;\n      }\n\n      for (record = this._additionsHead; record !== null; record = record._nextAdded) {\n        record.previousIndex = record.currentIndex;\n      }\n      this._additionsHead = this._additionsTail = null;\n\n      for (record = this._movesHead; record !== null; record = nextRecord) {\n        record.previousIndex = record.currentIndex;\n        nextRecord = record._nextMoved;\n      }\n      this._movesHead = this._movesTail = null;\n      this._removalsHead = this._removalsTail = null;\n      this._identityChangesHead = this._identityChangesTail = null;\n\n      // todo(vicb) when assert gets supported\n      // assert(!this.isDirty);\n    }\n  }\n/**\n * This is the core function which handles differences between collections.\n * \n * - `record` is the record which we saw at this position last time. If null then it is a new\n *   item.\n * - `item` is the current item in the collection\n * - `index` is the position of the item in the collection\n * \n * \\@internal\n * @param {?} record\n * @param {?} item\n * @param {?} itemTrackBy\n * @param {?} index\n * @return {?}\n */\n_mismatch(record: IterableChangeRecord_<V>|null, item: V, itemTrackBy: any, index: number):\n      IterableChangeRecord_<V> {\n    // The previous record after which we will append the current one.\n    let /** @type {?} */ previousRecord: IterableChangeRecord_<V>|null;\n\n    if (record === null) {\n      previousRecord = this._itTail;\n    } else {\n      previousRecord = record._prev;\n      // Remove the record from the collection since we know it does not match the item.\n      this._remove(record);\n    }\n\n    // Attempt to see if we have seen the item before.\n    record = this._linkedRecords === null ? null : this._linkedRecords.get(itemTrackBy, index);\n    if (record !== null) {\n      // We have seen this before, we need to move it forward in the collection.\n      // But first we need to check if identity changed, so we can update in view if necessary\n      if (!looseIdentical(record.item, item)) this._addIdentityChange(record, item);\n\n      this._moveAfter(record, previousRecord, index);\n    } else {\n      // Never seen it, check evicted list.\n      record = this._unlinkedRecords === null ? null : this._unlinkedRecords.get(itemTrackBy, null);\n      if (record !== null) {\n        // It is an item which we have evicted earlier: reinsert it back into the list.\n        // But first we need to check if identity changed, so we can update in view if necessary\n        if (!looseIdentical(record.item, item)) this._addIdentityChange(record, item);\n\n        this._reinsertAfter(record, previousRecord, index);\n      } else {\n        // It is a new item: add it.\n        record =\n            this._addAfter(new IterableChangeRecord_<V>(item, itemTrackBy), previousRecord, index);\n      }\n    }\n    return record;\n  }\n/**\n * This check is only needed if an array contains duplicates. (Short circuit of nothing dirty)\n * \n * Use case: `[a, a]` => `[b, a, a]`\n * \n * If we did not have this check then the insertion of `b` would:\n *   1) evict first `a`\n *   2) insert `b` at `0` index.\n *   3) leave `a` at index `1` as is. <-- this is wrong!\n *   3) reinsert `a` at index 2. <-- this is wrong!\n * \n * The correct behavior is:\n *   1) evict first `a`\n *   2) insert `b` at `0` index.\n *   3) reinsert `a` at index 1.\n *   3) move `a` at from `1` to `2`.\n * \n * \n * Double check that we have not evicted a duplicate item. We need to check if the item type may\n * have already been removed:\n * The insertion of b will evict the first 'a'. If we don't reinsert it now it will be reinserted\n * at the end. Which will show up as the two 'a's switching position. This is incorrect, since a\n * better way to think of it is as insert of 'b' rather then switch 'a' with 'b' and then add 'a'\n * at the end.\n * \n * \\@internal\n * @param {?} record\n * @param {?} item\n * @param {?} itemTrackBy\n * @param {?} index\n * @return {?}\n */\n_verifyReinsertion(record: IterableChangeRecord_<V>, item: V, itemTrackBy: any, index: number):\n      IterableChangeRecord_<V> {\n    let /** @type {?} */ reinsertRecord: IterableChangeRecord_<V>|null =\n        this._unlinkedRecords === null ? null : this._unlinkedRecords.get(itemTrackBy, null);\n    if (reinsertRecord !== null) {\n      record = this._reinsertAfter(reinsertRecord, /** @type {?} */(( record._prev)), index);\n    } else if (record.currentIndex != index) {\n      record.currentIndex = index;\n      this._addToMoves(record, index);\n    }\n    return record;\n  }\n/**\n * Get rid of any excess {\\@link IterableChangeRecord_}s from the previous collection\n * \n * - `record` The first excess {\\@link IterableChangeRecord_}.\n * \n * \\@internal\n * @param {?} record\n * @return {?}\n */\n_truncate(record: IterableChangeRecord_<V>|null) {\n    // Anything after that needs to be removed;\n    while (record !== null) {\n      const /** @type {?} */ nextRecord: IterableChangeRecord_<V>|null = record._next;\n      this._addToRemovals(this._unlink(record));\n      record = nextRecord;\n    }\n    if (this._unlinkedRecords !== null) {\n      this._unlinkedRecords.clear();\n    }\n\n    if (this._additionsTail !== null) {\n      this._additionsTail._nextAdded = null;\n    }\n    if (this._movesTail !== null) {\n      this._movesTail._nextMoved = null;\n    }\n    if (this._itTail !== null) {\n      this._itTail._next = null;\n    }\n    if (this._removalsTail !== null) {\n      this._removalsTail._nextRemoved = null;\n    }\n    if (this._identityChangesTail !== null) {\n      this._identityChangesTail._nextIdentityChange = null;\n    }\n  }\n/**\n * \\@internal\n * @param {?} record\n * @param {?} prevRecord\n * @param {?} index\n * @return {?}\n */\n_reinsertAfter(\n      record: IterableChangeRecord_<V>, prevRecord: IterableChangeRecord_<V>|null,\n      index: number): IterableChangeRecord_<V> {\n    if (this._unlinkedRecords !== null) {\n      this._unlinkedRecords.remove(record);\n    }\n    const /** @type {?} */ prev = record._prevRemoved;\n    const /** @type {?} */ next = record._nextRemoved;\n\n    if (prev === null) {\n      this._removalsHead = next;\n    } else {\n      prev._nextRemoved = next;\n    }\n    if (next === null) {\n      this._removalsTail = prev;\n    } else {\n      next._prevRemoved = prev;\n    }\n\n    this._insertAfter(record, prevRecord, index);\n    this._addToMoves(record, index);\n    return record;\n  }\n/**\n * \\@internal\n * @param {?} record\n * @param {?} prevRecord\n * @param {?} index\n * @return {?}\n */\n_moveAfter(\n      record: IterableChangeRecord_<V>, prevRecord: IterableChangeRecord_<V>|null,\n      index: number): IterableChangeRecord_<V> {\n    this._unlink(record);\n    this._insertAfter(record, prevRecord, index);\n    this._addToMoves(record, index);\n    return record;\n  }\n/**\n * \\@internal\n * @param {?} record\n * @param {?} prevRecord\n * @param {?} index\n * @return {?}\n */\n_addAfter(\n      record: IterableChangeRecord_<V>, prevRecord: IterableChangeRecord_<V>|null,\n      index: number): IterableChangeRecord_<V> {\n    this._insertAfter(record, prevRecord, index);\n\n    if (this._additionsTail === null) {\n      // todo(vicb)\n      // assert(this._additionsHead === null);\n      this._additionsTail = this._additionsHead = record;\n    } else {\n      // todo(vicb)\n      // assert(_additionsTail._nextAdded === null);\n      // assert(record._nextAdded === null);\n      this._additionsTail = this._additionsTail._nextAdded = record;\n    }\n    return record;\n  }\n/**\n * \\@internal\n * @param {?} record\n * @param {?} prevRecord\n * @param {?} index\n * @return {?}\n */\n_insertAfter(\n      record: IterableChangeRecord_<V>, prevRecord: IterableChangeRecord_<V>|null,\n      index: number): IterableChangeRecord_<V> {\n    // todo(vicb)\n    // assert(record != prevRecord);\n    // assert(record._next === null);\n    // assert(record._prev === null);\n\n    const /** @type {?} */ next: IterableChangeRecord_<V>|null =\n        prevRecord === null ? this._itHead : prevRecord._next;\n    // todo(vicb)\n    // assert(next != record);\n    // assert(prevRecord != record);\n    record._next = next;\n    record._prev = prevRecord;\n    if (next === null) {\n      this._itTail = record;\n    } else {\n      next._prev = record;\n    }\n    if (prevRecord === null) {\n      this._itHead = record;\n    } else {\n      prevRecord._next = record;\n    }\n\n    if (this._linkedRecords === null) {\n      this._linkedRecords = new _DuplicateMap<V>();\n    }\n    this._linkedRecords.put(record);\n\n    record.currentIndex = index;\n    return record;\n  }\n/**\n * \\@internal\n * @param {?} record\n * @return {?}\n */\n_remove(record: IterableChangeRecord_<V>): IterableChangeRecord_<V> {\n    return this._addToRemovals(this._unlink(record));\n  }\n/**\n * \\@internal\n * @param {?} record\n * @return {?}\n */\n_unlink(record: IterableChangeRecord_<V>): IterableChangeRecord_<V> {\n    if (this._linkedRecords !== null) {\n      this._linkedRecords.remove(record);\n    }\n\n    const /** @type {?} */ prev = record._prev;\n    const /** @type {?} */ next = record._next;\n\n    // todo(vicb)\n    // assert((record._prev = null) === null);\n    // assert((record._next = null) === null);\n\n    if (prev === null) {\n      this._itHead = next;\n    } else {\n      prev._next = next;\n    }\n    if (next === null) {\n      this._itTail = prev;\n    } else {\n      next._prev = prev;\n    }\n\n    return record;\n  }\n/**\n * \\@internal\n * @param {?} record\n * @param {?} toIndex\n * @return {?}\n */\n_addToMoves(record: IterableChangeRecord_<V>, toIndex: number): IterableChangeRecord_<V> {\n    // todo(vicb)\n    // assert(record._nextMoved === null);\n\n    if (record.previousIndex === toIndex) {\n      return record;\n    }\n\n    if (this._movesTail === null) {\n      // todo(vicb)\n      // assert(_movesHead === null);\n      this._movesTail = this._movesHead = record;\n    } else {\n      // todo(vicb)\n      // assert(_movesTail._nextMoved === null);\n      this._movesTail = this._movesTail._nextMoved = record;\n    }\n\n    return record;\n  }\n/**\n * @param {?} record\n * @return {?}\n */\nprivate _addToRemovals(record: IterableChangeRecord_<V>): IterableChangeRecord_<V> {\n    if (this._unlinkedRecords === null) {\n      this._unlinkedRecords = new _DuplicateMap<V>();\n    }\n    this._unlinkedRecords.put(record);\n    record.currentIndex = null;\n    record._nextRemoved = null;\n\n    if (this._removalsTail === null) {\n      // todo(vicb)\n      // assert(_removalsHead === null);\n      this._removalsTail = this._removalsHead = record;\n      record._prevRemoved = null;\n    } else {\n      // todo(vicb)\n      // assert(_removalsTail._nextRemoved === null);\n      // assert(record._nextRemoved === null);\n      record._prevRemoved = this._removalsTail;\n      this._removalsTail = this._removalsTail._nextRemoved = record;\n    }\n    return record;\n  }\n/**\n * \\@internal\n * @param {?} record\n * @param {?} item\n * @return {?}\n */\n_addIdentityChange(record: IterableChangeRecord_<V>, item: V) {\n    record.item = item;\n    if (this._identityChangesTail === null) {\n      this._identityChangesTail = this._identityChangesHead = record;\n    } else {\n      this._identityChangesTail = this._identityChangesTail._nextIdentityChange = record;\n    }\n    return record;\n  }\n/**\n * @return {?}\n */\ntoString(): string {\n    const /** @type {?} */ list: IterableChangeRecord_<V>[] = [];\n    this.forEachItem((record: IterableChangeRecord_<V>) => list.push(record));\n\n    const /** @type {?} */ previous: IterableChangeRecord_<V>[] = [];\n    this.forEachPreviousItem((record: IterableChangeRecord_<V>) => previous.push(record));\n\n    const /** @type {?} */ additions: IterableChangeRecord_<V>[] = [];\n    this.forEachAddedItem((record: IterableChangeRecord_<V>) => additions.push(record));\n\n    const /** @type {?} */ moves: IterableChangeRecord_<V>[] = [];\n    this.forEachMovedItem((record: IterableChangeRecord_<V>) => moves.push(record));\n\n    const /** @type {?} */ removals: IterableChangeRecord_<V>[] = [];\n    this.forEachRemovedItem((record: IterableChangeRecord_<V>) => removals.push(record));\n\n    const /** @type {?} */ identityChanges: IterableChangeRecord_<V>[] = [];\n    this.forEachIdentityChange((record: IterableChangeRecord_<V>) => identityChanges.push(record));\n\n    return 'collection: ' + list.join(', ') + '\\n' +\n        'previous: ' + previous.join(', ') + '\\n' +\n        'additions: ' + additions.join(', ') + '\\n' +\n        'moves: ' + moves.join(', ') + '\\n' +\n        'removals: ' + removals.join(', ') + '\\n' +\n        'identityChanges: ' + identityChanges.join(', ') + '\\n';\n  }\n}\n\nfunction DefaultIterableDiffer_tsickle_Closure_declarations() {\n/** @type {?} */\nDefaultIterableDiffer.prototype._length;\n/** @type {?} */\nDefaultIterableDiffer.prototype._collection;\n/** @type {?} */\nDefaultIterableDiffer.prototype._linkedRecords;\n/** @type {?} */\nDefaultIterableDiffer.prototype._unlinkedRecords;\n/** @type {?} */\nDefaultIterableDiffer.prototype._previousItHead;\n/** @type {?} */\nDefaultIterableDiffer.prototype._itHead;\n/** @type {?} */\nDefaultIterableDiffer.prototype._itTail;\n/** @type {?} */\nDefaultIterableDiffer.prototype._additionsHead;\n/** @type {?} */\nDefaultIterableDiffer.prototype._additionsTail;\n/** @type {?} */\nDefaultIterableDiffer.prototype._movesHead;\n/** @type {?} */\nDefaultIterableDiffer.prototype._movesTail;\n/** @type {?} */\nDefaultIterableDiffer.prototype._removalsHead;\n/** @type {?} */\nDefaultIterableDiffer.prototype._removalsTail;\n/** @type {?} */\nDefaultIterableDiffer.prototype._identityChangesHead;\n/** @type {?} */\nDefaultIterableDiffer.prototype._identityChangesTail;\n/** @type {?} */\nDefaultIterableDiffer.prototype._trackByFn;\n}\n\n/**\n * \\@stable\n */\nexport class IterableChangeRecord_<V> implements IterableChangeRecord<V> {\n  currentIndex: number|null = null;\n  previousIndex: number|null = null;\n/**\n * \\@internal\n */\n_nextPrevious: IterableChangeRecord_<V>|null = null;\n/**\n * \\@internal\n */\n_prev: IterableChangeRecord_<V>|null = null;\n/**\n * \\@internal\n */\n_next: IterableChangeRecord_<V>|null = null;\n/**\n * \\@internal\n */\n_prevDup: IterableChangeRecord_<V>|null = null;\n/**\n * \\@internal\n */\n_nextDup: IterableChangeRecord_<V>|null = null;\n/**\n * \\@internal\n */\n_prevRemoved: IterableChangeRecord_<V>|null = null;\n/**\n * \\@internal\n */\n_nextRemoved: IterableChangeRecord_<V>|null = null;\n/**\n * \\@internal\n */\n_nextAdded: IterableChangeRecord_<V>|null = null;\n/**\n * \\@internal\n */\n_nextMoved: IterableChangeRecord_<V>|null = null;\n/**\n * \\@internal\n */\n_nextIdentityChange: IterableChangeRecord_<V>|null = null;\n/**\n * @param {?} item\n * @param {?} trackById\n */\nconstructor(public item: V,\npublic trackById: any) {}\n/**\n * @return {?}\n */\ntoString(): string {\n    return this.previousIndex === this.currentIndex ? stringify(this.item) :\n                                                      stringify(this.item) + '[' +\n            stringify(this.previousIndex) + '->' + stringify(this.currentIndex) + ']';\n  }\n}\n\nfunction IterableChangeRecord__tsickle_Closure_declarations() {\n/** @type {?} */\nIterableChangeRecord_.prototype.currentIndex;\n/** @type {?} */\nIterableChangeRecord_.prototype.previousIndex;\n/**\n * \\@internal\n * @type {?}\n */\nIterableChangeRecord_.prototype._nextPrevious;\n/**\n * \\@internal\n * @type {?}\n */\nIterableChangeRecord_.prototype._prev;\n/**\n * \\@internal\n * @type {?}\n */\nIterableChangeRecord_.prototype._next;\n/**\n * \\@internal\n * @type {?}\n */\nIterableChangeRecord_.prototype._prevDup;\n/**\n * \\@internal\n * @type {?}\n */\nIterableChangeRecord_.prototype._nextDup;\n/**\n * \\@internal\n * @type {?}\n */\nIterableChangeRecord_.prototype._prevRemoved;\n/**\n * \\@internal\n * @type {?}\n */\nIterableChangeRecord_.prototype._nextRemoved;\n/**\n * \\@internal\n * @type {?}\n */\nIterableChangeRecord_.prototype._nextAdded;\n/**\n * \\@internal\n * @type {?}\n */\nIterableChangeRecord_.prototype._nextMoved;\n/**\n * \\@internal\n * @type {?}\n */\nIterableChangeRecord_.prototype._nextIdentityChange;\n/** @type {?} */\nIterableChangeRecord_.prototype.item;\n/** @type {?} */\nIterableChangeRecord_.prototype.trackById;\n}\n\nclass _DuplicateItemRecordList<V> {\n/**\n * \\@internal\n */\n_head: IterableChangeRecord_<V>|null = null;\n/**\n * \\@internal\n */\n_tail: IterableChangeRecord_<V>|null = null;\n/**\n * Append the record to the list of duplicates.\n * \n * Note: by design all records in the list of duplicates hold the same value in record.item.\n * @param {?} record\n * @return {?}\n */\nadd(record: IterableChangeRecord_<V>): void {\n    if (this._head === null) {\n      this._head = this._tail = record;\n      record._nextDup = null;\n      record._prevDup = null;\n    } else { /** @type {?} */((\n      // todo(vicb)\n      // assert(record.item ==  _head.item ||\n      //       record.item is num && record.item.isNaN && _head.item is num && _head.item.isNaN);\n      this._tail))._nextDup = record;\n      record._prevDup = this._tail;\n      record._nextDup = null;\n      this._tail = record;\n    }\n  }\n/**\n * @param {?} trackById\n * @param {?} atOrAfterIndex\n * @return {?}\n */\nget(trackById: any, atOrAfterIndex: number|null): IterableChangeRecord_<V>|null {\n    let /** @type {?} */ record: IterableChangeRecord_<V>|null;\n    for (record = this._head; record !== null; record = record._nextDup) {\n      if ((atOrAfterIndex === null || atOrAfterIndex <= /** @type {?} */(( record.currentIndex))) &&\n          looseIdentical(record.trackById, trackById)) {\n        return record;\n      }\n    }\n    return null;\n  }\n/**\n * Remove one {\\@link IterableChangeRecord_} from the list of duplicates.\n * \n * Returns whether the list of duplicates is empty.\n * @param {?} record\n * @return {?}\n */\nremove(record: IterableChangeRecord_<V>): boolean {\n    // todo(vicb)\n    // assert(() {\n    //  // verify that the record being removed is in the list.\n    //  for (IterableChangeRecord_ cursor = _head; cursor != null; cursor = cursor._nextDup) {\n    //    if (identical(cursor, record)) return true;\n    //  }\n    //  return false;\n    //});\n\n    const /** @type {?} */ prev: IterableChangeRecord_<V>|null = record._prevDup;\n    const /** @type {?} */ next: IterableChangeRecord_<V>|null = record._nextDup;\n    if (prev === null) {\n      this._head = next;\n    } else {\n      prev._nextDup = next;\n    }\n    if (next === null) {\n      this._tail = prev;\n    } else {\n      next._prevDup = prev;\n    }\n    return this._head === null;\n  }\n}\n\nfunction _DuplicateItemRecordList_tsickle_Closure_declarations() {\n/**\n * \\@internal\n * @type {?}\n */\n_DuplicateItemRecordList.prototype._head;\n/**\n * \\@internal\n * @type {?}\n */\n_DuplicateItemRecordList.prototype._tail;\n}\n\nclass _DuplicateMap<V> {\n  map = new Map<any, _DuplicateItemRecordList<V>>();\n/**\n * @param {?} record\n * @return {?}\n */\nput(record: IterableChangeRecord_<V>) {\n    const /** @type {?} */ key = record.trackById;\n\n    let /** @type {?} */ duplicates = this.map.get(key);\n    if (!duplicates) {\n      duplicates = new _DuplicateItemRecordList<V>();\n      this.map.set(key, duplicates);\n    }\n    duplicates.add(record);\n  }\n/**\n * Retrieve the `value` using key. Because the IterableChangeRecord_ value may be one which we\n * have already iterated over, we use the `atOrAfterIndex` to pretend it is not there.\n * \n * Use case: `[a, b, c, a, a]` if we are at index `3` which is the second `a` then asking if we\n * have any more `a`s needs to return the second `a`.\n * @param {?} trackById\n * @param {?} atOrAfterIndex\n * @return {?}\n */\nget(trackById: any, atOrAfterIndex: number|null): IterableChangeRecord_<V>|null {\n    const /** @type {?} */ key = trackById;\n    const /** @type {?} */ recordList = this.map.get(key);\n    return recordList ? recordList.get(trackById, atOrAfterIndex) : null;\n  }\n/**\n * Removes a {\\@link IterableChangeRecord_} from the list of duplicates.\n * \n * The list of duplicates also is removed from the map if it gets empty.\n * @param {?} record\n * @return {?}\n */\nremove(record: IterableChangeRecord_<V>): IterableChangeRecord_<V> {\n    const /** @type {?} */ key = record.trackById;\n    const /** @type {?} */ recordList: _DuplicateItemRecordList<V> = /** @type {?} */(( this.map.get(key)));\n    // Remove the list of duplicates when it gets empty\n    if (recordList.remove(record)) {\n      this.map.delete(key);\n    }\n    return record;\n  }\n/**\n * @return {?}\n */\nget isEmpty(): boolean { return this.map.size === 0; }\n/**\n * @return {?}\n */\nclear() { this.map.clear(); }\n/**\n * @return {?}\n */\ntoString(): string { return '_DuplicateMap(' + stringify(this.map) + ')'; }\n}\n\nfunction _DuplicateMap_tsickle_Closure_declarations() {\n/** @type {?} */\n_DuplicateMap.prototype.map;\n}\n\n/**\n * @param {?} item\n * @param {?} addRemoveOffset\n * @param {?} moveOffsets\n * @return {?}\n */\nfunction getPreviousIndex(\n    item: any, addRemoveOffset: number, moveOffsets: number[] | null): number {\n  const /** @type {?} */ previousIndex = item.previousIndex;\n  if (previousIndex === null) return previousIndex;\n  let /** @type {?} */ moveOffset = 0;\n  if (moveOffsets && previousIndex < moveOffsets.length) {\n    moveOffset = moveOffsets[previousIndex];\n  }\n  return previousIndex + addRemoveOffset + moveOffset;\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {looseIdentical, stringify} from '../../util';\nimport {isJsObject} from '../change_detection_util';\nimport {ChangeDetectorRef} from '../change_detector_ref';\nimport {KeyValueChangeRecord, KeyValueChanges, KeyValueDiffer, KeyValueDifferFactory} from './keyvalue_differs';\nexport class DefaultKeyValueDifferFactory<K, V> implements KeyValueDifferFactory {\nconstructor() {}\n/**\n * @param {?} obj\n * @return {?}\n */\nsupports(obj: any): boolean { return obj instanceof Map || isJsObject(obj); }\n\n  create<K, V>(): DefaultKeyValueDiffer<K, V>;\n/**\n * @deprecated v4.0.0 - ChangeDetectorRef is not used and is no longer a parameter\n * @template K, V\n * @param {?=} cd\n * @return {?}\n */\ncreate<K, V>(cd?: ChangeDetectorRef): KeyValueDiffer<K, V> {\n    return new DefaultKeyValueDiffer<K, V>();\n  }\n}\nexport class DefaultKeyValueDiffer<K, V> implements KeyValueDiffer<K, V>, KeyValueChanges<K, V> {\nprivate _records = new Map<K, KeyValueChangeRecord_<K, V>>();\nprivate _mapHead: KeyValueChangeRecord_<K, V>|null = null;\nprivate _appendAfter: KeyValueChangeRecord_<K, V>|null = null;\nprivate _previousMapHead: KeyValueChangeRecord_<K, V>|null = null;\nprivate _changesHead: KeyValueChangeRecord_<K, V>|null = null;\nprivate _changesTail: KeyValueChangeRecord_<K, V>|null = null;\nprivate _additionsHead: KeyValueChangeRecord_<K, V>|null = null;\nprivate _additionsTail: KeyValueChangeRecord_<K, V>|null = null;\nprivate _removalsHead: KeyValueChangeRecord_<K, V>|null = null;\nprivate _removalsTail: KeyValueChangeRecord_<K, V>|null = null;\n/**\n * @return {?}\n */\nget isDirty(): boolean {\n    return this._additionsHead !== null || this._changesHead !== null ||\n        this._removalsHead !== null;\n  }\n/**\n * @param {?} fn\n * @return {?}\n */\nforEachItem(fn: (r: KeyValueChangeRecord<K, V>) => void) {\n    let /** @type {?} */ record: KeyValueChangeRecord_<K, V>|null;\n    for (record = this._mapHead; record !== null; record = record._next) {\n      fn(record);\n    }\n  }\n/**\n * @param {?} fn\n * @return {?}\n */\nforEachPreviousItem(fn: (r: KeyValueChangeRecord<K, V>) => void) {\n    let /** @type {?} */ record: KeyValueChangeRecord_<K, V>|null;\n    for (record = this._previousMapHead; record !== null; record = record._nextPrevious) {\n      fn(record);\n    }\n  }\n/**\n * @param {?} fn\n * @return {?}\n */\nforEachChangedItem(fn: (r: KeyValueChangeRecord<K, V>) => void) {\n    let /** @type {?} */ record: KeyValueChangeRecord_<K, V>|null;\n    for (record = this._changesHead; record !== null; record = record._nextChanged) {\n      fn(record);\n    }\n  }\n/**\n * @param {?} fn\n * @return {?}\n */\nforEachAddedItem(fn: (r: KeyValueChangeRecord<K, V>) => void) {\n    let /** @type {?} */ record: KeyValueChangeRecord_<K, V>|null;\n    for (record = this._additionsHead; record !== null; record = record._nextAdded) {\n      fn(record);\n    }\n  }\n/**\n * @param {?} fn\n * @return {?}\n */\nforEachRemovedItem(fn: (r: KeyValueChangeRecord<K, V>) => void) {\n    let /** @type {?} */ record: KeyValueChangeRecord_<K, V>|null;\n    for (record = this._removalsHead; record !== null; record = record._nextRemoved) {\n      fn(record);\n    }\n  }\n/**\n * @param {?=} map\n * @return {?}\n */\ndiff(map?: Map<any, any>|{[k: string]: any}|null): any {\n    if (!map) {\n      map = new Map();\n    } else if (!(map instanceof Map || isJsObject(map))) {\n      throw new Error(\n          `Error trying to diff '${stringify(map)}'. Only maps and objects are allowed`);\n    }\n\n    return this.check(map) ? this : null;\n  }\n/**\n * @return {?}\n */\nonDestroy() {}\n/**\n * Check the current state of the map vs the previous.\n * The algorithm is optimised for when the keys do no change.\n * @param {?} map\n * @return {?}\n */\ncheck(map: Map<any, any>|{[k: string]: any}): boolean {\n    this._reset();\n\n    let /** @type {?} */ insertBefore = this._mapHead;\n    this._appendAfter = null;\n\n    this._forEach(map, (value: any, key: any) => {\n      if (insertBefore && insertBefore.key === key) {\n        this._maybeAddToChanges(insertBefore, value);\n        this._appendAfter = insertBefore;\n        insertBefore = insertBefore._next;\n      } else {\n        const /** @type {?} */ record = this._getOrCreateRecordForKey(key, value);\n        insertBefore = this._insertBeforeOrAppend(insertBefore, record);\n      }\n    });\n\n    // Items remaining at the end of the list have been deleted\n    if (insertBefore) {\n      if (insertBefore._prev) {\n        insertBefore._prev._next = null;\n      }\n\n      this._removalsHead = insertBefore;\n\n      for (let /** @type {?} */ record: KeyValueChangeRecord_<K, V>|null = insertBefore; record !== null;\n           record = record._nextRemoved) {\n        if (record === this._mapHead) {\n          this._mapHead = null;\n        }\n        this._records.delete(record.key);\n        record._nextRemoved = record._next;\n        record.previousValue = record.currentValue;\n        record.currentValue = null;\n        record._prev = null;\n        record._next = null;\n      }\n    }\n\n    // Make sure tails have no next records from previous runs\n    if (this._changesTail) this._changesTail._nextChanged = null;\n    if (this._additionsTail) this._additionsTail._nextAdded = null;\n\n    return this.isDirty;\n  }\n/**\n * Inserts a record before `before` or append at the end of the list when `before` is null.\n * \n * Notes:\n * - This method appends at `this._appendAfter`,\n * - This method updates `this._appendAfter`,\n * - The return value is the new value for the insertion pointer.\n * @param {?} before\n * @param {?} record\n * @return {?}\n */\nprivate _insertBeforeOrAppend(\n      before: KeyValueChangeRecord_<K, V>|null,\n      record: KeyValueChangeRecord_<K, V>): KeyValueChangeRecord_<K, V>|null {\n    if (before) {\n      const /** @type {?} */ prev = before._prev;\n      record._next = before;\n      record._prev = prev;\n      before._prev = record;\n      if (prev) {\n        prev._next = record;\n      }\n      if (before === this._mapHead) {\n        this._mapHead = record;\n      }\n\n      this._appendAfter = before;\n      return before;\n    }\n\n    if (this._appendAfter) {\n      this._appendAfter._next = record;\n      record._prev = this._appendAfter;\n    } else {\n      this._mapHead = record;\n    }\n\n    this._appendAfter = record;\n    return null;\n  }\n/**\n * @param {?} key\n * @param {?} value\n * @return {?}\n */\nprivate _getOrCreateRecordForKey(key: K, value: V): KeyValueChangeRecord_<K, V> {\n    if (this._records.has(key)) {\n      const /** @type {?} */ record = /** @type {?} */(( this._records.get(key)));\n      this._maybeAddToChanges(record, value);\n      const /** @type {?} */ prev = record._prev;\n      const /** @type {?} */ next = record._next;\n      if (prev) {\n        prev._next = next;\n      }\n      if (next) {\n        next._prev = prev;\n      }\n      record._next = null;\n      record._prev = null;\n\n      return record;\n    }\n\n    const /** @type {?} */ record = new KeyValueChangeRecord_<K, V>(key);\n    this._records.set(key, record);\n    record.currentValue = value;\n    this._addToAdditions(record);\n    return record;\n  }\n/**\n * \\@internal\n * @return {?}\n */\n_reset() {\n    if (this.isDirty) {\n      let /** @type {?} */ record: KeyValueChangeRecord_<K, V>|null;\n      // let `_previousMapHead` contain the state of the map before the changes\n      this._previousMapHead = this._mapHead;\n      for (record = this._previousMapHead; record !== null; record = record._next) {\n        record._nextPrevious = record._next;\n      }\n\n      // Update `record.previousValue` with the value of the item before the changes\n      // We need to update all changed items (that's those which have been added and changed)\n      for (record = this._changesHead; record !== null; record = record._nextChanged) {\n        record.previousValue = record.currentValue;\n      }\n      for (record = this._additionsHead; record != null; record = record._nextAdded) {\n        record.previousValue = record.currentValue;\n      }\n\n      this._changesHead = this._changesTail = null;\n      this._additionsHead = this._additionsTail = null;\n      this._removalsHead = null;\n    }\n  }\n/**\n * @param {?} record\n * @param {?} newValue\n * @return {?}\n */\nprivate _maybeAddToChanges(record: KeyValueChangeRecord_<K, V>, newValue: any): void {\n    if (!looseIdentical(newValue, record.currentValue)) {\n      record.previousValue = record.currentValue;\n      record.currentValue = newValue;\n      this._addToChanges(record);\n    }\n  }\n/**\n * @param {?} record\n * @return {?}\n */\nprivate _addToAdditions(record: KeyValueChangeRecord_<K, V>) {\n    if (this._additionsHead === null) {\n      this._additionsHead = this._additionsTail = record;\n    } else { /** @type {?} */((\n      this._additionsTail))._nextAdded = record;\n      this._additionsTail = record;\n    }\n  }\n/**\n * @param {?} record\n * @return {?}\n */\nprivate _addToChanges(record: KeyValueChangeRecord_<K, V>) {\n    if (this._changesHead === null) {\n      this._changesHead = this._changesTail = record;\n    } else { /** @type {?} */((\n      this._changesTail))._nextChanged = record;\n      this._changesTail = record;\n    }\n  }\n/**\n * \\@internal\n * @template K, V\n * @param {?} obj\n * @param {?} fn\n * @return {?}\n */\nprivate _forEach<K, V>(obj: Map<K, V>|{[k: string]: V}, fn: (v: V, k: any) => void) {\n    if (obj instanceof Map) {\n      obj.forEach(fn);\n    } else {\n      Object.keys(obj).forEach(k => fn(obj[k], k));\n    }\n  }\n}\n\nfunction DefaultKeyValueDiffer_tsickle_Closure_declarations() {\n/** @type {?} */\nDefaultKeyValueDiffer.prototype._records;\n/** @type {?} */\nDefaultKeyValueDiffer.prototype._mapHead;\n/** @type {?} */\nDefaultKeyValueDiffer.prototype._appendAfter;\n/** @type {?} */\nDefaultKeyValueDiffer.prototype._previousMapHead;\n/** @type {?} */\nDefaultKeyValueDiffer.prototype._changesHead;\n/** @type {?} */\nDefaultKeyValueDiffer.prototype._changesTail;\n/** @type {?} */\nDefaultKeyValueDiffer.prototype._additionsHead;\n/** @type {?} */\nDefaultKeyValueDiffer.prototype._additionsTail;\n/** @type {?} */\nDefaultKeyValueDiffer.prototype._removalsHead;\n/** @type {?} */\nDefaultKeyValueDiffer.prototype._removalsTail;\n}\n\n/**\n * \\@stable\n */\nclass KeyValueChangeRecord_<K, V> implements KeyValueChangeRecord<K, V> {\n  previousValue: V|null = null;\n  currentValue: V|null = null;\n/**\n * \\@internal\n */\n_nextPrevious: KeyValueChangeRecord_<K, V>|null = null;\n/**\n * \\@internal\n */\n_next: KeyValueChangeRecord_<K, V>|null = null;\n/**\n * \\@internal\n */\n_prev: KeyValueChangeRecord_<K, V>|null = null;\n/**\n * \\@internal\n */\n_nextAdded: KeyValueChangeRecord_<K, V>|null = null;\n/**\n * \\@internal\n */\n_nextRemoved: KeyValueChangeRecord_<K, V>|null = null;\n/**\n * \\@internal\n */\n_nextChanged: KeyValueChangeRecord_<K, V>|null = null;\n/**\n * @param {?} key\n */\nconstructor(public key: K) {}\n}\n\nfunction KeyValueChangeRecord__tsickle_Closure_declarations() {\n/** @type {?} */\nKeyValueChangeRecord_.prototype.previousValue;\n/** @type {?} */\nKeyValueChangeRecord_.prototype.currentValue;\n/**\n * \\@internal\n * @type {?}\n */\nKeyValueChangeRecord_.prototype._nextPrevious;\n/**\n * \\@internal\n * @type {?}\n */\nKeyValueChangeRecord_.prototype._next;\n/**\n * \\@internal\n * @type {?}\n */\nKeyValueChangeRecord_.prototype._prev;\n/**\n * \\@internal\n * @type {?}\n */\nKeyValueChangeRecord_.prototype._nextAdded;\n/**\n * \\@internal\n * @type {?}\n */\nKeyValueChangeRecord_.prototype._nextRemoved;\n/**\n * \\@internal\n * @type {?}\n */\nKeyValueChangeRecord_.prototype._nextChanged;\n/** @type {?} */\nKeyValueChangeRecord_.prototype.key;\n}\n\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Optional, Provider, SkipSelf} from '../../di';\nimport {ChangeDetectorRef} from '../change_detector_ref';\n\n/**\n * A type describing supported iterable types.\n *\n * @stable\n */\nexport type NgIterable<T> = Array<T>| Iterable<T>;\n\n/**\n * A strategy for tracking changes over time to an iterable. Used by {@link NgFor} to\n * respond to changes in an iterable by effecting equivalent changes in the DOM.\n *\n * @stable\n */\nexport interface IterableDiffer<V> {\n  /**\n   * Compute a difference between the previous state and the new `object` state.\n   *\n   * @param object containing the new value.\n   * @returns an object describing the difference. The return value is only valid until the next\n   * `diff()` invocation.\n   */\n  diff(object: NgIterable<V>): IterableChanges<V>|null;\n}\n\n/**\n * An object describing the changes in the `Iterable` collection since last time\n * `IterableDiffer#diff()` was invoked.\n *\n * @stable\n */\nexport interface IterableChanges<V> {\n  /**\n   * Iterate over all changes. `IterableChangeRecord` will contain information about changes\n   * to each item.\n   */\n  forEachItem(fn: (record: IterableChangeRecord<V>) => void): void;\n\n  /**\n   * Iterate over a set of operations which when applied to the original `Iterable` will produce the\n   * new `Iterable`.\n   *\n   * NOTE: These are not necessarily the actual operations which were applied to the original\n   * `Iterable`, rather these are a set of computed operations which may not be the same as the\n   * ones applied.\n   *\n   * @param record A change which needs to be applied\n   * @param previousIndex The `IterableChangeRecord#previousIndex` of the `record` refers to the\n   *        original `Iterable` location, where as `previousIndex` refers to the transient location\n   *        of the item, after applying the operations up to this point.\n   * @param currentIndex The `IterableChangeRecord#currentIndex` of the `record` refers to the\n   *        original `Iterable` location, where as `currentIndex` refers to the transient location\n   *        of the item, after applying the operations up to this point.\n   */\n  forEachOperation(\n      fn: (record: IterableChangeRecord<V>, previousIndex: number, currentIndex: number) => void):\n      void;\n\n  /**\n   * Iterate over changes in the order of original `Iterable` showing where the original items\n   * have moved.\n   */\n  forEachPreviousItem(fn: (record: IterableChangeRecord<V>) => void): void;\n\n  /** Iterate over all added items. */\n  forEachAddedItem(fn: (record: IterableChangeRecord<V>) => void): void;\n\n  /** Iterate over all moved items. */\n  forEachMovedItem(fn: (record: IterableChangeRecord<V>) => void): void;\n\n  /** Iterate over all removed items. */\n  forEachRemovedItem(fn: (record: IterableChangeRecord<V>) => void): void;\n\n  /** Iterate over all items which had their identity (as computed by the `trackByFn`) changed. */\n  forEachIdentityChange(fn: (record: IterableChangeRecord<V>) => void): void;\n}\n\n/**\n * Record representing the item change information.\n *\n * @stable\n */\nexport interface IterableChangeRecord<V> {\n  /** Current index of the item in `Iterable` or null if removed. */\n  readonly currentIndex: number|null;\n\n  /** Previous index of the item in `Iterable` or null if added. */\n  readonly previousIndex: number|null;\n\n  /** The item. */\n  readonly item: V;\n\n  /** Track by identity as computed by the `trackByFn`. */\n  readonly trackById: any;\n}\n\n/**\n * @deprecated v4.0.0 - Use IterableChangeRecord instead.\n */\nexport interface CollectionChangeRecord<V> extends IterableChangeRecord<V> {}\n\n\n/**\n * Nolonger used.\n *\n * @deprecated v4.0.0 - Use TrackByFunction instead\n */\nexport interface TrackByFn { (index: number, item: any): any; }\n\n/**\n * An optional function passed into {@link NgForOf} that defines how to track\n * items in an iterable (e.g. fby index or id)\n *\n * @stable\n */\nexport interface TrackByFunction<T> { (index: number, item: T): any; }\n\n/**\n * Provides a factory for {@link IterableDiffer}.\n *\n * @stable\n */\nexport interface IterableDifferFactory {\n  supports(objects: any): boolean;\n  create<V>(trackByFn?: TrackByFunction<V>): IterableDiffer<V>;\n\n  /**\n   * @deprecated v4.0.0 - ChangeDetectorRef is not used and is no longer a parameter\n   */\n  create<V>(_cdr?: ChangeDetectorRef|TrackByFunction<V>, trackByFn?: TrackByFunction<V>):\n      IterableDiffer<V>;\n}\n/**\n * A repository of different iterable diffing strategies used by NgFor, NgClass, and others.\n * \\@stable\n */\nexport class IterableDiffers {\n/**\n * @deprecated v4.0.0 - Should be private\n */\nfactories: IterableDifferFactory[];\n/**\n * @param {?} factories\n */\nconstructor(factories: IterableDifferFactory[]) { this.factories = factories; }\n/**\n * @param {?} factories\n * @param {?=} parent\n * @return {?}\n */\nstatic create(factories: IterableDifferFactory[], parent?: IterableDiffers): IterableDiffers {\n    if (parent != null) {\n      const /** @type {?} */ copied = parent.factories.slice();\n      factories = factories.concat(copied);\n      return new IterableDiffers(factories);\n    } else {\n      return new IterableDiffers(factories);\n    }\n  }\n/**\n * Takes an array of {\\@link IterableDifferFactory} and returns a provider used to extend the\n * inherited {\\@link IterableDiffers} instance with the provided factories and return a new\n * {\\@link IterableDiffers} instance.\n * \n * The following example shows how to extend an existing list of factories,\n * which will only be applied to the injector for this component and its children.\n * This step is all that's required to make a new {\\@link IterableDiffer} available.\n * \n * ### Example\n * \n * ```\n * \\@Component({ \n *   viewProviders: [\n *     IterableDiffers.extend([new ImmutableListDiffer()])\n *   ]\n * })\n * ```\n * @param {?} factories\n * @return {?}\n */\nstatic extend(factories: IterableDifferFactory[]): Provider {\n    return {\n      provide: IterableDiffers,\n      useFactory: (parent: IterableDiffers) => {\n        if (!parent) {\n          // Typically would occur when calling IterableDiffers.extend inside of dependencies passed\n          // to\n          // bootstrap(), which would override default pipes instead of extending them.\n          throw new Error('Cannot extend IterableDiffers without a parent injector');\n        }\n        return IterableDiffers.create(factories, parent);\n      },\n      // Dependency technically isn't optional, but we can provide a better error message this way.\n      deps: [[IterableDiffers, new SkipSelf(), new Optional()]]\n    };\n  }\n/**\n * @param {?} iterable\n * @return {?}\n */\nfind(iterable: any): IterableDifferFactory {\n    const /** @type {?} */ factory = this.factories.find(f => f.supports(iterable));\n    if (factory != null) {\n      return factory;\n    } else {\n      throw new Error(\n          `Cannot find a differ supporting object '${iterable}' of type '${getTypeNameForDebugging(iterable)}'`);\n    }\n  }\n}\n\nfunction IterableDiffers_tsickle_Closure_declarations() {\n/**\n * @deprecated v4.0.0 - Should be private\n * @type {?}\n */\nIterableDiffers.prototype.factories;\n}\n\n/**\n * @param {?} type\n * @return {?}\n */\nexport function getTypeNameForDebugging(type: any): string {\n  return type['name'] || typeof type;\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Optional, Provider, SkipSelf} from '../../di';\nimport {ChangeDetectorRef} from '../change_detector_ref';\n\n\n\n/**\n * A differ that tracks changes made to an object over time.\n *\n * @stable\n */\nexport interface KeyValueDiffer<K, V> {\n  /**\n   * Compute a difference between the previous state and the new `object` state.\n   *\n   * @param object containing the new value.\n   * @returns an object describing the difference. The return value is only valid until the next\n   * `diff()` invocation.\n   */\n  diff(object: Map<K, V>): KeyValueChanges<K, V>;\n\n  /**\n   * Compute a difference between the previous state and the new `object` state.\n   *\n   * @param object containing the new value.\n   * @returns an object describing the difference. The return value is only valid until the next\n   * `diff()` invocation.\n   */\n  diff(object: {[key: string]: V}): KeyValueChanges<string, V>;\n  // TODO(TS2.1): diff<KP extends string>(this: KeyValueDiffer<KP, V>, object: Record<KP, V>):\n  // KeyValueDiffer<KP, V>;\n}\n\n/**\n * An object describing the changes in the `Map` or `{[k:string]: string}` since last time\n * `KeyValueDiffer#diff()` was invoked.\n *\n * @stable\n */\nexport interface KeyValueChanges<K, V> {\n  /**\n   * Iterate over all changes. `KeyValueChangeRecord` will contain information about changes\n   * to each item.\n   */\n  forEachItem(fn: (r: KeyValueChangeRecord<K, V>) => void): void;\n\n  /**\n   * Iterate over changes in the order of original Map showing where the original items\n   * have moved.\n   */\n  forEachPreviousItem(fn: (r: KeyValueChangeRecord<K, V>) => void): void;\n\n  /**\n   * Iterate over all keys for which values have changed.\n   */\n  forEachChangedItem(fn: (r: KeyValueChangeRecord<K, V>) => void): void;\n\n  /**\n   * Iterate over all added items.\n   */\n  forEachAddedItem(fn: (r: KeyValueChangeRecord<K, V>) => void): void;\n\n  /**\n   * Iterate over all removed items.\n   */\n  forEachRemovedItem(fn: (r: KeyValueChangeRecord<K, V>) => void): void;\n}\n\n/**\n * Record representing the item change information.\n *\n * @stable\n */\nexport interface KeyValueChangeRecord<K, V> {\n  /**\n   * Current key in the Map.\n   */\n  readonly key: K;\n\n  /**\n   * Current value for the key or `null` if removed.\n   */\n  readonly currentValue: V|null;\n\n  /**\n   * Previous value for the key or `null` if added.\n   */\n  readonly previousValue: V|null;\n}\n\n/**\n * Provides a factory for {@link KeyValueDiffer}.\n *\n * @stable\n */\nexport interface KeyValueDifferFactory {\n  /**\n   * Test to see if the differ knows how to diff this kind of object.\n   */\n  supports(objects: any): boolean;\n\n  /**\n   * Create a `KeyValueDiffer`.\n   */\n  create<K, V>(): KeyValueDiffer<K, V>;\n\n  /**\n   * @deprecated v4.0.0 - ChangeDetectorRef is not used and is no longer a parameter\n   */\n  create<K, V>(_cdr?: ChangeDetectorRef): KeyValueDiffer<K, V>;\n}\n/**\n * A repository of different Map diffing strategies used by NgClass, NgStyle, and others.\n * \\@stable\n */\nexport class KeyValueDiffers {\n/**\n * @deprecated v4.0.0 - Should be private.\n */\nfactories: KeyValueDifferFactory[];\n/**\n * @param {?} factories\n */\nconstructor(factories: KeyValueDifferFactory[]) { this.factories = factories; }\n/**\n * @template S\n * @param {?} factories\n * @param {?=} parent\n * @return {?}\n */\nstatic create<S>(factories: KeyValueDifferFactory[], parent?: KeyValueDiffers): KeyValueDiffers {\n    if (parent) {\n      const /** @type {?} */ copied = parent.factories.slice();\n      factories = factories.concat(copied);\n    }\n    return new KeyValueDiffers(factories);\n  }\n/**\n * Takes an array of {\\@link KeyValueDifferFactory} and returns a provider used to extend the\n * inherited {\\@link KeyValueDiffers} instance with the provided factories and return a new\n * {\\@link KeyValueDiffers} instance.\n * \n * The following example shows how to extend an existing list of factories,\n * which will only be applied to the injector for this component and its children.\n * This step is all that's required to make a new {\\@link KeyValueDiffer} available.\n * \n * ### Example\n * \n * ```\n * \\@Component({ \n *   viewProviders: [\n *     KeyValueDiffers.extend([new ImmutableMapDiffer()])\n *   ]\n * })\n * ```\n * @template S\n * @param {?} factories\n * @return {?}\n */\nstatic extend<S>(factories: KeyValueDifferFactory[]): Provider {\n    return {\n      provide: KeyValueDiffers,\n      useFactory: (parent: KeyValueDiffers) => {\n        if (!parent) {\n          // Typically would occur when calling KeyValueDiffers.extend inside of dependencies passed\n          // to bootstrap(), which would override default pipes instead of extending them.\n          throw new Error('Cannot extend KeyValueDiffers without a parent injector');\n        }\n        return KeyValueDiffers.create(factories, parent);\n      },\n      // Dependency technically isn't optional, but we can provide a better error message this way.\n      deps: [[KeyValueDiffers, new SkipSelf(), new Optional()]]\n    };\n  }\n/**\n * @param {?} kv\n * @return {?}\n */\nfind(kv: any): KeyValueDifferFactory {\n    const /** @type {?} */ factory = this.factories.find(f => f.supports(kv));\n    if (factory) {\n      return factory;\n    }\n    throw new Error(`Cannot find a differ supporting object '${kv}'`);\n  }\n}\n\nfunction KeyValueDiffers_tsickle_Closure_declarations() {\n/**\n * @deprecated v4.0.0 - Should be private.\n * @type {?}\n */\nKeyValueDiffers.prototype.factories;\n}\n\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {DefaultIterableDifferFactory} from './differs/default_iterable_differ';\nimport {DefaultKeyValueDifferFactory} from './differs/default_keyvalue_differ';\nimport {IterableDifferFactory, IterableDiffers} from './differs/iterable_differs';\nimport {KeyValueDifferFactory, KeyValueDiffers} from './differs/keyvalue_differs';\n\nexport {SimpleChanges} from '../metadata/lifecycle_hooks';\nexport {SimpleChange, ValueUnwrapper, WrappedValue, devModeEqual} from './change_detection_util';\nexport {ChangeDetectorRef} from './change_detector_ref';\nexport {ChangeDetectionStrategy, ChangeDetectorStatus, isDefaultChangeDetectionStrategy} from './constants';\nexport {DefaultIterableDifferFactory} from './differs/default_iterable_differ';\nexport {DefaultIterableDiffer} from './differs/default_iterable_differ';\nexport {DefaultKeyValueDifferFactory} from './differs/default_keyvalue_differ';\nexport {CollectionChangeRecord, IterableChangeRecord, IterableChanges, IterableDiffer, IterableDifferFactory, IterableDiffers, NgIterable, TrackByFn, TrackByFunction} from './differs/iterable_differs';\nexport {KeyValueChangeRecord, KeyValueChanges, KeyValueDiffer, KeyValueDifferFactory, KeyValueDiffers} from './differs/keyvalue_differs';\nexport {PipeTransform} from './pipe_transform';\n/**\n * Structural diffing for `Object`s and `Map`s.\n */\nconst keyValDiff: KeyValueDifferFactory[] = [new DefaultKeyValueDifferFactory()];\n/**\n * Structural diffing for `Iterable` types such as `Array`s.\n */\nconst iterableDiff: IterableDifferFactory[] = [new DefaultIterableDifferFactory()];\n\nexport const /** @type {?} */ defaultIterableDiffers = new IterableDiffers(iterableDiff);\n\nexport const /** @type {?} */ defaultKeyValueDiffers = new KeyValueDiffers(keyValDiff);\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {PlatformRef, PlatformRef_, createPlatformFactory} from './application_ref';\nimport {PLATFORM_ID} from './application_tokens';\nimport {Console} from './console';\nimport {Provider} from './di';\nimport {Reflector, reflector} from './reflection/reflection';\nimport {TestabilityRegistry} from './testability/testability';\n/**\n * @return {?}\n */\nfunction _reflector(): Reflector {\n  return reflector;\n}\n\nconst /** @type {?} */ _CORE_PLATFORM_PROVIDERS: Provider[] = [\n  // Set a default platform name for platforms that don't set it explicitly.\n  {provide: PLATFORM_ID, useValue: 'unknown'},\n  PlatformRef_,\n  {provide: PlatformRef, useExisting: PlatformRef_},\n  {provide: Reflector, useFactory: _reflector, deps: []},\n  TestabilityRegistry,\n  Console,\n];\n/**\n * This platform has to be included in any other platform\n * \n * \\@experimental\n */\nexport const platformCore = createPlatformFactory(null, 'core', _CORE_PLATFORM_PROVIDERS);\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {InjectionToken} from '../di/injection_token';\n/**\n * \\@experimental i18n support is experimental.\n */\nexport const LOCALE_ID = new InjectionToken<string>('LocaleId');\n/**\n * \\@experimental i18n support is experimental.\n */\nexport const TRANSLATIONS = new InjectionToken<string>('Translations');\n/**\n * \\@experimental i18n support is experimental.\n */\nexport const TRANSLATIONS_FORMAT = new InjectionToken<string>('TranslationsFormat');\nexport type MissingTranslationStrategy = number;\nexport let MissingTranslationStrategy: any = {};\nMissingTranslationStrategy.Error = 0;\nMissingTranslationStrategy.Warning = 1;\nMissingTranslationStrategy.Ignore = 2;\nMissingTranslationStrategy[MissingTranslationStrategy.Error] = \"Error\";\nMissingTranslationStrategy[MissingTranslationStrategy.Warning] = \"Warning\";\nMissingTranslationStrategy[MissingTranslationStrategy.Ignore] = \"Ignore\";\n\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {ApplicationInitStatus} from './application_init';\nimport {ApplicationRef, ApplicationRef_} from './application_ref';\nimport {APP_ID_RANDOM_PROVIDER} from './application_tokens';\nimport {IterableDiffers, KeyValueDiffers, defaultIterableDiffers, defaultKeyValueDiffers} from './change_detection/change_detection';\nimport {Inject, Optional, SkipSelf} from './di/metadata';\nimport {LOCALE_ID} from './i18n/tokens';\nimport {Compiler} from './linker/compiler';\nimport {NgModule} from './metadata';\n/**\n * @return {?}\n */\nexport function _iterableDiffersFactory() {\n  return defaultIterableDiffers;\n}\n/**\n * @return {?}\n */\nexport function _keyValueDiffersFactory() {\n  return defaultKeyValueDiffers;\n}\n/**\n * @param {?=} locale\n * @return {?}\n */\nexport function _localeFactory(locale?: string): string {\n  return locale || 'en-US';\n}\n/**\n * This module includes the providers of \\@angular/core that are needed\n * to bootstrap components via `ApplicationRef`.\n * \n * \\@experimental\n */\nexport class ApplicationModule {\n/**\n * @param {?} appRef\n */\nconstructor(appRef: ApplicationRef) {}\nstatic decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  providers: [\n    ApplicationRef_,\n    {provide: ApplicationRef, useExisting: ApplicationRef_},\n    ApplicationInitStatus,\n    Compiler,\n    APP_ID_RANDOM_PROVIDER,\n    {provide: IterableDiffers, useFactory: _iterableDiffersFactory},\n    {provide: KeyValueDiffers, useFactory: _keyValueDiffersFactory},\n    {\n      provide: LOCALE_ID,\n      useFactory: _localeFactory,\n      deps: [[new Inject(LOCALE_ID), new Optional(), new SkipSelf()]]\n    },\n  ]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ApplicationRef, },\n];\n}\n\nfunction ApplicationModule_tsickle_Closure_declarations() {\n/** @type {?} */\nApplicationModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nApplicationModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","\nexport type SecurityContext = number;\nexport let SecurityContext: any = {};\nSecurityContext.NONE = 0;\nSecurityContext.HTML = 1;\nSecurityContext.STYLE = 2;\nSecurityContext.SCRIPT = 3;\nSecurityContext.URL = 4;\nSecurityContext.RESOURCE_URL = 5;\nSecurityContext[SecurityContext.NONE] = \"NONE\";\nSecurityContext[SecurityContext.HTML] = \"HTML\";\nSecurityContext[SecurityContext.STYLE] = \"STYLE\";\nSecurityContext[SecurityContext.SCRIPT] = \"SCRIPT\";\nSecurityContext[SecurityContext.URL] = \"URL\";\nSecurityContext[SecurityContext.RESOURCE_URL] = \"RESOURCE_URL\";\n\n/**\n * Sanitizer is used by the views to sanitize potentially dangerous values.\n * \n * \\@stable\n * @abstract\n */\nexport abstract class Sanitizer {\n/**\n * @abstract\n * @param {?} context\n * @param {?} value\n * @return {?}\n */\nsanitize(context: SecurityContext, value: {}|string|null) {}\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Injector} from '../di';\nimport {ErrorHandler} from '../error_handler';\nimport {NgModuleRef} from '../linker/ng_module_factory';\nimport {QueryList} from '../linker/query_list';\nimport {TemplateRef} from '../linker/template_ref';\nimport {ViewContainerRef} from '../linker/view_container_ref';\nimport {Renderer2, RendererFactory2, RendererType2} from '../render/api';\nimport {Sanitizer, SecurityContext} from '../security';\nimport {Type} from '../type';\n\n// -------------------------------------\n// Defs\n// -------------------------------------\n\n/**\n * Factory for ViewDefinitions/NgModuleDefinitions.\n * We use a function so we can reexeute it in case an error happens and use the given logger\n * function to log the error from the definition of the node, which is shown in all browser\n * logs.\n */\nexport interface DefinitionFactory<D extends Definition<any>> { (logger: NodeLogger): D; }\n\n/**\n * Function to call console.error at the right source location. This is an indirection\n * via another function as browser will log the location that actually called\n * `console.error`.\n */\nexport interface NodeLogger { (): () => void; }\n\nexport interface Definition<DF extends DefinitionFactory<any>> { factory: DF|null; }\n\nexport interface NgModuleDefinition extends Definition<NgModuleDefinitionFactory> {\n  providers: NgModuleProviderDef[];\n  providersByKey: {[tokenKey: string]: NgModuleProviderDef};\n}\n\nexport interface NgModuleDefinitionFactory extends DefinitionFactory<NgModuleDefinition> {}\n\nexport interface ViewDefinition extends Definition<ViewDefinitionFactory> {\n  flags: ViewFlags;\n  updateDirectives: ViewUpdateFn;\n  updateRenderer: ViewUpdateFn;\n  handleEvent: ViewHandleEventFn;\n  /**\n   * Order: Depth first.\n   * Especially providers are before elements / anchors.\n   */\n  nodes: NodeDef[];\n  /** aggregated NodeFlags for all nodes **/\n  nodeFlags: NodeFlags;\n  rootNodeFlags: NodeFlags;\n  lastRenderRootNode: NodeDef|null;\n  bindingCount: number;\n  outputCount: number;\n  /**\n   * Binary or of all query ids that are matched by one of the nodes.\n   * This includes query ids from templates as well.\n   * Used as a bloom filter.\n   */\n  nodeMatchedQueries: number;\n}\n\nexport interface ViewDefinitionFactory extends DefinitionFactory<ViewDefinition> {}\n\n\nexport interface ViewUpdateFn { (check: NodeCheckFn, view: ViewData): void; }\n\n// helper functions to create an overloaded function type.\nexport interface NodeCheckFn {\n  (view: ViewData, nodeIndex: number, argStyle: ArgumentType.Dynamic, values: any[]): any;\n\n  (view: ViewData, nodeIndex: number, argStyle: ArgumentType.Inline, v0?: any, v1?: any, v2?: any,\n   v3?: any, v4?: any, v5?: any, v6?: any, v7?: any, v8?: any, v9?: any): any;\n}\n\nexport const enum ArgumentType {Inline, Dynamic}\n\nexport interface ViewHandleEventFn {\n  (view: ViewData, nodeIndex: number, eventName: string, event: any): boolean;\n}\n\n/**\n * Bitmask for ViewDefinition.flags.\n */\nexport const enum ViewFlags {\n  None = 0,\n  OnPush = 1 << 1,\n}\n\n/**\n * A node definition in the view.\n *\n * Note: We use one type for all nodes so that loops that loop over all nodes\n * of a ViewDefinition stay monomorphic!\n */\nexport interface NodeDef {\n  flags: NodeFlags;\n  // Index of the node in view data and view definition (those are the same)\n  nodeIndex: number;\n  // Index of the node in the check functions\n  // Differ from nodeIndex when nodes are added or removed at runtime (ie after compilation)\n  checkIndex: number;\n  parent: NodeDef|null;\n  renderParent: NodeDef|null;\n  /** this is checked against NgContentDef.index to find matched nodes */\n  ngContentIndex: number|null;\n  /** number of transitive children */\n  childCount: number;\n  /** aggregated NodeFlags for all transitive children (does not include self) **/\n  childFlags: NodeFlags;\n  /** aggregated NodeFlags for all direct children (does not include self) **/\n  directChildFlags: NodeFlags;\n\n  bindingIndex: number;\n  bindings: BindingDef[];\n  bindingFlags: BindingFlags;\n  outputIndex: number;\n  outputs: OutputDef[];\n  /**\n   * references that the user placed on the element\n   */\n  references: {[refId: string]: QueryValueType};\n  /**\n   * ids and value types of all queries that are matched by this node.\n   */\n  matchedQueries: {[queryId: number]: QueryValueType};\n  /** Binary or of all matched query ids of this node. */\n  matchedQueryIds: number;\n  /**\n   * Binary or of all query ids that are matched by one of the children.\n   * This includes query ids from templates as well.\n   * Used as a bloom filter.\n   */\n  childMatchedQueries: number;\n  element: ElementDef|null;\n  provider: ProviderDef|null;\n  text: TextDef|null;\n  query: QueryDef|null;\n  ngContent: NgContentDef|null;\n}\n\n/**\n * Bitmask for NodeDef.flags.\n * Naming convention:\n * - `Type...`: flags that are mutually exclusive\n * - `Cat...`: union of multiple `Type...` (short for category).\n */\nexport const enum NodeFlags {\n  None = 0,\n  TypeElement = 1 << 0,\n  TypeText = 1 << 1,\n  ProjectedTemplate = 1 << 2,\n  CatRenderNode = TypeElement | TypeText,\n  TypeNgContent = 1 << 3,\n  TypePipe = 1 << 4,\n  TypePureArray = 1 << 5,\n  TypePureObject = 1 << 6,\n  TypePurePipe = 1 << 7,\n  CatPureExpression = TypePureArray | TypePureObject | TypePurePipe,\n  TypeValueProvider = 1 << 8,\n  TypeClassProvider = 1 << 9,\n  TypeFactoryProvider = 1 << 10,\n  TypeUseExistingProvider = 1 << 11,\n  LazyProvider = 1 << 12,\n  PrivateProvider = 1 << 13,\n  TypeDirective = 1 << 14,\n  Component = 1 << 15,\n  CatProviderNoDirective =\n      TypeValueProvider | TypeClassProvider | TypeFactoryProvider | TypeUseExistingProvider,\n  CatProvider = CatProviderNoDirective | TypeDirective,\n  OnInit = 1 << 16,\n  OnDestroy = 1 << 17,\n  DoCheck = 1 << 18,\n  OnChanges = 1 << 19,\n  AfterContentInit = 1 << 20,\n  AfterContentChecked = 1 << 21,\n  AfterViewInit = 1 << 22,\n  AfterViewChecked = 1 << 23,\n  EmbeddedViews = 1 << 24,\n  ComponentView = 1 << 25,\n  TypeContentQuery = 1 << 26,\n  TypeViewQuery = 1 << 27,\n  StaticQuery = 1 << 28,\n  DynamicQuery = 1 << 29,\n  CatQuery = TypeContentQuery | TypeViewQuery,\n\n  // mutually exclusive values...\n  Types = CatRenderNode | TypeNgContent | TypePipe | CatPureExpression | CatProvider | CatQuery\n}\n\nexport interface BindingDef {\n  flags: BindingFlags;\n  ns: string|null;\n  name: string|null;\n  nonMinifiedName: string|null;\n  securityContext: SecurityContext|null;\n  suffix: string|null;\n}\n\nexport const enum BindingFlags {\n  TypeElementAttribute = 1 << 0,\n  TypeElementClass = 1 << 1,\n  TypeElementStyle = 1 << 2,\n  TypeProperty = 1 << 3,\n  SyntheticProperty = 1 << 4,\n  SyntheticHostProperty = 1 << 5,\n  CatSyntheticProperty = SyntheticProperty | SyntheticHostProperty,\n\n  // mutually exclusive values...\n  Types = TypeElementAttribute | TypeElementClass | TypeElementStyle | TypeProperty\n}\n\nexport interface OutputDef {\n  type: OutputType;\n  target: 'window'|'document'|'body'|'component'|null;\n  eventName: string;\n  propName: string|null;\n}\n\nexport const enum OutputType {ElementOutput, DirectiveOutput}\n\nexport const enum QueryValueType {\n  ElementRef,\n  RenderElement,\n  TemplateRef,\n  ViewContainerRef,\n  Provider\n}\n\nexport interface ElementDef {\n  // set to null for `<ng-container>`\n  name: string|null;\n  ns: string|null;\n  /** ns, name, value */\n  attrs: [string, string, string][]|null;\n  template: ViewDefinition|null;\n  componentProvider: NodeDef|null;\n  componentRendererType: RendererType2|null;\n  // closure to allow recursive components\n  componentView: ViewDefinitionFactory|null;\n  /**\n   * visible public providers for DI in the view,\n   * as see from this element. This does not include private providers.\n   */\n  publicProviders: {[tokenKey: string]: NodeDef}|null;\n  /**\n   * same as visiblePublicProviders, but also includes private providers\n   * that are located on this element.\n   */\n  allProviders: {[tokenKey: string]: NodeDef}|null;\n  handleEvent: ElementHandleEventFn|null;\n}\n\nexport interface ElementHandleEventFn { (view: ViewData, eventName: string, event: any): boolean; }\n\nexport interface ProviderDef {\n  token: any;\n  value: any;\n  deps: DepDef[];\n}\n\nexport interface NgModuleProviderDef {\n  flags: NodeFlags;\n  index: number;\n  token: any;\n  value: any;\n  deps: DepDef[];\n}\n\nexport interface DepDef {\n  flags: DepFlags;\n  token: any;\n  tokenKey: string;\n}\n\n/**\n * Bitmask for DI flags\n */\nexport const enum DepFlags {\n  None = 0,\n  SkipSelf = 1 << 0,\n  Optional = 1 << 1,\n  Value = 2 << 2,\n}\n\nexport interface TextDef { prefix: string; }\n\nexport interface QueryDef {\n  id: number;\n  // variant of the id that can be used to check against NodeDef.matchedQueryIds, ...\n  filterId: number;\n  bindings: QueryBindingDef[];\n}\n\nexport interface QueryBindingDef {\n  propName: string;\n  bindingType: QueryBindingType;\n}\n\nexport const enum QueryBindingType {First, All}\n\nexport interface NgContentDef {\n  /**\n   * this index is checked against NodeDef.ngContentIndex to find the nodes\n   * that are matched by this ng-content.\n   * Note that a NodeDef with an ng-content can be reprojected, i.e.\n   * have a ngContentIndex on its own.\n   */\n  index: number;\n}\n\n// -------------------------------------\n// Data\n// -------------------------------------\n\nexport interface NgModuleData extends Injector, NgModuleRef<any> {\n  // Note: we are using the prefix _ as NgModuleData is an NgModuleRef and therefore directly\n  // exposed to the user.\n  _def: NgModuleDefinition;\n  _parent: Injector;\n  _providers: any[];\n}\n\n/**\n * View instance data.\n * Attention: Adding fields to this is performance sensitive!\n */\nexport interface ViewData {\n  def: ViewDefinition;\n  root: RootData;\n  renderer: Renderer2;\n  // index of component provider / anchor.\n  parentNodeDef: NodeDef|null;\n  parent: ViewData|null;\n  viewContainerParent: ViewData|null;\n  component: any;\n  context: any;\n  // Attention: Never loop over this, as this will\n  // create a polymorphic usage site.\n  // Instead: Always loop over ViewDefinition.nodes,\n  // and call the right accessor (e.g. `elementData`) based on\n  // the NodeType.\n  nodes: {[key: number]: NodeData};\n  state: ViewState;\n  oldValues: any[];\n  disposables: DisposableFn[]|null;\n}\n\n/**\n * Bitmask of states\n */\nexport const enum ViewState {\n  BeforeFirstCheck = 1 << 0,\n  FirstCheck = 1 << 1,\n  Attached = 1 << 2,\n  ChecksEnabled = 1 << 3,\n  IsProjectedView = 1 << 4,\n  CheckProjectedView = 1 << 5,\n  CheckProjectedViews = 1 << 6,\n  Destroyed = 1 << 7,\n\n  CatDetectChanges = Attached | ChecksEnabled,\n  CatInit = BeforeFirstCheck | CatDetectChanges\n}\n\nexport interface DisposableFn { (): void; }\n/**\n * Node instance data.\n * \n * We have a separate type per NodeType to save memory\n * (TextData | ElementData | ProviderData | PureExpressionData | QueryList<any>)\n * \n * To keep our code monomorphic,\n * we prohibit using `NodeData` directly but enforce the use of accessors (`asElementData`, ...).\n * This way, no usage site can get a `NodeData` from view.nodes and then use it for different\n * purposes.\n */\nexport class NodeData {\nprivate __brand: any; }\n\nfunction NodeData_tsickle_Closure_declarations() {\n/** @type {?} */\nNodeData.prototype.__brand;\n}\n\n\n/**\n * Data for an instantiated NodeType.Text.\n *\n * Attention: Adding fields to this is performance sensitive!\n */\nexport interface TextData { renderText: any; }\n/**\n * Accessor for view.nodes, enforcing that every usage site stays monomorphic.\n * @param {?} view\n * @param {?} index\n * @return {?}\n */\nexport function asTextData(view: ViewData, index: number): TextData {\n  return /** @type {?} */(( <any>view.nodes[index]));\n}\n\n/**\n * Data for an instantiated NodeType.Element.\n *\n * Attention: Adding fields to this is performance sensitive!\n */\nexport interface ElementData {\n  renderElement: any;\n  componentView: ViewData;\n  viewContainer: ViewContainerData|null;\n  template: TemplateData;\n}\n\nexport interface ViewContainerData extends ViewContainerRef {\n  // Note: we are using the prefix _ as ViewContainerData is a ViewContainerRef and therefore\n  // directly\n  // exposed to the user.\n  _embeddedViews: ViewData[];\n}\n\nexport interface TemplateData extends TemplateRef<any> {\n  // views that have been created from the template\n  // of this element,\n  // but inserted into the embeddedViews of another element.\n  // By default, this is undefined.\n  // Note: we are using the prefix _ as TemplateData is a TemplateRef and therefore directly\n  // exposed to the user.\n  _projectedViews: ViewData[];\n}\n/**\n * Accessor for view.nodes, enforcing that every usage site stays monomorphic.\n * @param {?} view\n * @param {?} index\n * @return {?}\n */\nexport function asElementData(view: ViewData, index: number): ElementData {\n  return /** @type {?} */(( <any>view.nodes[index]));\n}\n\n/**\n * Data for an instantiated NodeType.Provider.\n *\n * Attention: Adding fields to this is performance sensitive!\n */\nexport interface ProviderData { instance: any; }\n/**\n * Accessor for view.nodes, enforcing that every usage site stays monomorphic.\n * @param {?} view\n * @param {?} index\n * @return {?}\n */\nexport function asProviderData(view: ViewData, index: number): ProviderData {\n  return /** @type {?} */(( <any>view.nodes[index]));\n}\n\n/**\n * Data for an instantiated NodeType.PureExpression.\n *\n * Attention: Adding fields to this is performance sensitive!\n */\nexport interface PureExpressionData { value: any; }\n/**\n * Accessor for view.nodes, enforcing that every usage site stays monomorphic.\n * @param {?} view\n * @param {?} index\n * @return {?}\n */\nexport function asPureExpressionData(view: ViewData, index: number): PureExpressionData {\n  return /** @type {?} */(( <any>view.nodes[index]));\n}\n/**\n * Accessor for view.nodes, enforcing that every usage site stays monomorphic.\n * @param {?} view\n * @param {?} index\n * @return {?}\n */\nexport function asQueryList(view: ViewData, index: number): QueryList<any> {\n  return /** @type {?} */(( <any>view.nodes[index]));\n}\n\nexport interface RootData {\n  injector: Injector;\n  ngModule: NgModuleRef<any>;\n  projectableNodes: any[][];\n  selectorOrNode: any;\n  renderer: Renderer2;\n  rendererFactory: RendererFactory2;\n  errorHandler: ErrorHandler;\n  sanitizer: Sanitizer;\n}\n/**\n * @abstract\n */\nexport abstract class DebugContext {\n/**\n * @abstract\n * @return {?}\n */\nview() {}\n/**\n * @abstract\n * @return {?}\n */\nnodeIndex() {}\n/**\n * @abstract\n * @return {?}\n */\ninjector() {}\n/**\n * @abstract\n * @return {?}\n */\ncomponent() {}\n/**\n * @abstract\n * @return {?}\n */\nproviderTokens() {}\n/**\n * @abstract\n * @return {?}\n */\nreferences() {}\n/**\n * @abstract\n * @return {?}\n */\ncontext() {}\n/**\n * @abstract\n * @return {?}\n */\ncomponentRenderElement() {}\n/**\n * @abstract\n * @return {?}\n */\nrenderNode() {}\n/**\n * @abstract\n * @param {?} console\n * @param {...?} values\n * @return {?}\n */\nlogError(console: Console, ...values: any[]) {}\n}\n\n// -------------------------------------\n// Other\n// -------------------------------------\n\nexport const enum CheckType {CheckAndUpdate, CheckNoChanges}\n\nexport interface ProviderOverride {\n  token: any;\n  flags: NodeFlags;\n  value: any;\n  deps: ([DepFlags, any]|any)[];\n  deprecatedBehavior: boolean;\n}\n\nexport interface Services {\n  setCurrentNode(view: ViewData, nodeIndex: number): void;\n  createRootView(\n      injector: Injector, projectableNodes: any[][], rootSelectorOrNode: string|any,\n      def: ViewDefinition, ngModule: NgModuleRef<any>, context?: any): ViewData;\n  createEmbeddedView(parent: ViewData, anchorDef: NodeDef, viewDef: ViewDefinition, context?: any):\n      ViewData;\n  createComponentView(\n      parentView: ViewData, nodeDef: NodeDef, viewDef: ViewDefinition, hostElement: any): ViewData;\n  createNgModuleRef(\n      moduleType: Type<any>, parent: Injector, bootstrapComponents: Type<any>[],\n      def: NgModuleDefinition): NgModuleRef<any>;\n  overrideProvider(override: ProviderOverride): void;\n  clearProviderOverrides(): void;\n  checkAndUpdateView(view: ViewData): void;\n  checkNoChangesView(view: ViewData): void;\n  destroyView(view: ViewData): void;\n  resolveDep(\n      view: ViewData, elDef: NodeDef|null, allowPrivateServices: boolean, depDef: DepDef,\n      notFoundValue?: any): any;\n  createDebugContext(view: ViewData, nodeIndex: number): DebugContext;\n  handleEvent: ViewHandleEventFn;\n  updateDirectives: (view: ViewData, checkType: CheckType) => void;\n  updateRenderer: (view: ViewData, checkType: CheckType) => void;\n  dirtyParentQueries: (view: ViewData) => void;\n}\n/**\n * This object is used to prevent cycles in the source files and to have a place where\n * debug mode can hook it. It is lazily filled when `isDevMode` is known.\n */\nexport const Services: Services = {\n  setCurrentNode: undefined !,\n  createRootView: undefined !,\n  createEmbeddedView: undefined !,\n  createComponentView: undefined !,\n  createNgModuleRef: undefined !,\n  overrideProvider: undefined !,\n  clearProviderOverrides: undefined !,\n  checkAndUpdateView: undefined !,\n  checkNoChangesView: undefined !,\n  destroyView: undefined !,\n  resolveDep: undefined !,\n  createDebugContext: undefined !,\n  handleEvent: undefined !,\n  updateDirectives: undefined !,\n  updateRenderer: undefined !,\n  dirtyParentQueries: undefined !,\n};\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {ERROR_DEBUG_CONTEXT, ERROR_LOGGER, getDebugContext} from '../errors';\nimport {DebugContext, ViewState} from './types';\n/**\n * @param {?} context\n * @param {?} oldValue\n * @param {?} currValue\n * @param {?} isFirstCheck\n * @return {?}\n */\nexport function expressionChangedAfterItHasBeenCheckedError(\n    context: DebugContext, oldValue: any, currValue: any, isFirstCheck: boolean): Error {\n  let /** @type {?} */ msg =\n      `ExpressionChangedAfterItHasBeenCheckedError: Expression has changed after it was checked. Previous value: '${oldValue}'. Current value: '${currValue}'.`;\n  if (isFirstCheck) {\n    msg +=\n        ` It seems like the view has been created after its parent and its children have been dirty checked.` +\n        ` Has it been created in a change detection hook ?`;\n  }\n  return viewDebugError(msg, context);\n}\n/**\n * @param {?} err\n * @param {?} context\n * @return {?}\n */\nexport function viewWrappedDebugError(err: any, context: DebugContext): Error {\n  if (!(err instanceof Error)) {\n    // errors that are not Error instances don't have a stack,\n    // so it is ok to wrap them into a new Error object...\n    err = new Error(err.toString());\n  }\n  _addDebugContext(err, context);\n  return err;\n}\n/**\n * @param {?} msg\n * @param {?} context\n * @return {?}\n */\nexport function viewDebugError(msg: string, context: DebugContext): Error {\n  const /** @type {?} */ err = new Error(msg);\n  _addDebugContext(err, context);\n  return err;\n}\n/**\n * @param {?} err\n * @param {?} context\n * @return {?}\n */\nfunction _addDebugContext(err: Error, context: DebugContext) {\n  ( /** @type {?} */((err as any)))[ERROR_DEBUG_CONTEXT] = context;\n  ( /** @type {?} */((err as any)))[ERROR_LOGGER] = context.logError.bind(context);\n}\n/**\n * @param {?} err\n * @return {?}\n */\nexport function isViewDebugError(err: Error): boolean {\n  return !!getDebugContext(err);\n}\n/**\n * @param {?} action\n * @return {?}\n */\nexport function viewDestroyedError(action: string): Error {\n  return new Error(`ViewDestroyedError: Attempt to use a destroyed view: ${action}`);\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {WrappedValue, devModeEqual} from '../change_detection/change_detection';\nimport {ViewEncapsulation} from '../metadata/view';\nimport {RendererType2} from '../render/api';\nimport {looseIdentical, stringify} from '../util';\n\nimport {expressionChangedAfterItHasBeenCheckedError} from './errors';\nimport {BindingDef, BindingFlags, Definition, DefinitionFactory, DepDef, DepFlags, ElementData, NodeDef, NodeFlags, QueryValueType, Services, ViewData, ViewDefinition, ViewDefinitionFactory, ViewFlags, ViewState, asElementData, asTextData} from './types';\n\nexport const /** @type {?} */ NOOP: any = () => {};\n\nconst /** @type {?} */ _tokenKeyCache = new Map<any, string>();\n/**\n * @param {?} token\n * @return {?}\n */\nexport function tokenKey(token: any): string {\n  let /** @type {?} */ key = _tokenKeyCache.get(token);\n  if (!key) {\n    key = stringify(token) + '_' + _tokenKeyCache.size;\n    _tokenKeyCache.set(token, key);\n  }\n  return key;\n}\n/**\n * @param {?} view\n * @param {?} nodeIdx\n * @param {?} bindingIdx\n * @param {?} value\n * @return {?}\n */\nexport function unwrapValue(view: ViewData, nodeIdx: number, bindingIdx: number, value: any): any {\n  if (value instanceof WrappedValue) {\n    value = value.wrapped;\n    let /** @type {?} */ globalBindingIdx = view.def.nodes[nodeIdx].bindingIndex + bindingIdx;\n    let /** @type {?} */ oldValue = view.oldValues[globalBindingIdx];\n    if (oldValue instanceof WrappedValue) {\n      oldValue = oldValue.wrapped;\n    }\n    view.oldValues[globalBindingIdx] = new WrappedValue(oldValue);\n  }\n  return value;\n}\n\nconst /** @type {?} */ UNDEFINED_RENDERER_TYPE_ID = '$$undefined';\nconst /** @type {?} */ EMPTY_RENDERER_TYPE_ID = '$$empty';\n/**\n * @param {?} values\n * @return {?}\n */\nexport function createRendererType2(values: {\n  styles: (string | any[])[],\n  encapsulation: ViewEncapsulation,\n  data: {[kind: string]: any[]}\n}): RendererType2 {\n  return {\n    id: UNDEFINED_RENDERER_TYPE_ID,\n    styles: values.styles,\n    encapsulation: values.encapsulation,\n    data: values.data\n  };\n}\n\nlet /** @type {?} */ _renderCompCount = 0;\n/**\n * @param {?=} type\n * @return {?}\n */\nexport function resolveRendererType2(type?: RendererType2 | null): RendererType2|null {\n  if (type && type.id === UNDEFINED_RENDERER_TYPE_ID) {\n    // first time we see this RendererType2. Initialize it...\n    const /** @type {?} */ isFilled =\n        ((type.encapsulation != null && type.encapsulation !== ViewEncapsulation.None) ||\n         type.styles.length || Object.keys(type.data).length);\n    if (isFilled) {\n      type.id = `c${_renderCompCount++}`;\n    } else {\n      type.id = EMPTY_RENDERER_TYPE_ID;\n    }\n  }\n  if (type && type.id === EMPTY_RENDERER_TYPE_ID) {\n    type = null;\n  }\n  return type || null;\n}\n/**\n * @param {?} view\n * @param {?} def\n * @param {?} bindingIdx\n * @param {?} value\n * @return {?}\n */\nexport function checkBinding(\n    view: ViewData, def: NodeDef, bindingIdx: number, value: any): boolean {\n  const /** @type {?} */ oldValues = view.oldValues;\n  if ((view.state & ViewState.FirstCheck) ||\n      !looseIdentical(oldValues[def.bindingIndex + bindingIdx], value)) {\n    return true;\n  }\n  return false;\n}\n/**\n * @param {?} view\n * @param {?} def\n * @param {?} bindingIdx\n * @param {?} value\n * @return {?}\n */\nexport function checkAndUpdateBinding(\n    view: ViewData, def: NodeDef, bindingIdx: number, value: any): boolean {\n  if (checkBinding(view, def, bindingIdx, value)) {\n    view.oldValues[def.bindingIndex + bindingIdx] = value;\n    return true;\n  }\n  return false;\n}\n/**\n * @param {?} view\n * @param {?} def\n * @param {?} bindingIdx\n * @param {?} value\n * @return {?}\n */\nexport function checkBindingNoChanges(\n    view: ViewData, def: NodeDef, bindingIdx: number, value: any) {\n  const /** @type {?} */ oldValue = view.oldValues[def.bindingIndex + bindingIdx];\n  if ((view.state & ViewState.BeforeFirstCheck) || !devModeEqual(oldValue, value)) {\n    throw expressionChangedAfterItHasBeenCheckedError(\n        Services.createDebugContext(view, def.nodeIndex), oldValue, value,\n        (view.state & ViewState.BeforeFirstCheck) !== 0);\n  }\n}\n/**\n * @param {?} view\n * @return {?}\n */\nexport function markParentViewsForCheck(view: ViewData) {\n  let /** @type {?} */ currView: ViewData|null = view;\n  while (currView) {\n    if (currView.def.flags & ViewFlags.OnPush) {\n      currView.state |= ViewState.ChecksEnabled;\n    }\n    currView = currView.viewContainerParent || currView.parent;\n  }\n}\n/**\n * @param {?} view\n * @param {?} endView\n * @return {?}\n */\nexport function markParentViewsForCheckProjectedViews(view: ViewData, endView: ViewData) {\n  let /** @type {?} */ currView: ViewData|null = view;\n  while (currView && currView !== endView) {\n    currView.state |= ViewState.CheckProjectedViews;\n    currView = currView.viewContainerParent || currView.parent;\n  }\n}\n/**\n * @param {?} view\n * @param {?} nodeIndex\n * @param {?} eventName\n * @param {?} event\n * @return {?}\n */\nexport function dispatchEvent(\n    view: ViewData, nodeIndex: number, eventName: string, event: any): boolean {\n  const /** @type {?} */ nodeDef = view.def.nodes[nodeIndex];\n  const /** @type {?} */ startView =\n      nodeDef.flags & NodeFlags.ComponentView ? asElementData(view, nodeIndex).componentView : view;\n  markParentViewsForCheck(startView);\n  return Services.handleEvent(view, nodeIndex, eventName, event);\n}\n/**\n * @param {?} view\n * @return {?}\n */\nexport function declaredViewContainer(view: ViewData): ElementData|null {\n  if (view.parent) {\n    const /** @type {?} */ parentView = view.parent;\n    return asElementData(parentView, /** @type {?} */(( view.parentNodeDef)).nodeIndex);\n  }\n  return null;\n}\n/**\n * for component views, this is the host element.\n * for embedded views, this is the index of the parent node\n * that contains the view container.\n * @param {?} view\n * @return {?}\n */\nexport function viewParentEl(view: ViewData): NodeDef|null {\n  const /** @type {?} */ parentView = view.parent;\n  if (parentView) {\n    return /** @type {?} */(( view.parentNodeDef)).parent;\n  } else {\n    return null;\n  }\n}\n/**\n * @param {?} view\n * @param {?} def\n * @return {?}\n */\nexport function renderNode(view: ViewData, def: NodeDef): any {\n  switch (def.flags & NodeFlags.Types) {\n    case NodeFlags.TypeElement:\n      return asElementData(view, def.nodeIndex).renderElement;\n    case NodeFlags.TypeText:\n      return asTextData(view, def.nodeIndex).renderText;\n  }\n}\n/**\n * @param {?} target\n * @param {?} name\n * @return {?}\n */\nexport function elementEventFullName(target: string | null, name: string): string {\n  return target ? `${target}:${name}` : name;\n}\n/**\n * @param {?} view\n * @return {?}\n */\nexport function isComponentView(view: ViewData): boolean {\n  return !!view.parent && !!( /** @type {?} */((view.parentNodeDef)).flags & NodeFlags.Component);\n}\n/**\n * @param {?} view\n * @return {?}\n */\nexport function isEmbeddedView(view: ViewData): boolean {\n  return !!view.parent && !( /** @type {?} */((view.parentNodeDef)).flags & NodeFlags.Component);\n}\n/**\n * @param {?} queryId\n * @return {?}\n */\nexport function filterQueryId(queryId: number): number {\n  return 1 << (queryId % 32);\n}\n/**\n * @param {?} matchedQueriesDsl\n * @return {?}\n */\nexport function splitMatchedQueriesDsl(\n    matchedQueriesDsl: [string | number, QueryValueType][] | null): {\n  matchedQueries: {[queryId: string]: QueryValueType},\n  references: {[refId: string]: QueryValueType},\n  matchedQueryIds: number\n} {\n  const /** @type {?} */ matchedQueries: {[queryId: string]: QueryValueType} = {};\n  let /** @type {?} */ matchedQueryIds = 0;\n  const /** @type {?} */ references: {[refId: string]: QueryValueType} = {};\n  if (matchedQueriesDsl) {\n    matchedQueriesDsl.forEach(([queryId, valueType]) => {\n      if (typeof queryId === 'number') {\n        matchedQueries[queryId] = valueType;\n        matchedQueryIds |= filterQueryId(queryId);\n      } else {\n        references[queryId] = valueType;\n      }\n    });\n  }\n  return {matchedQueries, references, matchedQueryIds};\n}\n/**\n * @param {?} deps\n * @return {?}\n */\nexport function splitDepsDsl(deps: ([DepFlags, any] | any)[]): DepDef[] {\n  return deps.map(value => {\n    let /** @type {?} */ token: any;\n    let /** @type {?} */ flags: DepFlags;\n    if (Array.isArray(value)) {\n      [flags, token] = value;\n    } else {\n      flags = DepFlags.None;\n      token = value;\n    }\n    return {flags, token, tokenKey: tokenKey(token)};\n  });\n}\n/**\n * @param {?} view\n * @param {?} renderHost\n * @param {?} def\n * @return {?}\n */\nexport function getParentRenderElement(view: ViewData, renderHost: any, def: NodeDef): any {\n  let /** @type {?} */ renderParent = def.renderParent;\n  if (renderParent) {\n    if ((renderParent.flags & NodeFlags.TypeElement) === 0 ||\n        (renderParent.flags & NodeFlags.ComponentView) === 0 ||\n        ( /** @type {?} */((renderParent.element)).componentRendererType && /** @type {?} */(( /** @type {?} */((\n         renderParent.element)).componentRendererType)).encapsulation ===\n             ViewEncapsulation.Native)) {\n      // only children of non components, or children of components with native encapsulation should\n      // be attached.\n      return asElementData(view, /** @type {?} */(( def.renderParent)).nodeIndex).renderElement;\n    }\n  } else {\n    return renderHost;\n  }\n}\n\nconst /** @type {?} */ DEFINITION_CACHE = new WeakMap<any, Definition<any>>();\n/**\n * @template D\n * @param {?} factory\n * @return {?}\n */\nexport function resolveDefinition<D extends Definition<any>>(factory: DefinitionFactory<D>): D {\n  let /** @type {?} */ value = /** @type {?} */(( /** @type {?} */(( DEFINITION_CACHE.get(factory)))as D));\n  if (!value) {\n    value = factory(() => NOOP);\n    value.factory = factory;\n    DEFINITION_CACHE.set(factory, value);\n  }\n  return value;\n}\n/**\n * @param {?} view\n * @return {?}\n */\nexport function rootRenderNodes(view: ViewData): any[] {\n  const /** @type {?} */ renderNodes: any[] = [];\n  visitRootRenderNodes(view, RenderNodeAction.Collect, undefined, undefined, renderNodes);\n  return renderNodes;\n}\n\nexport const enum RenderNodeAction {Collect, AppendChild, InsertBefore, RemoveChild}\n/**\n * @param {?} view\n * @param {?} action\n * @param {?} parentNode\n * @param {?} nextSibling\n * @param {?=} target\n * @return {?}\n */\nexport function visitRootRenderNodes(\n    view: ViewData, action: RenderNodeAction, parentNode: any, nextSibling: any, target?: any[]) {\n  // We need to re-compute the parent node in case the nodes have been moved around manually\n  if (action === RenderNodeAction.RemoveChild) {\n    parentNode = view.renderer.parentNode(renderNode(view, /** @type {?} */(( view.def.lastRenderRootNode))));\n  }\n  visitSiblingRenderNodes(\n      view, action, 0, view.def.nodes.length - 1, parentNode, nextSibling, target);\n}\n/**\n * @param {?} view\n * @param {?} action\n * @param {?} startIndex\n * @param {?} endIndex\n * @param {?} parentNode\n * @param {?} nextSibling\n * @param {?=} target\n * @return {?}\n */\nexport function visitSiblingRenderNodes(\n    view: ViewData, action: RenderNodeAction, startIndex: number, endIndex: number, parentNode: any,\n    nextSibling: any, target?: any[]) {\n  for (let /** @type {?} */ i = startIndex; i <= endIndex; i++) {\n    const /** @type {?} */ nodeDef = view.def.nodes[i];\n    if (nodeDef.flags & (NodeFlags.TypeElement | NodeFlags.TypeText | NodeFlags.TypeNgContent)) {\n      visitRenderNode(view, nodeDef, action, parentNode, nextSibling, target);\n    }\n    // jump to next sibling\n    i += nodeDef.childCount;\n  }\n}\n/**\n * @param {?} view\n * @param {?} ngContentIndex\n * @param {?} action\n * @param {?} parentNode\n * @param {?} nextSibling\n * @param {?=} target\n * @return {?}\n */\nexport function visitProjectedRenderNodes(\n    view: ViewData, ngContentIndex: number, action: RenderNodeAction, parentNode: any,\n    nextSibling: any, target?: any[]) {\n  let /** @type {?} */ compView: ViewData|null = view;\n  while (compView && !isComponentView(compView)) {\n    compView = compView.parent;\n  }\n  const /** @type {?} */ hostView = /** @type {?} */(( compView)).parent;\n  const /** @type {?} */ hostElDef = viewParentEl( /** @type {?} */((compView)));\n  const /** @type {?} */ startIndex = /** @type {?} */(( hostElDef)).nodeIndex + 1;\n  const /** @type {?} */ endIndex = /** @type {?} */(( hostElDef)).nodeIndex + /** @type {?} */(( hostElDef)).childCount;\n  for (let /** @type {?} */ i = startIndex; i <= endIndex; i++) {\n    const /** @type {?} */ nodeDef = /** @type {?} */(( hostView)).def.nodes[i];\n    if (nodeDef.ngContentIndex === ngContentIndex) {\n      visitRenderNode( /** @type {?} */((hostView)), nodeDef, action, parentNode, nextSibling, target);\n    }\n    // jump to next sibling\n    i += nodeDef.childCount;\n  }\n  if (! /** @type {?} */((hostView)).parent) {\n    // a root view\n    const /** @type {?} */ projectedNodes = view.root.projectableNodes[ngContentIndex];\n    if (projectedNodes) {\n      for (let /** @type {?} */ i = 0; i < projectedNodes.length; i++) {\n        execRenderNodeAction(view, projectedNodes[i], action, parentNode, nextSibling, target);\n      }\n    }\n  }\n}\n/**\n * @param {?} view\n * @param {?} nodeDef\n * @param {?} action\n * @param {?} parentNode\n * @param {?} nextSibling\n * @param {?=} target\n * @return {?}\n */\nfunction visitRenderNode(\n    view: ViewData, nodeDef: NodeDef, action: RenderNodeAction, parentNode: any, nextSibling: any,\n    target?: any[]) {\n  if (nodeDef.flags & NodeFlags.TypeNgContent) {\n    visitProjectedRenderNodes(\n        view, /** @type {?} */(( nodeDef.ngContent)).index, action, parentNode, nextSibling, target);\n  } else {\n    const /** @type {?} */ rn = renderNode(view, nodeDef);\n    if (action === RenderNodeAction.RemoveChild && (nodeDef.flags & NodeFlags.ComponentView) &&\n        (nodeDef.bindingFlags & BindingFlags.CatSyntheticProperty)) {\n      // Note: we might need to do both actions.\n      if (nodeDef.bindingFlags & (BindingFlags.SyntheticProperty)) {\n        execRenderNodeAction(view, rn, action, parentNode, nextSibling, target);\n      }\n      if (nodeDef.bindingFlags & (BindingFlags.SyntheticHostProperty)) {\n        const /** @type {?} */ compView = asElementData(view, nodeDef.nodeIndex).componentView;\n        execRenderNodeAction(compView, rn, action, parentNode, nextSibling, target);\n      }\n    } else {\n      execRenderNodeAction(view, rn, action, parentNode, nextSibling, target);\n    }\n    if (nodeDef.flags & NodeFlags.EmbeddedViews) {\n      const /** @type {?} */ embeddedViews = /** @type {?} */(( asElementData(view, nodeDef.nodeIndex).viewContainer))._embeddedViews;\n      for (let /** @type {?} */ k = 0; k < embeddedViews.length; k++) {\n        visitRootRenderNodes(embeddedViews[k], action, parentNode, nextSibling, target);\n      }\n    }\n    if (nodeDef.flags & NodeFlags.TypeElement && ! /** @type {?} */((nodeDef.element)).name) {\n      visitSiblingRenderNodes(\n          view, action, nodeDef.nodeIndex + 1, nodeDef.nodeIndex + nodeDef.childCount, parentNode,\n          nextSibling, target);\n    }\n  }\n}\n/**\n * @param {?} view\n * @param {?} renderNode\n * @param {?} action\n * @param {?} parentNode\n * @param {?} nextSibling\n * @param {?=} target\n * @return {?}\n */\nfunction execRenderNodeAction(\n    view: ViewData, renderNode: any, action: RenderNodeAction, parentNode: any, nextSibling: any,\n    target?: any[]) {\n  const /** @type {?} */ renderer = view.renderer;\n  switch (action) {\n    case RenderNodeAction.AppendChild:\n      renderer.appendChild(parentNode, renderNode);\n      break;\n    case RenderNodeAction.InsertBefore:\n      renderer.insertBefore(parentNode, renderNode, nextSibling);\n      break;\n    case RenderNodeAction.RemoveChild:\n      renderer.removeChild(parentNode, renderNode);\n      break;\n    case RenderNodeAction.Collect: /** @type {?} */((\n      target)).push(renderNode);\n      break;\n  }\n}\n\nconst /** @type {?} */ NS_PREFIX_RE = /^:([^:]+):(.+)$/;\n/**\n * @param {?} name\n * @return {?}\n */\nexport function splitNamespace(name: string): string[] {\n  if (name[0] === ':') {\n    const /** @type {?} */ match = /** @type {?} */(( name.match(NS_PREFIX_RE)));\n    return [match[1], match[2]];\n  }\n  return ['', name];\n}\n/**\n * @param {?} bindings\n * @return {?}\n */\nexport function calcBindingFlags(bindings: BindingDef[]): BindingFlags {\n  let /** @type {?} */ flags = 0;\n  for (let /** @type {?} */ i = 0; i < bindings.length; i++) {\n    flags |= bindings[i].flags;\n  }\n  return flags;\n}\n/**\n * @param {?} valueCount\n * @param {?} constAndInterp\n * @return {?}\n */\nexport function interpolate(valueCount: number, constAndInterp: string[]): string {\n  let /** @type {?} */ result = '';\n  for (let /** @type {?} */ i = 0; i < valueCount * 2; i = i + 2) {\n    result = result + constAndInterp[i] + _toStringWithNull(constAndInterp[i + 1]);\n  }\n  return result + constAndInterp[valueCount * 2];\n}\n/**\n * @param {?} valueCount\n * @param {?} c0\n * @param {?} a1\n * @param {?} c1\n * @param {?=} a2\n * @param {?=} c2\n * @param {?=} a3\n * @param {?=} c3\n * @param {?=} a4\n * @param {?=} c4\n * @param {?=} a5\n * @param {?=} c5\n * @param {?=} a6\n * @param {?=} c6\n * @param {?=} a7\n * @param {?=} c7\n * @param {?=} a8\n * @param {?=} c8\n * @param {?=} a9\n * @param {?=} c9\n * @return {?}\n */\nexport function inlineInterpolate(\n    valueCount: number, c0: string, a1: any, c1: string, a2?: any, c2?: string, a3?: any,\n    c3?: string, a4?: any, c4?: string, a5?: any, c5?: string, a6?: any, c6?: string, a7?: any,\n    c7?: string, a8?: any, c8?: string, a9?: any, c9?: string): string {\n  switch (valueCount) {\n    case 1:\n      return c0 + _toStringWithNull(a1) + c1;\n    case 2:\n      return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2;\n    case 3:\n      return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) +\n          c3;\n    case 4:\n      return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) +\n          c3 + _toStringWithNull(a4) + c4;\n    case 5:\n      return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) +\n          c3 + _toStringWithNull(a4) + c4 + _toStringWithNull(a5) + c5;\n    case 6:\n      return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) +\n          c3 + _toStringWithNull(a4) + c4 + _toStringWithNull(a5) + c5 + _toStringWithNull(a6) + c6;\n    case 7:\n      return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) +\n          c3 + _toStringWithNull(a4) + c4 + _toStringWithNull(a5) + c5 + _toStringWithNull(a6) +\n          c6 + _toStringWithNull(a7) + c7;\n    case 8:\n      return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) +\n          c3 + _toStringWithNull(a4) + c4 + _toStringWithNull(a5) + c5 + _toStringWithNull(a6) +\n          c6 + _toStringWithNull(a7) + c7 + _toStringWithNull(a8) + c8;\n    case 9:\n      return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) +\n          c3 + _toStringWithNull(a4) + c4 + _toStringWithNull(a5) + c5 + _toStringWithNull(a6) +\n          c6 + _toStringWithNull(a7) + c7 + _toStringWithNull(a8) + c8 + _toStringWithNull(a9) + c9;\n    default:\n      throw new Error(`Does not support more than 9 expressions`);\n  }\n}\n/**\n * @param {?} v\n * @return {?}\n */\nfunction _toStringWithNull(v: any): string {\n  return v != null ? v.toString() : '';\n}\n\nexport const /** @type {?} */ EMPTY_ARRAY: any[] = [];\nexport const /** @type {?} */ EMPTY_MAP: {[key: string]: any} = {};\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {ApplicationRef} from '../application_ref';\nimport {ChangeDetectorRef} from '../change_detection/change_detection';\nimport {Injector} from '../di/injector';\nimport {ComponentFactory, ComponentRef} from '../linker/component_factory';\nimport {ComponentFactoryBoundToModule, ComponentFactoryResolver} from '../linker/component_factory_resolver';\nimport {ElementRef} from '../linker/element_ref';\nimport {InternalNgModuleRef, NgModuleRef} from '../linker/ng_module_factory';\nimport {TemplateRef} from '../linker/template_ref';\nimport {ViewContainerRef} from '../linker/view_container_ref';\nimport {EmbeddedViewRef, InternalViewRef, ViewRef} from '../linker/view_ref';\nimport {Renderer as RendererV1, Renderer2} from '../render/api';\nimport {Type} from '../type';\nimport {stringify} from '../util';\nimport {VERSION} from '../version';\n\nimport {callNgModuleLifecycle, initNgModule, resolveNgModuleDep} from './ng_module';\nimport {DepFlags, ElementData, NgModuleData, NgModuleDefinition, NodeDef, NodeFlags, Services, TemplateData, ViewContainerData, ViewData, ViewDefinitionFactory, ViewState, asElementData, asProviderData, asTextData} from './types';\nimport {markParentViewsForCheck, resolveDefinition, rootRenderNodes, splitNamespace, tokenKey, viewParentEl} from './util';\nimport {attachEmbeddedView, detachEmbeddedView, moveEmbeddedView, renderDetachView} from './view_attach';\n\nconst /** @type {?} */ EMPTY_CONTEXT = new Object();\n/**\n * @param {?} selector\n * @param {?} componentType\n * @param {?} viewDefFactory\n * @param {?} inputs\n * @param {?} outputs\n * @param {?} ngContentSelectors\n * @return {?}\n */\nexport function createComponentFactory(\n    selector: string, componentType: Type<any>, viewDefFactory: ViewDefinitionFactory,\n    inputs: {[propName: string]: string} | null, outputs: {[propName: string]: string},\n    ngContentSelectors: string[]): ComponentFactory<any> {\n  return new ComponentFactory_(\n      selector, componentType, viewDefFactory, inputs, outputs, ngContentSelectors);\n}\n/**\n * @param {?} componentFactory\n * @return {?}\n */\nexport function getComponentViewDefinitionFactory(componentFactory: ComponentFactory<any>):\n    ViewDefinitionFactory {\n  return ( /** @type {?} */((componentFactory as ComponentFactory_))).viewDefFactory;\n}\nclass ComponentFactory_ extends ComponentFactory<any> {\n/**\n * \\@internal\n */\nviewDefFactory: ViewDefinitionFactory;\n/**\n * @param {?} selector\n * @param {?} componentType\n * @param {?} viewDefFactory\n * @param {?} _inputs\n * @param {?} _outputs\n * @param {?} ngContentSelectors\n */\nconstructor(\npublic selector: string,\npublic componentType: Type<any>,\n      viewDefFactory: ViewDefinitionFactory,\nprivate _inputs: {[propName: string]: string}|null,\nprivate _outputs: {[propName: string]: string},\npublic ngContentSelectors: string[]) {\n    // Attention: this ctor is called as top level function.\n    // Putting any logic in here will destroy closure tree shaking!\n    super();\n    this.viewDefFactory = viewDefFactory;\n  }\n/**\n * @return {?}\n */\nget inputs() {\n    const /** @type {?} */ inputsArr: {propName: string, templateName: string}[] = [];\n    const /** @type {?} */ inputs = /** @type {?} */(( this._inputs));\n    for (let /** @type {?} */ propName in inputs) {\n      const /** @type {?} */ templateName = inputs[propName];\n      inputsArr.push({propName, templateName});\n    }\n    return inputsArr;\n  }\n/**\n * @return {?}\n */\nget outputs() {\n    const /** @type {?} */ outputsArr: {propName: string, templateName: string}[] = [];\n    for (let /** @type {?} */ propName in this._outputs) {\n      const /** @type {?} */ templateName = this._outputs[propName];\n      outputsArr.push({propName, templateName});\n    }\n    return outputsArr;\n  }\n/**\n * Creates a new component.\n * @param {?} injector\n * @param {?=} projectableNodes\n * @param {?=} rootSelectorOrNode\n * @param {?=} ngModule\n * @return {?}\n */\ncreate(\n      injector: Injector, projectableNodes?: any[][], rootSelectorOrNode?: string|any,\n      ngModule?: NgModuleRef<any>): ComponentRef<any> {\n    if (!ngModule) {\n      throw new Error('ngModule should be provided');\n    }\n    const /** @type {?} */ viewDef = resolveDefinition(this.viewDefFactory);\n    const /** @type {?} */ componentNodeIndex = /** @type {?} */(( /** @type {?} */(( viewDef.nodes[0].element)).componentProvider)).nodeIndex;\n    const /** @type {?} */ view = Services.createRootView(\n        injector, projectableNodes || [], rootSelectorOrNode, viewDef, ngModule, EMPTY_CONTEXT);\n    const /** @type {?} */ component = asProviderData(view, componentNodeIndex).instance;\n    if (rootSelectorOrNode) {\n      view.renderer.setAttribute(asElementData(view, 0).renderElement, 'ng-version', VERSION.full);\n    }\n\n    return new ComponentRef_(view, new ViewRef_(view), component);\n  }\n}\n\nfunction ComponentFactory__tsickle_Closure_declarations() {\n/**\n * \\@internal\n * @type {?}\n */\nComponentFactory_.prototype.viewDefFactory;\n/** @type {?} */\nComponentFactory_.prototype.selector;\n/** @type {?} */\nComponentFactory_.prototype.componentType;\n/** @type {?} */\nComponentFactory_.prototype._inputs;\n/** @type {?} */\nComponentFactory_.prototype._outputs;\n/** @type {?} */\nComponentFactory_.prototype.ngContentSelectors;\n}\n\nclass ComponentRef_ extends ComponentRef<any> {\nprivate _elDef: NodeDef;\n/**\n * @param {?} _view\n * @param {?} _viewRef\n * @param {?} _component\n */\nconstructor(private _view: ViewData,\nprivate _viewRef: ViewRef,\nprivate _component: any) {\n    super();\n    this._elDef = this._view.def.nodes[0];\n  }\n/**\n * @return {?}\n */\nget location(): ElementRef {\n    return new ElementRef(asElementData(this._view, this._elDef.nodeIndex).renderElement);\n  }\n/**\n * @return {?}\n */\nget injector(): Injector { return new Injector_(this._view, this._elDef); }\n/**\n * @return {?}\n */\nget instance(): any { return this._component; }\n/**\n * @return {?}\n */\nget hostView(): ViewRef { return this._viewRef; }\n/**\n * @return {?}\n */\nget changeDetectorRef(): ChangeDetectorRef { return this._viewRef; }\n/**\n * @return {?}\n */\nget componentType(): Type<any> { return /** @type {?} */(( <any>this._component.constructor)); }\n/**\n * @return {?}\n */\ndestroy(): void { this._viewRef.destroy(); }\n/**\n * @param {?} callback\n * @return {?}\n */\nonDestroy(callback: Function): void { this._viewRef.onDestroy(callback); }\n}\n\nfunction ComponentRef__tsickle_Closure_declarations() {\n/** @type {?} */\nComponentRef_.prototype._elDef;\n/** @type {?} */\nComponentRef_.prototype._view;\n/** @type {?} */\nComponentRef_.prototype._viewRef;\n/** @type {?} */\nComponentRef_.prototype._component;\n}\n\n/**\n * @param {?} view\n * @param {?} elDef\n * @param {?} elData\n * @return {?}\n */\nexport function createViewContainerData(\n    view: ViewData, elDef: NodeDef, elData: ElementData): ViewContainerData {\n  return new ViewContainerRef_(view, elDef, elData);\n}\nclass ViewContainerRef_ implements ViewContainerData {\n/**\n * \\@internal\n */\n_embeddedViews: ViewData[] = [];\n/**\n * @param {?} _view\n * @param {?} _elDef\n * @param {?} _data\n */\nconstructor(private _view: ViewData,\nprivate _elDef: NodeDef,\nprivate _data: ElementData) {}\n/**\n * @return {?}\n */\nget element(): ElementRef { return new ElementRef(this._data.renderElement); }\n/**\n * @return {?}\n */\nget injector(): Injector { return new Injector_(this._view, this._elDef); }\n/**\n * @return {?}\n */\nget parentInjector(): Injector {\n    let /** @type {?} */ view = this._view;\n    let /** @type {?} */ elDef = this._elDef.parent;\n    while (!elDef && view) {\n      elDef = viewParentEl(view);\n      view = /** @type {?} */(( view.parent));\n    }\n\n    return view ? new Injector_(view, elDef) : new Injector_(this._view, null);\n  }\n/**\n * @return {?}\n */\nclear(): void {\n    const /** @type {?} */ len = this._embeddedViews.length;\n    for (let /** @type {?} */ i = len - 1; i >= 0; i--) {\n      const /** @type {?} */ view = /** @type {?} */(( detachEmbeddedView(this._data, i)));\n      Services.destroyView(view);\n    }\n  }\n/**\n * @param {?} index\n * @return {?}\n */\nget(index: number): ViewRef|null {\n    const /** @type {?} */ view = this._embeddedViews[index];\n    if (view) {\n      const /** @type {?} */ ref = new ViewRef_(view);\n      ref.attachToViewContainerRef(this);\n      return ref;\n    }\n    return null;\n  }\n/**\n * @return {?}\n */\nget length(): number { return this._embeddedViews.length; }\n/**\n * @template C\n * @param {?} templateRef\n * @param {?=} context\n * @param {?=} index\n * @return {?}\n */\ncreateEmbeddedView<C>(templateRef: TemplateRef<C>, context?: C, index?: number):\n      EmbeddedViewRef<C> {\n    const /** @type {?} */ viewRef = templateRef.createEmbeddedView(context || /** @type {?} */(( <any>{})));\n    this.insert(viewRef, index);\n    return viewRef;\n  }\n/**\n * @template C\n * @param {?} componentFactory\n * @param {?=} index\n * @param {?=} injector\n * @param {?=} projectableNodes\n * @param {?=} ngModuleRef\n * @return {?}\n */\ncreateComponent<C>(\n      componentFactory: ComponentFactory<C>, index?: number, injector?: Injector,\n      projectableNodes?: any[][], ngModuleRef?: NgModuleRef<any>): ComponentRef<C> {\n    const /** @type {?} */ contextInjector = injector || this.parentInjector;\n    if (!ngModuleRef && !(componentFactory instanceof ComponentFactoryBoundToModule)) {\n      ngModuleRef = contextInjector.get(NgModuleRef);\n    }\n    const /** @type {?} */ componentRef =\n        componentFactory.create(contextInjector, projectableNodes, undefined, ngModuleRef);\n    this.insert(componentRef.hostView, index);\n    return componentRef;\n  }\n/**\n * @param {?} viewRef\n * @param {?=} index\n * @return {?}\n */\ninsert(viewRef: ViewRef, index?: number): ViewRef {\n    if (viewRef.destroyed) {\n      throw new Error('Cannot insert a destroyed View in a ViewContainer!');\n    }\n    const /** @type {?} */ viewRef_ = /** @type {?} */(( <ViewRef_>viewRef));\n    const /** @type {?} */ viewData = viewRef_._view;\n    attachEmbeddedView(this._view, this._data, index, viewData);\n    viewRef_.attachToViewContainerRef(this);\n    return viewRef;\n  }\n/**\n * @param {?} viewRef\n * @param {?} currentIndex\n * @return {?}\n */\nmove(viewRef: ViewRef_, currentIndex: number): ViewRef {\n    if (viewRef.destroyed) {\n      throw new Error('Cannot move a destroyed View in a ViewContainer!');\n    }\n    const /** @type {?} */ previousIndex = this._embeddedViews.indexOf(viewRef._view);\n    moveEmbeddedView(this._data, previousIndex, currentIndex);\n    return viewRef;\n  }\n/**\n * @param {?} viewRef\n * @return {?}\n */\nindexOf(viewRef: ViewRef): number {\n    return this._embeddedViews.indexOf(( /** @type {?} */((<ViewRef_>viewRef)))._view);\n  }\n/**\n * @param {?=} index\n * @return {?}\n */\nremove(index?: number): void {\n    const /** @type {?} */ viewData = detachEmbeddedView(this._data, index);\n    if (viewData) {\n      Services.destroyView(viewData);\n    }\n  }\n/**\n * @param {?=} index\n * @return {?}\n */\ndetach(index?: number): ViewRef|null {\n    const /** @type {?} */ view = detachEmbeddedView(this._data, index);\n    return view ? new ViewRef_(view) : null;\n  }\n}\n\nfunction ViewContainerRef__tsickle_Closure_declarations() {\n/**\n * \\@internal\n * @type {?}\n */\nViewContainerRef_.prototype._embeddedViews;\n/** @type {?} */\nViewContainerRef_.prototype._view;\n/** @type {?} */\nViewContainerRef_.prototype._elDef;\n/** @type {?} */\nViewContainerRef_.prototype._data;\n}\n\n/**\n * @param {?} view\n * @return {?}\n */\nexport function createChangeDetectorRef(view: ViewData): ChangeDetectorRef {\n  return new ViewRef_(view);\n}\nexport class ViewRef_ implements EmbeddedViewRef<any>, InternalViewRef {\n/**\n * \\@internal\n */\n_view: ViewData;\nprivate _viewContainerRef: ViewContainerRef|null;\nprivate _appRef: ApplicationRef|null;\n/**\n * @param {?} _view\n */\nconstructor(_view: ViewData) {\n    this._view = _view;\n    this._viewContainerRef = null;\n    this._appRef = null;\n  }\n/**\n * @return {?}\n */\nget rootNodes(): any[] { return rootRenderNodes(this._view); }\n/**\n * @return {?}\n */\nget context() { return this._view.context; }\n/**\n * @return {?}\n */\nget destroyed(): boolean { return (this._view.state & ViewState.Destroyed) !== 0; }\n/**\n * @return {?}\n */\nmarkForCheck(): void { markParentViewsForCheck(this._view); }\n/**\n * @return {?}\n */\ndetach(): void { this._view.state &= ~ViewState.Attached; }\n/**\n * @return {?}\n */\ndetectChanges(): void {\n    const /** @type {?} */ fs = this._view.root.rendererFactory;\n    if (fs.begin) {\n      fs.begin();\n    }\n    Services.checkAndUpdateView(this._view);\n    if (fs.end) {\n      fs.end();\n    }\n  }\n/**\n * @return {?}\n */\ncheckNoChanges(): void { Services.checkNoChangesView(this._view); }\n/**\n * @return {?}\n */\nreattach(): void { this._view.state |= ViewState.Attached; }\n/**\n * @param {?} callback\n * @return {?}\n */\nonDestroy(callback: Function) {\n    if (!this._view.disposables) {\n      this._view.disposables = [];\n    }\n    this._view.disposables.push( /** @type {?} */((<any>callback)));\n  }\n/**\n * @return {?}\n */\ndestroy() {\n    if (this._appRef) {\n      this._appRef.detachView(this);\n    } else if (this._viewContainerRef) {\n      this._viewContainerRef.detach(this._viewContainerRef.indexOf(this));\n    }\n    Services.destroyView(this._view);\n  }\n/**\n * @return {?}\n */\ndetachFromAppRef() {\n    this._appRef = null;\n    renderDetachView(this._view);\n    Services.dirtyParentQueries(this._view);\n  }\n/**\n * @param {?} appRef\n * @return {?}\n */\nattachToAppRef(appRef: ApplicationRef) {\n    if (this._viewContainerRef) {\n      throw new Error('This view is already attached to a ViewContainer!');\n    }\n    this._appRef = appRef;\n  }\n/**\n * @param {?} vcRef\n * @return {?}\n */\nattachToViewContainerRef(vcRef: ViewContainerRef) {\n    if (this._appRef) {\n      throw new Error('This view is already attached directly to the ApplicationRef!');\n    }\n    this._viewContainerRef = vcRef;\n  }\n}\n\nfunction ViewRef__tsickle_Closure_declarations() {\n/**\n * \\@internal\n * @type {?}\n */\nViewRef_.prototype._view;\n/** @type {?} */\nViewRef_.prototype._viewContainerRef;\n/** @type {?} */\nViewRef_.prototype._appRef;\n}\n\n/**\n * @param {?} view\n * @param {?} def\n * @return {?}\n */\nexport function createTemplateData(view: ViewData, def: NodeDef): TemplateData {\n  return new TemplateRef_(view, def);\n}\nclass TemplateRef_ extends TemplateRef<any> implements TemplateData {\n/**\n * \\@internal\n */\n_projectedViews: ViewData[];\n/**\n * @param {?} _parentView\n * @param {?} _def\n */\nconstructor(private _parentView: ViewData,\nprivate _def: NodeDef) { super(); }\n/**\n * @param {?} context\n * @return {?}\n */\ncreateEmbeddedView(context: any): EmbeddedViewRef<any> {\n    return new ViewRef_(Services.createEmbeddedView(\n        this._parentView, this._def, /** @type {?} */(( /** @type {?} */(( this._def.element)).template)), context));\n  }\n/**\n * @return {?}\n */\nget elementRef(): ElementRef {\n    return new ElementRef(asElementData(this._parentView, this._def.nodeIndex).renderElement);\n  }\n}\n\nfunction TemplateRef__tsickle_Closure_declarations() {\n/**\n * \\@internal\n * @type {?}\n */\nTemplateRef_.prototype._projectedViews;\n/** @type {?} */\nTemplateRef_.prototype._parentView;\n/** @type {?} */\nTemplateRef_.prototype._def;\n}\n\n/**\n * @param {?} view\n * @param {?} elDef\n * @return {?}\n */\nexport function createInjector(view: ViewData, elDef: NodeDef): Injector {\n  return new Injector_(view, elDef);\n}\nclass Injector_ implements Injector {\n/**\n * @param {?} view\n * @param {?} elDef\n */\nconstructor(private view: ViewData,\nprivate elDef: NodeDef|null) {}\n/**\n * @param {?} token\n * @param {?=} notFoundValue\n * @return {?}\n */\nget(token: any, notFoundValue: any = Injector.THROW_IF_NOT_FOUND): any {\n    const /** @type {?} */ allowPrivateServices =\n        this.elDef ? (this.elDef.flags & NodeFlags.ComponentView) !== 0 : false;\n    return Services.resolveDep(\n        this.view, this.elDef, allowPrivateServices,\n        {flags: DepFlags.None, token, tokenKey: tokenKey(token)}, notFoundValue);\n  }\n}\n\nfunction Injector__tsickle_Closure_declarations() {\n/** @type {?} */\nInjector_.prototype.view;\n/** @type {?} */\nInjector_.prototype.elDef;\n}\n\n/**\n * @param {?} view\n * @param {?} index\n * @return {?}\n */\nexport function nodeValue(view: ViewData, index: number): any {\n  const /** @type {?} */ def = view.def.nodes[index];\n  if (def.flags & NodeFlags.TypeElement) {\n    const /** @type {?} */ elData = asElementData(view, def.nodeIndex);\n    return /** @type {?} */(( def.element)).template ? elData.template : elData.renderElement;\n  } else if (def.flags & NodeFlags.TypeText) {\n    return asTextData(view, def.nodeIndex).renderText;\n  } else if (def.flags & (NodeFlags.CatProvider | NodeFlags.TypePipe)) {\n    return asProviderData(view, def.nodeIndex).instance;\n  }\n  throw new Error(`Illegal state: read nodeValue for node index ${index}`);\n}\n/**\n * @param {?} view\n * @return {?}\n */\nexport function createRendererV1(view: ViewData): RendererV1 {\n  return new RendererAdapter(view.renderer);\n}\nclass RendererAdapter implements RendererV1 {\n/**\n * @param {?} delegate\n */\nconstructor(private delegate: Renderer2) {}\n/**\n * @param {?} selectorOrNode\n * @return {?}\n */\nselectRootElement(selectorOrNode: string|Element): Element {\n    return this.delegate.selectRootElement(selectorOrNode);\n  }\n/**\n * @param {?} parent\n * @param {?} namespaceAndName\n * @return {?}\n */\ncreateElement(parent: Element|DocumentFragment, namespaceAndName: string): Element {\n    const [ns, name] = splitNamespace(namespaceAndName);\n    const /** @type {?} */ el = this.delegate.createElement(name, ns);\n    if (parent) {\n      this.delegate.appendChild(parent, el);\n    }\n    return el;\n  }\n/**\n * @param {?} hostElement\n * @return {?}\n */\ncreateViewRoot(hostElement: Element): Element|DocumentFragment { return hostElement; }\n/**\n * @param {?} parentElement\n * @return {?}\n */\ncreateTemplateAnchor(parentElement: Element|DocumentFragment): Comment {\n    const /** @type {?} */ comment = this.delegate.createComment('');\n    if (parentElement) {\n      this.delegate.appendChild(parentElement, comment);\n    }\n    return comment;\n  }\n/**\n * @param {?} parentElement\n * @param {?} value\n * @return {?}\n */\ncreateText(parentElement: Element|DocumentFragment, value: string): any {\n    const /** @type {?} */ node = this.delegate.createText(value);\n    if (parentElement) {\n      this.delegate.appendChild(parentElement, node);\n    }\n    return node;\n  }\n/**\n * @param {?} parentElement\n * @param {?} nodes\n * @return {?}\n */\nprojectNodes(parentElement: Element|DocumentFragment, nodes: Node[]) {\n    for (let /** @type {?} */ i = 0; i < nodes.length; i++) {\n      this.delegate.appendChild(parentElement, nodes[i]);\n    }\n  }\n/**\n * @param {?} node\n * @param {?} viewRootNodes\n * @return {?}\n */\nattachViewAfter(node: Node, viewRootNodes: Node[]) {\n    const /** @type {?} */ parentElement = this.delegate.parentNode(node);\n    const /** @type {?} */ nextSibling = this.delegate.nextSibling(node);\n    for (let /** @type {?} */ i = 0; i < viewRootNodes.length; i++) {\n      this.delegate.insertBefore(parentElement, viewRootNodes[i], nextSibling);\n    }\n  }\n/**\n * @param {?} viewRootNodes\n * @return {?}\n */\ndetachView(viewRootNodes: (Element|Text|Comment)[]) {\n    for (let /** @type {?} */ i = 0; i < viewRootNodes.length; i++) {\n      const /** @type {?} */ node = viewRootNodes[i];\n      const /** @type {?} */ parentElement = this.delegate.parentNode(node);\n      this.delegate.removeChild(parentElement, node);\n    }\n  }\n/**\n * @param {?} hostElement\n * @param {?} viewAllNodes\n * @return {?}\n */\ndestroyView(hostElement: Element|DocumentFragment, viewAllNodes: Node[]) {\n    for (let /** @type {?} */ i = 0; i < viewAllNodes.length; i++) { /** @type {?} */((\n      this.delegate.destroyNode))(viewAllNodes[i]);\n    }\n  }\n/**\n * @param {?} renderElement\n * @param {?} name\n * @param {?} callback\n * @return {?}\n */\nlisten(renderElement: any, name: string, callback: Function): Function {\n    return this.delegate.listen(renderElement, name, /** @type {?} */(( <any>callback)));\n  }\n/**\n * @param {?} target\n * @param {?} name\n * @param {?} callback\n * @return {?}\n */\nlistenGlobal(target: string, name: string, callback: Function): Function {\n    return this.delegate.listen(target, name, /** @type {?} */(( <any>callback)));\n  }\n/**\n * @param {?} renderElement\n * @param {?} propertyName\n * @param {?} propertyValue\n * @return {?}\n */\nsetElementProperty(\n      renderElement: Element|DocumentFragment, propertyName: string, propertyValue: any): void {\n    this.delegate.setProperty(renderElement, propertyName, propertyValue);\n  }\n/**\n * @param {?} renderElement\n * @param {?} namespaceAndName\n * @param {?} attributeValue\n * @return {?}\n */\nsetElementAttribute(renderElement: Element, namespaceAndName: string, attributeValue: string):\n      void {\n    const [ns, name] = splitNamespace(namespaceAndName);\n    if (attributeValue != null) {\n      this.delegate.setAttribute(renderElement, name, attributeValue, ns);\n    } else {\n      this.delegate.removeAttribute(renderElement, name, ns);\n    }\n  }\n/**\n * @param {?} renderElement\n * @param {?} propertyName\n * @param {?} propertyValue\n * @return {?}\n */\nsetBindingDebugInfo(renderElement: Element, propertyName: string, propertyValue: string): void {}\n/**\n * @param {?} renderElement\n * @param {?} className\n * @param {?} isAdd\n * @return {?}\n */\nsetElementClass(renderElement: Element, className: string, isAdd: boolean): void {\n    if (isAdd) {\n      this.delegate.addClass(renderElement, className);\n    } else {\n      this.delegate.removeClass(renderElement, className);\n    }\n  }\n/**\n * @param {?} renderElement\n * @param {?} styleName\n * @param {?} styleValue\n * @return {?}\n */\nsetElementStyle(renderElement: HTMLElement, styleName: string, styleValue: string): void {\n    if (styleValue != null) {\n      this.delegate.setStyle(renderElement, styleName, styleValue);\n    } else {\n      this.delegate.removeStyle(renderElement, styleName);\n    }\n  }\n/**\n * @param {?} renderElement\n * @param {?} methodName\n * @param {?} args\n * @return {?}\n */\ninvokeElementMethod(renderElement: Element, methodName: string, args: any[]): void {\n    ( /** @type {?} */((renderElement as any)))[methodName].apply(renderElement, args);\n  }\n/**\n * @param {?} renderNode\n * @param {?} text\n * @return {?}\n */\nsetText(renderNode: Text, text: string): void { this.delegate.setValue(renderNode, text); }\n/**\n * @return {?}\n */\nanimate(): any { throw new Error('Renderer.animate is no longer supported!'); }\n}\n\nfunction RendererAdapter_tsickle_Closure_declarations() {\n/** @type {?} */\nRendererAdapter.prototype.delegate;\n}\n\n/**\n * @param {?} moduleType\n * @param {?} parent\n * @param {?} bootstrapComponents\n * @param {?} def\n * @return {?}\n */\nexport function createNgModuleRef(\n    moduleType: Type<any>, parent: Injector, bootstrapComponents: Type<any>[],\n    def: NgModuleDefinition): NgModuleRef<any> {\n  return new NgModuleRef_(moduleType, parent, bootstrapComponents, def);\n}\nclass NgModuleRef_ implements NgModuleData, InternalNgModuleRef<any> {\nprivate _destroyListeners: (() => void)[] = [];\nprivate _destroyed: boolean = false;\npublic _providers: any[];\n/**\n * @param {?} _moduleType\n * @param {?} _parent\n * @param {?} _bootstrapComponents\n * @param {?} _def\n */\nconstructor(\nprivate _moduleType: Type<any>,\npublic _parent: Injector,\npublic _bootstrapComponents: Type<any>[],\npublic _def: NgModuleDefinition) {\n    initNgModule(this);\n  }\n/**\n * @param {?} token\n * @param {?=} notFoundValue\n * @return {?}\n */\nget(token: any, notFoundValue: any = Injector.THROW_IF_NOT_FOUND): any {\n    return resolveNgModuleDep(\n        this, {token: token, tokenKey: tokenKey(token), flags: DepFlags.None}, notFoundValue);\n  }\n/**\n * @return {?}\n */\nget instance() { return this.get(this._moduleType); }\n/**\n * @return {?}\n */\nget componentFactoryResolver() { return this.get(ComponentFactoryResolver); }\n/**\n * @return {?}\n */\nget injector(): Injector { return this; }\n/**\n * @return {?}\n */\ndestroy(): void {\n    if (this._destroyed) {\n      throw new Error(\n          `The ng module ${stringify(this.instance.constructor)} has already been destroyed.`);\n    }\n    this._destroyed = true;\n    callNgModuleLifecycle(this, NodeFlags.OnDestroy);\n    this._destroyListeners.forEach((listener) => listener());\n  }\n/**\n * @param {?} callback\n * @return {?}\n */\nonDestroy(callback: () => void): void { this._destroyListeners.push(callback); }\n}\n\nfunction NgModuleRef__tsickle_Closure_declarations() {\n/** @type {?} */\nNgModuleRef_.prototype._destroyListeners;\n/** @type {?} */\nNgModuleRef_.prototype._destroyed;\n/** @type {?} */\nNgModuleRef_.prototype._providers;\n/** @type {?} */\nNgModuleRef_.prototype._moduleType;\n/** @type {?} */\nNgModuleRef_.prototype._parent;\n/** @type {?} */\nNgModuleRef_.prototype._bootstrapComponents;\n/** @type {?} */\nNgModuleRef_.prototype._def;\n}\n\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {ChangeDetectorRef, SimpleChange, SimpleChanges, WrappedValue} from '../change_detection/change_detection';\nimport {Injector} from '../di';\nimport {ElementRef} from '../linker/element_ref';\nimport {TemplateRef} from '../linker/template_ref';\nimport {ViewContainerRef} from '../linker/view_container_ref';\nimport {Renderer as RendererV1, Renderer2} from '../render/api';\n\nimport {createChangeDetectorRef, createInjector, createRendererV1} from './refs';\nimport {BindingDef, BindingFlags, DepDef, DepFlags, NodeDef, NodeFlags, OutputDef, OutputType, ProviderData, QueryValueType, Services, ViewData, ViewFlags, ViewState, asElementData, asProviderData} from './types';\nimport {calcBindingFlags, checkBinding, dispatchEvent, isComponentView, splitDepsDsl, splitMatchedQueriesDsl, tokenKey, viewParentEl} from './util';\n\nconst /** @type {?} */ RendererV1TokenKey = tokenKey(RendererV1);\nconst /** @type {?} */ Renderer2TokenKey = tokenKey(Renderer2);\nconst /** @type {?} */ ElementRefTokenKey = tokenKey(ElementRef);\nconst /** @type {?} */ ViewContainerRefTokenKey = tokenKey(ViewContainerRef);\nconst /** @type {?} */ TemplateRefTokenKey = tokenKey(TemplateRef);\nconst /** @type {?} */ ChangeDetectorRefTokenKey = tokenKey(ChangeDetectorRef);\nconst /** @type {?} */ InjectorRefTokenKey = tokenKey(Injector);\n/**\n * @param {?} checkIndex\n * @param {?} flags\n * @param {?} matchedQueries\n * @param {?} childCount\n * @param {?} ctor\n * @param {?} deps\n * @param {?=} props\n * @param {?=} outputs\n * @return {?}\n */\nexport function directiveDef(\n    checkIndex: number, flags: NodeFlags,\n    matchedQueries: null | [string | number, QueryValueType][], childCount: number, ctor: any,\n    deps: ([DepFlags, any] | any)[], props?: null | {[name: string]: [number, string]},\n    outputs?: null | {[name: string]: string}): NodeDef {\n  const /** @type {?} */ bindings: BindingDef[] = [];\n  if (props) {\n    for (let /** @type {?} */ prop in props) {\n      const [bindingIndex, nonMinifiedName] = props[prop];\n      bindings[bindingIndex] = {\n        flags: BindingFlags.TypeProperty,\n        name: prop, nonMinifiedName,\n        ns: null,\n        securityContext: null,\n        suffix: null\n      };\n    }\n  }\n  const /** @type {?} */ outputDefs: OutputDef[] = [];\n  if (outputs) {\n    for (let /** @type {?} */ propName in outputs) {\n      outputDefs.push(\n          {type: OutputType.DirectiveOutput, propName, target: null, eventName: outputs[propName]});\n    }\n  }\n  flags |= NodeFlags.TypeDirective;\n  return _def(\n      checkIndex, flags, matchedQueries, childCount, ctor, ctor, deps, bindings, outputDefs);\n}\n/**\n * @param {?} flags\n * @param {?} ctor\n * @param {?} deps\n * @return {?}\n */\nexport function pipeDef(flags: NodeFlags, ctor: any, deps: ([DepFlags, any] | any)[]): NodeDef {\n  flags |= NodeFlags.TypePipe;\n  return _def(-1, flags, null, 0, ctor, ctor, deps);\n}\n/**\n * @param {?} flags\n * @param {?} matchedQueries\n * @param {?} token\n * @param {?} value\n * @param {?} deps\n * @return {?}\n */\nexport function providerDef(\n    flags: NodeFlags, matchedQueries: null | [string | number, QueryValueType][], token: any,\n    value: any, deps: ([DepFlags, any] | any)[]): NodeDef {\n  return _def(-1, flags, matchedQueries, 0, token, value, deps);\n}\n/**\n * @param {?} checkIndex\n * @param {?} flags\n * @param {?} matchedQueriesDsl\n * @param {?} childCount\n * @param {?} token\n * @param {?} value\n * @param {?} deps\n * @param {?=} bindings\n * @param {?=} outputs\n * @return {?}\n */\nexport function _def(\n    checkIndex: number, flags: NodeFlags,\n    matchedQueriesDsl: [string | number, QueryValueType][] | null, childCount: number, token: any,\n    value: any, deps: ([DepFlags, any] | any)[], bindings?: BindingDef[],\n    outputs?: OutputDef[]): NodeDef {\n  const {matchedQueries, references, matchedQueryIds} = splitMatchedQueriesDsl(matchedQueriesDsl);\n  if (!outputs) {\n    outputs = [];\n  }\n  if (!bindings) {\n    bindings = [];\n  }\n\n  const /** @type {?} */ depDefs = splitDepsDsl(deps);\n\n  return {\n    // will bet set by the view definition\n    nodeIndex: -1,\n    parent: null,\n    renderParent: null,\n    bindingIndex: -1,\n    outputIndex: -1,\n    // regular values\n    checkIndex,\n    flags,\n    childFlags: 0,\n    directChildFlags: 0,\n    childMatchedQueries: 0, matchedQueries, matchedQueryIds, references,\n    ngContentIndex: -1, childCount, bindings,\n    bindingFlags: calcBindingFlags(bindings), outputs,\n    element: null,\n    provider: {token, value, deps: depDefs},\n    text: null,\n    query: null,\n    ngContent: null\n  };\n}\n/**\n * @param {?} view\n * @param {?} def\n * @return {?}\n */\nexport function createProviderInstance(view: ViewData, def: NodeDef): any {\n  return _createProviderInstance(view, def);\n}\n/**\n * @param {?} view\n * @param {?} def\n * @return {?}\n */\nexport function createPipeInstance(view: ViewData, def: NodeDef): any {\n  // deps are looked up from component.\n  let /** @type {?} */ compView = view;\n  while (compView.parent && !isComponentView(compView)) {\n    compView = compView.parent;\n  }\n  // pipes can see the private services of the component\n  const /** @type {?} */ allowPrivateServices = true;\n  // pipes are always eager and classes!\n  return createClass( /** @type {?} */((\n      compView.parent)), /** @type {?} */(( viewParentEl(compView))), allowPrivateServices, /** @type {?} */(( def.provider)).value, /** @type {?} */((\n      def.provider)).deps);\n}\n/**\n * @param {?} view\n * @param {?} def\n * @return {?}\n */\nexport function createDirectiveInstance(view: ViewData, def: NodeDef): any {\n  // components can see other private services, other directives can't.\n  const /** @type {?} */ allowPrivateServices = (def.flags & NodeFlags.Component) > 0;\n  // directives are always eager and classes!\n  const /** @type {?} */ instance = createClass(\n      view, /** @type {?} */(( def.parent)), allowPrivateServices, /** @type {?} */(( def.provider)).value, /** @type {?} */(( def.provider)).deps);\n  if (def.outputs.length) {\n    for (let /** @type {?} */ i = 0; i < def.outputs.length; i++) {\n      const /** @type {?} */ output = def.outputs[i];\n      const /** @type {?} */ subscription = instance[ /** @type {?} */((output.propName))].subscribe(\n          eventHandlerClosure(view, /** @type {?} */(( def.parent)).nodeIndex, output.eventName)); /** @type {?} */((\n      view.disposables))[def.outputIndex + i] = subscription.unsubscribe.bind(subscription);\n    }\n  }\n  return instance;\n}\n/**\n * @param {?} view\n * @param {?} index\n * @param {?} eventName\n * @return {?}\n */\nfunction eventHandlerClosure(view: ViewData, index: number, eventName: string) {\n  return (event: any) => {\n    try {\n      return dispatchEvent(view, index, eventName, event);\n    } catch ( /** @type {?} */e) {\n      // Attention: Don't rethrow, as it would cancel Observable subscriptions!\n      view.root.errorHandler.handleError(e);\n    }\n  };\n}\n/**\n * @param {?} view\n * @param {?} def\n * @param {?} v0\n * @param {?} v1\n * @param {?} v2\n * @param {?} v3\n * @param {?} v4\n * @param {?} v5\n * @param {?} v6\n * @param {?} v7\n * @param {?} v8\n * @param {?} v9\n * @return {?}\n */\nexport function checkAndUpdateDirectiveInline(\n    view: ViewData, def: NodeDef, v0: any, v1: any, v2: any, v3: any, v4: any, v5: any, v6: any,\n    v7: any, v8: any, v9: any): boolean {\n  const /** @type {?} */ providerData = asProviderData(view, def.nodeIndex);\n  const /** @type {?} */ directive = providerData.instance;\n  let /** @type {?} */ changed = false;\n  let /** @type {?} */ changes: SimpleChanges = /** @type {?} */(( undefined));\n  const /** @type {?} */ bindLen = def.bindings.length;\n  if (bindLen > 0 && checkBinding(view, def, 0, v0)) {\n    changed = true;\n    changes = updateProp(view, providerData, def, 0, v0, changes);\n  }\n  if (bindLen > 1 && checkBinding(view, def, 1, v1)) {\n    changed = true;\n    changes = updateProp(view, providerData, def, 1, v1, changes);\n  }\n  if (bindLen > 2 && checkBinding(view, def, 2, v2)) {\n    changed = true;\n    changes = updateProp(view, providerData, def, 2, v2, changes);\n  }\n  if (bindLen > 3 && checkBinding(view, def, 3, v3)) {\n    changed = true;\n    changes = updateProp(view, providerData, def, 3, v3, changes);\n  }\n  if (bindLen > 4 && checkBinding(view, def, 4, v4)) {\n    changed = true;\n    changes = updateProp(view, providerData, def, 4, v4, changes);\n  }\n  if (bindLen > 5 && checkBinding(view, def, 5, v5)) {\n    changed = true;\n    changes = updateProp(view, providerData, def, 5, v5, changes);\n  }\n  if (bindLen > 6 && checkBinding(view, def, 6, v6)) {\n    changed = true;\n    changes = updateProp(view, providerData, def, 6, v6, changes);\n  }\n  if (bindLen > 7 && checkBinding(view, def, 7, v7)) {\n    changed = true;\n    changes = updateProp(view, providerData, def, 7, v7, changes);\n  }\n  if (bindLen > 8 && checkBinding(view, def, 8, v8)) {\n    changed = true;\n    changes = updateProp(view, providerData, def, 8, v8, changes);\n  }\n  if (bindLen > 9 && checkBinding(view, def, 9, v9)) {\n    changed = true;\n    changes = updateProp(view, providerData, def, 9, v9, changes);\n  }\n  if (changes) {\n    directive.ngOnChanges(changes);\n  }\n  if ((view.state & ViewState.FirstCheck) && (def.flags & NodeFlags.OnInit)) {\n    directive.ngOnInit();\n  }\n  if (def.flags & NodeFlags.DoCheck) {\n    directive.ngDoCheck();\n  }\n  return changed;\n}\n/**\n * @param {?} view\n * @param {?} def\n * @param {?} values\n * @return {?}\n */\nexport function checkAndUpdateDirectiveDynamic(\n    view: ViewData, def: NodeDef, values: any[]): boolean {\n  const /** @type {?} */ providerData = asProviderData(view, def.nodeIndex);\n  const /** @type {?} */ directive = providerData.instance;\n  let /** @type {?} */ changed = false;\n  let /** @type {?} */ changes: SimpleChanges = /** @type {?} */(( undefined));\n  for (let /** @type {?} */ i = 0; i < values.length; i++) {\n    if (checkBinding(view, def, i, values[i])) {\n      changed = true;\n      changes = updateProp(view, providerData, def, i, values[i], changes);\n    }\n  }\n  if (changes) {\n    directive.ngOnChanges(changes);\n  }\n  if ((view.state & ViewState.FirstCheck) && (def.flags & NodeFlags.OnInit)) {\n    directive.ngOnInit();\n  }\n  if (def.flags & NodeFlags.DoCheck) {\n    directive.ngDoCheck();\n  }\n  return changed;\n}\n/**\n * @param {?} view\n * @param {?} def\n * @return {?}\n */\nfunction _createProviderInstance(view: ViewData, def: NodeDef): any {\n  // private services can see other private services\n  const /** @type {?} */ allowPrivateServices = (def.flags & NodeFlags.PrivateProvider) > 0;\n  const /** @type {?} */ providerDef = def.provider;\n  switch (def.flags & NodeFlags.Types) {\n    case NodeFlags.TypeClassProvider:\n      return createClass(\n          view, /** @type {?} */(( def.parent)), allowPrivateServices, /** @type {?} */(( providerDef)).value, /** @type {?} */(( providerDef)).deps);\n    case NodeFlags.TypeFactoryProvider:\n      return callFactory(\n          view, /** @type {?} */(( def.parent)), allowPrivateServices, /** @type {?} */(( providerDef)).value, /** @type {?} */(( providerDef)).deps);\n    case NodeFlags.TypeUseExistingProvider:\n      return resolveDep(view, /** @type {?} */(( def.parent)), allowPrivateServices, /** @type {?} */(( providerDef)).deps[0]);\n    case NodeFlags.TypeValueProvider:\n      return /** @type {?} */(( providerDef)).value;\n  }\n}\n/**\n * @param {?} view\n * @param {?} elDef\n * @param {?} allowPrivateServices\n * @param {?} ctor\n * @param {?} deps\n * @return {?}\n */\nfunction createClass(\n    view: ViewData, elDef: NodeDef, allowPrivateServices: boolean, ctor: any, deps: DepDef[]): any {\n  const /** @type {?} */ len = deps.length;\n  switch (len) {\n    case 0:\n      return new ctor();\n    case 1:\n      return new ctor(resolveDep(view, elDef, allowPrivateServices, deps[0]));\n    case 2:\n      return new ctor(\n          resolveDep(view, elDef, allowPrivateServices, deps[0]),\n          resolveDep(view, elDef, allowPrivateServices, deps[1]));\n    case 3:\n      return new ctor(\n          resolveDep(view, elDef, allowPrivateServices, deps[0]),\n          resolveDep(view, elDef, allowPrivateServices, deps[1]),\n          resolveDep(view, elDef, allowPrivateServices, deps[2]));\n    default:\n      const /** @type {?} */ depValues = new Array(len);\n      for (let /** @type {?} */ i = 0; i < len; i++) {\n        depValues[i] = resolveDep(view, elDef, allowPrivateServices, deps[i]);\n      }\n      return new ctor(...depValues);\n  }\n}\n/**\n * @param {?} view\n * @param {?} elDef\n * @param {?} allowPrivateServices\n * @param {?} factory\n * @param {?} deps\n * @return {?}\n */\nfunction callFactory(\n    view: ViewData, elDef: NodeDef, allowPrivateServices: boolean, factory: any,\n    deps: DepDef[]): any {\n  const /** @type {?} */ len = deps.length;\n  switch (len) {\n    case 0:\n      return factory();\n    case 1:\n      return factory(resolveDep(view, elDef, allowPrivateServices, deps[0]));\n    case 2:\n      return factory(\n          resolveDep(view, elDef, allowPrivateServices, deps[0]),\n          resolveDep(view, elDef, allowPrivateServices, deps[1]));\n    case 3:\n      return factory(\n          resolveDep(view, elDef, allowPrivateServices, deps[0]),\n          resolveDep(view, elDef, allowPrivateServices, deps[1]),\n          resolveDep(view, elDef, allowPrivateServices, deps[2]));\n    default:\n      const /** @type {?} */ depValues = Array(len);\n      for (let /** @type {?} */ i = 0; i < len; i++) {\n        depValues[i] = resolveDep(view, elDef, allowPrivateServices, deps[i]);\n      }\n      return factory(...depValues);\n  }\n}\n\n// This default value is when checking the hierarchy for a token.\n//\n// It means both:\n// - the token is not provided by the current injector,\n// - only the element injectors should be checked (ie do not check module injectors\n//\n//          mod1\n//         /\n//       el1   mod2\n//         \\  /\n//         el2\n//\n// When requesting el2.injector.get(token), we should check in the following order and return the\n// first found value:\n// - el2.injector.get(token, default)\n// - el1.injector.get(token, NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR) -> do not check the module\n// - mod2.injector.get(token, default)\nexport const /** @type {?} */ NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR = {};\n/**\n * @param {?} view\n * @param {?} elDef\n * @param {?} allowPrivateServices\n * @param {?} depDef\n * @param {?=} notFoundValue\n * @return {?}\n */\nexport function resolveDep(\n    view: ViewData, elDef: NodeDef, allowPrivateServices: boolean, depDef: DepDef,\n    notFoundValue: any = Injector.THROW_IF_NOT_FOUND): any {\n  if (depDef.flags & DepFlags.Value) {\n    return depDef.token;\n  }\n  const /** @type {?} */ startView = view;\n  if (depDef.flags & DepFlags.Optional) {\n    notFoundValue = null;\n  }\n  const /** @type {?} */ tokenKey = depDef.tokenKey;\n\n  if (tokenKey === ChangeDetectorRefTokenKey) {\n    // directives on the same element as a component should be able to control the change detector\n    // of that component as well.\n    allowPrivateServices = !!(elDef && /** @type {?} */(( elDef.element)).componentView);\n  }\n\n  if (elDef && (depDef.flags & DepFlags.SkipSelf)) {\n    allowPrivateServices = false;\n    elDef = /** @type {?} */(( elDef.parent));\n  }\n\n  while (view) {\n    if (elDef) {\n      switch (tokenKey) {\n        case RendererV1TokenKey: {\n          const /** @type {?} */ compView = findCompView(view, elDef, allowPrivateServices);\n          return createRendererV1(compView);\n        }\n        case Renderer2TokenKey: {\n          const /** @type {?} */ compView = findCompView(view, elDef, allowPrivateServices);\n          return compView.renderer;\n        }\n        case ElementRefTokenKey:\n          return new ElementRef(asElementData(view, elDef.nodeIndex).renderElement);\n        case ViewContainerRefTokenKey:\n          return asElementData(view, elDef.nodeIndex).viewContainer;\n        case TemplateRefTokenKey: {\n          if ( /** @type {?} */((elDef.element)).template) {\n            return asElementData(view, elDef.nodeIndex).template;\n          }\n          break;\n        }\n        case ChangeDetectorRefTokenKey: {\n          let /** @type {?} */ cdView = findCompView(view, elDef, allowPrivateServices);\n          return createChangeDetectorRef(cdView);\n        }\n        case InjectorRefTokenKey:\n          return createInjector(view, elDef);\n        default:\n          const /** @type {?} */ providerDef = /** @type {?} */((\n              (allowPrivateServices ? /** @type {?} */(( elDef.element)).allProviders : /** @type {?} */((\n                                      elDef.element)).publicProviders)))[tokenKey];\n          if (providerDef) {\n            let /** @type {?} */ providerData = asProviderData(view, providerDef.nodeIndex);\n            if (!providerData) {\n              providerData = {instance: _createProviderInstance(view, providerDef)};\n              view.nodes[providerDef.nodeIndex] = /** @type {?} */(( providerData as any));\n            }\n            return providerData.instance;\n          }\n      }\n    }\n    allowPrivateServices = isComponentView(view);\n    elDef = /** @type {?} */(( viewParentEl(view)));\n    view = /** @type {?} */(( view.parent));\n  }\n\n  const /** @type {?} */ value = startView.root.injector.get(depDef.token, NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR);\n\n  if (value !== NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR ||\n      notFoundValue === NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR) {\n    // Return the value from the root element injector when\n    // - it provides it\n    //   (value !== NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR)\n    // - the module injector should not be checked\n    //   (notFoundValue === NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR)\n    return value;\n  }\n\n  return startView.root.ngModule.injector.get(depDef.token, notFoundValue);\n}\n/**\n * @param {?} view\n * @param {?} elDef\n * @param {?} allowPrivateServices\n * @return {?}\n */\nfunction findCompView(view: ViewData, elDef: NodeDef, allowPrivateServices: boolean) {\n  let /** @type {?} */ compView: ViewData;\n  if (allowPrivateServices) {\n    compView = asElementData(view, elDef.nodeIndex).componentView;\n  } else {\n    compView = view;\n    while (compView.parent && !isComponentView(compView)) {\n      compView = compView.parent;\n    }\n  }\n  return compView;\n}\n/**\n * @param {?} view\n * @param {?} providerData\n * @param {?} def\n * @param {?} bindingIdx\n * @param {?} value\n * @param {?} changes\n * @return {?}\n */\nfunction updateProp(\n    view: ViewData, providerData: ProviderData, def: NodeDef, bindingIdx: number, value: any,\n    changes: SimpleChanges): SimpleChanges {\n  if (def.flags & NodeFlags.Component) {\n    const /** @type {?} */ compView = asElementData(view, /** @type {?} */(( def.parent)).nodeIndex).componentView;\n    if (compView.def.flags & ViewFlags.OnPush) {\n      compView.state |= ViewState.ChecksEnabled;\n    }\n  }\n  const /** @type {?} */ binding = def.bindings[bindingIdx];\n  const /** @type {?} */ propName = /** @type {?} */(( binding.name));\n  // Note: This is still safe with Closure Compiler as\n  // the user passed in the property name as an object has to `providerDef`,\n  // so Closure Compiler will have renamed the property correctly already.\n  providerData.instance[propName] = value;\n  if (def.flags & NodeFlags.OnChanges) {\n    changes = changes || {};\n    let /** @type {?} */ oldValue = view.oldValues[def.bindingIndex + bindingIdx];\n    if (oldValue instanceof WrappedValue) {\n      oldValue = oldValue.wrapped;\n    }\n    const /** @type {?} */ binding = def.bindings[bindingIdx];\n    changes[ /** @type {?} */((binding.nonMinifiedName))] =\n        new SimpleChange(oldValue, value, (view.state & ViewState.FirstCheck) !== 0);\n  }\n  view.oldValues[def.bindingIndex + bindingIdx] = value;\n  return changes;\n}\n/**\n * @param {?} view\n * @param {?} lifecycles\n * @return {?}\n */\nexport function callLifecycleHooksChildrenFirst(view: ViewData, lifecycles: NodeFlags) {\n  if (!(view.def.nodeFlags & lifecycles)) {\n    return;\n  }\n  const /** @type {?} */ nodes = view.def.nodes;\n  for (let /** @type {?} */ i = 0; i < nodes.length; i++) {\n    const /** @type {?} */ nodeDef = nodes[i];\n    let /** @type {?} */ parent = nodeDef.parent;\n    if (!parent && nodeDef.flags & lifecycles) {\n      // matching root node (e.g. a pipe)\n      callProviderLifecycles(view, i, nodeDef.flags & lifecycles);\n    }\n    if ((nodeDef.childFlags & lifecycles) === 0) {\n      // no child matches one of the lifecycles\n      i += nodeDef.childCount;\n    }\n    while (parent && (parent.flags & NodeFlags.TypeElement) &&\n           i === parent.nodeIndex + parent.childCount) {\n      // last child of an element\n      if (parent.directChildFlags & lifecycles) {\n        callElementProvidersLifecycles(view, parent, lifecycles);\n      }\n      parent = parent.parent;\n    }\n  }\n}\n/**\n * @param {?} view\n * @param {?} elDef\n * @param {?} lifecycles\n * @return {?}\n */\nfunction callElementProvidersLifecycles(view: ViewData, elDef: NodeDef, lifecycles: NodeFlags) {\n  for (let /** @type {?} */ i = elDef.nodeIndex + 1; i <= elDef.nodeIndex + elDef.childCount; i++) {\n    const /** @type {?} */ nodeDef = view.def.nodes[i];\n    if (nodeDef.flags & lifecycles) {\n      callProviderLifecycles(view, i, nodeDef.flags & lifecycles);\n    }\n    // only visit direct children\n    i += nodeDef.childCount;\n  }\n}\n/**\n * @param {?} view\n * @param {?} index\n * @param {?} lifecycles\n * @return {?}\n */\nfunction callProviderLifecycles(view: ViewData, index: number, lifecycles: NodeFlags) {\n  const /** @type {?} */ providerData = asProviderData(view, index);\n  if (!providerData) {\n    return;\n  }\n  const /** @type {?} */ provider = providerData.instance;\n  if (!provider) {\n    return;\n  }\n  Services.setCurrentNode(view, index);\n  if (lifecycles & NodeFlags.AfterContentInit) {\n    provider.ngAfterContentInit();\n  }\n  if (lifecycles & NodeFlags.AfterContentChecked) {\n    provider.ngAfterContentChecked();\n  }\n  if (lifecycles & NodeFlags.AfterViewInit) {\n    provider.ngAfterViewInit();\n  }\n  if (lifecycles & NodeFlags.AfterViewChecked) {\n    provider.ngAfterViewChecked();\n  }\n  if (lifecycles & NodeFlags.OnDestroy) {\n    provider.ngOnDestroy();\n  }\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Renderer2} from '../render/api';\n\nimport {checkAndUpdateElementDynamic, checkAndUpdateElementInline, createElement, listenToElementOutputs} from './element';\nimport {expressionChangedAfterItHasBeenCheckedError} from './errors';\nimport {appendNgContent} from './ng_content';\nimport {callLifecycleHooksChildrenFirst, checkAndUpdateDirectiveDynamic, checkAndUpdateDirectiveInline, createDirectiveInstance, createPipeInstance, createProviderInstance} from './provider';\nimport {checkAndUpdatePureExpressionDynamic, checkAndUpdatePureExpressionInline, createPureExpression} from './pure_expression';\nimport {checkAndUpdateQuery, createQuery} from './query';\nimport {createTemplateData, createViewContainerData} from './refs';\nimport {checkAndUpdateTextDynamic, checkAndUpdateTextInline, createText} from './text';\nimport {ArgumentType, CheckType, ElementData, NodeData, NodeDef, NodeFlags, ProviderData, RootData, Services, ViewData, ViewDefinition, ViewFlags, ViewHandleEventFn, ViewState, ViewUpdateFn, asElementData, asQueryList, asTextData} from './types';\nimport {NOOP, checkBindingNoChanges, isComponentView, markParentViewsForCheckProjectedViews, resolveDefinition, tokenKey} from './util';\nimport {detachProjectedView} from './view_attach';\n/**\n * @param {?} flags\n * @param {?} nodes\n * @param {?=} updateDirectives\n * @param {?=} updateRenderer\n * @return {?}\n */\nexport function viewDef(\n    flags: ViewFlags, nodes: NodeDef[], updateDirectives?: null | ViewUpdateFn,\n    updateRenderer?: null | ViewUpdateFn): ViewDefinition {\n  // clone nodes and set auto calculated values\n  let /** @type {?} */ viewBindingCount = 0;\n  let /** @type {?} */ viewDisposableCount = 0;\n  let /** @type {?} */ viewNodeFlags = 0;\n  let /** @type {?} */ viewRootNodeFlags = 0;\n  let /** @type {?} */ viewMatchedQueries = 0;\n  let /** @type {?} */ currentParent: NodeDef|null = null;\n  let /** @type {?} */ currentRenderParent: NodeDef|null = null;\n  let /** @type {?} */ currentElementHasPublicProviders = false;\n  let /** @type {?} */ currentElementHasPrivateProviders = false;\n  let /** @type {?} */ lastRenderRootNode: NodeDef|null = null;\n  for (let /** @type {?} */ i = 0; i < nodes.length; i++) {\n    const /** @type {?} */ node = nodes[i];\n    node.nodeIndex = i;\n    node.parent = currentParent;\n    node.bindingIndex = viewBindingCount;\n    node.outputIndex = viewDisposableCount;\n    node.renderParent = currentRenderParent;\n\n    viewNodeFlags |= node.flags;\n    viewMatchedQueries |= node.matchedQueryIds;\n\n    if (node.element) {\n      const /** @type {?} */ elDef = node.element;\n      elDef.publicProviders =\n          currentParent ? /** @type {?} */(( currentParent.element)).publicProviders : Object.create(null);\n      elDef.allProviders = elDef.publicProviders;\n      // Note: We assume that all providers of an element are before any child element!\n      currentElementHasPublicProviders = false;\n      currentElementHasPrivateProviders = false;\n\n      if (node.element.template) {\n        viewMatchedQueries |= node.element.template.nodeMatchedQueries;\n      }\n    }\n    validateNode(currentParent, node, nodes.length);\n\n\n    viewBindingCount += node.bindings.length;\n    viewDisposableCount += node.outputs.length;\n\n    if (!currentRenderParent && (node.flags & NodeFlags.CatRenderNode)) {\n      lastRenderRootNode = node;\n    }\n\n    if (node.flags & NodeFlags.CatProvider) {\n      if (!currentElementHasPublicProviders) {\n        currentElementHasPublicProviders = true; /** @type {?} */(( /** @type {?} */((\n        // Use prototypical inheritance to not get O(n^2) complexity...\n        currentParent)).element)).publicProviders =\n            Object.create( /** @type {?} */(( /** @type {?} */((currentParent)).element)).publicProviders); /** @type {?} */(( /** @type {?} */((\n        currentParent)).element)).allProviders = /** @type {?} */(( /** @type {?} */(( currentParent)).element)).publicProviders;\n      }\n      const /** @type {?} */ isPrivateService = (node.flags & NodeFlags.PrivateProvider) !== 0;\n      const /** @type {?} */ isComponent = (node.flags & NodeFlags.Component) !== 0;\n      if (!isPrivateService || isComponent) { /** @type {?} */(( /** @type {?} */(( /** @type {?} */((\n        currentParent)).element)).publicProviders))[tokenKey( /** @type {?} */((node.provider)).token)] = node;\n      } else {\n        if (!currentElementHasPrivateProviders) {\n          currentElementHasPrivateProviders = true; /** @type {?} */(( /** @type {?} */((\n          // Use prototypical inheritance to not get O(n^2) complexity...\n          currentParent)).element)).allProviders =\n              Object.create( /** @type {?} */(( /** @type {?} */((currentParent)).element)).publicProviders);\n        } /** @type {?} */(( /** @type {?} */(( /** @type {?} */((\n        currentParent)).element)).allProviders))[tokenKey( /** @type {?} */((node.provider)).token)] = node;\n      }\n      if (isComponent) { /** @type {?} */(( /** @type {?} */((\n        currentParent)).element)).componentProvider = node;\n      }\n    }\n\n    if (currentParent) {\n      currentParent.childFlags |= node.flags;\n      currentParent.directChildFlags |= node.flags;\n      currentParent.childMatchedQueries |= node.matchedQueryIds;\n      if (node.element && node.element.template) {\n        currentParent.childMatchedQueries |= node.element.template.nodeMatchedQueries;\n      }\n    } else {\n      viewRootNodeFlags |= node.flags;\n    }\n\n    if (node.childCount > 0) {\n      currentParent = node;\n\n      if (!isNgContainer(node)) {\n        currentRenderParent = node;\n      }\n    } else {\n      // When the current node has no children, check if it is the last children of its parent.\n      // When it is, propagate the flags up.\n      // The loop is required because an element could be the last transitive children of several\n      // elements. We loop to either the root or the highest opened element (= with remaining\n      // children)\n      while (currentParent && i === currentParent.nodeIndex + currentParent.childCount) {\n        const /** @type {?} */ newParent: NodeDef|null = currentParent.parent;\n        if (newParent) {\n          newParent.childFlags |= currentParent.childFlags;\n          newParent.childMatchedQueries |= currentParent.childMatchedQueries;\n        }\n        currentParent = newParent;\n        // We also need to update the render parent & account for ng-container\n        if (currentParent && isNgContainer(currentParent)) {\n          currentRenderParent = currentParent.renderParent;\n        } else {\n          currentRenderParent = currentParent;\n        }\n      }\n    }\n  }\n\n  const /** @type {?} */ handleEvent: ViewHandleEventFn = (view, nodeIndex, eventName, event) => /** @type {?} */(( /** @type {?} */((\n      nodes[nodeIndex].element)).handleEvent))(view, eventName, event);\n\n  return {\n    // Will be filled later...\n    factory: null,\n    nodeFlags: viewNodeFlags,\n    rootNodeFlags: viewRootNodeFlags,\n    nodeMatchedQueries: viewMatchedQueries, flags,\n    nodes: nodes,\n    updateDirectives: updateDirectives || NOOP,\n    updateRenderer: updateRenderer || NOOP, handleEvent,\n    bindingCount: viewBindingCount,\n    outputCount: viewDisposableCount, lastRenderRootNode\n  };\n}\n/**\n * @param {?} node\n * @return {?}\n */\nfunction isNgContainer(node: NodeDef): boolean {\n  return (node.flags & NodeFlags.TypeElement) !== 0 && /** @type {?} */(( node.element)).name === null;\n}\n/**\n * @param {?} parent\n * @param {?} node\n * @param {?} nodeCount\n * @return {?}\n */\nfunction validateNode(parent: NodeDef | null, node: NodeDef, nodeCount: number) {\n  const /** @type {?} */ template = node.element && node.element.template;\n  if (template) {\n    if (!template.lastRenderRootNode) {\n      throw new Error(`Illegal State: Embedded templates without nodes are not allowed!`);\n    }\n    if (template.lastRenderRootNode &&\n        template.lastRenderRootNode.flags & NodeFlags.EmbeddedViews) {\n      throw new Error(\n          `Illegal State: Last root node of a template can't have embedded views, at index ${node.nodeIndex}!`);\n    }\n  }\n  if (node.flags & NodeFlags.CatProvider) {\n    const /** @type {?} */ parentFlags = parent ? parent.flags : 0;\n    if ((parentFlags & NodeFlags.TypeElement) === 0) {\n      throw new Error(\n          `Illegal State: StaticProvider/Directive nodes need to be children of elements or anchors, at index ${node.nodeIndex}!`);\n    }\n  }\n  if (node.query) {\n    if (node.flags & NodeFlags.TypeContentQuery &&\n        (!parent || (parent.flags & NodeFlags.TypeDirective) === 0)) {\n      throw new Error(\n          `Illegal State: Content Query nodes need to be children of directives, at index ${node.nodeIndex}!`);\n    }\n    if (node.flags & NodeFlags.TypeViewQuery && parent) {\n      throw new Error(\n          `Illegal State: View Query nodes have to be top level nodes, at index ${node.nodeIndex}!`);\n    }\n  }\n  if (node.childCount) {\n    const /** @type {?} */ parentEnd = parent ? parent.nodeIndex + parent.childCount : nodeCount - 1;\n    if (node.nodeIndex <= parentEnd && node.nodeIndex + node.childCount > parentEnd) {\n      throw new Error(\n          `Illegal State: childCount of node leads outside of parent, at index ${node.nodeIndex}!`);\n    }\n  }\n}\n/**\n * @param {?} parent\n * @param {?} anchorDef\n * @param {?} viewDef\n * @param {?=} context\n * @return {?}\n */\nexport function createEmbeddedView(\n    parent: ViewData, anchorDef: NodeDef, viewDef: ViewDefinition, context?: any): ViewData {\n  // embedded views are seen as siblings to the anchor, so we need\n  // to get the parent of the anchor and use it as parentIndex.\n  const /** @type {?} */ view = createView(parent.root, parent.renderer, parent, anchorDef, viewDef);\n  initView(view, parent.component, context);\n  createViewNodes(view);\n  return view;\n}\n/**\n * @param {?} root\n * @param {?} def\n * @param {?=} context\n * @return {?}\n */\nexport function createRootView(root: RootData, def: ViewDefinition, context?: any): ViewData {\n  const /** @type {?} */ view = createView(root, root.renderer, null, null, def);\n  initView(view, context, context);\n  createViewNodes(view);\n  return view;\n}\n/**\n * @param {?} parentView\n * @param {?} nodeDef\n * @param {?} viewDef\n * @param {?} hostElement\n * @return {?}\n */\nexport function createComponentView(\n    parentView: ViewData, nodeDef: NodeDef, viewDef: ViewDefinition, hostElement: any): ViewData {\n  const /** @type {?} */ rendererType = /** @type {?} */(( nodeDef.element)).componentRendererType;\n  let /** @type {?} */ compRenderer: Renderer2;\n  if (!rendererType) {\n    compRenderer = parentView.root.renderer;\n  } else {\n    compRenderer = parentView.root.rendererFactory.createRenderer(hostElement, rendererType);\n  }\n  return createView(\n      parentView.root, compRenderer, parentView, /** @type {?} */(( nodeDef.element)).componentProvider, viewDef);\n}\n/**\n * @param {?} root\n * @param {?} renderer\n * @param {?} parent\n * @param {?} parentNodeDef\n * @param {?} def\n * @return {?}\n */\nfunction createView(\n    root: RootData, renderer: Renderer2, parent: ViewData | null, parentNodeDef: NodeDef | null,\n    def: ViewDefinition): ViewData {\n  const /** @type {?} */ nodes: NodeData[] = new Array(def.nodes.length);\n  const /** @type {?} */ disposables = def.outputCount ? new Array(def.outputCount) : null;\n  const /** @type {?} */ view: ViewData = {\n    def,\n    parent,\n    viewContainerParent: null, parentNodeDef,\n    context: null,\n    component: null, nodes,\n    state: ViewState.CatInit, root, renderer,\n    oldValues: new Array(def.bindingCount), disposables\n  };\n  return view;\n}\n/**\n * @param {?} view\n * @param {?} component\n * @param {?} context\n * @return {?}\n */\nfunction initView(view: ViewData, component: any, context: any) {\n  view.component = component;\n  view.context = context;\n}\n/**\n * @param {?} view\n * @return {?}\n */\nfunction createViewNodes(view: ViewData) {\n  let /** @type {?} */ renderHost: any;\n  if (isComponentView(view)) {\n    const /** @type {?} */ hostDef = view.parentNodeDef;\n    renderHost = asElementData( /** @type {?} */((view.parent)), /** @type {?} */(( /** @type {?} */(( hostDef)).parent)).nodeIndex).renderElement;\n  }\n  const /** @type {?} */ def = view.def;\n  const /** @type {?} */ nodes = view.nodes;\n  for (let /** @type {?} */ i = 0; i < def.nodes.length; i++) {\n    const /** @type {?} */ nodeDef = def.nodes[i];\n    Services.setCurrentNode(view, i);\n    let /** @type {?} */ nodeData: any;\n    switch (nodeDef.flags & NodeFlags.Types) {\n      case NodeFlags.TypeElement:\n        const /** @type {?} */ el = /** @type {?} */(( createElement(view, renderHost, nodeDef) as any));\n        let /** @type {?} */ componentView: ViewData = /** @type {?} */(( undefined));\n        if (nodeDef.flags & NodeFlags.ComponentView) {\n          const /** @type {?} */ compViewDef = resolveDefinition( /** @type {?} */(( /** @type {?} */((nodeDef.element)).componentView)));\n          componentView = Services.createComponentView(view, nodeDef, compViewDef, el);\n        }\n        listenToElementOutputs(view, componentView, nodeDef, el);\n        nodeData = /** @type {?} */(( <ElementData>{\n          renderElement: el,\n          componentView,\n          viewContainer: null,\n          template: /** @type {?} */(( nodeDef.element)).template ? createTemplateData(view, nodeDef) : undefined\n        }));\n        if (nodeDef.flags & NodeFlags.EmbeddedViews) {\n          nodeData.viewContainer = createViewContainerData(view, nodeDef, nodeData);\n        }\n        break;\n      case NodeFlags.TypeText:\n        nodeData = /** @type {?} */(( createText(view, renderHost, nodeDef) as any));\n        break;\n      case NodeFlags.TypeClassProvider:\n      case NodeFlags.TypeFactoryProvider:\n      case NodeFlags.TypeUseExistingProvider:\n      case NodeFlags.TypeValueProvider: {\n        nodeData = nodes[i];\n        if (!nodeData && !(nodeDef.flags & NodeFlags.LazyProvider)) {\n          const /** @type {?} */ instance = createProviderInstance(view, nodeDef);\n          nodeData = /** @type {?} */(( <ProviderData>{instance}));\n        }\n        break;\n      }\n      case NodeFlags.TypePipe: {\n        const /** @type {?} */ instance = createPipeInstance(view, nodeDef);\n        nodeData = /** @type {?} */(( <ProviderData>{instance}));\n        break;\n      }\n      case NodeFlags.TypeDirective: {\n        nodeData = nodes[i];\n        if (!nodeData) {\n          const /** @type {?} */ instance = createDirectiveInstance(view, nodeDef);\n          nodeData = /** @type {?} */(( <ProviderData>{instance}));\n        }\n        if (nodeDef.flags & NodeFlags.Component) {\n          const /** @type {?} */ compView = asElementData(view, /** @type {?} */(( nodeDef.parent)).nodeIndex).componentView;\n          initView(compView, nodeData.instance, nodeData.instance);\n        }\n        break;\n      }\n      case NodeFlags.TypePureArray:\n      case NodeFlags.TypePureObject:\n      case NodeFlags.TypePurePipe:\n        nodeData = /** @type {?} */(( createPureExpression(view, nodeDef) as any));\n        break;\n      case NodeFlags.TypeContentQuery:\n      case NodeFlags.TypeViewQuery:\n        nodeData = /** @type {?} */(( createQuery() as any));\n        break;\n      case NodeFlags.TypeNgContent:\n        appendNgContent(view, renderHost, nodeDef);\n        // no runtime data needed for NgContent...\n        nodeData = undefined;\n        break;\n    }\n    nodes[i] = nodeData;\n  }\n  // Create the ViewData.nodes of component views after we created everything else,\n  // so that e.g. ng-content works\n  execComponentViewsAction(view, ViewAction.CreateViewNodes);\n\n  // fill static content and view queries\n  execQueriesAction(\n      view, NodeFlags.TypeContentQuery | NodeFlags.TypeViewQuery, NodeFlags.StaticQuery,\n      CheckType.CheckAndUpdate);\n}\n/**\n * @param {?} view\n * @return {?}\n */\nexport function checkNoChangesView(view: ViewData) {\n  markProjectedViewsForCheck(view);\n  Services.updateDirectives(view, CheckType.CheckNoChanges);\n  execEmbeddedViewsAction(view, ViewAction.CheckNoChanges);\n  Services.updateRenderer(view, CheckType.CheckNoChanges);\n  execComponentViewsAction(view, ViewAction.CheckNoChanges);\n  // Note: We don't check queries for changes as we didn't do this in v2.x.\n  // TODO(tbosch): investigate if we can enable the check again in v5.x with a nicer error message.\n  view.state &= ~(ViewState.CheckProjectedViews | ViewState.CheckProjectedView);\n}\n/**\n * @param {?} view\n * @return {?}\n */\nexport function checkAndUpdateView(view: ViewData) {\n  if (view.state & ViewState.BeforeFirstCheck) {\n    view.state &= ~ViewState.BeforeFirstCheck;\n    view.state |= ViewState.FirstCheck;\n  } else {\n    view.state &= ~ViewState.FirstCheck;\n  }\n  markProjectedViewsForCheck(view);\n  Services.updateDirectives(view, CheckType.CheckAndUpdate);\n  execEmbeddedViewsAction(view, ViewAction.CheckAndUpdate);\n  execQueriesAction(\n      view, NodeFlags.TypeContentQuery, NodeFlags.DynamicQuery, CheckType.CheckAndUpdate);\n\n  callLifecycleHooksChildrenFirst(\n      view, NodeFlags.AfterContentChecked |\n          (view.state & ViewState.FirstCheck ? NodeFlags.AfterContentInit : 0));\n\n  Services.updateRenderer(view, CheckType.CheckAndUpdate);\n\n  execComponentViewsAction(view, ViewAction.CheckAndUpdate);\n  execQueriesAction(\n      view, NodeFlags.TypeViewQuery, NodeFlags.DynamicQuery, CheckType.CheckAndUpdate);\n  callLifecycleHooksChildrenFirst(\n      view, NodeFlags.AfterViewChecked |\n          (view.state & ViewState.FirstCheck ? NodeFlags.AfterViewInit : 0));\n\n  if (view.def.flags & ViewFlags.OnPush) {\n    view.state &= ~ViewState.ChecksEnabled;\n  }\n  view.state &= ~(ViewState.CheckProjectedViews | ViewState.CheckProjectedView);\n}\n/**\n * @param {?} view\n * @param {?} nodeDef\n * @param {?} argStyle\n * @param {?=} v0\n * @param {?=} v1\n * @param {?=} v2\n * @param {?=} v3\n * @param {?=} v4\n * @param {?=} v5\n * @param {?=} v6\n * @param {?=} v7\n * @param {?=} v8\n * @param {?=} v9\n * @return {?}\n */\nexport function checkAndUpdateNode(\n    view: ViewData, nodeDef: NodeDef, argStyle: ArgumentType, v0?: any, v1?: any, v2?: any,\n    v3?: any, v4?: any, v5?: any, v6?: any, v7?: any, v8?: any, v9?: any): boolean {\n  if (argStyle === ArgumentType.Inline) {\n    return checkAndUpdateNodeInline(view, nodeDef, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9);\n  } else {\n    return checkAndUpdateNodeDynamic(view, nodeDef, v0);\n  }\n}\n/**\n * @param {?} view\n * @return {?}\n */\nfunction markProjectedViewsForCheck(view: ViewData) {\n  const /** @type {?} */ def = view.def;\n  if (!(def.nodeFlags & NodeFlags.ProjectedTemplate)) {\n    return;\n  }\n  for (let /** @type {?} */ i = 0; i < def.nodes.length; i++) {\n    const /** @type {?} */ nodeDef = def.nodes[i];\n    if (nodeDef.flags & NodeFlags.ProjectedTemplate) {\n      const /** @type {?} */ projectedViews = asElementData(view, i).template._projectedViews;\n      if (projectedViews) {\n        for (let /** @type {?} */ i = 0; i < projectedViews.length; i++) {\n          const /** @type {?} */ projectedView = projectedViews[i];\n          projectedView.state |= ViewState.CheckProjectedView;\n          markParentViewsForCheckProjectedViews(projectedView, view);\n        }\n      }\n    } else if ((nodeDef.childFlags & NodeFlags.ProjectedTemplate) === 0) {\n      // a parent with leafs\n      // no child is a component,\n      // then skip the children\n      i += nodeDef.childCount;\n    }\n  }\n}\n/**\n * @param {?} view\n * @param {?} nodeDef\n * @param {?=} v0\n * @param {?=} v1\n * @param {?=} v2\n * @param {?=} v3\n * @param {?=} v4\n * @param {?=} v5\n * @param {?=} v6\n * @param {?=} v7\n * @param {?=} v8\n * @param {?=} v9\n * @return {?}\n */\nfunction checkAndUpdateNodeInline(\n    view: ViewData, nodeDef: NodeDef, v0?: any, v1?: any, v2?: any, v3?: any, v4?: any, v5?: any,\n    v6?: any, v7?: any, v8?: any, v9?: any): boolean {\n  switch (nodeDef.flags & NodeFlags.Types) {\n    case NodeFlags.TypeElement:\n      return checkAndUpdateElementInline(view, nodeDef, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9);\n    case NodeFlags.TypeText:\n      return checkAndUpdateTextInline(view, nodeDef, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9);\n    case NodeFlags.TypeDirective:\n      return checkAndUpdateDirectiveInline(view, nodeDef, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9);\n    case NodeFlags.TypePureArray:\n    case NodeFlags.TypePureObject:\n    case NodeFlags.TypePurePipe:\n      return checkAndUpdatePureExpressionInline(\n          view, nodeDef, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9);\n    default:\n      throw 'unreachable';\n  }\n}\n/**\n * @param {?} view\n * @param {?} nodeDef\n * @param {?} values\n * @return {?}\n */\nfunction checkAndUpdateNodeDynamic(view: ViewData, nodeDef: NodeDef, values: any[]): boolean {\n  switch (nodeDef.flags & NodeFlags.Types) {\n    case NodeFlags.TypeElement:\n      return checkAndUpdateElementDynamic(view, nodeDef, values);\n    case NodeFlags.TypeText:\n      return checkAndUpdateTextDynamic(view, nodeDef, values);\n    case NodeFlags.TypeDirective:\n      return checkAndUpdateDirectiveDynamic(view, nodeDef, values);\n    case NodeFlags.TypePureArray:\n    case NodeFlags.TypePureObject:\n    case NodeFlags.TypePurePipe:\n      return checkAndUpdatePureExpressionDynamic(view, nodeDef, values);\n    default:\n      throw 'unreachable';\n  }\n}\n/**\n * @param {?} view\n * @param {?} nodeDef\n * @param {?} argStyle\n * @param {?=} v0\n * @param {?=} v1\n * @param {?=} v2\n * @param {?=} v3\n * @param {?=} v4\n * @param {?=} v5\n * @param {?=} v6\n * @param {?=} v7\n * @param {?=} v8\n * @param {?=} v9\n * @return {?}\n */\nexport function checkNoChangesNode(\n    view: ViewData, nodeDef: NodeDef, argStyle: ArgumentType, v0?: any, v1?: any, v2?: any,\n    v3?: any, v4?: any, v5?: any, v6?: any, v7?: any, v8?: any, v9?: any): any {\n  if (argStyle === ArgumentType.Inline) {\n    checkNoChangesNodeInline(view, nodeDef, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9);\n  } else {\n    checkNoChangesNodeDynamic(view, nodeDef, v0);\n  }\n  // Returning false is ok here as we would have thrown in case of a change.\n  return false;\n}\n/**\n * @param {?} view\n * @param {?} nodeDef\n * @param {?} v0\n * @param {?} v1\n * @param {?} v2\n * @param {?} v3\n * @param {?} v4\n * @param {?} v5\n * @param {?} v6\n * @param {?} v7\n * @param {?} v8\n * @param {?} v9\n * @return {?}\n */\nfunction checkNoChangesNodeInline(\n    view: ViewData, nodeDef: NodeDef, v0: any, v1: any, v2: any, v3: any, v4: any, v5: any, v6: any,\n    v7: any, v8: any, v9: any): void {\n  const /** @type {?} */ bindLen = nodeDef.bindings.length;\n  if (bindLen > 0) checkBindingNoChanges(view, nodeDef, 0, v0);\n  if (bindLen > 1) checkBindingNoChanges(view, nodeDef, 1, v1);\n  if (bindLen > 2) checkBindingNoChanges(view, nodeDef, 2, v2);\n  if (bindLen > 3) checkBindingNoChanges(view, nodeDef, 3, v3);\n  if (bindLen > 4) checkBindingNoChanges(view, nodeDef, 4, v4);\n  if (bindLen > 5) checkBindingNoChanges(view, nodeDef, 5, v5);\n  if (bindLen > 6) checkBindingNoChanges(view, nodeDef, 6, v6);\n  if (bindLen > 7) checkBindingNoChanges(view, nodeDef, 7, v7);\n  if (bindLen > 8) checkBindingNoChanges(view, nodeDef, 8, v8);\n  if (bindLen > 9) checkBindingNoChanges(view, nodeDef, 9, v9);\n}\n/**\n * @param {?} view\n * @param {?} nodeDef\n * @param {?} values\n * @return {?}\n */\nfunction checkNoChangesNodeDynamic(view: ViewData, nodeDef: NodeDef, values: any[]): void {\n  for (let /** @type {?} */ i = 0; i < values.length; i++) {\n    checkBindingNoChanges(view, nodeDef, i, values[i]);\n  }\n}\n/**\n * Workaround https://github.com/angular/tsickle/issues/497\n * @suppress {misplacedTypeAnnotation}\n * @param {?} view\n * @param {?} nodeDef\n * @return {?}\n */\nfunction checkNoChangesQuery(view: ViewData, nodeDef: NodeDef) {\n  const /** @type {?} */ queryList = asQueryList(view, nodeDef.nodeIndex);\n  if (queryList.dirty) {\n    throw expressionChangedAfterItHasBeenCheckedError(\n        Services.createDebugContext(view, nodeDef.nodeIndex),\n        `Query ${ /** @type {?} */((nodeDef.query)).id} not dirty`, `Query ${ /** @type {?} */((nodeDef.query)).id} dirty`,\n        (view.state & ViewState.BeforeFirstCheck) !== 0);\n  }\n}\n/**\n * @param {?} view\n * @return {?}\n */\nexport function destroyView(view: ViewData) {\n  if (view.state & ViewState.Destroyed) {\n    return;\n  }\n  execEmbeddedViewsAction(view, ViewAction.Destroy);\n  execComponentViewsAction(view, ViewAction.Destroy);\n  callLifecycleHooksChildrenFirst(view, NodeFlags.OnDestroy);\n  if (view.disposables) {\n    for (let /** @type {?} */ i = 0; i < view.disposables.length; i++) {\n      view.disposables[i]();\n    }\n  }\n  detachProjectedView(view);\n  if (view.renderer.destroyNode) {\n    destroyViewNodes(view);\n  }\n  if (isComponentView(view)) {\n    view.renderer.destroy();\n  }\n  view.state |= ViewState.Destroyed;\n}\n/**\n * @param {?} view\n * @return {?}\n */\nfunction destroyViewNodes(view: ViewData) {\n  const /** @type {?} */ len = view.def.nodes.length;\n  for (let /** @type {?} */ i = 0; i < len; i++) {\n    const /** @type {?} */ def = view.def.nodes[i];\n    if (def.flags & NodeFlags.TypeElement) { /** @type {?} */((\n      view.renderer.destroyNode))(asElementData(view, i).renderElement);\n    } else if (def.flags & NodeFlags.TypeText) { /** @type {?} */((\n      view.renderer.destroyNode))(asTextData(view, i).renderText);\n    } else if (def.flags & NodeFlags.TypeContentQuery || def.flags & NodeFlags.TypeViewQuery) {\n      asQueryList(view, i).destroy();\n    }\n  }\n}\ntype ViewAction = number;\nlet ViewAction: any = {};\nViewAction.CreateViewNodes = 0;\nViewAction.CheckNoChanges = 1;\nViewAction.CheckNoChangesProjectedViews = 2;\nViewAction.CheckAndUpdate = 3;\nViewAction.CheckAndUpdateProjectedViews = 4;\nViewAction.Destroy = 5;\nViewAction[ViewAction.CreateViewNodes] = \"CreateViewNodes\";\nViewAction[ViewAction.CheckNoChanges] = \"CheckNoChanges\";\nViewAction[ViewAction.CheckNoChangesProjectedViews] = \"CheckNoChangesProjectedViews\";\nViewAction[ViewAction.CheckAndUpdate] = \"CheckAndUpdate\";\nViewAction[ViewAction.CheckAndUpdateProjectedViews] = \"CheckAndUpdateProjectedViews\";\nViewAction[ViewAction.Destroy] = \"Destroy\";\n\n/**\n * @param {?} view\n * @param {?} action\n * @return {?}\n */\nfunction execComponentViewsAction(view: ViewData, action: ViewAction) {\n  const /** @type {?} */ def = view.def;\n  if (!(def.nodeFlags & NodeFlags.ComponentView)) {\n    return;\n  }\n  for (let /** @type {?} */ i = 0; i < def.nodes.length; i++) {\n    const /** @type {?} */ nodeDef = def.nodes[i];\n    if (nodeDef.flags & NodeFlags.ComponentView) {\n      // a leaf\n      callViewAction(asElementData(view, i).componentView, action);\n    } else if ((nodeDef.childFlags & NodeFlags.ComponentView) === 0) {\n      // a parent with leafs\n      // no child is a component,\n      // then skip the children\n      i += nodeDef.childCount;\n    }\n  }\n}\n/**\n * @param {?} view\n * @param {?} action\n * @return {?}\n */\nfunction execEmbeddedViewsAction(view: ViewData, action: ViewAction) {\n  const /** @type {?} */ def = view.def;\n  if (!(def.nodeFlags & NodeFlags.EmbeddedViews)) {\n    return;\n  }\n  for (let /** @type {?} */ i = 0; i < def.nodes.length; i++) {\n    const /** @type {?} */ nodeDef = def.nodes[i];\n    if (nodeDef.flags & NodeFlags.EmbeddedViews) {\n      // a leaf\n      const /** @type {?} */ embeddedViews = /** @type {?} */(( asElementData(view, i).viewContainer))._embeddedViews;\n      for (let /** @type {?} */ k = 0; k < embeddedViews.length; k++) {\n        callViewAction(embeddedViews[k], action);\n      }\n    } else if ((nodeDef.childFlags & NodeFlags.EmbeddedViews) === 0) {\n      // a parent with leafs\n      // no child is a component,\n      // then skip the children\n      i += nodeDef.childCount;\n    }\n  }\n}\n/**\n * @param {?} view\n * @param {?} action\n * @return {?}\n */\nfunction callViewAction(view: ViewData, action: ViewAction) {\n  const /** @type {?} */ viewState = view.state;\n  switch (action) {\n    case ViewAction.CheckNoChanges:\n      if ((viewState & ViewState.Destroyed) === 0) {\n        if ((viewState & ViewState.CatDetectChanges) === ViewState.CatDetectChanges) {\n          checkNoChangesView(view);\n        } else if (viewState & ViewState.CheckProjectedViews) {\n          execProjectedViewsAction(view, ViewAction.CheckNoChangesProjectedViews);\n        }\n      }\n      break;\n    case ViewAction.CheckNoChangesProjectedViews:\n      if ((viewState & ViewState.Destroyed) === 0) {\n        if (viewState & ViewState.CheckProjectedView) {\n          checkNoChangesView(view);\n        } else if (viewState & ViewState.CheckProjectedViews) {\n          execProjectedViewsAction(view, action);\n        }\n      }\n      break;\n    case ViewAction.CheckAndUpdate:\n      if ((viewState & ViewState.Destroyed) === 0) {\n        if ((viewState & ViewState.CatDetectChanges) === ViewState.CatDetectChanges) {\n          checkAndUpdateView(view);\n        } else if (viewState & ViewState.CheckProjectedViews) {\n          execProjectedViewsAction(view, ViewAction.CheckAndUpdateProjectedViews);\n        }\n      }\n      break;\n    case ViewAction.CheckAndUpdateProjectedViews:\n      if ((viewState & ViewState.Destroyed) === 0) {\n        if (viewState & ViewState.CheckProjectedView) {\n          checkAndUpdateView(view);\n        } else if (viewState & ViewState.CheckProjectedViews) {\n          execProjectedViewsAction(view, action);\n        }\n      }\n      break;\n    case ViewAction.Destroy:\n      // Note: destroyView recurses over all views,\n      // so we don't need to special case projected views here.\n      destroyView(view);\n      break;\n    case ViewAction.CreateViewNodes:\n      createViewNodes(view);\n      break;\n  }\n}\n/**\n * @param {?} view\n * @param {?} action\n * @return {?}\n */\nfunction execProjectedViewsAction(view: ViewData, action: ViewAction) {\n  execEmbeddedViewsAction(view, action);\n  execComponentViewsAction(view, action);\n}\n/**\n * @param {?} view\n * @param {?} queryFlags\n * @param {?} staticDynamicQueryFlag\n * @param {?} checkType\n * @return {?}\n */\nfunction execQueriesAction(\n    view: ViewData, queryFlags: NodeFlags, staticDynamicQueryFlag: NodeFlags,\n    checkType: CheckType) {\n  if (!(view.def.nodeFlags & queryFlags) || !(view.def.nodeFlags & staticDynamicQueryFlag)) {\n    return;\n  }\n  const /** @type {?} */ nodeCount = view.def.nodes.length;\n  for (let /** @type {?} */ i = 0; i < nodeCount; i++) {\n    const /** @type {?} */ nodeDef = view.def.nodes[i];\n    if ((nodeDef.flags & queryFlags) && (nodeDef.flags & staticDynamicQueryFlag)) {\n      Services.setCurrentNode(view, nodeDef.nodeIndex);\n      switch (checkType) {\n        case CheckType.CheckAndUpdate:\n          checkAndUpdateQuery(view, nodeDef);\n          break;\n        case CheckType.CheckNoChanges:\n          checkNoChangesQuery(view, nodeDef);\n          break;\n      }\n    }\n    if (!(nodeDef.childFlags & queryFlags) || !(nodeDef.childFlags & staticDynamicQueryFlag)) {\n      // no child has a matching query\n      // then skip the children\n      i += nodeDef.childCount;\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {isDevMode} from '../application_ref';\nimport {DebugElement, DebugNode, EventListener, getDebugNode, indexDebugNode, removeDebugNodeFromIndex} from '../debug/debug_node';\nimport {Injector} from '../di';\nimport {ErrorHandler} from '../error_handler';\nimport {NgModuleRef} from '../linker/ng_module_factory';\nimport {Renderer2, RendererFactory2, RendererStyleFlags2, RendererType2} from '../render/api';\nimport {Sanitizer} from '../security';\nimport {Type} from '../type';\n\nimport {isViewDebugError, viewDestroyedError, viewWrappedDebugError} from './errors';\nimport {resolveDep} from './provider';\nimport {dirtyParentQueries, getQueryValue} from './query';\nimport {createInjector, createNgModuleRef} from './refs';\nimport {ArgumentType, BindingFlags, CheckType, DebugContext, DepDef, ElementData, NgModuleDefinition, NgModuleProviderDef, NodeDef, NodeFlags, NodeLogger, ProviderOverride, RootData, Services, ViewData, ViewDefinition, ViewState, asElementData, asPureExpressionData} from './types';\nimport {NOOP, isComponentView, renderNode, splitDepsDsl, viewParentEl} from './util';\nimport {checkAndUpdateNode, checkAndUpdateView, checkNoChangesNode, checkNoChangesView, createComponentView, createEmbeddedView, createRootView, destroyView} from './view';\n\n\nlet /** @type {?} */ initialized = false;\n/**\n * @return {?}\n */\nexport function initServicesIfNeeded() {\n  if (initialized) {\n    return;\n  }\n  initialized = true;\n  const /** @type {?} */ services = isDevMode() ? createDebugServices() : createProdServices();\n  Services.setCurrentNode = services.setCurrentNode;\n  Services.createRootView = services.createRootView;\n  Services.createEmbeddedView = services.createEmbeddedView;\n  Services.createComponentView = services.createComponentView;\n  Services.createNgModuleRef = services.createNgModuleRef;\n  Services.overrideProvider = services.overrideProvider;\n  Services.clearProviderOverrides = services.clearProviderOverrides;\n  Services.checkAndUpdateView = services.checkAndUpdateView;\n  Services.checkNoChangesView = services.checkNoChangesView;\n  Services.destroyView = services.destroyView;\n  Services.resolveDep = resolveDep;\n  Services.createDebugContext = services.createDebugContext;\n  Services.handleEvent = services.handleEvent;\n  Services.updateDirectives = services.updateDirectives;\n  Services.updateRenderer = services.updateRenderer;\n  Services.dirtyParentQueries = dirtyParentQueries;\n}\n/**\n * @return {?}\n */\nfunction createProdServices() {\n  return {\n    setCurrentNode: () => {},\n    createRootView: createProdRootView,\n    createEmbeddedView: createEmbeddedView,\n    createComponentView: createComponentView,\n    createNgModuleRef: createNgModuleRef,\n    overrideProvider: NOOP,\n    clearProviderOverrides: NOOP,\n    checkAndUpdateView: checkAndUpdateView,\n    checkNoChangesView: checkNoChangesView,\n    destroyView: destroyView,\n    createDebugContext: (view: ViewData, nodeIndex: number) => new DebugContext_(view, nodeIndex),\n    handleEvent: (view: ViewData, nodeIndex: number, eventName: string, event: any) =>\n                     view.def.handleEvent(view, nodeIndex, eventName, event),\n    updateDirectives: (view: ViewData, checkType: CheckType) => view.def.updateDirectives(\n                          checkType === CheckType.CheckAndUpdate ? prodCheckAndUpdateNode :\n                                                                   prodCheckNoChangesNode,\n                          view),\n    updateRenderer: (view: ViewData, checkType: CheckType) => view.def.updateRenderer(\n                        checkType === CheckType.CheckAndUpdate ? prodCheckAndUpdateNode :\n                                                                 prodCheckNoChangesNode,\n                        view),\n  };\n}\n/**\n * @return {?}\n */\nfunction createDebugServices() {\n  return {\n    setCurrentNode: debugSetCurrentNode,\n    createRootView: debugCreateRootView,\n    createEmbeddedView: debugCreateEmbeddedView,\n    createComponentView: debugCreateComponentView,\n    createNgModuleRef: debugCreateNgModuleRef,\n    overrideProvider: debugOverrideProvider,\n    clearProviderOverrides: debugClearProviderOverrides,\n    checkAndUpdateView: debugCheckAndUpdateView,\n    checkNoChangesView: debugCheckNoChangesView,\n    destroyView: debugDestroyView,\n    createDebugContext: (view: ViewData, nodeIndex: number) => new DebugContext_(view, nodeIndex),\n    handleEvent: debugHandleEvent,\n    updateDirectives: debugUpdateDirectives,\n    updateRenderer: debugUpdateRenderer,\n  };\n}\n/**\n * @param {?} elInjector\n * @param {?} projectableNodes\n * @param {?} rootSelectorOrNode\n * @param {?} def\n * @param {?} ngModule\n * @param {?=} context\n * @return {?}\n */\nfunction createProdRootView(\n    elInjector: Injector, projectableNodes: any[][], rootSelectorOrNode: string | any,\n    def: ViewDefinition, ngModule: NgModuleRef<any>, context?: any): ViewData {\n  const /** @type {?} */ rendererFactory: RendererFactory2 = ngModule.injector.get(RendererFactory2);\n  return createRootView(\n      createRootData(elInjector, ngModule, rendererFactory, projectableNodes, rootSelectorOrNode),\n      def, context);\n}\n/**\n * @param {?} elInjector\n * @param {?} projectableNodes\n * @param {?} rootSelectorOrNode\n * @param {?} def\n * @param {?} ngModule\n * @param {?=} context\n * @return {?}\n */\nfunction debugCreateRootView(\n    elInjector: Injector, projectableNodes: any[][], rootSelectorOrNode: string | any,\n    def: ViewDefinition, ngModule: NgModuleRef<any>, context?: any): ViewData {\n  const /** @type {?} */ rendererFactory: RendererFactory2 = ngModule.injector.get(RendererFactory2);\n  const /** @type {?} */ root = createRootData(\n      elInjector, ngModule, new DebugRendererFactory2(rendererFactory), projectableNodes,\n      rootSelectorOrNode);\n  const /** @type {?} */ defWithOverride = applyProviderOverridesToView(def);\n  return callWithDebugContext(\n      DebugAction.create, createRootView, null, [root, defWithOverride, context]);\n}\n/**\n * @param {?} elInjector\n * @param {?} ngModule\n * @param {?} rendererFactory\n * @param {?} projectableNodes\n * @param {?} rootSelectorOrNode\n * @return {?}\n */\nfunction createRootData(\n    elInjector: Injector, ngModule: NgModuleRef<any>, rendererFactory: RendererFactory2,\n    projectableNodes: any[][], rootSelectorOrNode: any): RootData {\n  const /** @type {?} */ sanitizer = ngModule.injector.get(Sanitizer);\n  const /** @type {?} */ errorHandler = ngModule.injector.get(ErrorHandler);\n  const /** @type {?} */ renderer = rendererFactory.createRenderer(null, null);\n  return {\n    ngModule,\n    injector: elInjector, projectableNodes,\n    selectorOrNode: rootSelectorOrNode, sanitizer, rendererFactory, renderer, errorHandler\n  };\n}\n/**\n * @param {?} parentView\n * @param {?} anchorDef\n * @param {?} viewDef\n * @param {?=} context\n * @return {?}\n */\nfunction debugCreateEmbeddedView(\n    parentView: ViewData, anchorDef: NodeDef, viewDef: ViewDefinition, context?: any): ViewData {\n  const /** @type {?} */ defWithOverride = applyProviderOverridesToView(viewDef);\n  return callWithDebugContext(\n      DebugAction.create, createEmbeddedView, null,\n      [parentView, anchorDef, defWithOverride, context]);\n}\n/**\n * @param {?} parentView\n * @param {?} nodeDef\n * @param {?} viewDef\n * @param {?} hostElement\n * @return {?}\n */\nfunction debugCreateComponentView(\n    parentView: ViewData, nodeDef: NodeDef, viewDef: ViewDefinition, hostElement: any): ViewData {\n  const /** @type {?} */ defWithOverride = applyProviderOverridesToView(viewDef);\n  return callWithDebugContext(\n      DebugAction.create, createComponentView, null,\n      [parentView, nodeDef, defWithOverride, hostElement]);\n}\n/**\n * @param {?} moduleType\n * @param {?} parentInjector\n * @param {?} bootstrapComponents\n * @param {?} def\n * @return {?}\n */\nfunction debugCreateNgModuleRef(\n    moduleType: Type<any>, parentInjector: Injector, bootstrapComponents: Type<any>[],\n    def: NgModuleDefinition): NgModuleRef<any> {\n  const /** @type {?} */ defWithOverride = applyProviderOverridesToNgModule(def);\n  return createNgModuleRef(moduleType, parentInjector, bootstrapComponents, defWithOverride);\n}\n\nconst /** @type {?} */ providerOverrides = new Map<any, ProviderOverride>();\n/**\n * @param {?} override\n * @return {?}\n */\nfunction debugOverrideProvider(override: ProviderOverride) {\n  providerOverrides.set(override.token, override);\n}\n/**\n * @return {?}\n */\nfunction debugClearProviderOverrides() {\n  providerOverrides.clear();\n}\n/**\n * @param {?} def\n * @return {?}\n */\nfunction applyProviderOverridesToView(def: ViewDefinition): ViewDefinition {\n  if (providerOverrides.size === 0) {\n    return def;\n  }\n  const /** @type {?} */ elementIndicesWithOverwrittenProviders = findElementIndicesWithOverwrittenProviders(def);\n  if (elementIndicesWithOverwrittenProviders.length === 0) {\n    return def;\n  }\n  // clone the whole view definition,\n  // as it maintains references between the nodes that are hard to update.\n  def = /** @type {?} */(( def.factory))(() => NOOP);\n  for (let /** @type {?} */ i = 0; i < elementIndicesWithOverwrittenProviders.length; i++) {\n    applyProviderOverridesToElement(def, elementIndicesWithOverwrittenProviders[i]);\n  }\n  return def;\n/**\n * @param {?} def\n * @return {?}\n */\nfunction findElementIndicesWithOverwrittenProviders(def: ViewDefinition): number[] {\n    const /** @type {?} */ elIndicesWithOverwrittenProviders: number[] = [];\n    let /** @type {?} */ lastElementDef: NodeDef|null = null;\n    for (let /** @type {?} */ i = 0; i < def.nodes.length; i++) {\n      const /** @type {?} */ nodeDef = def.nodes[i];\n      if (nodeDef.flags & NodeFlags.TypeElement) {\n        lastElementDef = nodeDef;\n      }\n      if (lastElementDef && nodeDef.flags & NodeFlags.CatProviderNoDirective &&\n          providerOverrides.has( /** @type {?} */((nodeDef.provider)).token)) {\n        elIndicesWithOverwrittenProviders.push( /** @type {?} */((lastElementDef)).nodeIndex);\n        lastElementDef = null;\n      }\n    }\n    return elIndicesWithOverwrittenProviders;\n  }\n/**\n * @param {?} viewDef\n * @param {?} elIndex\n * @return {?}\n */\nfunction applyProviderOverridesToElement(viewDef: ViewDefinition, elIndex: number) {\n    for (let /** @type {?} */ i = elIndex + 1; i < viewDef.nodes.length; i++) {\n      const /** @type {?} */ nodeDef = viewDef.nodes[i];\n      if (nodeDef.flags & NodeFlags.TypeElement) {\n        // stop at the next element\n        return;\n      }\n      if (nodeDef.flags & NodeFlags.CatProviderNoDirective) {\n        const /** @type {?} */ provider = /** @type {?} */(( nodeDef.provider));\n        const /** @type {?} */ override = providerOverrides.get(provider.token);\n        if (override) {\n          nodeDef.flags = (nodeDef.flags & ~NodeFlags.CatProviderNoDirective) | override.flags;\n          provider.deps = splitDepsDsl(override.deps);\n          provider.value = override.value;\n        }\n      }\n    }\n  }\n}\n/**\n * @param {?} def\n * @return {?}\n */\nfunction applyProviderOverridesToNgModule(def: NgModuleDefinition): NgModuleDefinition {\n  const {hasOverrides, hasDeprecatedOverrides} = calcHasOverrides(def);\n  if (!hasOverrides) {\n    return def;\n  }\n  // clone the whole view definition,\n  // as it maintains references between the nodes that are hard to update.\n  def = /** @type {?} */(( def.factory))(() => NOOP);\n  applyProviderOverrides(def);\n  return def;\n/**\n * @param {?} def\n * @return {?}\n */\nfunction calcHasOverrides(def: NgModuleDefinition):\n      {hasOverrides: boolean, hasDeprecatedOverrides: boolean} {\n    let /** @type {?} */ hasOverrides = false;\n    let /** @type {?} */ hasDeprecatedOverrides = false;\n    if (providerOverrides.size === 0) {\n      return {hasOverrides, hasDeprecatedOverrides};\n    }\n    def.providers.forEach(node => {\n      const /** @type {?} */ override = providerOverrides.get(node.token);\n      if ((node.flags & NodeFlags.CatProviderNoDirective) && override) {\n        hasOverrides = true;\n        hasDeprecatedOverrides = hasDeprecatedOverrides || override.deprecatedBehavior;\n      }\n    });\n    return {hasOverrides, hasDeprecatedOverrides};\n  }\n/**\n * @param {?} def\n * @return {?}\n */\nfunction applyProviderOverrides(def: NgModuleDefinition) {\n    for (let /** @type {?} */ i = 0; i < def.providers.length; i++) {\n      const /** @type {?} */ provider = def.providers[i];\n      if (hasDeprecatedOverrides) {\n        // We had a bug where me made\n        // all providers lazy. Keep this logic behind a flag\n        // for migrating existing users.\n        provider.flags |= NodeFlags.LazyProvider;\n      }\n      const /** @type {?} */ override = providerOverrides.get(provider.token);\n      if (override) {\n        provider.flags = (provider.flags & ~NodeFlags.CatProviderNoDirective) | override.flags;\n        provider.deps = splitDepsDsl(override.deps);\n        provider.value = override.value;\n      }\n    }\n  }\n}\n/**\n * @param {?} view\n * @param {?} checkIndex\n * @param {?} argStyle\n * @param {?=} v0\n * @param {?=} v1\n * @param {?=} v2\n * @param {?=} v3\n * @param {?=} v4\n * @param {?=} v5\n * @param {?=} v6\n * @param {?=} v7\n * @param {?=} v8\n * @param {?=} v9\n * @return {?}\n */\nfunction prodCheckAndUpdateNode(\n    view: ViewData, checkIndex: number, argStyle: ArgumentType, v0?: any, v1?: any, v2?: any,\n    v3?: any, v4?: any, v5?: any, v6?: any, v7?: any, v8?: any, v9?: any): any {\n  const /** @type {?} */ nodeDef = view.def.nodes[checkIndex];\n  checkAndUpdateNode(view, nodeDef, argStyle, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9);\n  return (nodeDef.flags & NodeFlags.CatPureExpression) ?\n      asPureExpressionData(view, checkIndex).value :\n      undefined;\n}\n/**\n * @param {?} view\n * @param {?} checkIndex\n * @param {?} argStyle\n * @param {?=} v0\n * @param {?=} v1\n * @param {?=} v2\n * @param {?=} v3\n * @param {?=} v4\n * @param {?=} v5\n * @param {?=} v6\n * @param {?=} v7\n * @param {?=} v8\n * @param {?=} v9\n * @return {?}\n */\nfunction prodCheckNoChangesNode(\n    view: ViewData, checkIndex: number, argStyle: ArgumentType, v0?: any, v1?: any, v2?: any,\n    v3?: any, v4?: any, v5?: any, v6?: any, v7?: any, v8?: any, v9?: any): any {\n  const /** @type {?} */ nodeDef = view.def.nodes[checkIndex];\n  checkNoChangesNode(view, nodeDef, argStyle, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9);\n  return (nodeDef.flags & NodeFlags.CatPureExpression) ?\n      asPureExpressionData(view, checkIndex).value :\n      undefined;\n}\n/**\n * @param {?} view\n * @return {?}\n */\nfunction debugCheckAndUpdateView(view: ViewData) {\n  return callWithDebugContext(DebugAction.detectChanges, checkAndUpdateView, null, [view]);\n}\n/**\n * @param {?} view\n * @return {?}\n */\nfunction debugCheckNoChangesView(view: ViewData) {\n  return callWithDebugContext(DebugAction.checkNoChanges, checkNoChangesView, null, [view]);\n}\n/**\n * @param {?} view\n * @return {?}\n */\nfunction debugDestroyView(view: ViewData) {\n  return callWithDebugContext(DebugAction.destroy, destroyView, null, [view]);\n}\ntype DebugAction = number;\nlet DebugAction: any = {};\nDebugAction.create = 0;\nDebugAction.detectChanges = 1;\nDebugAction.checkNoChanges = 2;\nDebugAction.destroy = 3;\nDebugAction.handleEvent = 4;\nDebugAction[DebugAction.create] = \"create\";\nDebugAction[DebugAction.detectChanges] = \"detectChanges\";\nDebugAction[DebugAction.checkNoChanges] = \"checkNoChanges\";\nDebugAction[DebugAction.destroy] = \"destroy\";\nDebugAction[DebugAction.handleEvent] = \"handleEvent\";\n\n\nlet /** @type {?} */ _currentAction: DebugAction;\nlet /** @type {?} */ _currentView: ViewData;\nlet /** @type {?} */ _currentNodeIndex: number|null;\n/**\n * @param {?} view\n * @param {?} nodeIndex\n * @return {?}\n */\nfunction debugSetCurrentNode(view: ViewData, nodeIndex: number | null) {\n  _currentView = view;\n  _currentNodeIndex = nodeIndex;\n}\n/**\n * @param {?} view\n * @param {?} nodeIndex\n * @param {?} eventName\n * @param {?} event\n * @return {?}\n */\nfunction debugHandleEvent(view: ViewData, nodeIndex: number, eventName: string, event: any) {\n  debugSetCurrentNode(view, nodeIndex);\n  return callWithDebugContext(\n      DebugAction.handleEvent, view.def.handleEvent, null, [view, nodeIndex, eventName, event]);\n}\n/**\n * @param {?} view\n * @param {?} checkType\n * @return {?}\n */\nfunction debugUpdateDirectives(view: ViewData, checkType: CheckType) {\n  if (view.state & ViewState.Destroyed) {\n    throw viewDestroyedError(DebugAction[_currentAction]);\n  }\n  debugSetCurrentNode(view, nextDirectiveWithBinding(view, 0));\n  return view.def.updateDirectives(debugCheckDirectivesFn, view);\n/**\n * @param {?} view\n * @param {?} nodeIndex\n * @param {?} argStyle\n * @param {...?} values\n * @return {?}\n */\nfunction debugCheckDirectivesFn(\n      view: ViewData, nodeIndex: number, argStyle: ArgumentType, ...values: any[]) {\n    const /** @type {?} */ nodeDef = view.def.nodes[nodeIndex];\n    if (checkType === CheckType.CheckAndUpdate) {\n      debugCheckAndUpdateNode(view, nodeDef, argStyle, values);\n    } else {\n      debugCheckNoChangesNode(view, nodeDef, argStyle, values);\n    }\n    if (nodeDef.flags & NodeFlags.TypeDirective) {\n      debugSetCurrentNode(view, nextDirectiveWithBinding(view, nodeIndex));\n    }\n    return (nodeDef.flags & NodeFlags.CatPureExpression) ?\n        asPureExpressionData(view, nodeDef.nodeIndex).value :\n        undefined;\n  }\n}\n/**\n * @param {?} view\n * @param {?} checkType\n * @return {?}\n */\nfunction debugUpdateRenderer(view: ViewData, checkType: CheckType) {\n  if (view.state & ViewState.Destroyed) {\n    throw viewDestroyedError(DebugAction[_currentAction]);\n  }\n  debugSetCurrentNode(view, nextRenderNodeWithBinding(view, 0));\n  return view.def.updateRenderer(debugCheckRenderNodeFn, view);\n/**\n * @param {?} view\n * @param {?} nodeIndex\n * @param {?} argStyle\n * @param {...?} values\n * @return {?}\n */\nfunction debugCheckRenderNodeFn(\n      view: ViewData, nodeIndex: number, argStyle: ArgumentType, ...values: any[]) {\n    const /** @type {?} */ nodeDef = view.def.nodes[nodeIndex];\n    if (checkType === CheckType.CheckAndUpdate) {\n      debugCheckAndUpdateNode(view, nodeDef, argStyle, values);\n    } else {\n      debugCheckNoChangesNode(view, nodeDef, argStyle, values);\n    }\n    if (nodeDef.flags & NodeFlags.CatRenderNode) {\n      debugSetCurrentNode(view, nextRenderNodeWithBinding(view, nodeIndex));\n    }\n    return (nodeDef.flags & NodeFlags.CatPureExpression) ?\n        asPureExpressionData(view, nodeDef.nodeIndex).value :\n        undefined;\n  }\n}\n/**\n * @param {?} view\n * @param {?} nodeDef\n * @param {?} argStyle\n * @param {?} givenValues\n * @return {?}\n */\nfunction debugCheckAndUpdateNode(\n    view: ViewData, nodeDef: NodeDef, argStyle: ArgumentType, givenValues: any[]): void {\n  const /** @type {?} */ changed = ( /** @type {?} */((<any>checkAndUpdateNode)))(view, nodeDef, argStyle, ...givenValues);\n  if (changed) {\n    const /** @type {?} */ values = argStyle === ArgumentType.Dynamic ? givenValues[0] : givenValues;\n    if (nodeDef.flags & NodeFlags.TypeDirective) {\n      const /** @type {?} */ bindingValues: {[key: string]: string} = {};\n      for (let /** @type {?} */ i = 0; i < nodeDef.bindings.length; i++) {\n        const /** @type {?} */ binding = nodeDef.bindings[i];\n        const /** @type {?} */ value = values[i];\n        if (binding.flags & BindingFlags.TypeProperty) {\n          bindingValues[normalizeDebugBindingName( /** @type {?} */((binding.nonMinifiedName)))] =\n              normalizeDebugBindingValue(value);\n        }\n      }\n      const /** @type {?} */ elDef = /** @type {?} */(( nodeDef.parent));\n      const /** @type {?} */ el = asElementData(view, elDef.nodeIndex).renderElement;\n      if (! /** @type {?} */((elDef.element)).name) {\n        // a comment.\n        view.renderer.setValue(el, `bindings=${JSON.stringify(bindingValues, null, 2)}`);\n      } else {\n        // a regular element.\n        for (let /** @type {?} */ attr in bindingValues) {\n          const /** @type {?} */ value = bindingValues[attr];\n          if (value != null) {\n            view.renderer.setAttribute(el, attr, value);\n          } else {\n            view.renderer.removeAttribute(el, attr);\n          }\n        }\n      }\n    }\n  }\n}\n/**\n * @param {?} view\n * @param {?} nodeDef\n * @param {?} argStyle\n * @param {?} values\n * @return {?}\n */\nfunction debugCheckNoChangesNode(\n    view: ViewData, nodeDef: NodeDef, argStyle: ArgumentType, values: any[]): void {\n  ( /** @type {?} */((<any>checkNoChangesNode)))(view, nodeDef, argStyle, ...values);\n}\n/**\n * @param {?} name\n * @return {?}\n */\nfunction normalizeDebugBindingName(name: string) {\n  // Attribute names with `$` (eg `x-y$`) are valid per spec, but unsupported by some browsers\n  name = camelCaseToDashCase(name.replace(/[$@]/g, '_'));\n  return `ng-reflect-${name}`;\n}\n\nconst /** @type {?} */ CAMEL_CASE_REGEXP = /([A-Z])/g;\n/**\n * @param {?} input\n * @return {?}\n */\nfunction camelCaseToDashCase(input: string): string {\n  return input.replace(CAMEL_CASE_REGEXP, (...m: any[]) => '-' + m[1].toLowerCase());\n}\n/**\n * @param {?} value\n * @return {?}\n */\nfunction normalizeDebugBindingValue(value: any): string {\n  try {\n    // Limit the size of the value as otherwise the DOM just gets polluted.\n    return value != null ? value.toString().slice(0, 30) : value;\n  } catch ( /** @type {?} */e) {\n    return '[ERROR] Exception while trying to serialize the value';\n  }\n}\n/**\n * @param {?} view\n * @param {?} nodeIndex\n * @return {?}\n */\nfunction nextDirectiveWithBinding(view: ViewData, nodeIndex: number): number|null {\n  for (let /** @type {?} */ i = nodeIndex; i < view.def.nodes.length; i++) {\n    const /** @type {?} */ nodeDef = view.def.nodes[i];\n    if (nodeDef.flags & NodeFlags.TypeDirective && nodeDef.bindings && nodeDef.bindings.length) {\n      return i;\n    }\n  }\n  return null;\n}\n/**\n * @param {?} view\n * @param {?} nodeIndex\n * @return {?}\n */\nfunction nextRenderNodeWithBinding(view: ViewData, nodeIndex: number): number|null {\n  for (let /** @type {?} */ i = nodeIndex; i < view.def.nodes.length; i++) {\n    const /** @type {?} */ nodeDef = view.def.nodes[i];\n    if ((nodeDef.flags & NodeFlags.CatRenderNode) && nodeDef.bindings && nodeDef.bindings.length) {\n      return i;\n    }\n  }\n  return null;\n}\nclass DebugContext_ implements DebugContext {\nprivate nodeDef: NodeDef;\nprivate elView: ViewData;\nprivate elDef: NodeDef;\n/**\n * @param {?} view\n * @param {?} nodeIndex\n */\nconstructor(public view: ViewData,\npublic nodeIndex: number|null) {\n    if (nodeIndex == null) {\n      this.nodeIndex = nodeIndex = 0;\n    }\n    this.nodeDef = view.def.nodes[nodeIndex];\n    let elDef = this.nodeDef;\n    let elView = view;\n    while (elDef && (elDef.flags & NodeFlags.TypeElement) === 0) {\n      elDef = elDef.parent !;\n    }\n    if (!elDef) {\n      while (!elDef && elView) {\n        elDef = viewParentEl(elView) !;\n        elView = elView.parent !;\n      }\n    }\n    this.elDef = elDef;\n    this.elView = elView;\n  }\n/**\n * @return {?}\n */\nprivate get elOrCompView() {\n    // Has to be done lazily as we use the DebugContext also during creation of elements...\n    return asElementData(this.elView, this.elDef.nodeIndex).componentView || this.view;\n  }\n/**\n * @return {?}\n */\nget injector(): Injector { return createInjector(this.elView, this.elDef); }\n/**\n * @return {?}\n */\nget component(): any { return this.elOrCompView.component; }\n/**\n * @return {?}\n */\nget context(): any { return this.elOrCompView.context; }\n/**\n * @return {?}\n */\nget providerTokens(): any[] {\n    const /** @type {?} */ tokens: any[] = [];\n    if (this.elDef) {\n      for (let /** @type {?} */ i = this.elDef.nodeIndex + 1; i <= this.elDef.nodeIndex + this.elDef.childCount;\n           i++) {\n        const /** @type {?} */ childDef = this.elView.def.nodes[i];\n        if (childDef.flags & NodeFlags.CatProvider) {\n          tokens.push( /** @type {?} */((childDef.provider)).token);\n        }\n        i += childDef.childCount;\n      }\n    }\n    return tokens;\n  }\n/**\n * @return {?}\n */\nget references(): {[key: string]: any} {\n    const /** @type {?} */ references: {[key: string]: any} = {};\n    if (this.elDef) {\n      collectReferences(this.elView, this.elDef, references);\n\n      for (let /** @type {?} */ i = this.elDef.nodeIndex + 1; i <= this.elDef.nodeIndex + this.elDef.childCount;\n           i++) {\n        const /** @type {?} */ childDef = this.elView.def.nodes[i];\n        if (childDef.flags & NodeFlags.CatProvider) {\n          collectReferences(this.elView, childDef, references);\n        }\n        i += childDef.childCount;\n      }\n    }\n    return references;\n  }\n/**\n * @return {?}\n */\nget componentRenderElement() {\n    const /** @type {?} */ elData = findHostElement(this.elOrCompView);\n    return elData ? elData.renderElement : undefined;\n  }\n/**\n * @return {?}\n */\nget renderNode(): any {\n    return this.nodeDef.flags & NodeFlags.TypeText ? renderNode(this.view, this.nodeDef) :\n                                                     renderNode(this.elView, this.elDef);\n  }\n/**\n * @param {?} console\n * @param {...?} values\n * @return {?}\n */\nlogError(console: Console, ...values: any[]) {\n    let /** @type {?} */ logViewDef: ViewDefinition;\n    let /** @type {?} */ logNodeIndex: number;\n    if (this.nodeDef.flags & NodeFlags.TypeText) {\n      logViewDef = this.view.def;\n      logNodeIndex = this.nodeDef.nodeIndex;\n    } else {\n      logViewDef = this.elView.def;\n      logNodeIndex = this.elDef.nodeIndex;\n    }\n    // Note: we only generate a log function for text and element nodes\n    // to make the generated code as small as possible.\n    const /** @type {?} */ renderNodeIndex = getRenderNodeIndex(logViewDef, logNodeIndex);\n    let /** @type {?} */ currRenderNodeIndex = -1;\n    let /** @type {?} */ nodeLogger: NodeLogger = () => {\n      currRenderNodeIndex++;\n      if (currRenderNodeIndex === renderNodeIndex) {\n        return console.error.bind(console, ...values);\n      } else {\n        return NOOP;\n      }\n    }; /** @type {?} */((\n    logViewDef.factory))(nodeLogger);\n    if (currRenderNodeIndex < renderNodeIndex) {\n      console.error('Illegal state: the ViewDefinitionFactory did not call the logger!');\n      ( /** @type {?} */((<any>console.error)))(...values);\n    }\n  }\n}\n\nfunction DebugContext__tsickle_Closure_declarations() {\n/** @type {?} */\nDebugContext_.prototype.nodeDef;\n/** @type {?} */\nDebugContext_.prototype.elView;\n/** @type {?} */\nDebugContext_.prototype.elDef;\n/** @type {?} */\nDebugContext_.prototype.view;\n/** @type {?} */\nDebugContext_.prototype.nodeIndex;\n}\n\n/**\n * @param {?} viewDef\n * @param {?} nodeIndex\n * @return {?}\n */\nfunction getRenderNodeIndex(viewDef: ViewDefinition, nodeIndex: number): number {\n  let /** @type {?} */ renderNodeIndex = -1;\n  for (let /** @type {?} */ i = 0; i <= nodeIndex; i++) {\n    const /** @type {?} */ nodeDef = viewDef.nodes[i];\n    if (nodeDef.flags & NodeFlags.CatRenderNode) {\n      renderNodeIndex++;\n    }\n  }\n  return renderNodeIndex;\n}\n/**\n * @param {?} view\n * @return {?}\n */\nfunction findHostElement(view: ViewData): ElementData|null {\n  while (view && !isComponentView(view)) {\n    view = /** @type {?} */(( view.parent));\n  }\n  if (view.parent) {\n    return asElementData(view.parent, /** @type {?} */(( viewParentEl(view))).nodeIndex);\n  }\n  return null;\n}\n/**\n * @param {?} view\n * @param {?} nodeDef\n * @param {?} references\n * @return {?}\n */\nfunction collectReferences(view: ViewData, nodeDef: NodeDef, references: {[key: string]: any}) {\n  for (let /** @type {?} */ refName in nodeDef.references) {\n    references[refName] = getQueryValue(view, nodeDef, nodeDef.references[refName]);\n  }\n}\n/**\n * @param {?} action\n * @param {?} fn\n * @param {?} self\n * @param {?} args\n * @return {?}\n */\nfunction callWithDebugContext(action: DebugAction, fn: any, self: any, args: any[]) {\n  const /** @type {?} */ oldAction = _currentAction;\n  const /** @type {?} */ oldView = _currentView;\n  const /** @type {?} */ oldNodeIndex = _currentNodeIndex;\n  try {\n    _currentAction = action;\n    const /** @type {?} */ result = fn.apply(self, args);\n    _currentView = oldView;\n    _currentNodeIndex = oldNodeIndex;\n    _currentAction = oldAction;\n    return result;\n  } catch ( /** @type {?} */e) {\n    if (isViewDebugError(e) || !_currentView) {\n      throw e;\n    }\n    throw viewWrappedDebugError(e, /** @type {?} */(( getCurrentDebugContext())));\n  }\n}\n/**\n * @return {?}\n */\nexport function getCurrentDebugContext(): DebugContext|null {\n  return _currentView ? new DebugContext_(_currentView, _currentNodeIndex) : null;\n}\nclass DebugRendererFactory2 implements RendererFactory2 {\n/**\n * @param {?} delegate\n */\nconstructor(private delegate: RendererFactory2) {}\n/**\n * @param {?} element\n * @param {?} renderData\n * @return {?}\n */\ncreateRenderer(element: any, renderData: RendererType2|null): Renderer2 {\n    return new DebugRenderer2(this.delegate.createRenderer(element, renderData));\n  }\n/**\n * @return {?}\n */\nbegin() {\n    if (this.delegate.begin) {\n      this.delegate.begin();\n    }\n  }\n/**\n * @return {?}\n */\nend() {\n    if (this.delegate.end) {\n      this.delegate.end();\n    }\n  }\n/**\n * @return {?}\n */\nwhenRenderingDone(): Promise<any> {\n    if (this.delegate.whenRenderingDone) {\n      return this.delegate.whenRenderingDone();\n    }\n    return Promise.resolve(null);\n  }\n}\n\nfunction DebugRendererFactory2_tsickle_Closure_declarations() {\n/** @type {?} */\nDebugRendererFactory2.prototype.delegate;\n}\n\nclass DebugRenderer2 implements Renderer2 {\n/**\n * @param {?} delegate\n */\nconstructor(private delegate: Renderer2) {}\n/**\n * @return {?}\n */\nget data() { return this.delegate.data; }\n/**\n * @param {?} node\n * @return {?}\n */\ndestroyNode(node: any) {\n    removeDebugNodeFromIndex( /** @type {?} */((getDebugNode(node))));\n    if (this.delegate.destroyNode) {\n      this.delegate.destroyNode(node);\n    }\n  }\n/**\n * @return {?}\n */\ndestroy() { this.delegate.destroy(); }\n/**\n * @param {?} name\n * @param {?=} namespace\n * @return {?}\n */\ncreateElement(name: string, namespace?: string): any {\n    const /** @type {?} */ el = this.delegate.createElement(name, namespace);\n    const /** @type {?} */ debugCtx = getCurrentDebugContext();\n    if (debugCtx) {\n      const /** @type {?} */ debugEl = new DebugElement(el, null, debugCtx);\n      debugEl.name = name;\n      indexDebugNode(debugEl);\n    }\n    return el;\n  }\n/**\n * @param {?} value\n * @return {?}\n */\ncreateComment(value: string): any {\n    const /** @type {?} */ comment = this.delegate.createComment(value);\n    const /** @type {?} */ debugCtx = getCurrentDebugContext();\n    if (debugCtx) {\n      indexDebugNode(new DebugNode(comment, null, debugCtx));\n    }\n    return comment;\n  }\n/**\n * @param {?} value\n * @return {?}\n */\ncreateText(value: string): any {\n    const /** @type {?} */ text = this.delegate.createText(value);\n    const /** @type {?} */ debugCtx = getCurrentDebugContext();\n    if (debugCtx) {\n      indexDebugNode(new DebugNode(text, null, debugCtx));\n    }\n    return text;\n  }\n/**\n * @param {?} parent\n * @param {?} newChild\n * @return {?}\n */\nappendChild(parent: any, newChild: any): void {\n    const /** @type {?} */ debugEl = getDebugNode(parent);\n    const /** @type {?} */ debugChildEl = getDebugNode(newChild);\n    if (debugEl && debugChildEl && debugEl instanceof DebugElement) {\n      debugEl.addChild(debugChildEl);\n    }\n    this.delegate.appendChild(parent, newChild);\n  }\n/**\n * @param {?} parent\n * @param {?} newChild\n * @param {?} refChild\n * @return {?}\n */\ninsertBefore(parent: any, newChild: any, refChild: any): void {\n    const /** @type {?} */ debugEl = getDebugNode(parent);\n    const /** @type {?} */ debugChildEl = getDebugNode(newChild);\n    const /** @type {?} */ debugRefEl = /** @type {?} */(( getDebugNode(refChild)));\n    if (debugEl && debugChildEl && debugEl instanceof DebugElement) {\n      debugEl.insertBefore(debugRefEl, debugChildEl);\n    }\n\n    this.delegate.insertBefore(parent, newChild, refChild);\n  }\n/**\n * @param {?} parent\n * @param {?} oldChild\n * @return {?}\n */\nremoveChild(parent: any, oldChild: any): void {\n    const /** @type {?} */ debugEl = getDebugNode(parent);\n    const /** @type {?} */ debugChildEl = getDebugNode(oldChild);\n    if (debugEl && debugChildEl && debugEl instanceof DebugElement) {\n      debugEl.removeChild(debugChildEl);\n    }\n    this.delegate.removeChild(parent, oldChild);\n  }\n/**\n * @param {?} selectorOrNode\n * @return {?}\n */\nselectRootElement(selectorOrNode: string|any): any {\n    const /** @type {?} */ el = this.delegate.selectRootElement(selectorOrNode);\n    const /** @type {?} */ debugCtx = getCurrentDebugContext();\n    if (debugCtx) {\n      indexDebugNode(new DebugElement(el, null, debugCtx));\n    }\n    return el;\n  }\n/**\n * @param {?} el\n * @param {?} name\n * @param {?} value\n * @param {?=} namespace\n * @return {?}\n */\nsetAttribute(el: any, name: string, value: string, namespace?: string): void {\n    const /** @type {?} */ debugEl = getDebugNode(el);\n    if (debugEl && debugEl instanceof DebugElement) {\n      const /** @type {?} */ fullName = namespace ? namespace + ':' + name : name;\n      debugEl.attributes[fullName] = value;\n    }\n    this.delegate.setAttribute(el, name, value, namespace);\n  }\n/**\n * @param {?} el\n * @param {?} name\n * @param {?=} namespace\n * @return {?}\n */\nremoveAttribute(el: any, name: string, namespace?: string): void {\n    const /** @type {?} */ debugEl = getDebugNode(el);\n    if (debugEl && debugEl instanceof DebugElement) {\n      const /** @type {?} */ fullName = namespace ? namespace + ':' + name : name;\n      debugEl.attributes[fullName] = null;\n    }\n    this.delegate.removeAttribute(el, name, namespace);\n  }\n/**\n * @param {?} el\n * @param {?} name\n * @return {?}\n */\naddClass(el: any, name: string): void {\n    const /** @type {?} */ debugEl = getDebugNode(el);\n    if (debugEl && debugEl instanceof DebugElement) {\n      debugEl.classes[name] = true;\n    }\n    this.delegate.addClass(el, name);\n  }\n/**\n * @param {?} el\n * @param {?} name\n * @return {?}\n */\nremoveClass(el: any, name: string): void {\n    const /** @type {?} */ debugEl = getDebugNode(el);\n    if (debugEl && debugEl instanceof DebugElement) {\n      debugEl.classes[name] = false;\n    }\n    this.delegate.removeClass(el, name);\n  }\n/**\n * @param {?} el\n * @param {?} style\n * @param {?} value\n * @param {?} flags\n * @return {?}\n */\nsetStyle(el: any, style: string, value: any, flags: RendererStyleFlags2): void {\n    const /** @type {?} */ debugEl = getDebugNode(el);\n    if (debugEl && debugEl instanceof DebugElement) {\n      debugEl.styles[style] = value;\n    }\n    this.delegate.setStyle(el, style, value, flags);\n  }\n/**\n * @param {?} el\n * @param {?} style\n * @param {?} flags\n * @return {?}\n */\nremoveStyle(el: any, style: string, flags: RendererStyleFlags2): void {\n    const /** @type {?} */ debugEl = getDebugNode(el);\n    if (debugEl && debugEl instanceof DebugElement) {\n      debugEl.styles[style] = null;\n    }\n    this.delegate.removeStyle(el, style, flags);\n  }\n/**\n * @param {?} el\n * @param {?} name\n * @param {?} value\n * @return {?}\n */\nsetProperty(el: any, name: string, value: any): void {\n    const /** @type {?} */ debugEl = getDebugNode(el);\n    if (debugEl && debugEl instanceof DebugElement) {\n      debugEl.properties[name] = value;\n    }\n    this.delegate.setProperty(el, name, value);\n  }\n/**\n * @param {?} target\n * @param {?} eventName\n * @param {?} callback\n * @return {?}\n */\nlisten(\n      target: 'document'|'windows'|'body'|any, eventName: string,\n      callback: (event: any) => boolean): () => void {\n    if (typeof target !== 'string') {\n      const /** @type {?} */ debugEl = getDebugNode(target);\n      if (debugEl) {\n        debugEl.listeners.push(new EventListener(eventName, callback));\n      }\n    }\n\n    return this.delegate.listen(target, eventName, callback);\n  }\n/**\n * @param {?} node\n * @return {?}\n */\nparentNode(node: any): any { return this.delegate.parentNode(node); }\n/**\n * @param {?} node\n * @return {?}\n */\nnextSibling(node: any): any { return this.delegate.nextSibling(node); }\n/**\n * @param {?} node\n * @param {?} value\n * @return {?}\n */\nsetValue(node: any, value: string): void { return this.delegate.setValue(node, value); }\n}\n\nfunction DebugRenderer2_tsickle_Closure_declarations() {\n/** @type {?} */\nDebugRenderer2.prototype.delegate;\n}\n\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Injector} from '../di/injector';\nimport {NgModuleFactory, NgModuleRef} from '../linker/ng_module_factory';\nimport {Type} from '../type';\n\nimport {initServicesIfNeeded} from './services';\nimport {NgModuleDefinitionFactory, ProviderOverride, Services} from './types';\nimport {resolveDefinition} from './util';\n/**\n * @param {?} override\n * @return {?}\n */\nexport function overrideProvider(override: ProviderOverride) {\n  initServicesIfNeeded();\n  return Services.overrideProvider(override);\n}\n/**\n * @return {?}\n */\nexport function clearProviderOverrides() {\n  initServicesIfNeeded();\n  return Services.clearProviderOverrides();\n}\n/**\n * @param {?} ngModuleType\n * @param {?} bootstrapComponents\n * @param {?} defFactory\n * @return {?}\n */\nexport function createNgModuleFactory(\n    ngModuleType: Type<any>, bootstrapComponents: Type<any>[],\n    defFactory: NgModuleDefinitionFactory): NgModuleFactory<any> {\n  return new NgModuleFactory_(ngModuleType, bootstrapComponents, defFactory);\n}\nclass NgModuleFactory_ extends NgModuleFactory<any> {\n/**\n * @param {?} moduleType\n * @param {?} _bootstrapComponents\n * @param {?} _ngModuleDefFactory\n */\nconstructor(\npublic readonly moduleType: Type<any>,\nprivate _bootstrapComponents: Type<any>[],\nprivate _ngModuleDefFactory: NgModuleDefinitionFactory) {\n    // Attention: this ctor is called as top level function.\n    // Putting any logic in here will destroy closure tree shaking!\n    super();\n  }\n/**\n * @param {?} parentInjector\n * @return {?}\n */\ncreate(parentInjector: Injector|null): NgModuleRef<any> {\n    initServicesIfNeeded();\n    const /** @type {?} */ def = resolveDefinition(this._ngModuleDefFactory);\n    return Services.createNgModuleRef(\n        this.moduleType, parentInjector || Injector.NULL, this._bootstrapComponents, def);\n  }\n}\n\nfunction NgModuleFactory__tsickle_Closure_declarations() {\n/** @type {?} */\nNgModuleFactory_.prototype.moduleType;\n/** @type {?} */\nNgModuleFactory_.prototype._bootstrapComponents;\n/** @type {?} */\nNgModuleFactory_.prototype._ngModuleDefFactory;\n}\n\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nexport {anchorDef, elementDef} from './element';\nexport {clearProviderOverrides, createNgModuleFactory, overrideProvider} from './entrypoint';\nexport {ngContentDef} from './ng_content';\nexport {moduleDef, moduleProvideDef} from './ng_module';\nexport {directiveDef, pipeDef, providerDef} from './provider';\nexport {pureArrayDef, pureObjectDef, purePipeDef} from './pure_expression';\nexport {queryDef} from './query';\nexport {ViewRef_, createComponentFactory, getComponentViewDefinitionFactory, nodeValue} from './refs';\nexport {initServicesIfNeeded} from './services';\nexport {textDef} from './text';\nexport {EMPTY_ARRAY, EMPTY_MAP, createRendererType2, elementEventFullName, inlineInterpolate, interpolate, rootRenderNodes, tokenKey, unwrapValue} from './util';\nexport {viewDef} from './view';\nexport {attachEmbeddedView, detachEmbeddedView, moveEmbeddedView} from './view_attach';\n\nexport {DefinitionFactory,NodeLogger,Definition,NgModuleDefinition,NgModuleDefinitionFactory,ViewDefinition,ViewDefinitionFactory,ViewUpdateFn,NodeCheckFn,ArgumentType,ViewHandleEventFn,ViewFlags,NodeDef,NodeFlags,BindingDef,BindingFlags,OutputDef,OutputType,QueryValueType,ElementDef,ElementHandleEventFn,ProviderDef,NgModuleProviderDef,DepDef,DepFlags,TextDef,QueryDef,QueryBindingDef,QueryBindingType,NgContentDef,NgModuleData,ViewData,ViewState,DisposableFn,NodeData,TextData,asTextData,ElementData,ViewContainerData,TemplateData,asElementData,ProviderData,asProviderData,PureExpressionData,asPureExpressionData,asQueryList,RootData,DebugContext,CheckType,ProviderOverride,Services} from './types';\n","import { Observable, SubscribableOrPromise } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { EmptyObservable } from './EmptyObservable';\nimport { isArray } from '../util/isArray';\n\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class ForkJoinObservable<T> extends Observable<T> {\n  constructor(private sources: Array<SubscribableOrPromise<any>>,\n              private resultSelector?: (...values: Array<any>) => T) {\n    super();\n  }\n\n  /* tslint:disable:max-line-length */\n  static create<T, T2>(v1: SubscribableOrPromise<T>, v2: SubscribableOrPromise<T2>): Observable<[T, T2]>;\n  static create<T, T2, T3>(v1: SubscribableOrPromise<T>, v2: SubscribableOrPromise<T2>, v3: SubscribableOrPromise<T3>): Observable<[T, T2, T3]>;\n  static create<T, T2, T3, T4>(v1: SubscribableOrPromise<T>, v2: SubscribableOrPromise<T2>, v3: SubscribableOrPromise<T3>, v4: SubscribableOrPromise<T4>): Observable<[T, T2, T3, T4]>;\n  static create<T, T2, T3, T4, T5>(v1: SubscribableOrPromise<T>, v2: SubscribableOrPromise<T2>, v3: SubscribableOrPromise<T3>, v4: SubscribableOrPromise<T4>, v5: SubscribableOrPromise<T5>): Observable<[T, T2, T3, T4, T5]>;\n  static create<T, T2, T3, T4, T5, T6>(v1: SubscribableOrPromise<T>, v2: SubscribableOrPromise<T2>, v3: SubscribableOrPromise<T3>, v4: SubscribableOrPromise<T4>, v5: SubscribableOrPromise<T5>, v6: SubscribableOrPromise<T6>): Observable<[T, T2, T3, T4, T5, T6]>;\n  static create<T, R>(v1: SubscribableOrPromise<T>, project: (v1: T) => R): Observable<R>;\n  static create<T, T2, R>(v1: SubscribableOrPromise<T>, v2: SubscribableOrPromise<T2>, project: (v1: T, v2: T2) => R): Observable<R>;\n  static create<T, T2, T3, R>(v1: SubscribableOrPromise<T>, v2: SubscribableOrPromise<T2>, v3: SubscribableOrPromise<T3>, project: (v1: T, v2: T2, v3: T3) => R): Observable<R>;\n  static create<T, T2, T3, T4, R>(v1: SubscribableOrPromise<T>, v2: SubscribableOrPromise<T2>, v3: SubscribableOrPromise<T3>, v4: SubscribableOrPromise<T4>, project: (v1: T, v2: T2, v3: T3, v4: T4) => R): Observable<R>;\n  static create<T, T2, T3, T4, T5, R>(v1: SubscribableOrPromise<T>, v2: SubscribableOrPromise<T2>, v3: SubscribableOrPromise<T3>, v4: SubscribableOrPromise<T4>, v5: SubscribableOrPromise<T5>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5) => R): Observable<R>;\n  static create<T, T2, T3, T4, T5, T6, R>(v1: SubscribableOrPromise<T>, v2: SubscribableOrPromise<T2>, v3: SubscribableOrPromise<T3>, v4: SubscribableOrPromise<T4>, v5: SubscribableOrPromise<T5>, v6: SubscribableOrPromise<T6>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6) => R): Observable<R>;\n  static create<T>(sources: SubscribableOrPromise<T>[]): Observable<T[]>;\n  static create<R>(sources: SubscribableOrPromise<any>[]): Observable<R>;\n  static create<T, R>(sources: SubscribableOrPromise<T>[], project: (...values: Array<T>) => R): Observable<R>;\n  static create<R>(sources: SubscribableOrPromise<any>[], project: (...values: Array<any>) => R): Observable<R>;\n  static create<T>(...sources: SubscribableOrPromise<T>[]): Observable<T[]>;\n  static create<R>(...sources: SubscribableOrPromise<any>[]): Observable<R>;\n  /* tslint:enable:max-line-length */\n\n  /**\n   * Joins last values emitted by passed Observables.\n   *\n   * <span class=\"informal\">Wait for Observables to complete and then combine last values they emitted.</span>\n   *\n   * <img src=\"./img/forkJoin.png\" width=\"100%\">\n   *\n   * `forkJoin` is an operator that takes any number of Observables which can be passed either as an array\n   * or directly as arguments. If no input Observables are provided, resulting stream will complete\n   * immediately.\n   *\n   * `forkJoin` will wait for all passed Observables to complete and then it will emit an array with last\n   * values from corresponding Observables. So if you pass `n` Observables to the operator, resulting\n   * array will have `n` values, where first value is the last thing emitted by the first Observable,\n   * second value is the last thing emitted by the second Observable and so on. That means `forkJoin` will\n   * not emit more than once and it will complete after that. If you need to emit combined values not only\n   * at the end of lifecycle of passed Observables, but also throughout it, try out {@link combineLatest}\n   * or {@link zip} instead.\n   *\n   * In order for resulting array to have the same length as the number of input Observables, whenever any of\n   * that Observables completes without emitting any value, `forkJoin` will complete at that moment as well\n   * and it will not emit anything either, even if it already has some last values from other Observables.\n   * Conversely, if there is an Observable that never completes, `forkJoin` will never complete as well,\n   * unless at any point some other Observable completes without emitting value, which brings us back to\n   * the previous case. Overall, in order for `forkJoin` to emit a value, all Observables passed as arguments\n   * have to emit something at least once and complete.\n   *\n   * If any input Observable errors at some point, `forkJoin` will error as well and all other Observables\n   * will be immediately unsubscribed.\n   *\n   * Optionally `forkJoin` accepts project function, that will be called with values which normally\n   * would land in emitted array. Whatever is returned by project function, will appear in output\n   * Observable instead. This means that default project can be thought of as a function that takes\n   * all its arguments and puts them into an array. Note that project function will be called only\n   * when output Observable is supposed to emit a result.\n   *\n   * @example <caption>Use forkJoin with operator emitting immediately</caption>\n   * const observable = Rx.Observable.forkJoin(\n   *   Rx.Observable.of(1, 2, 3, 4),\n   *   Rx.Observable.of(5, 6, 7, 8)\n   * );\n   * observable.subscribe(\n   *   value => console.log(value),\n   *   err => {},\n   *   () => console.log('This is how it ends!')\n   * );\n   *\n   * // Logs:\n   * // [4, 8]\n   * // \"This is how it ends!\"\n   *\n   *\n   * @example <caption>Use forkJoin with operator emitting after some time</caption>\n   * const observable = Rx.Observable.forkJoin(\n   *   Rx.Observable.interval(1000).take(3), // emit 0, 1, 2 every second and complete\n   *   Rx.Observable.interval(500).take(4) // emit 0, 1, 2, 3 every half a second and complete\n   * );\n   * observable.subscribe(\n   *   value => console.log(value),\n   *   err => {},\n   *   () => console.log('This is how it ends!')\n   * );\n   *\n   * // Logs:\n   * // [2, 3] after 3 seconds\n   * // \"This is how it ends!\" immediately after\n   *\n   *\n   * @example <caption>Use forkJoin with project function</caption>\n   * const observable = Rx.Observable.forkJoin(\n   *   Rx.Observable.interval(1000).take(3), // emit 0, 1, 2 every second and complete\n   *   Rx.Observable.interval(500).take(4), // emit 0, 1, 2, 3 every half a second and complete\n   *   (n, m) => n + m\n   * );\n   * observable.subscribe(\n   *   value => console.log(value),\n   *   err => {},\n   *   () => console.log('This is how it ends!')\n   * );\n   *\n   * // Logs:\n   * // 5 after 3 seconds\n   * // \"This is how it ends!\" immediately after\n   *\n   * @see {@link combineLatest}\n   * @see {@link zip}\n   *\n   * @param {...SubscribableOrPromise} sources Any number of Observables provided either as an array or as an arguments\n   * passed directly to the operator.\n   * @param {function} [project] Function that takes values emitted by input Observables and returns value\n   * that will appear in resulting Observable instead of default array.\n   * @return {Observable} Observable emitting either an array of last values emitted by passed Observables\n   * or value from project function.\n   * @static true\n   * @name forkJoin\n   * @owner Observable\n   */\n  static create<T>(...sources: Array<SubscribableOrPromise<any> |\n                                  Array<SubscribableOrPromise<any>> |\n                                  ((...values: Array<any>) => any)>): Observable<T> {\n    if (sources === null || arguments.length === 0) {\n      return new EmptyObservable<T>();\n    }\n\n    let resultSelector: (...values: Array<any>) => any = null;\n    if (typeof sources[sources.length - 1] === 'function') {\n      resultSelector = <(...values: Array<any>) => any>sources.pop();\n    }\n\n    // if the first and only other argument besides the resultSelector is an array\n    // assume it's been called with `forkJoin([obs1, obs2, obs3], resultSelector)`\n    if (sources.length === 1 && isArray(sources[0])) {\n      sources = <Array<SubscribableOrPromise<any>>>sources[0];\n    }\n\n    if (sources.length === 0) {\n      return new EmptyObservable<T>();\n    }\n\n    return new ForkJoinObservable(<Array<SubscribableOrPromise<any>>>sources, resultSelector);\n  }\n\n  protected _subscribe(subscriber: Subscriber<any>): Subscription {\n    return new ForkJoinSubscriber(subscriber, this.sources, this.resultSelector);\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass ForkJoinSubscriber<T> extends OuterSubscriber<T, T> {\n  private completed = 0;\n  private total: number;\n  private values: any[];\n  private haveValues = 0;\n\n  constructor(destination: Subscriber<T>,\n              private sources: Array<SubscribableOrPromise<any>>,\n              private resultSelector?: (...values: Array<any>) => T) {\n    super(destination);\n\n    const len = sources.length;\n    this.total = len;\n    this.values = new Array(len);\n\n    for (let i = 0; i < len; i++) {\n      const source = sources[i];\n      const innerSubscription = subscribeToResult(this, source, null, i);\n\n      if (innerSubscription) {\n        (<any> innerSubscription).outerIndex = i;\n        this.add(innerSubscription);\n      }\n    }\n  }\n\n  notifyNext(outerValue: any, innerValue: T,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, T>): void {\n    this.values[outerIndex] = innerValue;\n    if (!(<any>innerSub)._hasValue) {\n      (<any>innerSub)._hasValue = true;\n      this.haveValues++;\n    }\n  }\n\n  notifyComplete(innerSub: InnerSubscriber<T, T>): void {\n    const destination = this.destination;\n    const { haveValues, resultSelector, values } = this;\n    const len = values.length;\n\n    if (!(<any>innerSub)._hasValue) {\n      destination.complete();\n      return;\n    }\n\n    this.completed++;\n\n    if (this.completed !== len) {\n      return;\n    }\n\n    if (haveValues === len) {\n      const value = resultSelector ? resultSelector.apply(this, values) : values;\n      destination.next(value);\n    }\n\n    destination.complete();\n  }\n}","import {  ForkJoinObservable  } from './ForkJoinObservable';\n\nexport const forkJoin = ForkJoinObservable.create;","import { root } from '../util/root';\nimport { IScheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { TeardownLogic } from '../Subscription';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class PromiseObservable<T> extends Observable<T> {\n\n  public value: T;\n\n  /**\n   * Converts a Promise to an Observable.\n   *\n   * <span class=\"informal\">Returns an Observable that just emits the Promise's\n   * resolved value, then completes.</span>\n   *\n   * Converts an ES2015 Promise or a Promises/A+ spec compliant Promise to an\n   * Observable. If the Promise resolves with a value, the output Observable\n   * emits that resolved value as a `next`, and then completes. If the Promise\n   * is rejected, then the output Observable emits the corresponding Error.\n   *\n   * @example <caption>Convert the Promise returned by Fetch to an Observable</caption>\n   * var result = Rx.Observable.fromPromise(fetch('http://myserver.com/'));\n   * result.subscribe(x => console.log(x), e => console.error(e));\n   *\n   * @see {@link bindCallback}\n   * @see {@link from}\n   *\n   * @param {PromiseLike<T>} promise The promise to be converted.\n   * @param {Scheduler} [scheduler] An optional IScheduler to use for scheduling\n   * the delivery of the resolved value (or the rejection).\n   * @return {Observable<T>} An Observable which wraps the Promise.\n   * @static true\n   * @name fromPromise\n   * @owner Observable\n   */\n  static create<T>(promise: PromiseLike<T>, scheduler?: IScheduler): Observable<T> {\n    return new PromiseObservable(promise, scheduler);\n  }\n\n  constructor(private promise: PromiseLike<T>, private scheduler?: IScheduler) {\n    super();\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): TeardownLogic {\n    const promise = this.promise;\n    const scheduler = this.scheduler;\n\n    if (scheduler == null) {\n      if (this._isScalar) {\n        if (!subscriber.closed) {\n          subscriber.next(this.value);\n          subscriber.complete();\n        }\n      } else {\n        promise.then(\n          (value) => {\n            this.value = value;\n            this._isScalar = true;\n            if (!subscriber.closed) {\n              subscriber.next(value);\n              subscriber.complete();\n            }\n          },\n          (err) => {\n            if (!subscriber.closed) {\n              subscriber.error(err);\n            }\n          }\n        )\n        .then(null, err => {\n          // escape the promise trap, throw unhandled errors\n          root.setTimeout(() => { throw err; });\n        });\n      }\n    } else {\n      if (this._isScalar) {\n        if (!subscriber.closed) {\n          return scheduler.schedule(dispatchNext, 0, { value: this.value, subscriber });\n        }\n      } else {\n        promise.then(\n          (value) => {\n            this.value = value;\n            this._isScalar = true;\n            if (!subscriber.closed) {\n              subscriber.add(scheduler.schedule(dispatchNext, 0, { value, subscriber }));\n            }\n          },\n          (err) => {\n            if (!subscriber.closed) {\n              subscriber.add(scheduler.schedule(dispatchError, 0, { err, subscriber }));\n            }\n          })\n          .then(null, (err) => {\n            // escape the promise trap, throw unhandled errors\n            root.setTimeout(() => { throw err; });\n          });\n      }\n    }\n  }\n}\n\ninterface DispatchNextArg<T> {\n  subscriber: Subscriber<T>;\n  value: T;\n}\nfunction dispatchNext<T>(arg: DispatchNextArg<T>) {\n  const { value, subscriber } = arg;\n  if (!subscriber.closed) {\n    subscriber.next(value);\n    subscriber.complete();\n  }\n}\n\ninterface DispatchErrorArg<T> {\n  subscriber: Subscriber<T>;\n  err: any;\n}\nfunction dispatchError<T>(arg: DispatchErrorArg<T>) {\n  const { err, subscriber } = arg;\n  if (!subscriber.closed) {\n    subscriber.error(err);\n  }\n}\n","import {  PromiseObservable  } from './PromiseObservable';\n\nexport const fromPromise = PromiseObservable.create;","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Applies a given `project` function to each value emitted by the source\n * Observable, and emits the resulting values as an Observable.\n *\n * <span class=\"informal\">Like [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map),\n * it passes each source value through a transformation function to get\n * corresponding output values.</span>\n *\n * <img src=\"./img/map.png\" width=\"100%\">\n *\n * Similar to the well known `Array.prototype.map` function, this operator\n * applies a projection to each value and emits that projection in the output\n * Observable.\n *\n * @example <caption>Map every click to the clientX position of that click</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var positions = clicks.map(ev => ev.clientX);\n * positions.subscribe(x => console.log(x));\n *\n * @see {@link mapTo}\n * @see {@link pluck}\n *\n * @param {function(value: T, index: number): R} project The function to apply\n * to each `value` emitted by the source Observable. The `index` parameter is\n * the number `i` for the i-th emission that has happened since the\n * subscription, starting from the number `0`.\n * @param {any} [thisArg] An optional argument to define what `this` is in the\n * `project` function.\n * @return {Observable<R>} An Observable that emits the values from the source\n * Observable transformed by the given `project` function.\n * @method map\n * @owner Observable\n */\nexport function map<T, R>(project: (value: T, index: number) => R, thisArg?: any): OperatorFunction<T, R> {\n  return function mapOperation(source: Observable<T>): Observable<R> {\n    if (typeof project !== 'function') {\n      throw new TypeError('argument is not a function. Are you looking for `mapTo()`?');\n    }\n    return source.lift(new MapOperator(project, thisArg));\n  };\n}\n\nexport class MapOperator<T, R> implements Operator<T, R> {\n  constructor(private project: (value: T, index: number) => R, private thisArg: any) {\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new MapSubscriber(subscriber, this.project, this.thisArg));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass MapSubscriber<T, R> extends Subscriber<T> {\n  count: number = 0;\n  private thisArg: any;\n\n  constructor(destination: Subscriber<R>,\n              private project: (value: T, index: number) => R,\n              thisArg: any) {\n    super(destination);\n    this.thisArg = thisArg || this;\n  }\n\n  // NOTE: This looks unoptimized, but it's actually purposefully NOT\n  // using try/catch optimizations.\n  protected _next(value: T) {\n    let result: any;\n    try {\n      result = this.project.call(this.thisArg, value, this.count++);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.destination.next(result);\n  }\n}\n","import { map as higherOrderMap } from '../operators/map';\nimport { Observable } from '../Observable';\n\n/**\n * Applies a given `project` function to each value emitted by the source\n * Observable, and emits the resulting values as an Observable.\n *\n * <span class=\"informal\">Like [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map),\n * it passes each source value through a transformation function to get\n * corresponding output values.</span>\n *\n * <img src=\"./img/map.png\" width=\"100%\">\n *\n * Similar to the well known `Array.prototype.map` function, this operator\n * applies a projection to each value and emits that projection in the output\n * Observable.\n *\n * @example <caption>Map every click to the clientX position of that click</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var positions = clicks.map(ev => ev.clientX);\n * positions.subscribe(x => console.log(x));\n *\n * @see {@link mapTo}\n * @see {@link pluck}\n *\n * @param {function(value: T, index: number): R} project The function to apply\n * to each `value` emitted by the source Observable. The `index` parameter is\n * the number `i` for the i-th emission that has happened since the\n * subscription, starting from the number `0`.\n * @param {any} [thisArg] An optional argument to define what `this` is in the\n * `project` function.\n * @return {Observable<R>} An Observable that emits the values from the source\n * Observable transformed by the given `project` function.\n * @method map\n * @owner Observable\n */\nexport function map<T, R>(this: Observable<T>, project: (value: T, index: number) => R, thisArg?: any): Observable<R> {\n  return higherOrderMap(project, thisArg)(this);\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {InjectionToken} from '@angular/core';\n/**\n * This class should not be used directly by an application developer. Instead, use\n * {\\@link Location}.\n * \n * `PlatformLocation` encapsulates all calls to DOM apis, which allows the Router to be platform\n * agnostic.\n * This means that we can have different implementation of `PlatformLocation` for the different\n * platforms that angular supports. For example, `\\@angular/platform-browser` provides an\n * implementation specific to the browser environment, while `\\@angular/platform-webworker` provides\n * one suitable for use with web workers.\n * \n * The `PlatformLocation` class is used directly by all implementations of {\\@link LocationStrategy}\n * when they need to interact with the DOM apis like pushState, popState, etc...\n * \n * {\\@link LocationStrategy} in turn is used by the {\\@link Location} service which is used directly\n * by the {\\@link Router} in order to navigate between routes. Since all interactions between {\\@link\n * Router} /\n * {\\@link Location} / {\\@link LocationStrategy} and DOM apis flow through the `PlatformLocation`\n * class they are all platform independent.\n * \n * \\@stable\n * @abstract\n */\nexport abstract class PlatformLocation {\n/**\n * @abstract\n * @return {?}\n */\ngetBaseHrefFromDOM() {}\n/**\n * @abstract\n * @param {?} fn\n * @return {?}\n */\nonPopState(fn: LocationChangeListener) {}\n/**\n * @abstract\n * @param {?} fn\n * @return {?}\n */\nonHashChange(fn: LocationChangeListener) {}\n/**\n * @abstract\n * @return {?}\n */\npathname() {}\n/**\n * @abstract\n * @return {?}\n */\nsearch() {}\n/**\n * @abstract\n * @return {?}\n */\nhash() {}\n/**\n * @abstract\n * @param {?} state\n * @param {?} title\n * @param {?} url\n * @return {?}\n */\nreplaceState(state: any, title: string, url: string) {}\n/**\n * @abstract\n * @param {?} state\n * @param {?} title\n * @param {?} url\n * @return {?}\n */\npushState(state: any, title: string, url: string) {}\n/**\n * @abstract\n * @return {?}\n */\nforward() {}\n/**\n * @abstract\n * @return {?}\n */\nback() {}\n}\n/**\n * \\@whatItDoes indicates when a location is initialized\n * \\@experimental\n */\nexport const LOCATION_INITIALIZED = new InjectionToken<Promise<any>>('Location Initialized');\n\n/**\n * A serializable version of the event from onPopState or onHashChange\n *\n * @experimental\n */\nexport interface LocationChangeEvent { type: string; }\n\n/**\n * @experimental\n */\nexport interface LocationChangeListener { (e: LocationChangeEvent): any; }\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {InjectionToken} from '@angular/core';\nimport {LocationChangeListener} from './platform_location';\n/**\n * `LocationStrategy` is responsible for representing and reading route state\n * from the browser's URL. Angular provides two strategies:\n * {\\@link HashLocationStrategy} and {\\@link PathLocationStrategy}.\n * \n * This is used under the hood of the {\\@link Location} service.\n * \n * Applications should use the {\\@link Router} or {\\@link Location} services to\n * interact with application route state.\n * \n * For instance, {\\@link HashLocationStrategy} produces URLs like\n * `http://example.com#/foo`, and {\\@link PathLocationStrategy} produces\n * `http://example.com/foo` as an equivalent URL.\n * \n * See these two classes for more.\n * \n * \\@stable\n * @abstract\n */\nexport abstract class LocationStrategy {\n/**\n * @abstract\n * @param {?=} includeHash\n * @return {?}\n */\npath(includeHash?: boolean) {}\n/**\n * @abstract\n * @param {?} internal\n * @return {?}\n */\nprepareExternalUrl(internal: string) {}\n/**\n * @abstract\n * @param {?} state\n * @param {?} title\n * @param {?} url\n * @param {?} queryParams\n * @return {?}\n */\npushState(state: any, title: string, url: string, queryParams: string) {}\n/**\n * @abstract\n * @param {?} state\n * @param {?} title\n * @param {?} url\n * @param {?} queryParams\n * @return {?}\n */\nreplaceState(state: any, title: string, url: string, queryParams: string) {}\n/**\n * @abstract\n * @return {?}\n */\nforward() {}\n/**\n * @abstract\n * @return {?}\n */\nback() {}\n/**\n * @abstract\n * @param {?} fn\n * @return {?}\n */\nonPopState(fn: LocationChangeListener) {}\n/**\n * @abstract\n * @return {?}\n */\ngetBaseHref() {}\n}\n/**\n * The `APP_BASE_HREF` token represents the base href to be used with the\n * {\\@link PathLocationStrategy}.\n * \n * If you're using {\\@link PathLocationStrategy}, you must provide a provider to a string\n * representing the URL prefix that should be preserved when generating and recognizing\n * URLs.\n * \n * ### Example\n * \n * ```typescript\n * import {Component, NgModule} from '\\@angular/core';\n * import {APP_BASE_HREF} from '\\@angular/common';\n * \n * \\@NgModule({ \n *   providers: [{provide: APP_BASE_HREF, useValue: '/my/app'}]\n * })\n * class AppModule {}\n * ```\n * \n * \\@stable\n */\nexport const APP_BASE_HREF = new InjectionToken<string>('appBaseHref');\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {EventEmitter, Injectable} from '@angular/core';\n\nimport {LocationStrategy} from './location_strategy';\n\n/** @experimental */\nexport interface PopStateEvent {\n  pop?: boolean;\n  type?: string;\n  url?: string;\n}\n/**\n * \\@whatItDoes `Location` is a service that applications can use to interact with a browser's URL.\n * \\@description \n * Depending on which {\\@link LocationStrategy} is used, `Location` will either persist\n * to the URL's path or the URL's hash segment.\n * \n * Note: it's better to use {\\@link Router#navigate} service to trigger route changes. Use\n * `Location` only if you need to interact with or create normalized URLs outside of\n * routing.\n * \n * `Location` is responsible for normalizing the URL against the application's base href.\n * A normalized URL is absolute from the URL host, includes the application's base href, and has no\n * trailing slash:\n * - `/my/app/user/123` is normalized\n * - `my/app/user/123` **is not** normalized\n * - `/my/app/user/123/` **is not** normalized\n * \n * ### Example\n * {\\@example common/location/ts/path_location_component.ts region='LocationComponent'}\n * \\@stable\n */\nexport class Location {\n/**\n * \\@internal\n */\n_subject: EventEmitter<any> = new EventEmitter();\n/**\n * \\@internal\n */\n_baseHref: string;\n/**\n * \\@internal\n */\n_platformStrategy: LocationStrategy;\n/**\n * @param {?} platformStrategy\n */\nconstructor(platformStrategy: LocationStrategy) {\n    this._platformStrategy = platformStrategy;\n    const browserBaseHref = this._platformStrategy.getBaseHref();\n    this._baseHref = Location.stripTrailingSlash(_stripIndexHtml(browserBaseHref));\n    this._platformStrategy.onPopState((ev) => {\n      this._subject.emit({\n        'url': this.path(true),\n        'pop': true,\n        'type': ev.type,\n      });\n    });\n  }\n/**\n * @param {?=} includeHash\n * @return {?}\n */\npath(includeHash: boolean = false): string {\n    return this.normalize(this._platformStrategy.path(includeHash));\n  }\n/**\n * Normalizes the given path and compares to the current normalized path.\n * @param {?} path\n * @param {?=} query\n * @return {?}\n */\nisCurrentPathEqualTo(path: string, query: string = ''): boolean {\n    return this.path() == this.normalize(path + Location.normalizeQueryParams(query));\n  }\n/**\n * Given a string representing a URL, returns the normalized URL path without leading or\n * trailing slashes.\n * @param {?} url\n * @return {?}\n */\nnormalize(url: string): string {\n    return Location.stripTrailingSlash(_stripBaseHref(this._baseHref, _stripIndexHtml(url)));\n  }\n/**\n * Given a string representing a URL, returns the platform-specific external URL path.\n * If the given URL doesn't begin with a leading slash (`'/'`), this method adds one\n * before normalizing. This method will also add a hash if `HashLocationStrategy` is\n * used, or the `APP_BASE_HREF` if the `PathLocationStrategy` is in use.\n * @param {?} url\n * @return {?}\n */\nprepareExternalUrl(url: string): string {\n    if (url && url[0] !== '/') {\n      url = '/' + url;\n    }\n    return this._platformStrategy.prepareExternalUrl(url);\n  }\n/**\n * Changes the browsers URL to the normalized version of the given URL, and pushes a\n * new item onto the platform's history.\n * @param {?} path\n * @param {?=} query\n * @return {?}\n */\ngo(path: string, query: string = ''): void {\n    this._platformStrategy.pushState(null, '', path, query);\n  }\n/**\n * Changes the browsers URL to the normalized version of the given URL, and replaces\n * the top item on the platform's history stack.\n * @param {?} path\n * @param {?=} query\n * @return {?}\n */\nreplaceState(path: string, query: string = ''): void {\n    this._platformStrategy.replaceState(null, '', path, query);\n  }\n/**\n * Navigates forward in the platform's history.\n * @return {?}\n */\nforward(): void { this._platformStrategy.forward(); }\n/**\n * Navigates back in the platform's history.\n * @return {?}\n */\nback(): void { this._platformStrategy.back(); }\n/**\n * Subscribe to the platform's `popState` events.\n * @param {?} onNext\n * @param {?=} onThrow\n * @param {?=} onReturn\n * @return {?}\n */\nsubscribe(\n      onNext: (value: PopStateEvent) => void, onThrow?: ((exception: any) => void)|null,\n      onReturn?: (() => void)|null): Object {\n    return this._subject.subscribe({next: onNext, error: onThrow, complete: onReturn});\n  }\n/**\n * Given a string of url parameters, prepend with '?' if needed, otherwise return parameters as\n * is.\n * @param {?} params\n * @return {?}\n */\npublic static normalizeQueryParams(params: string): string {\n    return params && params[0] !== '?' ? '?' + params : params;\n  }\n/**\n * Given 2 parts of a url, join them with a slash if needed.\n * @param {?} start\n * @param {?} end\n * @return {?}\n */\npublic static joinWithSlash(start: string, end: string): string {\n    if (start.length == 0) {\n      return end;\n    }\n    if (end.length == 0) {\n      return start;\n    }\n    let /** @type {?} */ slashes = 0;\n    if (start.endsWith('/')) {\n      slashes++;\n    }\n    if (end.startsWith('/')) {\n      slashes++;\n    }\n    if (slashes == 2) {\n      return start + end.substring(1);\n    }\n    if (slashes == 1) {\n      return start + end;\n    }\n    return start + '/' + end;\n  }\n/**\n * If url has a trailing slash, remove it, otherwise return url as is. This\n * method looks for the first occurence of either #, ?, or the end of the\n * line as `/` characters after any of these should not be replaced.\n * @param {?} url\n * @return {?}\n */\npublic static stripTrailingSlash(url: string): string {\n    const /** @type {?} */ match = url.match(/#|\\?|$/);\n    const /** @type {?} */ pathEndIdx = match && match.index || url.length;\n    const /** @type {?} */ droppedSlashIdx = pathEndIdx - (url[pathEndIdx - 1] === '/' ? 1 : 0);\n    return url.slice(0, droppedSlashIdx) + url.slice(pathEndIdx);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: LocationStrategy, },\n];\n}\n\nfunction Location_tsickle_Closure_declarations() {\n/** @type {?} */\nLocation.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nLocation.ctorParameters;\n/**\n * \\@internal\n * @type {?}\n */\nLocation.prototype._subject;\n/**\n * \\@internal\n * @type {?}\n */\nLocation.prototype._baseHref;\n/**\n * \\@internal\n * @type {?}\n */\nLocation.prototype._platformStrategy;\n}\n\n/**\n * @param {?} baseHref\n * @param {?} url\n * @return {?}\n */\nfunction _stripBaseHref(baseHref: string, url: string): string {\n  return baseHref && url.startsWith(baseHref) ? url.substring(baseHref.length) : url;\n}\n/**\n * @param {?} url\n * @return {?}\n */\nfunction _stripIndexHtml(url: string): string {\n  return url.replace(/\\/index.html$/, '');\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Inject, Injectable, Optional} from '@angular/core';\n\n\nimport {Location} from './location';\nimport {APP_BASE_HREF, LocationStrategy} from './location_strategy';\nimport {LocationChangeListener, PlatformLocation} from './platform_location';\n/**\n * \\@whatItDoes Use URL hash for storing application location data.\n * \\@description \n * `HashLocationStrategy` is a {\\@link LocationStrategy} used to configure the\n * {\\@link Location} service to represent its state in the\n * [hash fragment](https://en.wikipedia.org/wiki/Uniform_Resource_Locator#Syntax)\n * of the browser's URL.\n * \n * For instance, if you call `location.go('/foo')`, the browser's URL will become\n * `example.com#/foo`.\n * \n * ### Example\n * \n * {\\@example common/location/ts/hash_location_component.ts region='LocationComponent'}\n * \n * \\@stable\n */\nexport class HashLocationStrategy extends LocationStrategy {\nprivate _baseHref: string = '';\n/**\n * @param {?} _platformLocation\n * @param {?=} _baseHref\n */\nconstructor(\nprivate _platformLocation: PlatformLocation,\n        _baseHref?: string) {\n    super();\n    if (_baseHref != null) {\n      this._baseHref = _baseHref;\n    }\n  }\n/**\n * @param {?} fn\n * @return {?}\n */\nonPopState(fn: LocationChangeListener): void {\n    this._platformLocation.onPopState(fn);\n    this._platformLocation.onHashChange(fn);\n  }\n/**\n * @return {?}\n */\ngetBaseHref(): string { return this._baseHref; }\n/**\n * @param {?=} includeHash\n * @return {?}\n */\npath(includeHash: boolean = false): string {\n    // the hash value is always prefixed with a `#`\n    // and if it is empty then it will stay empty\n    let /** @type {?} */ path = this._platformLocation.hash;\n    if (path == null) path = '#';\n\n    return path.length > 0 ? path.substring(1) : path;\n  }\n/**\n * @param {?} internal\n * @return {?}\n */\nprepareExternalUrl(internal: string): string {\n    const /** @type {?} */ url = Location.joinWithSlash(this._baseHref, internal);\n    return url.length > 0 ? ('#' + url) : url;\n  }\n/**\n * @param {?} state\n * @param {?} title\n * @param {?} path\n * @param {?} queryParams\n * @return {?}\n */\npushState(state: any, title: string, path: string, queryParams: string) {\n    let /** @type {?} */ url: string|null =\n        this.prepareExternalUrl(path + Location.normalizeQueryParams(queryParams));\n    if (url.length == 0) {\n      url = this._platformLocation.pathname;\n    }\n    this._platformLocation.pushState(state, title, url);\n  }\n/**\n * @param {?} state\n * @param {?} title\n * @param {?} path\n * @param {?} queryParams\n * @return {?}\n */\nreplaceState(state: any, title: string, path: string, queryParams: string) {\n    let /** @type {?} */ url = this.prepareExternalUrl(path + Location.normalizeQueryParams(queryParams));\n    if (url.length == 0) {\n      url = this._platformLocation.pathname;\n    }\n    this._platformLocation.replaceState(state, title, url);\n  }\n/**\n * @return {?}\n */\nforward(): void { this._platformLocation.forward(); }\n/**\n * @return {?}\n */\nback(): void { this._platformLocation.back(); }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: PlatformLocation, },\n{type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [APP_BASE_HREF, ] }, ]},\n];\n}\n\nfunction HashLocationStrategy_tsickle_Closure_declarations() {\n/** @type {?} */\nHashLocationStrategy.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nHashLocationStrategy.ctorParameters;\n/** @type {?} */\nHashLocationStrategy.prototype._baseHref;\n/** @type {?} */\nHashLocationStrategy.prototype._platformLocation;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Inject, Injectable, Optional} from '@angular/core';\n\n\nimport {Location} from './location';\nimport {APP_BASE_HREF, LocationStrategy} from './location_strategy';\nimport {LocationChangeListener, PlatformLocation} from './platform_location';\n/**\n * \\@whatItDoes Use URL for storing application location data.\n * \\@description \n * `PathLocationStrategy` is a {\\@link LocationStrategy} used to configure the\n * {\\@link Location} service to represent its state in the\n * [path](https://en.wikipedia.org/wiki/Uniform_Resource_Locator#Syntax) of the\n * browser's URL.\n * \n * If you're using `PathLocationStrategy`, you must provide a {\\@link APP_BASE_HREF}\n * or add a base element to the document. This URL prefix that will be preserved\n * when generating and recognizing URLs.\n * \n * For instance, if you provide an `APP_BASE_HREF` of `'/my/app'` and call\n * `location.go('/foo')`, the browser's URL will become\n * `example.com/my/app/foo`.\n * \n * Similarly, if you add `<base href='/my/app'/>` to the document and call\n * `location.go('/foo')`, the browser's URL will become\n * `example.com/my/app/foo`.\n * \n * ### Example\n * \n * {\\@example common/location/ts/path_location_component.ts region='LocationComponent'}\n * \n * \\@stable\n */\nexport class PathLocationStrategy extends LocationStrategy {\nprivate _baseHref: string;\n/**\n * @param {?} _platformLocation\n * @param {?=} href\n */\nconstructor(\nprivate _platformLocation: PlatformLocation,\n        href?: string) {\n    super();\n\n    if (href == null) {\n      href = this._platformLocation.getBaseHrefFromDOM();\n    }\n\n    if (href == null) {\n      throw new Error(\n          `No base href set. Please provide a value for the APP_BASE_HREF token or add a base element to the document.`);\n    }\n\n    this._baseHref = href;\n  }\n/**\n * @param {?} fn\n * @return {?}\n */\nonPopState(fn: LocationChangeListener): void {\n    this._platformLocation.onPopState(fn);\n    this._platformLocation.onHashChange(fn);\n  }\n/**\n * @return {?}\n */\ngetBaseHref(): string { return this._baseHref; }\n/**\n * @param {?} internal\n * @return {?}\n */\nprepareExternalUrl(internal: string): string {\n    return Location.joinWithSlash(this._baseHref, internal);\n  }\n/**\n * @param {?=} includeHash\n * @return {?}\n */\npath(includeHash: boolean = false): string {\n    const /** @type {?} */ pathname = this._platformLocation.pathname +\n        Location.normalizeQueryParams(this._platformLocation.search);\n    const /** @type {?} */ hash = this._platformLocation.hash;\n    return hash && includeHash ? `${pathname}${hash}` : pathname;\n  }\n/**\n * @param {?} state\n * @param {?} title\n * @param {?} url\n * @param {?} queryParams\n * @return {?}\n */\npushState(state: any, title: string, url: string, queryParams: string) {\n    const /** @type {?} */ externalUrl = this.prepareExternalUrl(url + Location.normalizeQueryParams(queryParams));\n    this._platformLocation.pushState(state, title, externalUrl);\n  }\n/**\n * @param {?} state\n * @param {?} title\n * @param {?} url\n * @param {?} queryParams\n * @return {?}\n */\nreplaceState(state: any, title: string, url: string, queryParams: string) {\n    const /** @type {?} */ externalUrl = this.prepareExternalUrl(url + Location.normalizeQueryParams(queryParams));\n    this._platformLocation.replaceState(state, title, externalUrl);\n  }\n/**\n * @return {?}\n */\nforward(): void { this._platformLocation.forward(); }\n/**\n * @return {?}\n */\nback(): void { this._platformLocation.back(); }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: PlatformLocation, },\n{type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [APP_BASE_HREF, ] }, ]},\n];\n}\n\nfunction PathLocationStrategy_tsickle_Closure_declarations() {\n/** @type {?} */\nPathLocationStrategy.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nPathLocationStrategy.ctorParameters;\n/** @type {?} */\nPathLocationStrategy.prototype._baseHref;\n/** @type {?} */\nPathLocationStrategy.prototype._platformLocation;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nexport {PlatformLocation,LOCATION_INITIALIZED,LocationChangeEvent,LocationChangeListener} from './platform_location';\nexport {LocationStrategy,APP_BASE_HREF} from './location_strategy';\nexport {HashLocationStrategy} from './hash_location_strategy';\nexport {PathLocationStrategy} from './path_location_strategy';\nexport {PopStateEvent,Location} from './location';\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Inject, Injectable, LOCALE_ID} from '@angular/core';\n/**\n * \\@experimental\n * @abstract\n */\nexport abstract class NgLocalization {\n/**\n * @abstract\n * @param {?} value\n * @return {?}\n */\ngetPluralCategory(value: any) {} }\n/**\n * Returns the plural category for a given value.\n * - \"=value\" when the case exists,\n * - the plural category otherwise\n * \n * \\@internal\n * @param {?} value\n * @param {?} cases\n * @param {?} ngLocalization\n * @return {?}\n */\nexport function getPluralCategory(\n    value: number, cases: string[], ngLocalization: NgLocalization): string {\n  let /** @type {?} */ key = `=${value}`;\n\n  if (cases.indexOf(key) > -1) {\n    return key;\n  }\n\n  key = ngLocalization.getPluralCategory(value);\n\n  if (cases.indexOf(key) > -1) {\n    return key;\n  }\n\n  if (cases.indexOf('other') > -1) {\n    return 'other';\n  }\n\n  throw new Error(`No plural message found for value \"${value}\"`);\n}\n/**\n * Returns the plural case based on the locale\n * \n * \\@experimental\n */\nexport class NgLocaleLocalization extends NgLocalization {\n/**\n * @param {?} locale\n */\nconstructor( protected locale: string) { super(); }\n/**\n * @param {?} value\n * @return {?}\n */\ngetPluralCategory(value: any): string {\n    const /** @type {?} */ plural = getPluralCase(this.locale, value);\n\n    switch (plural) {\n      case Plural.Zero:\n        return 'zero';\n      case Plural.One:\n        return 'one';\n      case Plural.Two:\n        return 'two';\n      case Plural.Few:\n        return 'few';\n      case Plural.Many:\n        return 'many';\n      default:\n        return 'other';\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: undefined, decorators: [{ type: Inject, args: [LOCALE_ID, ] }, ]},\n];\n}\n\nfunction NgLocaleLocalization_tsickle_Closure_declarations() {\n/** @type {?} */\nNgLocaleLocalization.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nNgLocaleLocalization.ctorParameters;\n/** @type {?} */\nNgLocaleLocalization.prototype.locale;\n}\n\nexport type Plural = number;\nexport let Plural: any = {};\nPlural.Zero = 0;\nPlural.One = 1;\nPlural.Two = 2;\nPlural.Few = 3;\nPlural.Many = 4;\nPlural.Other = 5;\nPlural[Plural.Zero] = \"Zero\";\nPlural[Plural.One] = \"One\";\nPlural[Plural.Two] = \"Two\";\nPlural[Plural.Few] = \"Few\";\nPlural[Plural.Many] = \"Many\";\nPlural[Plural.Other] = \"Other\";\n\n/**\n * Returns the plural case based on the locale\n * \n * \\@experimental\n * @param {?} locale\n * @param {?} nLike\n * @return {?}\n */\nexport function getPluralCase(locale: string, nLike: number | string): Plural {\n  // TODO(vicb): lazy compute\n  if (typeof nLike === 'string') {\n    nLike = parseInt( /** @type {?} */((<string>nLike)), 10);\n  }\n  const /** @type {?} */ n: number = /** @type {?} */(( nLike as number));\n  const /** @type {?} */ nDecimal = n.toString().replace(/^[^.]*\\.?/, '');\n  const /** @type {?} */ i = Math.floor(Math.abs(n));\n  const /** @type {?} */ v = nDecimal.length;\n  const /** @type {?} */ f = parseInt(nDecimal, 10);\n  const /** @type {?} */ t = parseInt(n.toString().replace(/^[^.]*\\.?|0+$/g, ''), 10) || 0;\n\n  const /** @type {?} */ lang = locale.split('-')[0].toLowerCase();\n\n  switch (lang) {\n    case 'af':\n    case 'asa':\n    case 'az':\n    case 'bem':\n    case 'bez':\n    case 'bg':\n    case 'brx':\n    case 'ce':\n    case 'cgg':\n    case 'chr':\n    case 'ckb':\n    case 'ee':\n    case 'el':\n    case 'eo':\n    case 'es':\n    case 'eu':\n    case 'fo':\n    case 'fur':\n    case 'gsw':\n    case 'ha':\n    case 'haw':\n    case 'hu':\n    case 'jgo':\n    case 'jmc':\n    case 'ka':\n    case 'kk':\n    case 'kkj':\n    case 'kl':\n    case 'ks':\n    case 'ksb':\n    case 'ky':\n    case 'lb':\n    case 'lg':\n    case 'mas':\n    case 'mgo':\n    case 'ml':\n    case 'mn':\n    case 'nb':\n    case 'nd':\n    case 'ne':\n    case 'nn':\n    case 'nnh':\n    case 'nyn':\n    case 'om':\n    case 'or':\n    case 'os':\n    case 'ps':\n    case 'rm':\n    case 'rof':\n    case 'rwk':\n    case 'saq':\n    case 'seh':\n    case 'sn':\n    case 'so':\n    case 'sq':\n    case 'ta':\n    case 'te':\n    case 'teo':\n    case 'tk':\n    case 'tr':\n    case 'ug':\n    case 'uz':\n    case 'vo':\n    case 'vun':\n    case 'wae':\n    case 'xog':\n      if (n === 1) return Plural.One;\n      return Plural.Other;\n    case 'ak':\n    case 'ln':\n    case 'mg':\n    case 'pa':\n    case 'ti':\n      if (n === Math.floor(n) && n >= 0 && n <= 1) return Plural.One;\n      return Plural.Other;\n    case 'am':\n    case 'as':\n    case 'bn':\n    case 'fa':\n    case 'gu':\n    case 'hi':\n    case 'kn':\n    case 'mr':\n    case 'zu':\n      if (i === 0 || n === 1) return Plural.One;\n      return Plural.Other;\n    case 'ar':\n      if (n === 0) return Plural.Zero;\n      if (n === 1) return Plural.One;\n      if (n === 2) return Plural.Two;\n      if (n % 100 === Math.floor(n % 100) && n % 100 >= 3 && n % 100 <= 10) return Plural.Few;\n      if (n % 100 === Math.floor(n % 100) && n % 100 >= 11 && n % 100 <= 99) return Plural.Many;\n      return Plural.Other;\n    case 'ast':\n    case 'ca':\n    case 'de':\n    case 'en':\n    case 'et':\n    case 'fi':\n    case 'fy':\n    case 'gl':\n    case 'it':\n    case 'nl':\n    case 'sv':\n    case 'sw':\n    case 'ur':\n    case 'yi':\n      if (i === 1 && v === 0) return Plural.One;\n      return Plural.Other;\n    case 'be':\n      if (n % 10 === 1 && !(n % 100 === 11)) return Plural.One;\n      if (n % 10 === Math.floor(n % 10) && n % 10 >= 2 && n % 10 <= 4 &&\n          !(n % 100 >= 12 && n % 100 <= 14))\n        return Plural.Few;\n      if (n % 10 === 0 || n % 10 === Math.floor(n % 10) && n % 10 >= 5 && n % 10 <= 9 ||\n          n % 100 === Math.floor(n % 100) && n % 100 >= 11 && n % 100 <= 14)\n        return Plural.Many;\n      return Plural.Other;\n    case 'br':\n      if (n % 10 === 1 && !(n % 100 === 11 || n % 100 === 71 || n % 100 === 91)) return Plural.One;\n      if (n % 10 === 2 && !(n % 100 === 12 || n % 100 === 72 || n % 100 === 92)) return Plural.Two;\n      if (n % 10 === Math.floor(n % 10) && (n % 10 >= 3 && n % 10 <= 4 || n % 10 === 9) &&\n          !(n % 100 >= 10 && n % 100 <= 19 || n % 100 >= 70 && n % 100 <= 79 ||\n            n % 100 >= 90 && n % 100 <= 99))\n        return Plural.Few;\n      if (!(n === 0) && n % 1e6 === 0) return Plural.Many;\n      return Plural.Other;\n    case 'bs':\n    case 'hr':\n    case 'sr':\n      if (v === 0 && i % 10 === 1 && !(i % 100 === 11) || f % 10 === 1 && !(f % 100 === 11))\n        return Plural.One;\n      if (v === 0 && i % 10 === Math.floor(i % 10) && i % 10 >= 2 && i % 10 <= 4 &&\n              !(i % 100 >= 12 && i % 100 <= 14) ||\n          f % 10 === Math.floor(f % 10) && f % 10 >= 2 && f % 10 <= 4 &&\n              !(f % 100 >= 12 && f % 100 <= 14))\n        return Plural.Few;\n      return Plural.Other;\n    case 'cs':\n    case 'sk':\n      if (i === 1 && v === 0) return Plural.One;\n      if (i === Math.floor(i) && i >= 2 && i <= 4 && v === 0) return Plural.Few;\n      if (!(v === 0)) return Plural.Many;\n      return Plural.Other;\n    case 'cy':\n      if (n === 0) return Plural.Zero;\n      if (n === 1) return Plural.One;\n      if (n === 2) return Plural.Two;\n      if (n === 3) return Plural.Few;\n      if (n === 6) return Plural.Many;\n      return Plural.Other;\n    case 'da':\n      if (n === 1 || !(t === 0) && (i === 0 || i === 1)) return Plural.One;\n      return Plural.Other;\n    case 'dsb':\n    case 'hsb':\n      if (v === 0 && i % 100 === 1 || f % 100 === 1) return Plural.One;\n      if (v === 0 && i % 100 === 2 || f % 100 === 2) return Plural.Two;\n      if (v === 0 && i % 100 === Math.floor(i % 100) && i % 100 >= 3 && i % 100 <= 4 ||\n          f % 100 === Math.floor(f % 100) && f % 100 >= 3 && f % 100 <= 4)\n        return Plural.Few;\n      return Plural.Other;\n    case 'ff':\n    case 'fr':\n    case 'hy':\n    case 'kab':\n      if (i === 0 || i === 1) return Plural.One;\n      return Plural.Other;\n    case 'fil':\n      if (v === 0 && (i === 1 || i === 2 || i === 3) ||\n          v === 0 && !(i % 10 === 4 || i % 10 === 6 || i % 10 === 9) ||\n          !(v === 0) && !(f % 10 === 4 || f % 10 === 6 || f % 10 === 9))\n        return Plural.One;\n      return Plural.Other;\n    case 'ga':\n      if (n === 1) return Plural.One;\n      if (n === 2) return Plural.Two;\n      if (n === Math.floor(n) && n >= 3 && n <= 6) return Plural.Few;\n      if (n === Math.floor(n) && n >= 7 && n <= 10) return Plural.Many;\n      return Plural.Other;\n    case 'gd':\n      if (n === 1 || n === 11) return Plural.One;\n      if (n === 2 || n === 12) return Plural.Two;\n      if (n === Math.floor(n) && (n >= 3 && n <= 10 || n >= 13 && n <= 19)) return Plural.Few;\n      return Plural.Other;\n    case 'gv':\n      if (v === 0 && i % 10 === 1) return Plural.One;\n      if (v === 0 && i % 10 === 2) return Plural.Two;\n      if (v === 0 &&\n          (i % 100 === 0 || i % 100 === 20 || i % 100 === 40 || i % 100 === 60 || i % 100 === 80))\n        return Plural.Few;\n      if (!(v === 0)) return Plural.Many;\n      return Plural.Other;\n    case 'he':\n      if (i === 1 && v === 0) return Plural.One;\n      if (i === 2 && v === 0) return Plural.Two;\n      if (v === 0 && !(n >= 0 && n <= 10) && n % 10 === 0) return Plural.Many;\n      return Plural.Other;\n    case 'is':\n      if (t === 0 && i % 10 === 1 && !(i % 100 === 11) || !(t === 0)) return Plural.One;\n      return Plural.Other;\n    case 'ksh':\n      if (n === 0) return Plural.Zero;\n      if (n === 1) return Plural.One;\n      return Plural.Other;\n    case 'kw':\n    case 'naq':\n    case 'se':\n    case 'smn':\n      if (n === 1) return Plural.One;\n      if (n === 2) return Plural.Two;\n      return Plural.Other;\n    case 'lag':\n      if (n === 0) return Plural.Zero;\n      if ((i === 0 || i === 1) && !(n === 0)) return Plural.One;\n      return Plural.Other;\n    case 'lt':\n      if (n % 10 === 1 && !(n % 100 >= 11 && n % 100 <= 19)) return Plural.One;\n      if (n % 10 === Math.floor(n % 10) && n % 10 >= 2 && n % 10 <= 9 &&\n          !(n % 100 >= 11 && n % 100 <= 19))\n        return Plural.Few;\n      if (!(f === 0)) return Plural.Many;\n      return Plural.Other;\n    case 'lv':\n    case 'prg':\n      if (n % 10 === 0 || n % 100 === Math.floor(n % 100) && n % 100 >= 11 && n % 100 <= 19 ||\n          v === 2 && f % 100 === Math.floor(f % 100) && f % 100 >= 11 && f % 100 <= 19)\n        return Plural.Zero;\n      if (n % 10 === 1 && !(n % 100 === 11) || v === 2 && f % 10 === 1 && !(f % 100 === 11) ||\n          !(v === 2) && f % 10 === 1)\n        return Plural.One;\n      return Plural.Other;\n    case 'mk':\n      if (v === 0 && i % 10 === 1 || f % 10 === 1) return Plural.One;\n      return Plural.Other;\n    case 'mt':\n      if (n === 1) return Plural.One;\n      if (n === 0 || n % 100 === Math.floor(n % 100) && n % 100 >= 2 && n % 100 <= 10)\n        return Plural.Few;\n      if (n % 100 === Math.floor(n % 100) && n % 100 >= 11 && n % 100 <= 19) return Plural.Many;\n      return Plural.Other;\n    case 'pl':\n      if (i === 1 && v === 0) return Plural.One;\n      if (v === 0 && i % 10 === Math.floor(i % 10) && i % 10 >= 2 && i % 10 <= 4 &&\n          !(i % 100 >= 12 && i % 100 <= 14))\n        return Plural.Few;\n      if (v === 0 && !(i === 1) && i % 10 === Math.floor(i % 10) && i % 10 >= 0 && i % 10 <= 1 ||\n          v === 0 && i % 10 === Math.floor(i % 10) && i % 10 >= 5 && i % 10 <= 9 ||\n          v === 0 && i % 100 === Math.floor(i % 100) && i % 100 >= 12 && i % 100 <= 14)\n        return Plural.Many;\n      return Plural.Other;\n    case 'pt':\n      if (n === Math.floor(n) && n >= 0 && n <= 2 && !(n === 2)) return Plural.One;\n      return Plural.Other;\n    case 'ro':\n      if (i === 1 && v === 0) return Plural.One;\n      if (!(v === 0) || n === 0 ||\n          !(n === 1) && n % 100 === Math.floor(n % 100) && n % 100 >= 1 && n % 100 <= 19)\n        return Plural.Few;\n      return Plural.Other;\n    case 'ru':\n    case 'uk':\n      if (v === 0 && i % 10 === 1 && !(i % 100 === 11)) return Plural.One;\n      if (v === 0 && i % 10 === Math.floor(i % 10) && i % 10 >= 2 && i % 10 <= 4 &&\n          !(i % 100 >= 12 && i % 100 <= 14))\n        return Plural.Few;\n      if (v === 0 && i % 10 === 0 ||\n          v === 0 && i % 10 === Math.floor(i % 10) && i % 10 >= 5 && i % 10 <= 9 ||\n          v === 0 && i % 100 === Math.floor(i % 100) && i % 100 >= 11 && i % 100 <= 14)\n        return Plural.Many;\n      return Plural.Other;\n    case 'shi':\n      if (i === 0 || n === 1) return Plural.One;\n      if (n === Math.floor(n) && n >= 2 && n <= 10) return Plural.Few;\n      return Plural.Other;\n    case 'si':\n      if (n === 0 || n === 1 || i === 0 && f === 1) return Plural.One;\n      return Plural.Other;\n    case 'sl':\n      if (v === 0 && i % 100 === 1) return Plural.One;\n      if (v === 0 && i % 100 === 2) return Plural.Two;\n      if (v === 0 && i % 100 === Math.floor(i % 100) && i % 100 >= 3 && i % 100 <= 4 || !(v === 0))\n        return Plural.Few;\n      return Plural.Other;\n    case 'tzm':\n      if (n === Math.floor(n) && n >= 0 && n <= 1 || n === Math.floor(n) && n >= 11 && n <= 99)\n        return Plural.One;\n      return Plural.Other;\n    // When there is no specification, the default is always \"other\"\n    // Spec: http://cldr.unicode.org/index/cldr-spec/plural-rules\n    // > other (required—general plural form — also used if the language only has a single form)\n    default:\n      return Plural.Other;\n  }\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Injector, THROW_IF_NOT_FOUND} from './injector';\nimport {Self, SkipSelf} from './metadata';\nimport {Provider} from './provider';\nimport {cyclicDependencyError, instantiationError, noProviderError, outOfBoundsError} from './reflective_errors';\nimport {ReflectiveKey} from './reflective_key';\nimport {ReflectiveDependency, ResolvedReflectiveFactory, ResolvedReflectiveProvider, resolveReflectiveProviders} from './reflective_provider';\n\n// Threshold for the dynamic version\nconst /** @type {?} */ UNDEFINED = new Object();\n/**\n * A ReflectiveDependency injection container used for instantiating objects and resolving\n * dependencies.\n * \n * An `Injector` is a replacement for a `new` operator, which can automatically resolve the\n * constructor dependencies.\n * \n * In typical use, application code asks for the dependencies in the constructor and they are\n * resolved by the `Injector`.\n * \n * ### Example ([live demo](http://plnkr.co/edit/jzjec0?p=preview))\n * \n * The following example creates an `Injector` configured to create `Engine` and `Car`.\n * \n * ```typescript\n * \\@Injectable() \n * class Engine {\n * }\n * \n * \\@Injectable() \n * class Car {\n *   constructor(public engine:Engine) {}\n * }\n * \n * var injector = ReflectiveInjector.resolveAndCreate([Car, Engine]);\n * var car = injector.get(Car);\n * expect(car instanceof Car).toBe(true);\n * expect(car.engine instanceof Engine).toBe(true);\n * ```\n * \n * Notice, we don't use the `new` operator because we explicitly want to have the `Injector`\n * resolve all of the object's dependencies automatically.\n * \n * \\@stable\n * @abstract\n */\nexport abstract class ReflectiveInjector implements Injector {\n/**\n * Turns an array of provider definitions into an array of resolved providers.\n * \n * A resolution is a process of flattening multiple nested arrays and converting individual\n * providers into an array of {\\@link ResolvedReflectiveProvider}s.\n * \n * ### Example ([live demo](http://plnkr.co/edit/AiXTHi?p=preview))\n * \n * ```typescript\n * \\@Injectable() \n * class Engine {\n * }\n * \n * \\@Injectable() \n * class Car {\n *   constructor(public engine:Engine) {}\n * }\n * \n * var providers = ReflectiveInjector.resolve([Car, [[Engine]]]);\n * \n * expect(providers.length).toEqual(2);\n * \n * expect(providers[0] instanceof ResolvedReflectiveProvider).toBe(true);\n * expect(providers[0].key.displayName).toBe(\"Car\");\n * expect(providers[0].dependencies.length).toEqual(1);\n * expect(providers[0].factory).toBeDefined();\n * \n * expect(providers[1].key.displayName).toBe(\"Engine\");\n * });\n * ```\n * \n * See {\\@link ReflectiveInjector#fromResolvedProviders} for more info.\n * @param {?} providers\n * @return {?}\n */\nstatic resolve(providers: Provider[]): ResolvedReflectiveProvider[] {\n    return resolveReflectiveProviders(providers);\n  }\n/**\n * Resolves an array of providers and creates an injector from those providers.\n * \n * The passed-in providers can be an array of `Type`, {\\@link Provider},\n * or a recursive array of more providers.\n * \n * ### Example ([live demo](http://plnkr.co/edit/ePOccA?p=preview))\n * \n * ```typescript\n * \\@Injectable() \n * class Engine {\n * }\n * \n * \\@Injectable() \n * class Car {\n *   constructor(public engine:Engine) {}\n * }\n * \n * var injector = ReflectiveInjector.resolveAndCreate([Car, Engine]);\n * expect(injector.get(Car) instanceof Car).toBe(true);\n * ```\n * \n * This function is slower than the corresponding `fromResolvedProviders`\n * because it needs to resolve the passed-in providers first.\n * See {\\@link ReflectiveInjector#resolve} and {\\@link ReflectiveInjector#fromResolvedProviders}.\n * @param {?} providers\n * @param {?=} parent\n * @return {?}\n */\nstatic resolveAndCreate(providers: Provider[], parent?: Injector): ReflectiveInjector {\n    const /** @type {?} */ ResolvedReflectiveProviders = ReflectiveInjector.resolve(providers);\n    return ReflectiveInjector.fromResolvedProviders(ResolvedReflectiveProviders, parent);\n  }\n/**\n * Creates an injector from previously resolved providers.\n * \n * This API is the recommended way to construct injectors in performance-sensitive parts.\n * \n * ### Example ([live demo](http://plnkr.co/edit/KrSMci?p=preview))\n * \n * ```typescript\n * \\@Injectable() \n * class Engine {\n * }\n * \n * \\@Injectable() \n * class Car {\n *   constructor(public engine:Engine) {}\n * }\n * \n * var providers = ReflectiveInjector.resolve([Car, Engine]);\n * var injector = ReflectiveInjector.fromResolvedProviders(providers);\n * expect(injector.get(Car) instanceof Car).toBe(true);\n * ```\n * \\@experimental\n * @param {?} providers\n * @param {?=} parent\n * @return {?}\n */\nstatic fromResolvedProviders(providers: ResolvedReflectiveProvider[], parent?: Injector):\n      ReflectiveInjector {\n    return new ReflectiveInjector_(providers, parent);\n  }\n/**\n * Parent of this injector.\n * \n * <!-- TODO: Add a link to the section of the user guide talking about hierarchical injection.\n * -->\n * \n * ### Example ([live demo](http://plnkr.co/edit/eosMGo?p=preview))\n * \n * ```typescript\n * var parent = ReflectiveInjector.resolveAndCreate([]);\n * var child = parent.resolveAndCreateChild([]);\n * expect(child.parent).toBe(parent);\n * ```\n * @abstract\n * @return {?}\n */\nparent() {}\n/**\n * Resolves an array of providers and creates a child injector from those providers.\n * \n * <!-- TODO: Add a link to the section of the user guide talking about hierarchical injection.\n * -->\n * \n * The passed-in providers can be an array of `Type`, {\\@link Provider},\n * or a recursive array of more providers.\n * \n * ### Example ([live demo](http://plnkr.co/edit/opB3T4?p=preview))\n * \n * ```typescript\n * class ParentProvider {}\n * class ChildProvider {}\n * \n * var parent = ReflectiveInjector.resolveAndCreate([ParentProvider]);\n * var child = parent.resolveAndCreateChild([ChildProvider]);\n * \n * expect(child.get(ParentProvider) instanceof ParentProvider).toBe(true);\n * expect(child.get(ChildProvider) instanceof ChildProvider).toBe(true);\n * expect(child.get(ParentProvider)).toBe(parent.get(ParentProvider));\n * ```\n * \n * This function is slower than the corresponding `createChildFromResolved`\n * because it needs to resolve the passed-in providers first.\n * See {\\@link ReflectiveInjector#resolve} and {\\@link ReflectiveInjector#createChildFromResolved}.\n * @abstract\n * @param {?} providers\n * @return {?}\n */\nresolveAndCreateChild(providers: Provider[]) {}\n/**\n * Creates a child injector from previously resolved providers.\n * \n * <!-- TODO: Add a link to the section of the user guide talking about hierarchical injection.\n * -->\n * \n * This API is the recommended way to construct injectors in performance-sensitive parts.\n * \n * ### Example ([live demo](http://plnkr.co/edit/VhyfjN?p=preview))\n * \n * ```typescript\n * class ParentProvider {}\n * class ChildProvider {}\n * \n * var parentProviders = ReflectiveInjector.resolve([ParentProvider]);\n * var childProviders = ReflectiveInjector.resolve([ChildProvider]);\n * \n * var parent = ReflectiveInjector.fromResolvedProviders(parentProviders);\n * var child = parent.createChildFromResolved(childProviders);\n * \n * expect(child.get(ParentProvider) instanceof ParentProvider).toBe(true);\n * expect(child.get(ChildProvider) instanceof ChildProvider).toBe(true);\n * expect(child.get(ParentProvider)).toBe(parent.get(ParentProvider));\n * ```\n * @abstract\n * @param {?} providers\n * @return {?}\n */\ncreateChildFromResolved(providers: ResolvedReflectiveProvider[]) {}\n/**\n * Resolves a provider and instantiates an object in the context of the injector.\n * \n * The created object does not get cached by the injector.\n * \n * ### Example ([live demo](http://plnkr.co/edit/yvVXoB?p=preview))\n * \n * ```typescript\n * \\@Injectable() \n * class Engine {\n * }\n * \n * \\@Injectable() \n * class Car {\n *   constructor(public engine:Engine) {}\n * }\n * \n * var injector = ReflectiveInjector.resolveAndCreate([Engine]);\n * \n * var car = injector.resolveAndInstantiate(Car);\n * expect(car.engine).toBe(injector.get(Engine));\n * expect(car).not.toBe(injector.resolveAndInstantiate(Car));\n * ```\n * @abstract\n * @param {?} provider\n * @return {?}\n */\nresolveAndInstantiate(provider: Provider) {}\n/**\n * Instantiates an object using a resolved provider in the context of the injector.\n * \n * The created object does not get cached by the injector.\n * \n * ### Example ([live demo](http://plnkr.co/edit/ptCImQ?p=preview))\n * \n * ```typescript\n * \\@Injectable() \n * class Engine {\n * }\n * \n * \\@Injectable() \n * class Car {\n *   constructor(public engine:Engine) {}\n * }\n * \n * var injector = ReflectiveInjector.resolveAndCreate([Engine]);\n * var carProvider = ReflectiveInjector.resolve([Car])[0];\n * var car = injector.instantiateResolved(carProvider);\n * expect(car.engine).toBe(injector.get(Engine));\n * expect(car).not.toBe(injector.instantiateResolved(carProvider));\n * ```\n * @abstract\n * @param {?} provider\n * @return {?}\n */\ninstantiateResolved(provider: ResolvedReflectiveProvider) {}\n/**\n * @abstract\n * @param {?} token\n * @param {?=} notFoundValue\n * @return {?}\n */\nget(token: any, notFoundValue?: any) {}\n}\nexport class ReflectiveInjector_ implements ReflectiveInjector {\n/**\n * \\@internal\n */\n_constructionCounter: number = 0;\n/**\n * \\@internal\n */\npublic _providers: ResolvedReflectiveProvider[];\n/**\n * \\@internal\n */\npublic _parent: Injector|null;\n\n  keyIds: number[];\n  objs: any[];\n/**\n * Private\n * @param {?} _providers\n * @param {?=} _parent\n */\nconstructor(_providers: ResolvedReflectiveProvider[], _parent?: Injector) {\n    this._providers = _providers;\n    this._parent = _parent || null;\n\n    const len = _providers.length;\n\n    this.keyIds = new Array(len);\n    this.objs = new Array(len);\n\n    for (let i = 0; i < len; i++) {\n      this.keyIds[i] = _providers[i].key.id;\n      this.objs[i] = UNDEFINED;\n    }\n  }\n/**\n * @param {?} token\n * @param {?=} notFoundValue\n * @return {?}\n */\nget(token: any, notFoundValue: any = THROW_IF_NOT_FOUND): any {\n    return this._getByKey(ReflectiveKey.get(token), null, notFoundValue);\n  }\n/**\n * @return {?}\n */\nget parent(): Injector|null { return this._parent; }\n/**\n * @param {?} providers\n * @return {?}\n */\nresolveAndCreateChild(providers: Provider[]): ReflectiveInjector {\n    const /** @type {?} */ ResolvedReflectiveProviders = ReflectiveInjector.resolve(providers);\n    return this.createChildFromResolved(ResolvedReflectiveProviders);\n  }\n/**\n * @param {?} providers\n * @return {?}\n */\ncreateChildFromResolved(providers: ResolvedReflectiveProvider[]): ReflectiveInjector {\n    const /** @type {?} */ inj = new ReflectiveInjector_(providers);\n    inj._parent = this;\n    return inj;\n  }\n/**\n * @param {?} provider\n * @return {?}\n */\nresolveAndInstantiate(provider: Provider): any {\n    return this.instantiateResolved(ReflectiveInjector.resolve([provider])[0]);\n  }\n/**\n * @param {?} provider\n * @return {?}\n */\ninstantiateResolved(provider: ResolvedReflectiveProvider): any {\n    return this._instantiateProvider(provider);\n  }\n/**\n * @param {?} index\n * @return {?}\n */\ngetProviderAtIndex(index: number): ResolvedReflectiveProvider {\n    if (index < 0 || index >= this._providers.length) {\n      throw outOfBoundsError(index);\n    }\n    return this._providers[index];\n  }\n/**\n * \\@internal\n * @param {?} provider\n * @return {?}\n */\n_new(provider: ResolvedReflectiveProvider): any {\n    if (this._constructionCounter++ > this._getMaxNumberOfObjects()) {\n      throw cyclicDependencyError(this, provider.key);\n    }\n    return this._instantiateProvider(provider);\n  }\n/**\n * @return {?}\n */\nprivate _getMaxNumberOfObjects(): number { return this.objs.length; }\n/**\n * @param {?} provider\n * @return {?}\n */\nprivate _instantiateProvider(provider: ResolvedReflectiveProvider): any {\n    if (provider.multiProvider) {\n      const /** @type {?} */ res = new Array(provider.resolvedFactories.length);\n      for (let /** @type {?} */ i = 0; i < provider.resolvedFactories.length; ++i) {\n        res[i] = this._instantiate(provider, provider.resolvedFactories[i]);\n      }\n      return res;\n    } else {\n      return this._instantiate(provider, provider.resolvedFactories[0]);\n    }\n  }\n/**\n * @param {?} provider\n * @param {?} ResolvedReflectiveFactory\n * @return {?}\n */\nprivate _instantiate(\n      provider: ResolvedReflectiveProvider,\n      ResolvedReflectiveFactory: ResolvedReflectiveFactory): any {\n    const /** @type {?} */ factory = ResolvedReflectiveFactory.factory;\n\n    let /** @type {?} */ deps: any[];\n    try {\n      deps =\n          ResolvedReflectiveFactory.dependencies.map(dep => this._getByReflectiveDependency(dep));\n    } catch ( /** @type {?} */e) {\n      if (e.addKey) {\n        e.addKey(this, provider.key);\n      }\n      throw e;\n    }\n\n    let /** @type {?} */ obj: any;\n    try {\n      obj = factory(...deps);\n    } catch ( /** @type {?} */e) {\n      throw instantiationError(this, e, e.stack, provider.key);\n    }\n\n    return obj;\n  }\n/**\n * @param {?} dep\n * @return {?}\n */\nprivate _getByReflectiveDependency(dep: ReflectiveDependency): any {\n    return this._getByKey(dep.key, dep.visibility, dep.optional ? null : THROW_IF_NOT_FOUND);\n  }\n/**\n * @param {?} key\n * @param {?} visibility\n * @param {?} notFoundValue\n * @return {?}\n */\nprivate _getByKey(key: ReflectiveKey, visibility: Self|SkipSelf|null, notFoundValue: any): any {\n    if (key === INJECTOR_KEY) {\n      return this;\n    }\n\n    if (visibility instanceof Self) {\n      return this._getByKeySelf(key, notFoundValue);\n\n    } else {\n      return this._getByKeyDefault(key, notFoundValue, visibility);\n    }\n  }\n/**\n * @param {?} keyId\n * @return {?}\n */\nprivate _getObjByKeyId(keyId: number): any {\n    for (let /** @type {?} */ i = 0; i < this.keyIds.length; i++) {\n      if (this.keyIds[i] === keyId) {\n        if (this.objs[i] === UNDEFINED) {\n          this.objs[i] = this._new(this._providers[i]);\n        }\n\n        return this.objs[i];\n      }\n    }\n\n    return UNDEFINED;\n  }\n/**\n * \\@internal\n * @param {?} key\n * @param {?} notFoundValue\n * @return {?}\n */\n_throwOrNull(key: ReflectiveKey, notFoundValue: any): any {\n    if (notFoundValue !== THROW_IF_NOT_FOUND) {\n      return notFoundValue;\n    } else {\n      throw noProviderError(this, key);\n    }\n  }\n/**\n * \\@internal\n * @param {?} key\n * @param {?} notFoundValue\n * @return {?}\n */\n_getByKeySelf(key: ReflectiveKey, notFoundValue: any): any {\n    const /** @type {?} */ obj = this._getObjByKeyId(key.id);\n    return (obj !== UNDEFINED) ? obj : this._throwOrNull(key, notFoundValue);\n  }\n/**\n * \\@internal\n * @param {?} key\n * @param {?} notFoundValue\n * @param {?} visibility\n * @return {?}\n */\n_getByKeyDefault(key: ReflectiveKey, notFoundValue: any, visibility: Self|SkipSelf|null): any {\n    let /** @type {?} */ inj: Injector|null;\n\n    if (visibility instanceof SkipSelf) {\n      inj = this._parent;\n    } else {\n      inj = this;\n    }\n\n    while (inj instanceof ReflectiveInjector_) {\n      const /** @type {?} */ inj_ = /** @type {?} */(( <ReflectiveInjector_>inj));\n      const /** @type {?} */ obj = inj_._getObjByKeyId(key.id);\n      if (obj !== UNDEFINED) return obj;\n      inj = inj_._parent;\n    }\n    if (inj !== null) {\n      return inj.get(key.token, notFoundValue);\n    } else {\n      return this._throwOrNull(key, notFoundValue);\n    }\n  }\n/**\n * @return {?}\n */\nget displayName(): string {\n    const /** @type {?} */ providers =\n        _mapProviders(this, (b: ResolvedReflectiveProvider) => ' \"' + b.key.displayName + '\" ')\n            .join(', ');\n    return `ReflectiveInjector(providers: [${providers}])`;\n  }\n/**\n * @return {?}\n */\ntoString(): string { return this.displayName; }\n}\n\nfunction ReflectiveInjector__tsickle_Closure_declarations() {\n/**\n * \\@internal\n * @type {?}\n */\nReflectiveInjector_.prototype._constructionCounter;\n/**\n * \\@internal\n * @type {?}\n */\nReflectiveInjector_.prototype._providers;\n/**\n * \\@internal\n * @type {?}\n */\nReflectiveInjector_.prototype._parent;\n/** @type {?} */\nReflectiveInjector_.prototype.keyIds;\n/** @type {?} */\nReflectiveInjector_.prototype.objs;\n}\n\n\nconst /** @type {?} */ INJECTOR_KEY = ReflectiveKey.get(Injector);\n/**\n * @param {?} injector\n * @param {?} fn\n * @return {?}\n */\nfunction _mapProviders(injector: ReflectiveInjector_, fn: Function): any[] {\n  const /** @type {?} */ res: any[] = new Array(injector._providers.length);\n  for (let /** @type {?} */ i = 0; i < injector._providers.length; ++i) {\n    res[i] = fn(injector.getProviderAtIndex(i));\n  }\n  return res;\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {isPromise} from '../src/util/lang';\n\nimport {Inject, Injectable, InjectionToken, Optional} from './di';\n/**\n * A function that will be executed when an application is initialized.\n * \\@experimental\n */\nexport const APP_INITIALIZER = new InjectionToken<Array<() => void>>('Application Initializer');\n/**\n * A class that reflects the state of running {\\@link APP_INITIALIZER}s.\n * \n * \\@experimental\n */\nexport class ApplicationInitStatus {\nprivate resolve: Function;\nprivate reject: Function;\nprivate initialized = false;\nprivate _donePromise: Promise<any>;\nprivate _done = false;\n/**\n * @param {?} appInits\n */\nconstructor(\nprivate appInits: (() => any)[]) {\n    this._donePromise = new Promise((res, rej) => {\n      this.resolve = res;\n      this.reject = rej;\n    });\n  }\n/**\n * \\@internal\n * @return {?}\n */\nrunInitializers() {\n    if (this.initialized) {\n      return;\n    }\n\n    const /** @type {?} */ asyncInitPromises: Promise<any>[] = [];\n\n    const /** @type {?} */ complete = () => {\n      this._done = true;\n      this.resolve();\n    };\n\n    if (this.appInits) {\n      for (let /** @type {?} */ i = 0; i < this.appInits.length; i++) {\n        const /** @type {?} */ initResult = this.appInits[i]();\n        if (isPromise(initResult)) {\n          asyncInitPromises.push(initResult);\n        }\n      }\n    }\n\n    Promise.all(asyncInitPromises).then(() => { complete(); }).catch(e => { this.reject(e); });\n\n    if (asyncInitPromises.length === 0) {\n      complete();\n    }\n    this.initialized = true;\n  }\n/**\n * @return {?}\n */\nget done(): boolean { return this._done; }\n/**\n * @return {?}\n */\nget donePromise(): Promise<any> { return this._donePromise; }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Array, decorators: [{ type: Inject, args: [APP_INITIALIZER, ] }, { type: Optional }, ]},\n];\n}\n\nfunction ApplicationInitStatus_tsickle_Closure_declarations() {\n/** @type {?} */\nApplicationInitStatus.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nApplicationInitStatus.ctorParameters;\n/** @type {?} */\nApplicationInitStatus.prototype.resolve;\n/** @type {?} */\nApplicationInitStatus.prototype.reject;\n/** @type {?} */\nApplicationInitStatus.prototype.initialized;\n/** @type {?} */\nApplicationInitStatus.prototype._donePromise;\n/** @type {?} */\nApplicationInitStatus.prototype._done;\n/** @type {?} */\nApplicationInitStatus.prototype.appInits;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {InjectionToken} from './di';\nimport {ComponentRef} from './linker/component_factory';\n/**\n * A DI Token representing a unique string id assigned to the application by Angular and used\n * primarily for prefixing application attributes and CSS styles when\n * {\\@link ViewEncapsulation#Emulated} is being used.\n * \n * If you need to avoid randomly generated value to be used as an application id, you can provide\n * a custom value via a DI provider <!-- TODO: provider --> configuring the root {\\@link Injector}\n * using this token.\n * \\@experimental\n */\nexport const APP_ID = new InjectionToken<string>('AppId');\n/**\n * @return {?}\n */\nexport function _appIdRandomProviderFactory() {\n  return `${_randomChar()}${_randomChar()}${_randomChar()}`;\n}\n/**\n * Providers that will generate a random APP_ID_TOKEN.\n * \\@experimental\n */\nexport const APP_ID_RANDOM_PROVIDER = {\n  provide: APP_ID,\n  useFactory: _appIdRandomProviderFactory,\n  deps: <any[]>[],\n};\n/**\n * @return {?}\n */\nfunction _randomChar(): string {\n  return String.fromCharCode(97 + Math.floor(Math.random() * 25));\n}\n/**\n * A function that will be executed when a platform is initialized.\n * \\@experimental\n */\nexport const PLATFORM_INITIALIZER = new InjectionToken<Array<() => void>>('Platform Initializer');\n/**\n * A token that indicates an opaque platform id.\n * \\@experimental\n */\nexport const PLATFORM_ID = new InjectionToken<Object>('Platform ID');\n/**\n * All callbacks provided via this token will be called for every component that is bootstrapped.\n * Signature of the callback:\n * \n * `(componentRef: ComponentRef) => void`.\n * \n * \\@experimental\n */\nexport const APP_BOOTSTRAP_LISTENER =\n    new InjectionToken<Array<(compRef: ComponentRef<any>) => void>>('appBootstrapListener');\n/**\n * A token which indicates the root directory of the application\n * \\@experimental\n */\nexport const PACKAGE_ROOT_URL = new InjectionToken<string>('Application Packages Root URL');\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Injectable} from './di';\nexport class Console {\n/**\n * @param {?} message\n * @return {?}\n */\nlog(message: string): void {\n    // tslint:disable-next-line:no-console\n    console.log(message);\n  }\n/**\n * @param {?} message\n * @return {?}\n */\nwarn(message: string): void {\n    // tslint:disable-next-line:no-console\n    console.warn(message);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction Console_tsickle_Closure_declarations() {\n/** @type {?} */\nConsole.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nConsole.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Injectable, InjectionToken} from '../di';\nimport {MissingTranslationStrategy} from '../i18n/tokens';\nimport {ViewEncapsulation} from '../metadata';\nimport {Type} from '../type';\n\nimport {ComponentFactory} from './component_factory';\nimport {NgModuleFactory} from './ng_module_factory';\n/**\n * Combination of NgModuleFactory and ComponentFactorys.\n * \n * \\@experimental\n */\nexport class ModuleWithComponentFactories<T> {\n/**\n * @param {?} ngModuleFactory\n * @param {?} componentFactories\n */\nconstructor(\npublic ngModuleFactory: NgModuleFactory<T>,\npublic componentFactories: ComponentFactory<any>[]) {}\n}\n\nfunction ModuleWithComponentFactories_tsickle_Closure_declarations() {\n/** @type {?} */\nModuleWithComponentFactories.prototype.ngModuleFactory;\n/** @type {?} */\nModuleWithComponentFactories.prototype.componentFactories;\n}\n\n/**\n * @return {?}\n */\nfunction _throwError() {\n  throw new Error(`Runtime compiler is not loaded`);\n}\n/**\n * Low-level service for running the angular compiler during runtime\n * to create {\\@link ComponentFactory}s, which\n * can later be used to create and render a Component instance.\n * \n * Each `\\@NgModule` provides an own `Compiler` to its injector,\n * that will use the directives/pipes of the ng module for compilation\n * of components.\n * \\@stable\n */\nexport class Compiler {\n/**\n * Compiles the given NgModule and all of its components. All templates of the components listed\n * in `entryComponents` have to be inlined.\n * @template T\n * @param {?} moduleType\n * @return {?}\n */\ncompileModuleSync<T>(moduleType: Type<T>): NgModuleFactory<T> { throw _throwError(); }\n/**\n * Compiles the given NgModule and all of its components\n * @template T\n * @param {?} moduleType\n * @return {?}\n */\ncompileModuleAsync<T>(moduleType: Type<T>): Promise<NgModuleFactory<T>> { throw _throwError(); }\n/**\n * Same as {\\@link #compileModuleSync} but also creates ComponentFactories for all components.\n * @template T\n * @param {?} moduleType\n * @return {?}\n */\ncompileModuleAndAllComponentsSync<T>(moduleType: Type<T>): ModuleWithComponentFactories<T> {\n    throw _throwError();\n  }\n/**\n * Same as {\\@link #compileModuleAsync} but also creates ComponentFactories for all components.\n * @template T\n * @param {?} moduleType\n * @return {?}\n */\ncompileModuleAndAllComponentsAsync<T>(moduleType: Type<T>):\n      Promise<ModuleWithComponentFactories<T>> {\n    throw _throwError();\n  }\n/**\n * Exposes the CSS-style selectors that have been used in `ngContent` directives within\n * the template of the given component.\n * This is used by the `upgrade` library to compile the appropriate transclude content\n * in the AngularJS wrapper component.\n * \n * @deprecated since v4. Use ComponentFactory.ngContentSelectors instead.\n * @param {?} component\n * @return {?}\n */\ngetNgContentSelectors(component: Type<any>): string[] { throw _throwError(); }\n/**\n * Clears all caches.\n * @return {?}\n */\nclearCache(): void {}\n/**\n * Clears the cache for the given component/ngModule.\n * @param {?} type\n * @return {?}\n */\nclearCacheFor(type: Type<any>) {}\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction Compiler_tsickle_Closure_declarations() {\n/** @type {?} */\nCompiler.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nCompiler.ctorParameters;\n}\n\n\n/**\n * Options for creating a compiler\n *\n * @experimental\n */\nexport type CompilerOptions = {\n  /**\n   * @deprecated since v4 this option has no effect anymore.\n   */\n  useDebug?: boolean,\n  useJit?: boolean,\n  defaultEncapsulation?: ViewEncapsulation,\n  providers?: any[],\n  missingTranslation?: MissingTranslationStrategy,\n  // Whether to support the `<template>` tag and the `template` attribute to define angular\n  // templates. They have been deprecated in 4.x, `<ng-template>` should be used instead.\n  enableLegacyTemplate?: boolean,\n  preserveWhitespaces?: boolean,\n};\n/**\n * Token to provide CompilerOptions in the platform injector.\n * \n * \\@experimental\n */\nexport const COMPILER_OPTIONS = new InjectionToken<CompilerOptions[]>('compilerOptions');\n/**\n * A factory for creating a Compiler\n * \n * \\@experimental\n * @abstract\n */\nexport abstract class CompilerFactory {\n/**\n * @abstract\n * @param {?=} options\n * @return {?}\n */\ncreateCompiler(options?: CompilerOptions[]) {}\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {ChangeDetectorRef} from '../change_detection/change_detection';\nimport {Injector} from '../di/injector';\nimport {Type} from '../type';\n\nimport {ElementRef} from './element_ref';\nimport {NgModuleRef} from './ng_module_factory';\nimport {ViewRef} from './view_ref';\n/**\n * Represents an instance of a Component created via a {\\@link ComponentFactory}.\n * \n * `ComponentRef` provides access to the Component Instance as well other objects related to this\n * Component Instance and allows you to destroy the Component Instance via the {\\@link #destroy}\n * method.\n * \\@stable\n * @abstract\n */\nexport abstract class ComponentRef<C> {\n/**\n * Location of the Host Element of this Component Instance.\n * @abstract\n * @return {?}\n */\nlocation() {}\n/**\n * The injector on which the component instance exists.\n * @abstract\n * @return {?}\n */\ninjector() {}\n/**\n * The instance of the Component.\n * @abstract\n * @return {?}\n */\ninstance() {}\n/**\n * The {\\@link ViewRef} of the Host View of this Component instance.\n * @abstract\n * @return {?}\n */\nhostView() {}\n/**\n * The {\\@link ChangeDetectorRef} of the Component instance.\n * @abstract\n * @return {?}\n */\nchangeDetectorRef() {}\n/**\n * The component type.\n * @abstract\n * @return {?}\n */\ncomponentType() {}\n/**\n * Destroys the component instance and all of the data structures associated with it.\n * @abstract\n * @return {?}\n */\ndestroy() {}\n/**\n * Allows to register a callback that will be called when the component is destroyed.\n * @abstract\n * @param {?} callback\n * @return {?}\n */\nonDestroy(callback: Function) {}\n}\n/**\n * \\@stable\n * @abstract\n */\nexport abstract class ComponentFactory<C> {\n/**\n * @abstract\n * @return {?}\n */\nselector() {}\n/**\n * @abstract\n * @return {?}\n */\ncomponentType() {}\n/**\n * selector for all <ng-content> elements in the component.\n * @abstract\n * @return {?}\n */\nngContentSelectors() {}\n/**\n * the inputs of the component.\n * @abstract\n * @return {?}\n */\ninputs() {}\n/**\n * the outputs of the component.\n * @abstract\n * @return {?}\n */\noutputs() {}\n/**\n * Creates a new component.\n * @abstract\n * @param {?} injector\n * @param {?=} projectableNodes\n * @param {?=} rootSelectorOrNode\n * @param {?=} ngModule\n * @return {?}\n */\ncreate(\n      injector: Injector, projectableNodes?: any[][], rootSelectorOrNode?: string|any,\n      ngModule?: NgModuleRef<any>) {}\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Injector} from '../di/injector';\nimport {Type} from '../type';\nimport {stringify} from '../util';\n\nimport {ComponentFactory, ComponentRef} from './component_factory';\nimport {NgModuleRef} from './ng_module_factory';\n/**\n * @param {?} component\n * @return {?}\n */\nexport function noComponentFactoryError(component: Function) {\n  const /** @type {?} */ error = Error(\n      `No component factory found for ${stringify(component)}. Did you add it to @NgModule.entryComponents?`);\n  ( /** @type {?} */((error as any)))[ERROR_COMPONENT] = component;\n  return error;\n}\n\nconst /** @type {?} */ ERROR_COMPONENT = 'ngComponent';\n/**\n * @param {?} error\n * @return {?}\n */\nexport function getComponent(error: Error): Type<any> {\n  return ( /** @type {?} */((error as any)))[ERROR_COMPONENT];\n}\nclass _NullComponentFactoryResolver implements ComponentFactoryResolver {\n/**\n * @template T\n * @param {?} component\n * @return {?}\n */\nresolveComponentFactory<T>(component: {new (...args: any[]): T}): ComponentFactory<T> {\n    throw noComponentFactoryError(component);\n  }\n}\n/**\n * \\@stable\n * @abstract\n */\nexport abstract class ComponentFactoryResolver {\n  static NULL: ComponentFactoryResolver = new _NullComponentFactoryResolver();\n/**\n * @abstract\n * @template T\n * @param {?} component\n * @return {?}\n */\nresolveComponentFactory<T>(component: Type<T>) {}\n}\n\nfunction ComponentFactoryResolver_tsickle_Closure_declarations() {\n/** @type {?} */\nComponentFactoryResolver.NULL;\n}\n\nexport class CodegenComponentFactoryResolver implements ComponentFactoryResolver {\nprivate _factories = new Map<any, ComponentFactory<any>>();\n/**\n * @param {?} factories\n * @param {?} _parent\n * @param {?} _ngModule\n */\nconstructor(\n      factories: ComponentFactory<any>[],\nprivate _parent: ComponentFactoryResolver,\nprivate _ngModule: NgModuleRef<any>) {\n    for (let i = 0; i < factories.length; i++) {\n      const factory = factories[i];\n      this._factories.set(factory.componentType, factory);\n    }\n  }\n/**\n * @template T\n * @param {?} component\n * @return {?}\n */\nresolveComponentFactory<T>(component: {new (...args: any[]): T}): ComponentFactory<T> {\n    let /** @type {?} */ factory = this._factories.get(component);\n    if (!factory && this._parent) {\n      factory = this._parent.resolveComponentFactory(component);\n    }\n    if (!factory) {\n      throw noComponentFactoryError(component);\n    }\n    return new ComponentFactoryBoundToModule(factory, this._ngModule);\n  }\n}\n\nfunction CodegenComponentFactoryResolver_tsickle_Closure_declarations() {\n/** @type {?} */\nCodegenComponentFactoryResolver.prototype._factories;\n/** @type {?} */\nCodegenComponentFactoryResolver.prototype._parent;\n/** @type {?} */\nCodegenComponentFactoryResolver.prototype._ngModule;\n}\n\nexport class ComponentFactoryBoundToModule<C> extends ComponentFactory<C> {\n/**\n * @param {?} factory\n * @param {?} ngModule\n */\nconstructor(private factory: ComponentFactory<C>,\nprivate ngModule: NgModuleRef<any>) { super(); }\n/**\n * @return {?}\n */\nget selector() { return this.factory.selector; }\n/**\n * @return {?}\n */\nget componentType() { return this.factory.componentType; }\n/**\n * @return {?}\n */\nget ngContentSelectors() { return this.factory.ngContentSelectors; }\n/**\n * @return {?}\n */\nget inputs() { return this.factory.inputs; }\n/**\n * @return {?}\n */\nget outputs() { return this.factory.outputs; }\n/**\n * @param {?} injector\n * @param {?=} projectableNodes\n * @param {?=} rootSelectorOrNode\n * @param {?=} ngModule\n * @return {?}\n */\ncreate(\n      injector: Injector, projectableNodes?: any[][], rootSelectorOrNode?: string|any,\n      ngModule?: NgModuleRef<any>): ComponentRef<C> {\n    return this.factory.create(\n        injector, projectableNodes, rootSelectorOrNode, ngModule || this.ngModule);\n  }\n}\n\nfunction ComponentFactoryBoundToModule_tsickle_Closure_declarations() {\n/** @type {?} */\nComponentFactoryBoundToModule.prototype.factory;\n/** @type {?} */\nComponentFactoryBoundToModule.prototype.ngModule;\n}\n\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {global} from '../util';\n\n/**\n * A scope function for the Web Tracing Framework (WTF).\n *\n * @experimental\n */\nexport interface WtfScopeFn { (arg0?: any, arg1?: any): any; }\n\ninterface WTF {\n  trace: Trace;\n}\n\ninterface Trace {\n  events: Events;\n  leaveScope(scope: Scope, returnValue: any): any /** TODO #9100 */;\n  beginTimeRange(rangeType: string, action: string): Range;\n  endTimeRange(range: Range): any /** TODO #9100 */;\n}\n\nexport interface Range {}\n\ninterface Events {\n  createScope(signature: string, flags: any): Scope;\n}\n\nexport interface Scope { (...args: any[] /** TODO #9100 */): any; }\n\nlet /** @type {?} */ trace: Trace;\nlet /** @type {?} */ events: Events;\n/**\n * @return {?}\n */\nexport function detectWTF(): boolean {\n  const /** @type {?} */ wtf: WTF = ( /** @type {?} */((global as any)) /** TODO #9100 */)['wtf'];\n  if (wtf) {\n    trace = wtf['trace'];\n    if (trace) {\n      events = trace['events'];\n      return true;\n    }\n  }\n  return false;\n}\n/**\n * @param {?} signature\n * @param {?=} flags\n * @return {?}\n */\nexport function createScope(signature: string, flags: any = null): any {\n  return events.createScope(signature, flags);\n}\n\nexport function leave<T>(scope: Scope): void;\nexport function leave<T>(scope: Scope, returnValue?: T): T;\n/**\n * @template T\n * @param {?} scope\n * @param {?=} returnValue\n * @return {?}\n */\nexport function leave<T>(scope: Scope, returnValue?: any): any {\n  trace.leaveScope(scope, returnValue);\n  return returnValue;\n}\n/**\n * @param {?} rangeType\n * @param {?} action\n * @return {?}\n */\nexport function startTimeRange(rangeType: string, action: string): Range {\n  return trace.beginTimeRange(rangeType, action);\n}\n/**\n * @param {?} range\n * @return {?}\n */\nexport function endTimeRange(range: Range): void {\n  trace.endTimeRange(range);\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Injector} from '../di/injector';\nimport {Type} from '../type';\n\nimport {ComponentFactoryResolver} from './component_factory_resolver';\n/**\n * Represents an instance of an NgModule created via a {\\@link NgModuleFactory}.\n * \n * `NgModuleRef` provides access to the NgModule Instance as well other objects related to this\n * NgModule Instance.\n * \n * \\@stable\n * @abstract\n */\nexport abstract class NgModuleRef<T> {\n/**\n * The injector that contains all of the providers of the NgModule.\n * @abstract\n * @return {?}\n */\ninjector() {}\n/**\n * The ComponentFactoryResolver to get hold of the ComponentFactories\n * declared in the `entryComponents` property of the module.\n * @abstract\n * @return {?}\n */\ncomponentFactoryResolver() {}\n/**\n * The NgModule instance.\n * @abstract\n * @return {?}\n */\ninstance() {}\n/**\n * Destroys the module instance and all of the data structures associated with it.\n * @abstract\n * @return {?}\n */\ndestroy() {}\n/**\n * Allows to register a callback that will be called when the module is destroyed.\n * @abstract\n * @param {?} callback\n * @return {?}\n */\nonDestroy(callback: () => void) {}\n}\n\nexport interface InternalNgModuleRef<T> extends NgModuleRef<T> {\n  // Note: we are using the prefix _ as NgModuleData is an NgModuleRef and therefore directly\n  // exposed to the user.\n  _bootstrapComponents: Type<any>[];\n}\n/**\n * \\@experimental\n * @abstract\n */\nexport abstract class NgModuleFactory<T> {\n/**\n * @abstract\n * @return {?}\n */\nmoduleType() {}\n/**\n * @abstract\n * @param {?} parentInjector\n * @return {?}\n */\ncreate(parentInjector: Injector|null) {}\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Subject} from 'rxjs/Subject';\n/**\n * Use by directives and components to emit custom Events.\n * \n * ### Examples\n * \n * In the following example, `Zippy` alternatively emits `open` and `close` events when its\n * title gets clicked:\n * \n * ```\n * \\@Component({ \n *   selector: 'zippy',\n *   template: `\n *   <div class=\"zippy\">\n *     <div (click)=\"toggle()\">Toggle</div>\n *     <div [hidden]=\"!visible\">\n *       <ng-content></ng-content>\n *     </div>\n *  </div>`})\n * export class Zippy {\n *   visible: boolean = true;\n *   \\@Output() open: EventEmitter<any> = new EventEmitter();\n *   \\@Output() close: EventEmitter<any> = new EventEmitter();\n * \n *   toggle() {\n *     this.visible = !this.visible;\n *     if (this.visible) {\n *       this.open.emit(null);\n *     } else {\n *       this.close.emit(null);\n *     }\n *   }\n * }\n * ```\n * \n * The events payload can be accessed by the parameter `$event` on the components output event\n * handler:\n * \n * ```\n * <zippy (open)=\"onOpen($event)\" (close)=\"onClose($event)\"></zippy>\n * ```\n * \n * Uses Rx.Observable but provides an adapter to make it work as specified here:\n * https://github.com/jhusain/observable-spec\n * \n * Once a reference implementation of the spec is available, switch to it.\n * \\@stable\n */\nexport class EventEmitter<T> extends Subject<T> {\n  // TODO: mark this as internal once all the facades are gone\n  // we can't mark it as internal now because EventEmitter exported via @angular/core would not\n  // contain this property making it incompatible with all the code that uses EventEmitter via\n  // facades, which are local to the code and do not have this property stripped.\n  // tslint:disable-next-line\n  __isAsync: boolean;\n/**\n * Creates an instance of {\\@link EventEmitter}, which depending on `isAsync`,\n * delivers events synchronously or asynchronously.\n * \n * @param {?=} isAsync By default, events are delivered synchronously (default value: `false`).\n * Set to `true` for asynchronous event delivery.\n */\nconstructor(isAsync: boolean = false) {\n    super();\n    this.__isAsync = isAsync;\n  }\n/**\n * @param {?=} value\n * @return {?}\n */\nemit(value?: T) { super.next(value); }\n/**\n * @param {?=} generatorOrNext\n * @param {?=} error\n * @param {?=} complete\n * @return {?}\n */\nsubscribe(generatorOrNext?: any, error?: any, complete?: any): any {\n    let /** @type {?} */ schedulerFn: (t: any) => any;\n    let /** @type {?} */ errorFn = (err: any): any => null;\n    let /** @type {?} */ completeFn = (): any => null;\n\n    if (generatorOrNext && typeof generatorOrNext === 'object') {\n      schedulerFn = this.__isAsync ? (value: any) => {\n        setTimeout(() => generatorOrNext.next(value));\n      } : (value: any) => { generatorOrNext.next(value); };\n\n      if (generatorOrNext.error) {\n        errorFn = this.__isAsync ? (err) => { setTimeout(() => generatorOrNext.error(err)); } :\n                                   (err) => { generatorOrNext.error(err); };\n      }\n\n      if (generatorOrNext.complete) {\n        completeFn = this.__isAsync ? () => { setTimeout(() => generatorOrNext.complete()); } :\n                                      () => { generatorOrNext.complete(); };\n      }\n    } else {\n      schedulerFn = this.__isAsync ? (value: any) => { setTimeout(() => generatorOrNext(value)); } :\n                                     (value: any) => { generatorOrNext(value); };\n\n      if (error) {\n        errorFn =\n            this.__isAsync ? (err) => { setTimeout(() => error(err)); } : (err) => { error(err); };\n      }\n\n      if (complete) {\n        completeFn =\n            this.__isAsync ? () => { setTimeout(() => complete()); } : () => { complete(); };\n      }\n    }\n\n    return super.subscribe(schedulerFn, errorFn, completeFn);\n  }\n}\n\nfunction EventEmitter_tsickle_Closure_declarations() {\n/** @type {?} */\nEventEmitter.prototype.__isAsync;\n}\n\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n// Import zero symbols from zone.js. This causes the zone ambient type to be\n// added to the type-checker, without emitting any runtime module load statement\n\nimport {} from 'zone.js';\nimport {EventEmitter} from '../event_emitter';\n/**\n * An injectable service for executing work inside or outside of the Angular zone.\n * \n * The most common use of this service is to optimize performance when starting a work consisting of\n * one or more asynchronous tasks that don't require UI updates or error handling to be handled by\n * Angular. Such tasks can be kicked off via {\\@link #runOutsideAngular} and if needed, these tasks\n * can reenter the Angular zone via {\\@link #run}.\n * \n * <!-- TODO: add/fix links to:\n *   - docs explaining zones and the use of zones in Angular and change-detection\n *   - link to runOutsideAngular/run (throughout this file!)\n *   -->\n * \n * ### Example\n * \n * ```\n * import {Component, NgZone} from '\\@angular/core';\n * import {NgIf} from '\\@angular/common';\n * \n * \\@Component({ \n *   selector: 'ng-zone-demo'.\n *   template: `\n *     <h2>Demo: NgZone</h2>\n * \n *     <p>Progress: {{progress}}%</p>\n *     <p *ngIf=\"progress >= 100\">Done processing {{label}} of Angular zone!</p>\n * \n *     <button (click)=\"processWithinAngularZone()\">Process within Angular zone</button>\n *     <button (click)=\"processOutsideOfAngularZone()\">Process outside of Angular zone</button>\n *   `,\n * })\n * export class NgZoneDemo {\n *   progress: number = 0;\n *   label: string;\n * \n *   constructor(private _ngZone: NgZone) {}\n * \n *   // Loop inside the Angular zone\n *   // so the UI DOES refresh after each setTimeout cycle\n *   processWithinAngularZone() {\n *     this.label = 'inside';\n *     this.progress = 0;\n *     this._increaseProgress(() => console.log('Inside Done!'));\n *   }\n * \n *   // Loop outside of the Angular zone\n *   // so the UI DOES NOT refresh after each setTimeout cycle\n *   processOutsideOfAngularZone() {\n *     this.label = 'outside';\n *     this.progress = 0;\n *     this._ngZone.runOutsideAngular(() => {\n *       this._increaseProgress(() => {\n *       // reenter the Angular zone and display done\n *       this._ngZone.run(() => {console.log('Outside Done!') });\n *     }}));\n *   }\n * \n *   _increaseProgress(doneCallback: () => void) {\n *     this.progress += 1;\n *     console.log(`Current progress: ${this.progress}%`);\n * \n *     if (this.progress < 100) {\n *       window.setTimeout(() => this._increaseProgress(doneCallback)), 10)\n *     } else {\n *       doneCallback();\n *     }\n *   }\n * }\n * ```\n * \n * \\@experimental\n */\nexport class NgZone {\n  readonly hasPendingMicrotasks: boolean = false;\n  readonly hasPendingMacrotasks: boolean = false;\n/**\n * Whether there are no outstanding microtasks or macrotasks.\n */\nreadonly isStable: boolean = true;\n/**\n * Notifies when code enters Angular Zone. This gets fired first on VM Turn.\n */\nreadonly onUnstable: EventEmitter<any> = new EventEmitter(false);\n/**\n * Notifies when there is no more microtasks enqueue in the current VM Turn.\n * This is a hint for Angular to do change detection, which may enqueue more microtasks.\n * For this reason this event can fire multiple times per VM Turn.\n */\nreadonly onMicrotaskEmpty: EventEmitter<any> = new EventEmitter(false);\n/**\n * Notifies when the last `onMicrotaskEmpty` has run and there are no more microtasks, which\n * implies we are about to relinquish VM turn.\n * This event gets called just once.\n */\nreadonly onStable: EventEmitter<any> = new EventEmitter(false);\n/**\n * Notifies that an error has been delivered.\n */\nreadonly onError: EventEmitter<any> = new EventEmitter(false);\n/**\n * @param {?} __0\n */\nconstructor({enableLongStackTrace = false}) {\n    if (typeof Zone == 'undefined') {\n      throw new Error('Angular requires Zone.js prolyfill.');\n    }\n\n    Zone.assertZonePatched();\n    const self = this as any as NgZonePrivate;\n    self._nesting = 0;\n\n    self._outer = self._inner = Zone.current;\n\n    if ((Zone as any)['wtfZoneSpec']) {\n      self._inner = self._inner.fork((Zone as any)['wtfZoneSpec']);\n    }\n\n    if (enableLongStackTrace && (Zone as any)['longStackTraceZoneSpec']) {\n      self._inner = self._inner.fork((Zone as any)['longStackTraceZoneSpec']);\n    }\n\n    forkInnerZoneWithAngularBehavior(self);\n  }\n/**\n * @return {?}\n */\nstatic isInAngularZone(): boolean { return Zone.current.get('isAngularZone') === true; }\n/**\n * @return {?}\n */\nstatic assertInAngularZone(): void {\n    if (!NgZone.isInAngularZone()) {\n      throw new Error('Expected to be in Angular Zone, but it is not!');\n    }\n  }\n/**\n * @return {?}\n */\nstatic assertNotInAngularZone(): void {\n    if (NgZone.isInAngularZone()) {\n      throw new Error('Expected to not be in Angular Zone, but it is!');\n    }\n  }\n/**\n * Executes the `fn` function synchronously within the Angular zone and returns value returned by\n * the function.\n * \n * Running functions via `run` allows you to reenter Angular zone from a task that was executed\n * outside of the Angular zone (typically started via {\\@link #runOutsideAngular}).\n * \n * Any future tasks or microtasks scheduled from within this function will continue executing from\n * within the Angular zone.\n * \n * If a synchronous error happens it will be rethrown and not reported via `onError`.\n * @param {?} fn\n * @return {?}\n */\nrun(fn: () => any): any { return ( /** @type {?} */(( /** @type {?} */((this as any)) as NgZonePrivate)))._inner.run(fn); }\n/**\n * Same as `run`, except that synchronous errors are caught and forwarded via `onError` and not\n * rethrown.\n * @param {?} fn\n * @return {?}\n */\nrunGuarded(fn: () => any): any { return ( /** @type {?} */(( /** @type {?} */((this as any)) as NgZonePrivate)))._inner.runGuarded(fn); }\n/**\n * Executes the `fn` function synchronously in Angular's parent zone and returns value returned by\n * the function.\n * \n * Running functions via {\\@link #runOutsideAngular} allows you to escape Angular's zone and do\n * work that\n * doesn't trigger Angular change-detection or is subject to Angular's error handling.\n * \n * Any future tasks or microtasks scheduled from within this function will continue executing from\n * outside of the Angular zone.\n * \n * Use {\\@link #run} to reenter the Angular zone and do work that updates the application model.\n * @param {?} fn\n * @return {?}\n */\nrunOutsideAngular(fn: () => any): any { return ( /** @type {?} */(( /** @type {?} */((this as any)) as NgZonePrivate)))._outer.run(fn); }\n}\n\nfunction NgZone_tsickle_Closure_declarations() {\n/** @type {?} */\nNgZone.prototype.hasPendingMicrotasks;\n/** @type {?} */\nNgZone.prototype.hasPendingMacrotasks;\n/**\n * Whether there are no outstanding microtasks or macrotasks.\n * @type {?}\n */\nNgZone.prototype.isStable;\n/**\n * Notifies when code enters Angular Zone. This gets fired first on VM Turn.\n * @type {?}\n */\nNgZone.prototype.onUnstable;\n/**\n * Notifies when there is no more microtasks enqueue in the current VM Turn.\n * This is a hint for Angular to do change detection, which may enqueue more microtasks.\n * For this reason this event can fire multiple times per VM Turn.\n * @type {?}\n */\nNgZone.prototype.onMicrotaskEmpty;\n/**\n * Notifies when the last `onMicrotaskEmpty` has run and there are no more microtasks, which\n * implies we are about to relinquish VM turn.\n * This event gets called just once.\n * @type {?}\n */\nNgZone.prototype.onStable;\n/**\n * Notifies that an error has been delivered.\n * @type {?}\n */\nNgZone.prototype.onError;\n}\n\n\ninterface NgZonePrivate extends NgZone {\n  _outer: Zone;\n  _inner: Zone;\n  _nesting: number;\n\n  hasPendingMicrotasks: boolean;\n  hasPendingMacrotasks: boolean;\n  isStable: boolean;\n}\n/**\n * @param {?} zone\n * @return {?}\n */\nfunction checkStable(zone: NgZonePrivate) {\n  if (zone._nesting == 0 && !zone.hasPendingMicrotasks && !zone.isStable) {\n    try {\n      zone._nesting++;\n      zone.onMicrotaskEmpty.emit(null);\n    } finally {\n      zone._nesting--;\n      if (!zone.hasPendingMicrotasks) {\n        try {\n          zone.runOutsideAngular(() => zone.onStable.emit(null));\n        } finally {\n          zone.isStable = true;\n        }\n      }\n    }\n  }\n}\n/**\n * @param {?} zone\n * @return {?}\n */\nfunction forkInnerZoneWithAngularBehavior(zone: NgZonePrivate) {\n  zone._inner = zone._inner.fork({\n    name: 'angular',\n    properties: /** @type {?} */(( <any>{'isAngularZone': true})),\n    onInvokeTask: (delegate: ZoneDelegate, current: Zone, target: Zone, task: Task, applyThis: any,\n                   applyArgs: any): any => {\n      try {\n        onEnter(zone);\n        return delegate.invokeTask(target, task, applyThis, applyArgs);\n      } finally {\n        onLeave(zone);\n      }\n    },\n\n\n    onInvoke: (delegate: ZoneDelegate, current: Zone, target: Zone, callback: Function,\n               applyThis: any, applyArgs: any[], source: string): any => {\n      try {\n        onEnter(zone);\n        return delegate.invoke(target, callback, applyThis, applyArgs, source);\n      } finally {\n        onLeave(zone);\n      }\n    },\n\n    onHasTask:\n        (delegate: ZoneDelegate, current: Zone, target: Zone, hasTaskState: HasTaskState) => {\n          delegate.hasTask(target, hasTaskState);\n          if (current === target) {\n            // We are only interested in hasTask events which originate from our zone\n            // (A child hasTask event is not interesting to us)\n            if (hasTaskState.change == 'microTask') {\n              zone.hasPendingMicrotasks = hasTaskState.microTask;\n              checkStable(zone);\n            } else if (hasTaskState.change == 'macroTask') {\n              zone.hasPendingMacrotasks = hasTaskState.macroTask;\n            }\n          }\n        },\n\n    onHandleError: (delegate: ZoneDelegate, current: Zone, target: Zone, error: any): boolean => {\n      delegate.handleError(target, error);\n      zone.runOutsideAngular(() => zone.onError.emit(error));\n      return false;\n    }\n  });\n}\n/**\n * @param {?} zone\n * @return {?}\n */\nfunction onEnter(zone: NgZonePrivate) {\n  zone._nesting++;\n  if (zone.isStable) {\n    zone.isStable = false;\n    zone.onUnstable.emit(null);\n  }\n}\n/**\n * @param {?} zone\n * @return {?}\n */\nfunction onLeave(zone: NgZonePrivate) {\n  zone._nesting--;\n  checkStable(zone);\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Injectable} from '../di';\nimport {scheduleMicroTask} from '../util';\nimport {NgZone} from '../zone/ng_zone';\n\n/**\n * Testability API.\n * `declare` keyword causes tsickle to generate externs, so these methods are\n * not renamed by Closure Compiler.\n * @experimental\n */\nexport declare interface PublicTestability {\n  isStable(): boolean;\n  whenStable(callback: Function): void;\n  findProviders(using: any, provider: string, exactMatch: boolean): any[];\n}\n/**\n * The Testability service provides testing hooks that can be accessed from\n * the browser and by services such as Protractor. Each bootstrapped Angular\n * application on the page will have an instance of Testability.\n * \\@experimental\n */\nexport class Testability implements PublicTestability {\n/**\n * \\@internal\n */\n_pendingCount: number = 0;\n/**\n * \\@internal\n */\n_isZoneStable: boolean = true;\n/**\n * Whether any work was done since the last 'whenStable' callback. This is\n * useful to detect if this could have potentially destabilized another\n * component while it is stabilizing.\n * \\@internal\n */\n_didWork: boolean = false;\n/**\n * \\@internal\n */\n_callbacks: Function[] = [];\n/**\n * @param {?} _ngZone\n */\nconstructor(private _ngZone: NgZone) { this._watchAngularEvents(); }\n/**\n * \\@internal\n * @return {?}\n */\n_watchAngularEvents(): void {\n    this._ngZone.onUnstable.subscribe({\n      next: () => {\n        this._didWork = true;\n        this._isZoneStable = false;\n      }\n    });\n\n    this._ngZone.runOutsideAngular(() => {\n      this._ngZone.onStable.subscribe({\n        next: () => {\n          NgZone.assertNotInAngularZone();\n          scheduleMicroTask(() => {\n            this._isZoneStable = true;\n            this._runCallbacksIfReady();\n          });\n        }\n      });\n    });\n  }\n/**\n * @return {?}\n */\nincreasePendingRequestCount(): number {\n    this._pendingCount += 1;\n    this._didWork = true;\n    return this._pendingCount;\n  }\n/**\n * @return {?}\n */\ndecreasePendingRequestCount(): number {\n    this._pendingCount -= 1;\n    if (this._pendingCount < 0) {\n      throw new Error('pending async requests below zero');\n    }\n    this._runCallbacksIfReady();\n    return this._pendingCount;\n  }\n/**\n * @return {?}\n */\nisStable(): boolean {\n    return this._isZoneStable && this._pendingCount == 0 && !this._ngZone.hasPendingMacrotasks;\n  }\n/**\n * \\@internal\n * @return {?}\n */\n_runCallbacksIfReady(): void {\n    if (this.isStable()) {\n      // Schedules the call backs in a new frame so that it is always async.\n      scheduleMicroTask(() => {\n        while (this._callbacks.length !== 0) {\n          ( /** @type {?} */((this._callbacks.pop())))(this._didWork);\n        }\n        this._didWork = false;\n      });\n    } else {\n      // Not Ready\n      this._didWork = true;\n    }\n  }\n/**\n * @param {?} callback\n * @return {?}\n */\nwhenStable(callback: Function): void {\n    this._callbacks.push(callback);\n    this._runCallbacksIfReady();\n  }\n/**\n * @return {?}\n */\ngetPendingRequestCount(): number { return this._pendingCount; }\n/**\n * @deprecated use findProviders\n * @param {?} using\n * @param {?} provider\n * @param {?} exactMatch\n * @return {?}\n */\nfindBindings(using: any, provider: string, exactMatch: boolean): any[] {\n    // TODO(juliemr): implement.\n    return [];\n  }\n/**\n * @param {?} using\n * @param {?} provider\n * @param {?} exactMatch\n * @return {?}\n */\nfindProviders(using: any, provider: string, exactMatch: boolean): any[] {\n    // TODO(juliemr): implement.\n    return [];\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: NgZone, },\n];\n}\n\nfunction Testability_tsickle_Closure_declarations() {\n/** @type {?} */\nTestability.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nTestability.ctorParameters;\n/**\n * \\@internal\n * @type {?}\n */\nTestability.prototype._pendingCount;\n/**\n * \\@internal\n * @type {?}\n */\nTestability.prototype._isZoneStable;\n/**\n * Whether any work was done since the last 'whenStable' callback. This is\n * useful to detect if this could have potentially destabilized another\n * component while it is stabilizing.\n * \\@internal\n * @type {?}\n */\nTestability.prototype._didWork;\n/**\n * \\@internal\n * @type {?}\n */\nTestability.prototype._callbacks;\n/** @type {?} */\nTestability.prototype._ngZone;\n}\n\n/**\n * A global registry of {\\@link Testability} instances for specific elements.\n * \\@experimental\n */\nexport class TestabilityRegistry {\n/**\n * \\@internal\n */\n_applications = new Map<any, Testability>();\nconstructor() { _testabilityGetter.addToWindow(this); }\n/**\n * @param {?} token\n * @param {?} testability\n * @return {?}\n */\nregisterApplication(token: any, testability: Testability) {\n    this._applications.set(token, testability);\n  }\n/**\n * @param {?} elem\n * @return {?}\n */\ngetTestability(elem: any): Testability|null { return this._applications.get(elem) || null; }\n/**\n * @return {?}\n */\ngetAllTestabilities(): Testability[] { return Array.from(this._applications.values()); }\n/**\n * @return {?}\n */\ngetAllRootElements(): any[] { return Array.from(this._applications.keys()); }\n/**\n * @param {?} elem\n * @param {?=} findInAncestors\n * @return {?}\n */\nfindTestabilityInTree(elem: Node, findInAncestors: boolean = true): Testability|null {\n    return _testabilityGetter.findTestabilityInTree(this, elem, findInAncestors);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction TestabilityRegistry_tsickle_Closure_declarations() {\n/** @type {?} */\nTestabilityRegistry.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nTestabilityRegistry.ctorParameters;\n/**\n * \\@internal\n * @type {?}\n */\nTestabilityRegistry.prototype._applications;\n}\n\n\n/**\n * Adapter interface for retrieving the `Testability` service associated for a\n * particular context.\n *\n * @experimental Testability apis are primarily intended to be used by e2e test tool vendors like\n * the Protractor team.\n */\nexport interface GetTestability {\n  addToWindow(registry: TestabilityRegistry): void;\n  findTestabilityInTree(registry: TestabilityRegistry, elem: any, findInAncestors: boolean):\n      Testability|null;\n}\nclass _NoopGetTestability implements GetTestability {\n/**\n * @param {?} registry\n * @return {?}\n */\naddToWindow(registry: TestabilityRegistry): void {}\n/**\n * @param {?} registry\n * @param {?} elem\n * @param {?} findInAncestors\n * @return {?}\n */\nfindTestabilityInTree(registry: TestabilityRegistry, elem: any, findInAncestors: boolean):\n      Testability|null {\n    return null;\n  }\n}\n/**\n * Set the {\\@link GetTestability} implementation used by the Angular testing framework.\n * \\@experimental\n * @param {?} getter\n * @return {?}\n */\nexport function setTestabilityGetter(getter: GetTestability): void {\n  _testabilityGetter = getter;\n}\n\nlet /** @type {?} */ _testabilityGetter: GetTestability = new _NoopGetTestability();\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Observable} from 'rxjs/Observable';\nimport {Observer} from 'rxjs/Observer';\nimport {Subscription} from 'rxjs/Subscription';\nimport {merge} from 'rxjs/observable/merge';\nimport {share} from 'rxjs/operator/share';\n\nimport {ErrorHandler} from '../src/error_handler';\nimport {scheduleMicroTask, stringify} from '../src/util';\nimport {isPromise} from '../src/util/lang';\n\nimport {ApplicationInitStatus} from './application_init';\nimport {APP_BOOTSTRAP_LISTENER, PLATFORM_INITIALIZER} from './application_tokens';\nimport {Console} from './console';\nimport {Injectable, InjectionToken, Injector, Provider, ReflectiveInjector} from './di';\nimport {CompilerFactory, CompilerOptions} from './linker/compiler';\nimport {ComponentFactory, ComponentRef} from './linker/component_factory';\nimport {ComponentFactoryBoundToModule, ComponentFactoryResolver} from './linker/component_factory_resolver';\nimport {InternalNgModuleRef, NgModuleFactory, NgModuleRef} from './linker/ng_module_factory';\nimport {InternalViewRef, ViewRef} from './linker/view_ref';\nimport {WtfScopeFn, wtfCreateScope, wtfLeave} from './profile/profile';\nimport {Testability, TestabilityRegistry} from './testability/testability';\nimport {Type} from './type';\nimport {NgZone} from './zone/ng_zone';\n\nlet /** @type {?} */ _devMode: boolean = true;\nlet /** @type {?} */ _runModeLocked: boolean = false;\nlet /** @type {?} */ _platform: PlatformRef;\n\nexport const /** @type {?} */ ALLOW_MULTIPLE_PLATFORMS = new InjectionToken<boolean>('AllowMultipleToken');\n/**\n * Disable Angular's development mode, which turns off assertions and other\n * checks within the framework.\n * \n * One important assertion this disables verifies that a change detection pass\n * does not result in additional changes to any bindings (also known as\n * unidirectional data flow).\n * \n * \\@stable\n * @return {?}\n */\nexport function enableProdMode(): void {\n  if (_runModeLocked) {\n    throw new Error('Cannot enable prod mode after platform setup.');\n  }\n  _devMode = false;\n}\n/**\n * Returns whether Angular is in development mode. After called once,\n * the value is locked and won't change any more.\n * \n * By default, this is true, unless a user calls `enableProdMode` before calling this.\n * \n * \\@experimental APIs related to application bootstrap are currently under review.\n * @return {?}\n */\nexport function isDevMode(): boolean {\n  _runModeLocked = true;\n  return _devMode;\n}\n/**\n * A token for third-party components that can register themselves with NgProbe.\n * \n * \\@experimental\n */\nexport class NgProbeToken {\n/**\n * @param {?} name\n * @param {?} token\n */\nconstructor(public name: string,\npublic token: any) {}\n}\n\nfunction NgProbeToken_tsickle_Closure_declarations() {\n/** @type {?} */\nNgProbeToken.prototype.name;\n/** @type {?} */\nNgProbeToken.prototype.token;\n}\n\n/**\n * Creates a platform.\n * Platforms have to be eagerly created via this function.\n * \n * \\@experimental APIs related to application bootstrap are currently under review.\n * @param {?} injector\n * @return {?}\n */\nexport function createPlatform(injector: Injector): PlatformRef {\n  if (_platform && !_platform.destroyed &&\n      !_platform.injector.get(ALLOW_MULTIPLE_PLATFORMS, false)) {\n    throw new Error(\n        'There can be only one platform. Destroy the previous one to create a new one.');\n  }\n  _platform = injector.get(PlatformRef);\n  const /** @type {?} */ inits = injector.get(PLATFORM_INITIALIZER, null);\n  if (inits) inits.forEach((init: any) => init());\n  return _platform;\n}\n/**\n * Creates a factory for a platform\n * \n * \\@experimental APIs related to application bootstrap are currently under review.\n * @param {?} parentPlatformFactory\n * @param {?} name\n * @param {?=} providers\n * @return {?}\n */\nexport function createPlatformFactory(\n    parentPlatformFactory: ((extraProviders?: Provider[]) => PlatformRef) | null, name: string,\n    providers: Provider[] = []): (extraProviders?: Provider[]) => PlatformRef {\n  const /** @type {?} */ marker = new InjectionToken(`Platform: ${name}`);\n  return (extraProviders: Provider[] = []) => {\n    let /** @type {?} */ platform = getPlatform();\n    if (!platform || platform.injector.get(ALLOW_MULTIPLE_PLATFORMS, false)) {\n      if (parentPlatformFactory) {\n        parentPlatformFactory(\n            providers.concat(extraProviders).concat({provide: marker, useValue: true}));\n      } else {\n        createPlatform(ReflectiveInjector.resolveAndCreate(\n            providers.concat(extraProviders).concat({provide: marker, useValue: true})));\n      }\n    }\n    return assertPlatform(marker);\n  };\n}\n/**\n * Checks that there currently is a platform which contains the given token as a provider.\n * \n * \\@experimental APIs related to application bootstrap are currently under review.\n * @param {?} requiredToken\n * @return {?}\n */\nexport function assertPlatform(requiredToken: any): PlatformRef {\n  const /** @type {?} */ platform = getPlatform();\n\n  if (!platform) {\n    throw new Error('No platform exists!');\n  }\n\n  if (!platform.injector.get(requiredToken, null)) {\n    throw new Error(\n        'A platform with a different configuration has been created. Please destroy it first.');\n  }\n\n  return platform;\n}\n/**\n * Destroy the existing platform.\n * \n * \\@experimental APIs related to application bootstrap are currently under review.\n * @return {?}\n */\nexport function destroyPlatform(): void {\n  if (_platform && !_platform.destroyed) {\n    _platform.destroy();\n  }\n}\n/**\n * Returns the current platform.\n * \n * \\@experimental APIs related to application bootstrap are currently under review.\n * @return {?}\n */\nexport function getPlatform(): PlatformRef|null {\n  return _platform && !_platform.destroyed ? _platform : null;\n}\n/**\n * The Angular platform is the entry point for Angular on a web page. Each page\n * has exactly one platform, and services (such as reflection) which are common\n * to every Angular application running on the page are bound in its scope.\n * \n * A page's platform is initialized implicitly when a platform is created via a platform factory\n * (e.g. {\\@link platformBrowser}), or explicitly by calling the {\\@link createPlatform} function.\n * \n * \\@stable\n * @abstract\n */\nexport abstract class PlatformRef {\n/**\n * Creates an instance of an `\\@NgModule` for the given platform\n * for offline compilation.\n * \n * ## Simple Example\n * \n * ```typescript\n * my_module.ts:\n * \n * \\@NgModule({ \n *   imports: [BrowserModule]\n * })\n * class MyModule {}\n * \n * main.ts:\n * import {MyModuleNgFactory} from './my_module.ngfactory';\n * import {platformBrowser} from '\\@angular/platform-browser';\n * \n * let moduleRef = platformBrowser().bootstrapModuleFactory(MyModuleNgFactory);\n * ```\n * \n * \\@experimental APIs related to application bootstrap are currently under review.\n * @abstract\n * @template M\n * @param {?} moduleFactory\n * @return {?}\n */\nbootstrapModuleFactory<M>(moduleFactory: NgModuleFactory<M>) {}\n/**\n * Creates an instance of an `\\@NgModule` for a given platform using the given runtime compiler.\n * \n * ## Simple Example\n * \n * ```typescript\n * \\@NgModule({ \n *   imports: [BrowserModule]\n * })\n * class MyModule {}\n * \n * let moduleRef = platformBrowser().bootstrapModule(MyModule);\n * ```\n * \\@stable\n * @abstract\n * @template M\n * @param {?} moduleType\n * @param {?=} compilerOptions\n * @return {?}\n */\nbootstrapModule<M>(\n      moduleType: Type<M>,\n      compilerOptions?: CompilerOptions|CompilerOptions[]) {}\n/**\n * Register a listener to be called when the platform is disposed.\n * @abstract\n * @param {?} callback\n * @return {?}\n */\nonDestroy(callback: () => void) {}\n/**\n * Retrieve the platform {\\@link Injector}, which is the parent injector for\n * every Angular application on the page and provides singleton providers.\n * @abstract\n * @return {?}\n */\ninjector() {}\n/**\n * Destroy the Angular platform and all Angular applications on the page.\n * @abstract\n * @return {?}\n */\ndestroy() {}\n/**\n * @abstract\n * @return {?}\n */\ndestroyed() {}\n}\n/**\n * @param {?} errorHandler\n * @param {?} ngZone\n * @param {?} callback\n * @return {?}\n */\nfunction _callAndReportToErrorHandler(\n    errorHandler: ErrorHandler, ngZone: NgZone, callback: () => any): any {\n  try {\n    const /** @type {?} */ result = callback();\n    if (isPromise(result)) {\n      return result.catch((e: any) => {\n        ngZone.runOutsideAngular(() => errorHandler.handleError(e));\n        // rethrow as the exception handler might not do it\n        throw e;\n      });\n    }\n\n    return result;\n  } catch ( /** @type {?} */e) {\n    ngZone.runOutsideAngular(() => errorHandler.handleError(e));\n    // rethrow as the exception handler might not do it\n    throw e;\n  }\n}\n/**\n * workaround https://github.com/angular/tsickle/issues/350\n * @suppress {checkTypes}\n */\nexport class PlatformRef_ extends PlatformRef {\nprivate _modules: NgModuleRef<any>[] = [];\nprivate _destroyListeners: Function[] = [];\nprivate _destroyed: boolean = false;\n/**\n * @param {?} _injector\n */\nconstructor(private _injector: Injector) { super(); }\n/**\n * @param {?} callback\n * @return {?}\n */\nonDestroy(callback: () => void): void { this._destroyListeners.push(callback); }\n/**\n * @return {?}\n */\nget injector(): Injector { return this._injector; }\n/**\n * @return {?}\n */\nget destroyed() { return this._destroyed; }\n/**\n * @return {?}\n */\ndestroy() {\n    if (this._destroyed) {\n      throw new Error('The platform has already been destroyed!');\n    }\n    this._modules.slice().forEach(module => module.destroy());\n    this._destroyListeners.forEach(listener => listener());\n    this._destroyed = true;\n  }\n/**\n * @template M\n * @param {?} moduleFactory\n * @return {?}\n */\nbootstrapModuleFactory<M>(moduleFactory: NgModuleFactory<M>): Promise<NgModuleRef<M>> {\n    return this._bootstrapModuleFactoryWithZone(moduleFactory);\n  }\n/**\n * @template M\n * @param {?} moduleFactory\n * @param {?=} ngZone\n * @return {?}\n */\nprivate _bootstrapModuleFactoryWithZone<M>(moduleFactory: NgModuleFactory<M>, ngZone?: NgZone):\n      Promise<NgModuleRef<M>> {\n    // Note: We need to create the NgZone _before_ we instantiate the module,\n    // as instantiating the module creates some providers eagerly.\n    // So we create a mini parent injector that just contains the new NgZone and\n    // pass that as parent to the NgModuleFactory.\n    if (!ngZone) ngZone = new NgZone({enableLongStackTrace: isDevMode()});\n    // Attention: Don't use ApplicationRef.run here,\n    // as we want to be sure that all possible constructor calls are inside `ngZone.run`!\n    return ngZone.run(() => {\n      const /** @type {?} */ ngZoneInjector =\n          ReflectiveInjector.resolveAndCreate([{provide: NgZone, useValue: ngZone}], this.injector);\n      const /** @type {?} */ moduleRef = /** @type {?} */(( <InternalNgModuleRef<M>>moduleFactory.create(ngZoneInjector)));\n      const /** @type {?} */ exceptionHandler: ErrorHandler = moduleRef.injector.get(ErrorHandler, null);\n      if (!exceptionHandler) {\n        throw new Error('No ErrorHandler. Is platform module (BrowserModule) included?');\n      }\n      moduleRef.onDestroy(() => remove(this._modules, moduleRef)); /** @type {?} */((\n      ngZone)).runOutsideAngular(\n          () => /** @type {?} */(( ngZone)).onError.subscribe(\n              {next: (error: any) => { exceptionHandler.handleError(error); }}));\n      return _callAndReportToErrorHandler(exceptionHandler, /** @type {?} */(( ngZone)), () => {\n        const /** @type {?} */ initStatus: ApplicationInitStatus = moduleRef.injector.get(ApplicationInitStatus);\n        initStatus.runInitializers();\n        return initStatus.donePromise.then(() => {\n          this._moduleDoBootstrap(moduleRef);\n          return moduleRef;\n        });\n      });\n    });\n  }\n/**\n * @template M\n * @param {?} moduleType\n * @param {?=} compilerOptions\n * @return {?}\n */\nbootstrapModule<M>(moduleType: Type<M>, compilerOptions: CompilerOptions|CompilerOptions[] = []):\n      Promise<NgModuleRef<M>> {\n    return this._bootstrapModuleWithZone(moduleType, compilerOptions);\n  }\n/**\n * @template M\n * @param {?} moduleType\n * @param {?=} compilerOptions\n * @param {?=} ngZone\n * @return {?}\n */\nprivate _bootstrapModuleWithZone<M>(\n      moduleType: Type<M>, compilerOptions: CompilerOptions|CompilerOptions[] = [],\n      ngZone?: NgZone): Promise<NgModuleRef<M>> {\n    const /** @type {?} */ compilerFactory: CompilerFactory = this.injector.get(CompilerFactory);\n    const /** @type {?} */ compiler = compilerFactory.createCompiler(\n        Array.isArray(compilerOptions) ? compilerOptions : [compilerOptions]);\n\n    return compiler.compileModuleAsync(moduleType)\n        .then((moduleFactory) => this._bootstrapModuleFactoryWithZone(moduleFactory, ngZone));\n  }\n/**\n * @param {?} moduleRef\n * @return {?}\n */\nprivate _moduleDoBootstrap(moduleRef: InternalNgModuleRef<any>): void {\n    const /** @type {?} */ appRef = /** @type {?} */(( moduleRef.injector.get(ApplicationRef) as ApplicationRef));\n    if (moduleRef._bootstrapComponents.length > 0) {\n      moduleRef._bootstrapComponents.forEach(f => appRef.bootstrap(f));\n    } else if (moduleRef.instance.ngDoBootstrap) {\n      moduleRef.instance.ngDoBootstrap(appRef);\n    } else {\n      throw new Error(\n          `The module ${stringify(moduleRef.instance.constructor)} was bootstrapped, but it does not declare \"@NgModule.bootstrap\" components nor a \"ngDoBootstrap\" method. ` +\n          `Please define one of these.`);\n    }\n    this._modules.push(moduleRef);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Injector, },\n];\n}\n\nfunction PlatformRef__tsickle_Closure_declarations() {\n/** @type {?} */\nPlatformRef_.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nPlatformRef_.ctorParameters;\n/** @type {?} */\nPlatformRef_.prototype._modules;\n/** @type {?} */\nPlatformRef_.prototype._destroyListeners;\n/** @type {?} */\nPlatformRef_.prototype._destroyed;\n/** @type {?} */\nPlatformRef_.prototype._injector;\n}\n\n/**\n * A reference to an Angular application running on a page.\n * \n * \\@stable\n * @abstract\n */\nexport abstract class ApplicationRef {\n/**\n * Bootstrap a new component at the root level of the application.\n * \n * ### Bootstrap process\n * \n * When bootstrapping a new root component into an application, Angular mounts the\n * specified application component onto DOM elements identified by the [componentType]'s\n * selector and kicks off automatic change detection to finish initializing the component.\n * \n * Optionally, a component can be mounted onto a DOM element that does not match the\n * [componentType]'s selector.\n * \n * ### Example\n * {\\@example core/ts/platform/platform.ts region='longform'}\n * @abstract\n * @template C\n * @param {?} componentFactory\n * @param {?=} rootSelectorOrNode\n * @return {?}\n */\nbootstrap<C>(\n      componentFactory: ComponentFactory<C>|Type<C>,\n      rootSelectorOrNode?: string|any) {}\n/**\n * Invoke this method to explicitly process change detection and its side-effects.\n * \n * In development mode, `tick()` also performs a second change detection cycle to ensure that no\n * further changes are detected. If additional changes are picked up during this second cycle,\n * bindings in the app have side-effects that cannot be resolved in a single change detection\n * pass.\n * In this case, Angular throws an error, since an Angular application can only have one change\n * detection pass during which all change detection must complete.\n * @abstract\n * @return {?}\n */\ntick() {}\n/**\n * Get a list of component types registered to this application.\n * This list is populated even before the component is created.\n * @abstract\n * @return {?}\n */\ncomponentTypes() {}\n/**\n * Get a list of components registered to this application.\n * @abstract\n * @return {?}\n */\ncomponents() {}\n/**\n * Attaches a view so that it will be dirty checked.\n * The view will be automatically detached when it is destroyed.\n * This will throw if the view is already attached to a ViewContainer.\n * @abstract\n * @param {?} view\n * @return {?}\n */\nattachView(view: ViewRef) {}\n/**\n * Detaches a view from dirty checking again.\n * @abstract\n * @param {?} view\n * @return {?}\n */\ndetachView(view: ViewRef) {}\n/**\n * Returns the number of attached views.\n * @abstract\n * @return {?}\n */\nviewCount() {}\n/**\n * Returns an Observable that indicates when the application is stable or unstable.\n * @abstract\n * @return {?}\n */\nisStable() {}\n}\n/**\n * workaround https://github.com/angular/tsickle/issues/350\n * @suppress {checkTypes}\n */\nexport class ApplicationRef_ extends ApplicationRef {\n/**\n * \\@internal\n */\nstatic _tickScope: WtfScopeFn = wtfCreateScope('ApplicationRef#tick()');\nprivate _bootstrapListeners: ((compRef: ComponentRef<any>) => void)[] = [];\nprivate _rootComponents: ComponentRef<any>[] = [];\nprivate _rootComponentTypes: Type<any>[] = [];\nprivate _views: InternalViewRef[] = [];\nprivate _runningTick: boolean = false;\nprivate _enforceNoNewChanges: boolean = false;\nprivate _isStable: Observable<boolean>;\nprivate _stable = true;\n/**\n * @param {?} _zone\n * @param {?} _console\n * @param {?} _injector\n * @param {?} _exceptionHandler\n * @param {?} _componentFactoryResolver\n * @param {?} _initStatus\n */\nconstructor(\nprivate _zone: NgZone,\nprivate _console: Console,\nprivate _injector: Injector,\nprivate _exceptionHandler: ErrorHandler,\nprivate _componentFactoryResolver: ComponentFactoryResolver,\nprivate _initStatus: ApplicationInitStatus) {\n    super();\n    this._enforceNoNewChanges = isDevMode();\n\n    this._zone.onMicrotaskEmpty.subscribe(\n        {next: () => { this._zone.run(() => { this.tick(); }); }});\n\n    const isCurrentlyStable = new Observable<boolean>((observer: Observer<boolean>) => {\n      this._stable = this._zone.isStable && !this._zone.hasPendingMacrotasks &&\n          !this._zone.hasPendingMicrotasks;\n      this._zone.runOutsideAngular(() => {\n        observer.next(this._stable);\n        observer.complete();\n      });\n    });\n\n    const isStable = new Observable<boolean>((observer: Observer<boolean>) => {\n      // Create the subscription to onStable outside the Angular Zone so that\n      // the callback is run outside the Angular Zone.\n      let stableSub: Subscription;\n      this._zone.runOutsideAngular(() => {\n        stableSub = this._zone.onStable.subscribe(() => {\n          NgZone.assertNotInAngularZone();\n\n          // Check whether there are no pending macro/micro tasks in the next tick\n          // to allow for NgZone to update the state.\n          scheduleMicroTask(() => {\n            if (!this._stable && !this._zone.hasPendingMacrotasks &&\n                !this._zone.hasPendingMicrotasks) {\n              this._stable = true;\n              observer.next(true);\n            }\n          });\n        });\n      });\n\n      const unstableSub: Subscription = this._zone.onUnstable.subscribe(() => {\n        NgZone.assertInAngularZone();\n        if (this._stable) {\n          this._stable = false;\n          this._zone.runOutsideAngular(() => { observer.next(false); });\n        }\n      });\n\n      return () => {\n        stableSub.unsubscribe();\n        unstableSub.unsubscribe();\n      };\n    });\n\n    this._isStable = merge(isCurrentlyStable, share.call(isStable));\n  }\n/**\n * @param {?} viewRef\n * @return {?}\n */\nattachView(viewRef: ViewRef): void {\n    const /** @type {?} */ view = ( /** @type {?} */((viewRef as InternalViewRef)));\n    this._views.push(view);\n    view.attachToAppRef(this);\n  }\n/**\n * @param {?} viewRef\n * @return {?}\n */\ndetachView(viewRef: ViewRef): void {\n    const /** @type {?} */ view = ( /** @type {?} */((viewRef as InternalViewRef)));\n    remove(this._views, view);\n    view.detachFromAppRef();\n  }\n/**\n * @template C\n * @param {?} componentOrFactory\n * @param {?=} rootSelectorOrNode\n * @return {?}\n */\nbootstrap<C>(componentOrFactory: ComponentFactory<C>|Type<C>, rootSelectorOrNode?: string|any):\n      ComponentRef<C> {\n    if (!this._initStatus.done) {\n      throw new Error(\n          'Cannot bootstrap as there are still asynchronous initializers running. Bootstrap components in the `ngDoBootstrap` method of the root module.');\n    }\n    let /** @type {?} */ componentFactory: ComponentFactory<C>;\n    if (componentOrFactory instanceof ComponentFactory) {\n      componentFactory = componentOrFactory;\n    } else {\n      componentFactory = /** @type {?} */((\n          this._componentFactoryResolver.resolveComponentFactory(componentOrFactory)));\n    }\n    this._rootComponentTypes.push(componentFactory.componentType);\n\n    // Create a factory associated with the current module if it's not bound to some other\n    const /** @type {?} */ ngModule = componentFactory instanceof ComponentFactoryBoundToModule ?\n        null :\n        this._injector.get(NgModuleRef);\n    const /** @type {?} */ selectorOrNode = rootSelectorOrNode || componentFactory.selector;\n    const /** @type {?} */ compRef = componentFactory.create(Injector.NULL, [], selectorOrNode, ngModule);\n\n    compRef.onDestroy(() => { this._unloadComponent(compRef); });\n    const /** @type {?} */ testability = compRef.injector.get(Testability, null);\n    if (testability) {\n      compRef.injector.get(TestabilityRegistry)\n          .registerApplication(compRef.location.nativeElement, testability);\n    }\n\n    this._loadComponent(compRef);\n    if (isDevMode()) {\n      this._console.log(\n          `Angular is running in the development mode. Call enableProdMode() to enable the production mode.`);\n    }\n    return compRef;\n  }\n/**\n * @param {?} componentRef\n * @return {?}\n */\nprivate _loadComponent(componentRef: ComponentRef<any>): void {\n    this.attachView(componentRef.hostView);\n    this.tick();\n    this._rootComponents.push(componentRef);\n    // Get the listeners lazily to prevent DI cycles.\n    const /** @type {?} */ listeners =\n        this._injector.get(APP_BOOTSTRAP_LISTENER, []).concat(this._bootstrapListeners);\n    listeners.forEach((listener) => listener(componentRef));\n  }\n/**\n * @param {?} componentRef\n * @return {?}\n */\nprivate _unloadComponent(componentRef: ComponentRef<any>): void {\n    this.detachView(componentRef.hostView);\n    remove(this._rootComponents, componentRef);\n  }\n/**\n * @return {?}\n */\ntick(): void {\n    if (this._runningTick) {\n      throw new Error('ApplicationRef.tick is called recursively');\n    }\n\n    const /** @type {?} */ scope = ApplicationRef_._tickScope();\n    try {\n      this._runningTick = true;\n      this._views.forEach((view) => view.detectChanges());\n      if (this._enforceNoNewChanges) {\n        this._views.forEach((view) => view.checkNoChanges());\n      }\n    } catch ( /** @type {?} */e) {\n      // Attention: Don't rethrow as it could cancel subscriptions to Observables!\n      this._zone.runOutsideAngular(() => this._exceptionHandler.handleError(e));\n    } finally {\n      this._runningTick = false;\n      wtfLeave(scope);\n    }\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    // TODO(alxhub): Dispose of the NgZone.\n    this._views.slice().forEach((view) => view.destroy());\n  }\n/**\n * @return {?}\n */\nget viewCount() { return this._views.length; }\n/**\n * @return {?}\n */\nget componentTypes(): Type<any>[] { return this._rootComponentTypes; }\n/**\n * @return {?}\n */\nget components(): ComponentRef<any>[] { return this._rootComponents; }\n/**\n * @return {?}\n */\nget isStable(): Observable<boolean> { return this._isStable; }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: NgZone, },\n{type: Console, },\n{type: Injector, },\n{type: ErrorHandler, },\n{type: ComponentFactoryResolver, },\n{type: ApplicationInitStatus, },\n];\n}\n\nfunction ApplicationRef__tsickle_Closure_declarations() {\n/**\n * \\@internal\n * @type {?}\n */\nApplicationRef_._tickScope;\n/** @type {?} */\nApplicationRef_.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nApplicationRef_.ctorParameters;\n/** @type {?} */\nApplicationRef_.prototype._bootstrapListeners;\n/** @type {?} */\nApplicationRef_.prototype._rootComponents;\n/** @type {?} */\nApplicationRef_.prototype._rootComponentTypes;\n/** @type {?} */\nApplicationRef_.prototype._views;\n/** @type {?} */\nApplicationRef_.prototype._runningTick;\n/** @type {?} */\nApplicationRef_.prototype._enforceNoNewChanges;\n/** @type {?} */\nApplicationRef_.prototype._isStable;\n/** @type {?} */\nApplicationRef_.prototype._stable;\n/** @type {?} */\nApplicationRef_.prototype._zone;\n/** @type {?} */\nApplicationRef_.prototype._console;\n/** @type {?} */\nApplicationRef_.prototype._injector;\n/** @type {?} */\nApplicationRef_.prototype._exceptionHandler;\n/** @type {?} */\nApplicationRef_.prototype._componentFactoryResolver;\n/** @type {?} */\nApplicationRef_.prototype._initStatus;\n}\n\n/**\n * @template T\n * @param {?} list\n * @param {?} el\n * @return {?}\n */\nfunction remove<T>(list: T[], el: T): void {\n  const /** @type {?} */ index = list.indexOf(el);\n  if (index > -1) {\n    list.splice(index, 1);\n  }\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {InjectionToken, Injector} from '../di';\nimport {ViewEncapsulation} from '../metadata/view';\n/**\n * @deprecated Use `RendererType2` (and `Renderer2`) instead.\n */\nexport class RenderComponentType {\n/**\n * @param {?} id\n * @param {?} templateUrl\n * @param {?} slotCount\n * @param {?} encapsulation\n * @param {?} styles\n * @param {?} animations\n */\nconstructor(\npublic id: string,\npublic templateUrl: string,\npublic slotCount: number,\npublic encapsulation: ViewEncapsulation,\npublic styles: Array<string|any[]>,\npublic animations: any) {}\n}\n\nfunction RenderComponentType_tsickle_Closure_declarations() {\n/** @type {?} */\nRenderComponentType.prototype.id;\n/** @type {?} */\nRenderComponentType.prototype.templateUrl;\n/** @type {?} */\nRenderComponentType.prototype.slotCount;\n/** @type {?} */\nRenderComponentType.prototype.encapsulation;\n/** @type {?} */\nRenderComponentType.prototype.styles;\n/** @type {?} */\nRenderComponentType.prototype.animations;\n}\n\n/**\n * @deprecated Debug info is handeled internally in the view engine now.\n * @abstract\n */\nexport abstract class RenderDebugInfo {\n/**\n * @abstract\n * @return {?}\n */\ninjector() {}\n/**\n * @abstract\n * @return {?}\n */\ncomponent() {}\n/**\n * @abstract\n * @return {?}\n */\nproviderTokens() {}\n/**\n * @abstract\n * @return {?}\n */\nreferences() {}\n/**\n * @abstract\n * @return {?}\n */\ncontext() {}\n/**\n * @abstract\n * @return {?}\n */\nsource() {}\n}\n\n/**\n * @deprecated Use the `Renderer2` instead.\n */\nexport interface DirectRenderer {\n  remove(node: any): void;\n  appendChild(node: any, parent: any): void;\n  insertBefore(node: any, refNode: any): void;\n  nextSibling(node: any): any;\n  parentElement(node: any): any;\n}\n/**\n * @deprecated Use the `Renderer2` instead.\n * @abstract\n */\nexport abstract class Renderer {\n/**\n * @abstract\n * @param {?} selectorOrNode\n * @param {?=} debugInfo\n * @return {?}\n */\nselectRootElement(selectorOrNode: string|any, debugInfo?: RenderDebugInfo) {}\n/**\n * @abstract\n * @param {?} parentElement\n * @param {?} name\n * @param {?=} debugInfo\n * @return {?}\n */\ncreateElement(parentElement: any, name: string, debugInfo?: RenderDebugInfo) {}\n/**\n * @abstract\n * @param {?} hostElement\n * @return {?}\n */\ncreateViewRoot(hostElement: any) {}\n/**\n * @abstract\n * @param {?} parentElement\n * @param {?=} debugInfo\n * @return {?}\n */\ncreateTemplateAnchor(parentElement: any, debugInfo?: RenderDebugInfo) {}\n/**\n * @abstract\n * @param {?} parentElement\n * @param {?} value\n * @param {?=} debugInfo\n * @return {?}\n */\ncreateText(parentElement: any, value: string, debugInfo?: RenderDebugInfo) {}\n/**\n * @abstract\n * @param {?} parentElement\n * @param {?} nodes\n * @return {?}\n */\nprojectNodes(parentElement: any, nodes: any[]) {}\n/**\n * @abstract\n * @param {?} node\n * @param {?} viewRootNodes\n * @return {?}\n */\nattachViewAfter(node: any, viewRootNodes: any[]) {}\n/**\n * @abstract\n * @param {?} viewRootNodes\n * @return {?}\n */\ndetachView(viewRootNodes: any[]) {}\n/**\n * @abstract\n * @param {?} hostElement\n * @param {?} viewAllNodes\n * @return {?}\n */\ndestroyView(hostElement: any, viewAllNodes: any[]) {}\n/**\n * @abstract\n * @param {?} renderElement\n * @param {?} name\n * @param {?} callback\n * @return {?}\n */\nlisten(renderElement: any, name: string, callback: Function) {}\n/**\n * @abstract\n * @param {?} target\n * @param {?} name\n * @param {?} callback\n * @return {?}\n */\nlistenGlobal(target: string, name: string, callback: Function) {}\n/**\n * @abstract\n * @param {?} renderElement\n * @param {?} propertyName\n * @param {?} propertyValue\n * @return {?}\n */\nsetElementProperty(renderElement: any, propertyName: string, propertyValue: any) {}\n/**\n * @abstract\n * @param {?} renderElement\n * @param {?} attributeName\n * @param {?} attributeValue\n * @return {?}\n */\nsetElementAttribute(renderElement: any, attributeName: string, attributeValue: string) {}\n/**\n * Used only in debug mode to serialize property changes to dom nodes as attributes.\n * @abstract\n * @param {?} renderElement\n * @param {?} propertyName\n * @param {?} propertyValue\n * @return {?}\n */\nsetBindingDebugInfo(renderElement: any, propertyName: string, propertyValue: string) {}\n/**\n * @abstract\n * @param {?} renderElement\n * @param {?} className\n * @param {?} isAdd\n * @return {?}\n */\nsetElementClass(renderElement: any, className: string, isAdd: boolean) {}\n/**\n * @abstract\n * @param {?} renderElement\n * @param {?} styleName\n * @param {?} styleValue\n * @return {?}\n */\nsetElementStyle(renderElement: any, styleName: string, styleValue: string) {}\n/**\n * @abstract\n * @param {?} renderElement\n * @param {?} methodName\n * @param {?=} args\n * @return {?}\n */\ninvokeElementMethod(renderElement: any, methodName: string, args?: any[]) {}\n/**\n * @abstract\n * @param {?} renderNode\n * @param {?} text\n * @return {?}\n */\nsetText(renderNode: any, text: string) {}\n/**\n * @abstract\n * @param {?} element\n * @param {?} startingStyles\n * @param {?} keyframes\n * @param {?} duration\n * @param {?} delay\n * @param {?} easing\n * @param {?=} previousPlayers\n * @return {?}\n */\nanimate(\n      element: any, startingStyles: any, keyframes: any[], duration: number, delay: number,\n      easing: string, previousPlayers?: any[]) {}\n}\n\nexport const /** @type {?} */ Renderer2Interceptor = new InjectionToken<Renderer2[]>('Renderer2Interceptor');\n/**\n * Injectable service that provides a low-level interface for modifying the UI.\n * \n * Use this service to bypass Angular's templating and make custom UI changes that can't be\n * expressed declaratively. For example if you need to set a property or an attribute whose name is\n * not statically known, use {\\@link Renderer#setElementProperty} or {\\@link\n * Renderer#setElementAttribute}\n * respectively.\n * \n * If you are implementing a custom renderer, you must implement this interface.\n * \n * The default Renderer implementation is `DomRenderer`. Also available is `WebWorkerRenderer`.\n * \n * @deprecated Use `RendererFactory2` instead.\n * @abstract\n */\nexport abstract class RootRenderer {\n/**\n * @abstract\n * @param {?} componentType\n * @return {?}\n */\nrenderComponent(componentType: RenderComponentType) {}\n}\n\n/**\n * @experimental\n */\nexport interface RendererType2 {\n  id: string;\n  encapsulation: ViewEncapsulation;\n  styles: (string|any[])[];\n  data: {[kind: string]: any};\n}\n/**\n * \\@experimental\n * @abstract\n */\nexport abstract class RendererFactory2 {\n/**\n * @abstract\n * @param {?} hostElement\n * @param {?} type\n * @return {?}\n */\ncreateRenderer(hostElement: any, type: RendererType2|null) {}\n/**\n * @abstract\n * @return {?}\n */\nbegin?() {}\n/**\n * @abstract\n * @return {?}\n */\nend?() {}\n/**\n * @abstract\n * @return {?}\n */\nwhenRenderingDone?() {}\n}\nexport type RendererStyleFlags2 = number;\nexport let RendererStyleFlags2: any = {};\nRendererStyleFlags2.Important = 1;\nRendererStyleFlags2.DashCase = 2;\nRendererStyleFlags2[RendererStyleFlags2.Important] = \"Important\";\nRendererStyleFlags2[RendererStyleFlags2.DashCase] = \"DashCase\";\n\n/**\n * \\@experimental\n * @abstract\n */\nexport abstract class Renderer2 {\n/**\n * This field can be used to store arbitrary data on this renderer instance.\n * This is useful for renderers that delegate to other renderers.\n * @abstract\n * @return {?}\n */\ndata() {}\n/**\n * @abstract\n * @return {?}\n */\ndestroy() {}\n/**\n * @abstract\n * @param {?} name\n * @param {?=} namespace\n * @return {?}\n */\ncreateElement(name: string, namespace?: string|null) {}\n/**\n * @abstract\n * @param {?} value\n * @return {?}\n */\ncreateComment(value: string) {}\n/**\n * @abstract\n * @param {?} value\n * @return {?}\n */\ncreateText(value: string) {}\n/**\n * This property is allowed to be null / undefined,\n * in which case the view engine won't call it.\n * This is used as a performance optimization for production mode.\n */\ndestroyNode: ((node: any) => void)|null;\n/**\n * @abstract\n * @param {?} parent\n * @param {?} newChild\n * @return {?}\n */\nappendChild(parent: any, newChild: any) {}\n/**\n * @abstract\n * @param {?} parent\n * @param {?} newChild\n * @param {?} refChild\n * @return {?}\n */\ninsertBefore(parent: any, newChild: any, refChild: any) {}\n/**\n * @abstract\n * @param {?} parent\n * @param {?} oldChild\n * @return {?}\n */\nremoveChild(parent: any, oldChild: any) {}\n/**\n * @abstract\n * @param {?} selectorOrNode\n * @return {?}\n */\nselectRootElement(selectorOrNode: string|any) {}\n/**\n * Attention: On WebWorkers, this will always return a value,\n * as we are asking for a result synchronously. I.e.\n * the caller can't rely on checking whether this is null or not.\n * @abstract\n * @param {?} node\n * @return {?}\n */\nparentNode(node: any) {}\n/**\n * Attention: On WebWorkers, this will always return a value,\n * as we are asking for a result synchronously. I.e.\n * the caller can't rely on checking whether this is null or not.\n * @abstract\n * @param {?} node\n * @return {?}\n */\nnextSibling(node: any) {}\n/**\n * @abstract\n * @param {?} el\n * @param {?} name\n * @param {?} value\n * @param {?=} namespace\n * @return {?}\n */\nsetAttribute(el: any, name: string, value: string, namespace?: string|null) {}\n/**\n * @abstract\n * @param {?} el\n * @param {?} name\n * @param {?=} namespace\n * @return {?}\n */\nremoveAttribute(el: any, name: string, namespace?: string|null) {}\n/**\n * @abstract\n * @param {?} el\n * @param {?} name\n * @return {?}\n */\naddClass(el: any, name: string) {}\n/**\n * @abstract\n * @param {?} el\n * @param {?} name\n * @return {?}\n */\nremoveClass(el: any, name: string) {}\n/**\n * @abstract\n * @param {?} el\n * @param {?} style\n * @param {?} value\n * @param {?=} flags\n * @return {?}\n */\nsetStyle(el: any, style: string, value: any, flags?: RendererStyleFlags2) {}\n/**\n * @abstract\n * @param {?} el\n * @param {?} style\n * @param {?=} flags\n * @return {?}\n */\nremoveStyle(el: any, style: string, flags?: RendererStyleFlags2) {}\n/**\n * @abstract\n * @param {?} el\n * @param {?} name\n * @param {?} value\n * @return {?}\n */\nsetProperty(el: any, name: string, value: any) {}\n/**\n * @abstract\n * @param {?} node\n * @param {?} value\n * @return {?}\n */\nsetValue(node: any, value: string) {}\n/**\n * @abstract\n * @param {?} target\n * @param {?} eventName\n * @param {?} callback\n * @return {?}\n */\nlisten(\n      target: 'window'|'document'|'body'|any, eventName: string,\n      callback: (event: any) => boolean | void) {}\n}\n\nfunction Renderer2_tsickle_Closure_declarations() {\n/**\n * This property is allowed to be null / undefined,\n * in which case the view engine won't call it.\n * This is used as a performance optimization for production mode.\n * @type {?}\n */\nRenderer2.prototype.destroyNode;\n}\n\n","\nexport class ElementRef {\n/**\n * The underlying native element or `null` if direct access to native elements is not supported\n * (e.g. when the application runs in a web worker).\n * \n * <div class=\"callout is-critical\">\n *   <header>Use with caution</header>\n *   <p>\n *    Use this API as the last resort when direct access to DOM is needed. Use templating and\n *    data-binding provided by Angular instead. Alternatively you take a look at {\\@link Renderer}\n *    which provides API that can safely be used even when direct access to native elements is not\n *    supported.\n *   </p>\n *   <p>\n *    Relying on direct DOM access creates tight coupling between your application and rendering\n *    layers which will make it impossible to separate the two and deploy your application into a\n *    web worker.\n *   </p>\n * </div>\n * \\@stable\n */\npublic nativeElement: any;\n/**\n * @param {?} nativeElement\n */\nconstructor(nativeElement: any) { this.nativeElement = nativeElement; }\n}\n\nfunction ElementRef_tsickle_Closure_declarations() {\n/**\n * The underlying native element or `null` if direct access to native elements is not supported\n * (e.g. when the application runs in a web worker).\n * \n * <div class=\"callout is-critical\">\n *   <header>Use with caution</header>\n *   <p>\n *    Use this API as the last resort when direct access to DOM is needed. Use templating and\n *    data-binding provided by Angular instead. Alternatively you take a look at {\\@link Renderer}\n *    which provides API that can safely be used even when direct access to native elements is not\n *    supported.\n *   </p>\n *   <p>\n *    Relying on direct DOM access creates tight coupling between your application and rendering\n *    layers which will make it impossible to separate the two and deploy your application into a\n *    web worker.\n *   </p>\n * </div>\n * \\@stable\n * @type {?}\n */\nElementRef.prototype.nativeElement;\n}\n\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Observable} from 'rxjs/Observable';\n\nimport {EventEmitter} from '../event_emitter';\nimport {getSymbolIterator} from '../util';\n/**\n * An unmodifiable list of items that Angular keeps up to date when the state\n * of the application changes.\n * \n * The type of object that {\\@link ViewChildren}, {\\@link ContentChildren}, and {\\@link QueryList}\n * provide.\n * \n * Implements an iterable interface, therefore it can be used in both ES6\n * javascript `for (var i of items)` loops as well as in Angular templates with\n * `*ngFor=\"let i of myList\"`.\n * \n * Changes can be observed by subscribing to the changes `Observable`.\n * \n * NOTE: In the future this class will implement an `Observable` interface.\n * \n * ### Example ([live demo](http://plnkr.co/edit/RX8sJnQYl9FWuSCWme5z?p=preview))\n * ```typescript\n * \\@Component({...}) \n * class Container {\n *   \\@ViewChildren(Item) items:QueryList<Item>;\n * }\n * ```\n * \\@stable\n */\nexport class QueryList<T>/* implements Iterable<T> */ {\nprivate _dirty = true;\nprivate _results: Array<T> = [];\nprivate _emitter = new EventEmitter();\n/**\n * @return {?}\n */\nget changes(): Observable<any> { return this._emitter; }\n/**\n * @return {?}\n */\nget length(): number { return this._results.length; }\n/**\n * @return {?}\n */\nget first(): T { return this._results[0]; }\n/**\n * @return {?}\n */\nget last(): T { return this._results[this.length - 1]; }\n/**\n * See\n * [Array.map](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map)\n * @template U\n * @param {?} fn\n * @return {?}\n */\nmap<U>(fn: (item: T, index: number, array: T[]) => U): U[] { return this._results.map(fn); }\n/**\n * See\n * [Array.filter](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter)\n * @param {?} fn\n * @return {?}\n */\nfilter(fn: (item: T, index: number, array: T[]) => boolean): T[] {\n    return this._results.filter(fn);\n  }\n/**\n * See\n * [Array.find](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find)\n * @param {?} fn\n * @return {?}\n */\nfind(fn: (item: T, index: number, array: T[]) => boolean): T|undefined {\n    return this._results.find(fn);\n  }\n/**\n * See\n * [Array.reduce](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce)\n * @template U\n * @param {?} fn\n * @param {?} init\n * @return {?}\n */\nreduce<U>(fn: (prevValue: U, curValue: T, curIndex: number, array: T[]) => U, init: U): U {\n    return this._results.reduce(fn, init);\n  }\n/**\n * See\n * [Array.forEach](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach)\n * @param {?} fn\n * @return {?}\n */\nforEach(fn: (item: T, index: number, array: T[]) => void): void { this._results.forEach(fn); }\n/**\n * See\n * [Array.some](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some)\n * @param {?} fn\n * @return {?}\n */\nsome(fn: (value: T, index: number, array: T[]) => boolean): boolean {\n    return this._results.some(fn);\n  }\n/**\n * @return {?}\n */\ntoArray(): T[] { return this._results.slice(); }\n/**\n * @return {?}\n */\n[getSymbolIterator()](): Iterator<T> { return ( /** @type {?} */((this._results as any)))[getSymbolIterator()](); }\n/**\n * @return {?}\n */\ntoString(): string { return this._results.toString(); }\n/**\n * @param {?} res\n * @return {?}\n */\nreset(res: Array<T|any[]>): void {\n    this._results = flatten(res);\n    this._dirty = false;\n  }\n/**\n * @return {?}\n */\nnotifyOnChanges(): void { this._emitter.emit(this); }\n/**\n * internal\n * @return {?}\n */\nsetDirty() { this._dirty = true; }\n/**\n * internal\n * @return {?}\n */\nget dirty() { return this._dirty; }\n/**\n * internal\n * @return {?}\n */\ndestroy(): void {\n    this._emitter.complete();\n    this._emitter.unsubscribe();\n  }\n}\n\nfunction QueryList_tsickle_Closure_declarations() {\n/** @type {?} */\nQueryList.prototype._dirty;\n/** @type {?} */\nQueryList.prototype._results;\n/** @type {?} */\nQueryList.prototype._emitter;\n}\n\n/**\n * @template T\n * @param {?} list\n * @return {?}\n */\nfunction flatten<T>(list: Array<T|T[]>): T[] {\n  return list.reduce((flat: any[], item: T | T[]): T[] => {\n    const /** @type {?} */ flatItem = Array.isArray(item) ? flatten(item) : item;\n    return ( /** @type {?} */((<T[]>flat))).concat(flatItem);\n  }, []);\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\n\nimport {Injectable, Optional} from '../di';\n\nimport {Compiler} from './compiler';\nimport {NgModuleFactory} from './ng_module_factory';\nimport {NgModuleFactoryLoader} from './ng_module_factory_loader';\n\nconst /** @type {?} */ _SEPARATOR = '#';\n\nconst /** @type {?} */ FACTORY_CLASS_SUFFIX = 'NgFactory';\ndeclare var System: any;\n/**\n * Configuration for SystemJsNgModuleLoader.\n * token.\n * \n * \\@experimental\n * @abstract\n */\nexport abstract class SystemJsNgModuleLoaderConfig {\n/**\n * Prefix to add when computing the name of the factory module for a given module name.\n */\nfactoryPathPrefix: string;\n/**\n * Suffix to add when computing the name of the factory module for a given module name.\n */\nfactoryPathSuffix: string;\n}\n\nfunction SystemJsNgModuleLoaderConfig_tsickle_Closure_declarations() {\n/**\n * Prefix to add when computing the name of the factory module for a given module name.\n * @type {?}\n */\nSystemJsNgModuleLoaderConfig.prototype.factoryPathPrefix;\n/**\n * Suffix to add when computing the name of the factory module for a given module name.\n * @type {?}\n */\nSystemJsNgModuleLoaderConfig.prototype.factoryPathSuffix;\n}\n\n\nconst /** @type {?} */ DEFAULT_CONFIG: SystemJsNgModuleLoaderConfig = {\n  factoryPathPrefix: '',\n  factoryPathSuffix: '.ngfactory',\n};\n/**\n * NgModuleFactoryLoader that uses SystemJS to load NgModuleFactory\n * \\@experimental\n */\nexport class SystemJsNgModuleLoader implements NgModuleFactoryLoader {\nprivate _config: SystemJsNgModuleLoaderConfig;\n/**\n * @param {?} _compiler\n * @param {?=} config\n */\nconstructor(private _compiler: Compiler,  config?: SystemJsNgModuleLoaderConfig) {\n    this._config = config || DEFAULT_CONFIG;\n  }\n/**\n * @param {?} path\n * @return {?}\n */\nload(path: string): Promise<NgModuleFactory<any>> {\n    const /** @type {?} */ offlineMode = this._compiler instanceof Compiler;\n    return offlineMode ? this.loadFactory(path) : this.loadAndCompile(path);\n  }\n/**\n * @param {?} path\n * @return {?}\n */\nprivate loadAndCompile(path: string): Promise<NgModuleFactory<any>> {\n    let [module, exportName] = path.split(_SEPARATOR);\n    if (exportName === undefined) {\n      exportName = 'default';\n    }\n\n    return System.import(module)\n        .then((module: any) => module[exportName])\n        .then((type: any) => checkNotEmpty(type, module, exportName))\n        .then((type: any) => this._compiler.compileModuleAsync(type));\n  }\n/**\n * @param {?} path\n * @return {?}\n */\nprivate loadFactory(path: string): Promise<NgModuleFactory<any>> {\n    let [module, exportName] = path.split(_SEPARATOR);\n    let /** @type {?} */ factoryClassSuffix = FACTORY_CLASS_SUFFIX;\n    if (exportName === undefined) {\n      exportName = 'default';\n      factoryClassSuffix = '';\n    }\n\n    return System.import(this._config.factoryPathPrefix + module + this._config.factoryPathSuffix)\n        .then((module: any) => module[exportName + factoryClassSuffix])\n        .then((factory: any) => checkNotEmpty(factory, module, exportName));\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Compiler, },\n{type: SystemJsNgModuleLoaderConfig, decorators: [{ type: Optional }, ]},\n];\n}\n\nfunction SystemJsNgModuleLoader_tsickle_Closure_declarations() {\n/** @type {?} */\nSystemJsNgModuleLoader.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nSystemJsNgModuleLoader.ctorParameters;\n/** @type {?} */\nSystemJsNgModuleLoader.prototype._config;\n/** @type {?} */\nSystemJsNgModuleLoader.prototype._compiler;\n}\n\n/**\n * @param {?} value\n * @param {?} modulePath\n * @param {?} exportName\n * @return {?}\n */\nfunction checkNotEmpty(value: any, modulePath: string, exportName: string): any {\n  if (!value) {\n    throw new Error(`Cannot find '${exportName}' in '${modulePath}'`);\n  }\n  return value;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {ElementRef} from './element_ref';\nimport {EmbeddedViewRef} from './view_ref';\n/**\n * Represents an Embedded Template that can be used to instantiate Embedded Views.\n * \n * You can access a `TemplateRef`, in two ways. Via a directive placed on a `<ng-template>` element\n * (or directive prefixed with `*`) and have the `TemplateRef` for this Embedded View injected into\n * the constructor of the directive using the `TemplateRef` Token. Alternatively you can query for\n * the `TemplateRef` from a Component or a Directive via {\\@link Query}.\n * \n * To instantiate Embedded Views based on a Template, use\n * {\\@link ViewContainerRef#createEmbeddedView}, which will create the View and attach it to the\n * View Container.\n * \\@stable\n * @abstract\n */\nexport abstract class TemplateRef<C> {\n/**\n * @abstract\n * @return {?}\n */\nelementRef() {}\n/**\n * @abstract\n * @param {?} context\n * @return {?}\n */\ncreateEmbeddedView(context: C) {}\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Injector} from '../di/injector';\nimport {ComponentFactory, ComponentRef} from './component_factory';\nimport {ElementRef} from './element_ref';\nimport {NgModuleRef} from './ng_module_factory';\nimport {TemplateRef} from './template_ref';\nimport {EmbeddedViewRef, ViewRef} from './view_ref';\n/**\n * Represents a container where one or more Views can be attached.\n * \n * The container can contain two kinds of Views. Host Views, created by instantiating a\n * {\\@link Component} via {\\@link #createComponent}, and Embedded Views, created by instantiating an\n * {\\@link TemplateRef Embedded Template} via {\\@link #createEmbeddedView}.\n * \n * The location of the View Container within the containing View is specified by the Anchor\n * `element`. Each View Container can have only one Anchor Element and each Anchor Element can only\n * have a single View Container.\n * \n * Root elements of Views attached to this container become siblings of the Anchor Element in\n * the Rendered View.\n * \n * To access a `ViewContainerRef` of an Element, you can either place a {\\@link Directive} injected\n * with `ViewContainerRef` on the Element, or you obtain it via a {\\@link ViewChild} query.\n * \\@stable\n * @abstract\n */\nexport abstract class ViewContainerRef {\n/**\n * Anchor element that specifies the location of this container in the containing View.\n * <!-- TODO: rename to anchorElement -->\n * @abstract\n * @return {?}\n */\nelement() {}\n/**\n * @abstract\n * @return {?}\n */\ninjector() {}\n/**\n * @abstract\n * @return {?}\n */\nparentInjector() {}\n/**\n * Destroys all Views in this container.\n * @abstract\n * @return {?}\n */\nclear() {}\n/**\n * Returns the {\\@link ViewRef} for the View located in this container at the specified index.\n * @abstract\n * @param {?} index\n * @return {?}\n */\nget(index: number) {}\n/**\n * Returns the number of Views currently attached to this container.\n * @abstract\n * @return {?}\n */\nlength() {}\n/**\n * Instantiates an Embedded View based on the {\\@link TemplateRef `templateRef`} and inserts it\n * into this container at the specified `index`.\n * \n * If `index` is not specified, the new View will be inserted as the last View in the container.\n * \n * Returns the {\\@link ViewRef} for the newly created View.\n * @abstract\n * @template C\n * @param {?} templateRef\n * @param {?=} context\n * @param {?=} index\n * @return {?}\n */\ncreateEmbeddedView<C>(templateRef: TemplateRef<C>, context?: C, index?: number) {}\n/**\n * Instantiates a single {\\@link Component} and inserts its Host View into this container at the\n * specified `index`.\n * \n * The component is instantiated using its {\\@link ComponentFactory} which can be\n * obtained via {\\@link ComponentFactoryResolver#resolveComponentFactory}.\n * \n * If `index` is not specified, the new View will be inserted as the last View in the container.\n * \n * You can optionally specify the {\\@link Injector} that will be used as parent for the Component.\n * \n * Returns the {\\@link ComponentRef} of the Host View created for the newly instantiated Component.\n * @abstract\n * @template C\n * @param {?} componentFactory\n * @param {?=} index\n * @param {?=} injector\n * @param {?=} projectableNodes\n * @param {?=} ngModule\n * @return {?}\n */\ncreateComponent<C>(\n      componentFactory: ComponentFactory<C>, index?: number, injector?: Injector,\n      projectableNodes?: any[][], ngModule?: NgModuleRef<any>) {}\n/**\n * Inserts a View identified by a {\\@link ViewRef} into the container at the specified `index`.\n * \n * If `index` is not specified, the new View will be inserted as the last View in the container.\n * \n * Returns the inserted {\\@link ViewRef}.\n * @abstract\n * @param {?} viewRef\n * @param {?=} index\n * @return {?}\n */\ninsert(viewRef: ViewRef, index?: number) {}\n/**\n * Moves a View identified by a {\\@link ViewRef} into the container at the specified `index`.\n * \n * Returns the inserted {\\@link ViewRef}.\n * @abstract\n * @param {?} viewRef\n * @param {?} currentIndex\n * @return {?}\n */\nmove(viewRef: ViewRef, currentIndex: number) {}\n/**\n * Returns the index of the View, specified via {\\@link ViewRef}, within the current container or\n * `-1` if this container doesn't contain the View.\n * @abstract\n * @param {?} viewRef\n * @return {?}\n */\nindexOf(viewRef: ViewRef) {}\n/**\n * Destroys a View attached to this container at the specified `index`.\n * \n * If `index` is not specified, the last View in the container will be removed.\n * @abstract\n * @param {?=} index\n * @return {?}\n */\nremove(index?: number) {}\n/**\n * Use along with {\\@link #insert} to move a View within the current container.\n * \n * If the `index` param is omitted, the last {\\@link ViewRef} is detached.\n * @abstract\n * @param {?=} index\n * @return {?}\n */\ndetach(index?: number) {}\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {ApplicationRef} from '../application_ref';\nimport {ChangeDetectorRef} from '../change_detection/change_detector_ref';\n/**\n * \\@stable\n * @abstract\n */\nexport abstract class ViewRef extends ChangeDetectorRef {\n/**\n * Destroys the view and all of the data structures associated with it.\n * @abstract\n * @return {?}\n */\ndestroy() {}\n/**\n * @abstract\n * @return {?}\n */\ndestroyed() {}\n/**\n * @abstract\n * @param {?} callback\n * @return {?}\n */\nonDestroy(callback: Function) {}\n}\n/**\n * Represents an Angular View.\n * \n * <!-- TODO: move the next two paragraphs to the dev guide -->\n * A View is a fundamental building block of the application UI. It is the smallest grouping of\n * Elements which are created and destroyed together.\n * \n * Properties of elements in a View can change, but the structure (number and order) of elements in\n * a View cannot. Changing the structure of Elements can only be done by inserting, moving or\n * removing nested Views via a {\\@link ViewContainerRef}. Each View can contain many View Containers.\n * <!-- /TODO -->\n * \n * ### Example\n * \n * Given this template...\n * \n * ```\n * Count: {{items.length}}\n * <ul>\n *   <li *ngFor=\"let  item of items\">{{item}}</li>\n * </ul>\n * ```\n * \n * We have two {\\@link TemplateRef}s:\n * \n * Outer {\\@link TemplateRef}:\n * ```\n * Count: {{items.length}}\n * <ul>\n *   <ng-template ngFor let-item [ngForOf]=\"items\"></ng-template>\n * </ul>\n * ```\n * \n * Inner {\\@link TemplateRef}:\n * ```\n *   <li>{{item}}</li>\n * ```\n * \n * Notice that the original template is broken down into two separate {\\@link TemplateRef}s.\n * \n * The outer/inner {\\@link TemplateRef}s are then assembled into views like so:\n * \n * ```\n * <!-- ViewRef: outer-0 -->\n * Count: 2\n * <ul>\n *   <ng-template view-container-ref></ng-template>\n *   <!-- ViewRef: inner-1 --><li>first</li><!-- /ViewRef: inner-1 -->\n *   <!-- ViewRef: inner-2 --><li>second</li><!-- /ViewRef: inner-2 -->\n * </ul>\n * <!-- /ViewRef: outer-0 -->\n * ```\n * \\@experimental\n * @abstract\n */\nexport abstract class EmbeddedViewRef<C> extends ViewRef {\n/**\n * @abstract\n * @return {?}\n */\ncontext() {}\n/**\n * @abstract\n * @return {?}\n */\nrootNodes() {}\n}\n\nexport interface InternalViewRef extends ViewRef {\n  detachFromAppRef(): void;\n  attachToAppRef(appRef: ApplicationRef): void;\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Injector} from '../di';\nimport {DebugContext} from '../view/index';\nexport class EventListener {\n/**\n * @param {?} name\n * @param {?} callback\n */\nconstructor(public name: string,\npublic callback: Function) {}\n}\n\nfunction EventListener_tsickle_Closure_declarations() {\n/** @type {?} */\nEventListener.prototype.name;\n/** @type {?} */\nEventListener.prototype.callback;\n}\n\n/**\n * \\@experimental All debugging apis are currently experimental.\n */\nexport class DebugNode {\n  nativeNode: any;\n  listeners: EventListener[];\n  parent: DebugElement|null;\n/**\n * @param {?} nativeNode\n * @param {?} parent\n * @param {?} _debugContext\n */\nconstructor(nativeNode: any, parent: DebugNode|null,\nprivate _debugContext: DebugContext) {\n    this.nativeNode = nativeNode;\n    if (parent && parent instanceof DebugElement) {\n      parent.addChild(this);\n    } else {\n      this.parent = null;\n    }\n    this.listeners = [];\n  }\n/**\n * @return {?}\n */\nget injector(): Injector { return this._debugContext.injector; }\n/**\n * @return {?}\n */\nget componentInstance(): any { return this._debugContext.component; }\n/**\n * @return {?}\n */\nget context(): any { return this._debugContext.context; }\n/**\n * @return {?}\n */\nget references(): {[key: string]: any} { return this._debugContext.references; }\n/**\n * @return {?}\n */\nget providerTokens(): any[] { return this._debugContext.providerTokens; }\n/**\n * @deprecated since v4\n * @return {?}\n */\nget source(): string { return 'Deprecated since v4'; }\n}\n\nfunction DebugNode_tsickle_Closure_declarations() {\n/** @type {?} */\nDebugNode.prototype.nativeNode;\n/** @type {?} */\nDebugNode.prototype.listeners;\n/** @type {?} */\nDebugNode.prototype.parent;\n/** @type {?} */\nDebugNode.prototype._debugContext;\n}\n\n/**\n * \\@experimental All debugging apis are currently experimental.\n */\nexport class DebugElement extends DebugNode {\n  name: string;\n  properties: {[key: string]: any};\n  attributes: {[key: string]: string | null};\n  classes: {[key: string]: boolean};\n  styles: {[key: string]: string | null};\n  childNodes: DebugNode[];\n  nativeElement: any;\n/**\n * @param {?} nativeNode\n * @param {?} parent\n * @param {?} _debugContext\n */\nconstructor(nativeNode: any, parent: any, _debugContext: DebugContext) {\n    super(nativeNode, parent, _debugContext);\n    this.properties = {};\n    this.attributes = {};\n    this.classes = {};\n    this.styles = {};\n    this.childNodes = [];\n    this.nativeElement = nativeNode;\n  }\n/**\n * @param {?} child\n * @return {?}\n */\naddChild(child: DebugNode) {\n    if (child) {\n      this.childNodes.push(child);\n      child.parent = this;\n    }\n  }\n/**\n * @param {?} child\n * @return {?}\n */\nremoveChild(child: DebugNode) {\n    const /** @type {?} */ childIndex = this.childNodes.indexOf(child);\n    if (childIndex !== -1) {\n      child.parent = null;\n      this.childNodes.splice(childIndex, 1);\n    }\n  }\n/**\n * @param {?} child\n * @param {?} newChildren\n * @return {?}\n */\ninsertChildrenAfter(child: DebugNode, newChildren: DebugNode[]) {\n    const /** @type {?} */ siblingIndex = this.childNodes.indexOf(child);\n    if (siblingIndex !== -1) {\n      this.childNodes.splice(siblingIndex + 1, 0, ...newChildren);\n      newChildren.forEach(c => {\n        if (c.parent) {\n          c.parent.removeChild(c);\n        }\n        c.parent = this;\n      });\n    }\n  }\n/**\n * @param {?} refChild\n * @param {?} newChild\n * @return {?}\n */\ninsertBefore(refChild: DebugNode, newChild: DebugNode): void {\n    const /** @type {?} */ refIndex = this.childNodes.indexOf(refChild);\n    if (refIndex === -1) {\n      this.addChild(newChild);\n    } else {\n      if (newChild.parent) {\n        newChild.parent.removeChild(newChild);\n      }\n      newChild.parent = this;\n      this.childNodes.splice(refIndex, 0, newChild);\n    }\n  }\n/**\n * @param {?} predicate\n * @return {?}\n */\nquery(predicate: Predicate<DebugElement>): DebugElement {\n    const /** @type {?} */ results = this.queryAll(predicate);\n    return results[0] || null;\n  }\n/**\n * @param {?} predicate\n * @return {?}\n */\nqueryAll(predicate: Predicate<DebugElement>): DebugElement[] {\n    const /** @type {?} */ matches: DebugElement[] = [];\n    _queryElementChildren(this, predicate, matches);\n    return matches;\n  }\n/**\n * @param {?} predicate\n * @return {?}\n */\nqueryAllNodes(predicate: Predicate<DebugNode>): DebugNode[] {\n    const /** @type {?} */ matches: DebugNode[] = [];\n    _queryNodeChildren(this, predicate, matches);\n    return matches;\n  }\n/**\n * @return {?}\n */\nget children(): DebugElement[] {\n    return /** @type {?} */(( this.childNodes.filter((node) => node instanceof DebugElement) as DebugElement[]));\n  }\n/**\n * @param {?} eventName\n * @param {?} eventObj\n * @return {?}\n */\ntriggerEventHandler(eventName: string, eventObj: any) {\n    this.listeners.forEach((listener) => {\n      if (listener.name == eventName) {\n        listener.callback(eventObj);\n      }\n    });\n  }\n}\n\nfunction DebugElement_tsickle_Closure_declarations() {\n/** @type {?} */\nDebugElement.prototype.name;\n/** @type {?} */\nDebugElement.prototype.properties;\n/** @type {?} */\nDebugElement.prototype.attributes;\n/** @type {?} */\nDebugElement.prototype.classes;\n/** @type {?} */\nDebugElement.prototype.styles;\n/** @type {?} */\nDebugElement.prototype.childNodes;\n/** @type {?} */\nDebugElement.prototype.nativeElement;\n}\n\n/**\n * \\@experimental\n * @param {?} debugEls\n * @return {?}\n */\nexport function asNativeElements(debugEls: DebugElement[]): any {\n  return debugEls.map((el) => el.nativeElement);\n}\n/**\n * @param {?} element\n * @param {?} predicate\n * @param {?} matches\n * @return {?}\n */\nfunction _queryElementChildren(\n    element: DebugElement, predicate: Predicate<DebugElement>, matches: DebugElement[]) {\n  element.childNodes.forEach(node => {\n    if (node instanceof DebugElement) {\n      if (predicate(node)) {\n        matches.push(node);\n      }\n      _queryElementChildren(node, predicate, matches);\n    }\n  });\n}\n/**\n * @param {?} parentNode\n * @param {?} predicate\n * @param {?} matches\n * @return {?}\n */\nfunction _queryNodeChildren(\n    parentNode: DebugNode, predicate: Predicate<DebugNode>, matches: DebugNode[]) {\n  if (parentNode instanceof DebugElement) {\n    parentNode.childNodes.forEach(node => {\n      if (predicate(node)) {\n        matches.push(node);\n      }\n      if (node instanceof DebugElement) {\n        _queryNodeChildren(node, predicate, matches);\n      }\n    });\n  }\n}\n\n// Need to keep the nodes in a global Map so that multiple angular apps are supported.\nconst /** @type {?} */ _nativeNodeToDebugNode = new Map<any, DebugNode>();\n/**\n * \\@experimental\n * @param {?} nativeNode\n * @return {?}\n */\nexport function getDebugNode(nativeNode: any): DebugNode|null {\n  return _nativeNodeToDebugNode.get(nativeNode) || null;\n}\n/**\n * @return {?}\n */\nexport function getAllDebugNodes(): DebugNode[] {\n  return Array.from(_nativeNodeToDebugNode.values());\n}\n/**\n * @param {?} node\n * @return {?}\n */\nexport function indexDebugNode(node: DebugNode) {\n  _nativeNodeToDebugNode.set(node.nativeNode, node);\n}\n/**\n * @param {?} node\n * @return {?}\n */\nexport function removeDebugNodeFromIndex(node: DebugNode) {\n  _nativeNodeToDebugNode.delete(node.nativeNode);\n}\n\n/**\n * A boolean-valued function over a value, possibly including context information\n * regarding that value's position in an array.\n *\n * @experimental All debugging apis are currently experimental.\n */\nexport interface Predicate<T> { (value: T): boolean; }\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {getSymbolIterator, looseIdentical} from '../util';\n/**\n * @param {?} a\n * @param {?} b\n * @return {?}\n */\nexport function devModeEqual(a: any, b: any): boolean {\n  const /** @type {?} */ isListLikeIterableA = isListLikeIterable(a);\n  const /** @type {?} */ isListLikeIterableB = isListLikeIterable(b);\n  if (isListLikeIterableA && isListLikeIterableB) {\n    return areIterablesEqual(a, b, devModeEqual);\n  } else {\n    const /** @type {?} */ isAObject = a && (typeof a === 'object' || typeof a === 'function');\n    const /** @type {?} */ isBObject = b && (typeof b === 'object' || typeof b === 'function');\n    if (!isListLikeIterableA && isAObject && !isListLikeIterableB && isBObject) {\n      return true;\n    } else {\n      return looseIdentical(a, b);\n    }\n  }\n}\n/**\n * Indicates that the result of a {\\@link Pipe} transformation has changed even though the\n * reference\n * has not changed.\n * \n * The wrapped value will be unwrapped by change detection, and the unwrapped value will be stored.\n * \n * Example:\n * \n * ```\n * if (this._latestValue === this._latestReturnedValue) {\n *    return this._latestReturnedValue;\n *  } else {\n *    this._latestReturnedValue = this._latestValue;\n *    return WrappedValue.wrap(this._latestValue); // this will force update\n *  }\n * ```\n * \\@stable\n */\nexport class WrappedValue {\n/**\n * @param {?} wrapped\n */\nconstructor(public wrapped: any) {}\n/**\n * @param {?} value\n * @return {?}\n */\nstatic wrap(value: any): WrappedValue { return new WrappedValue(value); }\n}\n\nfunction WrappedValue_tsickle_Closure_declarations() {\n/** @type {?} */\nWrappedValue.prototype.wrapped;\n}\n\n/**\n * Helper class for unwrapping WrappedValue s\n */\nexport class ValueUnwrapper {\npublic hasWrappedValue = false;\n/**\n * @param {?} value\n * @return {?}\n */\nunwrap(value: any): any {\n    if (value instanceof WrappedValue) {\n      this.hasWrappedValue = true;\n      return value.wrapped;\n    }\n    return value;\n  }\n/**\n * @return {?}\n */\nreset() { this.hasWrappedValue = false; }\n}\n\nfunction ValueUnwrapper_tsickle_Closure_declarations() {\n/** @type {?} */\nValueUnwrapper.prototype.hasWrappedValue;\n}\n\n/**\n * Represents a basic change from a previous to a new value.\n * \\@stable\n */\nexport class SimpleChange {\n/**\n * @param {?} previousValue\n * @param {?} currentValue\n * @param {?} firstChange\n */\nconstructor(public previousValue: any,\npublic currentValue: any,\npublic firstChange: boolean) {}\n/**\n * Check whether the new value is the first value assigned.\n * @return {?}\n */\nisFirstChange(): boolean { return this.firstChange; }\n}\n\nfunction SimpleChange_tsickle_Closure_declarations() {\n/** @type {?} */\nSimpleChange.prototype.previousValue;\n/** @type {?} */\nSimpleChange.prototype.currentValue;\n/** @type {?} */\nSimpleChange.prototype.firstChange;\n}\n\n/**\n * @param {?} obj\n * @return {?}\n */\nexport function isListLikeIterable(obj: any): boolean {\n  if (!isJsObject(obj)) return false;\n  return Array.isArray(obj) ||\n      (!(obj instanceof Map) &&      // JS Map are iterables but return entries as [k, v]\n       getSymbolIterator() in obj);  // JS Iterable have a Symbol.iterator prop\n}\n/**\n * @param {?} a\n * @param {?} b\n * @param {?} comparator\n * @return {?}\n */\nexport function areIterablesEqual(\n    a: any, b: any, comparator: (a: any, b: any) => boolean): boolean {\n  const /** @type {?} */ iterator1 = a[getSymbolIterator()]();\n  const /** @type {?} */ iterator2 = b[getSymbolIterator()]();\n\n  while (true) {\n    const /** @type {?} */ item1 = iterator1.next();\n    const /** @type {?} */ item2 = iterator2.next();\n    if (item1.done && item2.done) return true;\n    if (item1.done || item2.done) return false;\n    if (!comparator(item1.value, item2.value)) return false;\n  }\n}\n/**\n * @param {?} obj\n * @param {?} fn\n * @return {?}\n */\nexport function iterateListLike(obj: any, fn: (p: any) => any) {\n  if (Array.isArray(obj)) {\n    for (let /** @type {?} */ i = 0; i < obj.length; i++) {\n      fn(obj[i]);\n    }\n  } else {\n    const /** @type {?} */ iterator = obj[getSymbolIterator()]();\n    let /** @type {?} */ item: any;\n    while (!((item = iterator.next()).done)) {\n      fn(item.value);\n    }\n  }\n}\n/**\n * @param {?} o\n * @return {?}\n */\nexport function isJsObject(o: any): boolean {\n  return o !== null && (typeof o === 'function' || typeof o === 'object');\n}\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = Object.setPrototypeOf ||\r\n    ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n    function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = Object.assign || function __assign(t) {\r\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n        s = arguments[i];\r\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n    }\r\n    return t;\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = y[op[0] & 2 ? \"return\" : op[0] ? \"throw\" : \"next\"]) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [0, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);  }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { if (o[n]) i[n] = function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; }; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator];\r\n    return m ? m.call(o) : typeof __values === \"function\" ? __values(o) : o[Symbol.iterator]();\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n","declare let global: any;\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\ndeclare var WorkerGlobalScope: any;\n// CommonJS / Node have global context exposed as \"global\" variable.\n// We don't want to include the whole node.d.ts this this compilation unit so we'll just fake\n// the global \"global\" var for now.\n\nconst __window = typeof window !== 'undefined' && window;\nconst __self = typeof self !== 'undefined' && typeof WorkerGlobalScope !== 'undefined' &&\n    self instanceof WorkerGlobalScope && self;\nconst __global = typeof global !== 'undefined' && global;\nconst _root: any = __window || __global || __self;\n\n// Workaround Closure Compiler restriction: The body of a goog.module cannot use throw.\n// This is needed when used with angular/tsickle which inserts a goog.module statement.\n// Wrap in IIFE\n(function () {\n  if (!_root) {\n    throw new Error('RxJS could not find any global context (window, self, global)');\n  }\n})();\n\nexport { _root as root };","import { errorObject } from './errorObject';\n\nlet tryCatchTarget: Function;\n\nfunction tryCatcher(this: any): any {\n  try {\n    return tryCatchTarget.apply(this, arguments);\n  } catch (e) {\n    errorObject.e = e;\n    return errorObject;\n  }\n}\n\nexport function tryCatch<T extends Function>(fn: T): T {\n  tryCatchTarget = fn;\n  return <any>tryCatcher;\n};\n","export function isFunction(x: any): x is Function {\n  return typeof x === 'function';\n}\n","export const isArray = Array.isArray || (<T>(x: any): x is T[] => x && typeof x.length === 'number');\n","export function isObject(x: any): x is Object {\n  return x != null && typeof x === 'object';\n}\n","// typeof any so that it we don't have to cast when comparing a result to the error object\nexport const errorObject: any = { e: {} };","/**\n * An error thrown when one or more errors have occurred during the\n * `unsubscribe` of a {@link Subscription}.\n */\nexport class UnsubscriptionError extends Error {\n  constructor(public errors: any[]) {\n    super();\n    const err: any = Error.call(this, errors ?\n      `${errors.length} errors occurred during unsubscription:\n  ${errors.map((err, i) => `${i + 1}) ${err.toString()}`).join('\\n  ')}` : '');\n    (<any> this).name = err.name = 'UnsubscriptionError';\n    (<any> this).stack = err.stack;\n    (<any> this).message = err.message;\n  }\n}\n","import { isArray } from './util/isArray';\nimport { isObject } from './util/isObject';\nimport { isFunction } from './util/isFunction';\nimport { tryCatch } from './util/tryCatch';\nimport { errorObject } from './util/errorObject';\nimport { UnsubscriptionError } from './util/UnsubscriptionError';\n\nexport interface AnonymousSubscription {\n  unsubscribe(): void;\n}\n\nexport type TeardownLogic = AnonymousSubscription | Function | void;\n\nexport interface ISubscription extends AnonymousSubscription {\n  unsubscribe(): void;\n  readonly closed: boolean;\n}\n\n/**\n * Represents a disposable resource, such as the execution of an Observable. A\n * Subscription has one important method, `unsubscribe`, that takes no argument\n * and just disposes the resource held by the subscription.\n *\n * Additionally, subscriptions may be grouped together through the `add()`\n * method, which will attach a child Subscription to the current Subscription.\n * When a Subscription is unsubscribed, all its children (and its grandchildren)\n * will be unsubscribed as well.\n *\n * @class Subscription\n */\nexport class Subscription implements ISubscription {\n  public static EMPTY: Subscription = (function(empty: any){\n    empty.closed = true;\n    return empty;\n  }(new Subscription()));\n\n  /**\n   * A flag to indicate whether this Subscription has already been unsubscribed.\n   * @type {boolean}\n   */\n  public closed: boolean = false;\n\n  protected _parent: Subscription = null;\n  protected _parents: Subscription[] = null;\n  private _subscriptions: ISubscription[] = null;\n\n  /**\n   * @param {function(): void} [unsubscribe] A function describing how to\n   * perform the disposal of resources when the `unsubscribe` method is called.\n   */\n  constructor(unsubscribe?: () => void) {\n    if (unsubscribe) {\n      (<any> this)._unsubscribe = unsubscribe;\n    }\n  }\n\n  /**\n   * Disposes the resources held by the subscription. May, for instance, cancel\n   * an ongoing Observable execution or cancel any other type of work that\n   * started when the Subscription was created.\n   * @return {void}\n   */\n  unsubscribe(): void {\n    let hasErrors = false;\n    let errors: any[];\n\n    if (this.closed) {\n      return;\n    }\n\n    let { _parent, _parents, _unsubscribe, _subscriptions } = (<any> this);\n\n    this.closed = true;\n    this._parent = null;\n    this._parents = null;\n    // null out _subscriptions first so any child subscriptions that attempt\n    // to remove themselves from this subscription will noop\n    this._subscriptions = null;\n\n    let index = -1;\n    let len = _parents ? _parents.length : 0;\n\n    // if this._parent is null, then so is this._parents, and we\n    // don't have to remove ourselves from any parent subscriptions.\n    while (_parent) {\n      _parent.remove(this);\n      // if this._parents is null or index >= len,\n      // then _parent is set to null, and the loop exits\n      _parent = ++index < len && _parents[index] || null;\n    }\n\n    if (isFunction(_unsubscribe)) {\n      let trial = tryCatch(_unsubscribe).call(this);\n      if (trial === errorObject) {\n        hasErrors = true;\n        errors = errors || (\n          errorObject.e instanceof UnsubscriptionError ?\n            flattenUnsubscriptionErrors(errorObject.e.errors) : [errorObject.e]\n        );\n      }\n    }\n\n    if (isArray(_subscriptions)) {\n\n      index = -1;\n      len = _subscriptions.length;\n\n      while (++index < len) {\n        const sub = _subscriptions[index];\n        if (isObject(sub)) {\n          let trial = tryCatch(sub.unsubscribe).call(sub);\n          if (trial === errorObject) {\n            hasErrors = true;\n            errors = errors || [];\n            let err = errorObject.e;\n            if (err instanceof UnsubscriptionError) {\n              errors = errors.concat(flattenUnsubscriptionErrors(err.errors));\n            } else {\n              errors.push(err);\n            }\n          }\n        }\n      }\n    }\n\n    if (hasErrors) {\n      throw new UnsubscriptionError(errors);\n    }\n  }\n\n  /**\n   * Adds a tear down to be called during the unsubscribe() of this\n   * Subscription.\n   *\n   * If the tear down being added is a subscription that is already\n   * unsubscribed, is the same reference `add` is being called on, or is\n   * `Subscription.EMPTY`, it will not be added.\n   *\n   * If this subscription is already in an `closed` state, the passed\n   * tear down logic will be executed immediately.\n   *\n   * @param {TeardownLogic} teardown The additional logic to execute on\n   * teardown.\n   * @return {Subscription} Returns the Subscription used or created to be\n   * added to the inner subscriptions list. This Subscription can be used with\n   * `remove()` to remove the passed teardown logic from the inner subscriptions\n   * list.\n   */\n  add(teardown: TeardownLogic): Subscription {\n    if (!teardown || (teardown === Subscription.EMPTY)) {\n      return Subscription.EMPTY;\n    }\n\n    if (teardown === this) {\n      return this;\n    }\n\n    let subscription = (<Subscription> teardown);\n\n    switch (typeof teardown) {\n      case 'function':\n        subscription = new Subscription(<(() => void) > teardown);\n      case 'object':\n        if (subscription.closed || typeof subscription.unsubscribe !== 'function') {\n          return subscription;\n        } else if (this.closed) {\n          subscription.unsubscribe();\n          return subscription;\n        } else if (typeof subscription._addParent !== 'function' /* quack quack */) {\n          const tmp = subscription;\n          subscription = new Subscription();\n          subscription._subscriptions = [tmp];\n        }\n        break;\n      default:\n        throw new Error('unrecognized teardown ' + teardown + ' added to Subscription.');\n    }\n\n    const subscriptions = this._subscriptions || (this._subscriptions = []);\n\n    subscriptions.push(subscription);\n    subscription._addParent(this);\n\n    return subscription;\n  }\n\n  /**\n   * Removes a Subscription from the internal list of subscriptions that will\n   * unsubscribe during the unsubscribe process of this Subscription.\n   * @param {Subscription} subscription The subscription to remove.\n   * @return {void}\n   */\n  remove(subscription: Subscription): void {\n    const subscriptions = this._subscriptions;\n    if (subscriptions) {\n      const subscriptionIndex = subscriptions.indexOf(subscription);\n      if (subscriptionIndex !== -1) {\n        subscriptions.splice(subscriptionIndex, 1);\n      }\n    }\n  }\n\n  private _addParent(parent: Subscription) {\n    let { _parent, _parents } = this;\n    if (!_parent || _parent === parent) {\n      // If we don't have a parent, or the new parent is the same as the\n      // current parent, then set this._parent to the new parent.\n      this._parent = parent;\n    } else if (!_parents) {\n      // If there's already one parent, but not multiple, allocate an Array to\n      // store the rest of the parent Subscriptions.\n      this._parents = [parent];\n    } else if (_parents.indexOf(parent) === -1) {\n      // Only add the new parent to the _parents list if it's not already there.\n      _parents.push(parent);\n    }\n  }\n}\n\nfunction flattenUnsubscriptionErrors(errors: any[]) {\n return errors.reduce((errs, err) => errs.concat((err instanceof UnsubscriptionError) ? err.errors : err), []);\n}\n","export interface NextObserver<T> {\n  closed?: boolean;\n  next: (value: T) => void;\n  error?: (err: any) => void;\n  complete?: () => void;\n}\n\nexport interface ErrorObserver<T> {\n  closed?: boolean;\n  next?: (value: T) => void;\n  error: (err: any) => void;\n  complete?: () => void;\n}\n\nexport interface CompletionObserver<T> {\n  closed?: boolean;\n  next?: (value: T) => void;\n  error?: (err: any) => void;\n  complete: () => void;\n}\n\nexport type PartialObserver<T> = NextObserver<T> | ErrorObserver<T> | CompletionObserver<T>;\n\nexport interface Observer<T> {\n  closed?: boolean;\n  next: (value: T) => void;\n  error: (err: any) => void;\n  complete: () => void;\n}\n\nexport const empty: Observer<any> = {\n  closed: true,\n  next(value: any): void { /* noop */},\n  error(err: any): void { throw err; },\n  complete(): void { /*noop*/ }\n};\n","import { root } from '../util/root';\n\nconst Symbol: any = root.Symbol;\n\nexport const rxSubscriber = (typeof Symbol === 'function' && typeof Symbol.for === 'function') ?\n  Symbol.for('rxSubscriber') : '@@rxSubscriber';\n\n/**\n * @deprecated use rxSubscriber instead\n */\nexport const $$rxSubscriber = rxSubscriber;\n","import { isFunction } from './util/isFunction';\nimport { Observer, PartialObserver } from './Observer';\nimport { Subscription } from './Subscription';\nimport { empty as emptyObserver } from './Observer';\nimport { rxSubscriber as rxSubscriberSymbol } from './symbol/rxSubscriber';\n\n/**\n * Implements the {@link Observer} interface and extends the\n * {@link Subscription} class. While the {@link Observer} is the public API for\n * consuming the values of an {@link Observable}, all Observers get converted to\n * a Subscriber, in order to provide Subscription-like capabilities such as\n * `unsubscribe`. Subscriber is a common type in RxJS, and crucial for\n * implementing operators, but it is rarely used as a public API.\n *\n * @class Subscriber<T>\n */\nexport class Subscriber<T> extends Subscription implements Observer<T> {\n\n  [rxSubscriberSymbol]() { return this; }\n\n  /**\n   * A static factory for a Subscriber, given a (potentially partial) definition\n   * of an Observer.\n   * @param {function(x: ?T): void} [next] The `next` callback of an Observer.\n   * @param {function(e: ?any): void} [error] The `error` callback of an\n   * Observer.\n   * @param {function(): void} [complete] The `complete` callback of an\n   * Observer.\n   * @return {Subscriber<T>} A Subscriber wrapping the (partially defined)\n   * Observer represented by the given arguments.\n   */\n  static create<T>(next?: (x?: T) => void,\n                   error?: (e?: any) => void,\n                   complete?: () => void): Subscriber<T> {\n    const subscriber = new Subscriber(next, error, complete);\n    subscriber.syncErrorThrowable = false;\n    return subscriber;\n  }\n\n  public syncErrorValue: any = null;\n  public syncErrorThrown: boolean = false;\n  public syncErrorThrowable: boolean = false;\n\n  protected isStopped: boolean = false;\n  protected destination: PartialObserver<any>; // this `any` is the escape hatch to erase extra type param (e.g. R)\n\n  /**\n   * @param {Observer|function(value: T): void} [destinationOrNext] A partially\n   * defined Observer or a `next` callback function.\n   * @param {function(e: ?any): void} [error] The `error` callback of an\n   * Observer.\n   * @param {function(): void} [complete] The `complete` callback of an\n   * Observer.\n   */\n  constructor(destinationOrNext?: PartialObserver<any> | ((value: T) => void),\n              error?: (e?: any) => void,\n              complete?: () => void) {\n    super();\n\n    switch (arguments.length) {\n      case 0:\n        this.destination = emptyObserver;\n        break;\n      case 1:\n        if (!destinationOrNext) {\n          this.destination = emptyObserver;\n          break;\n        }\n        if (typeof destinationOrNext === 'object') {\n          if (destinationOrNext instanceof Subscriber) {\n            this.destination = (<Subscriber<any>> destinationOrNext);\n            (<any> this.destination).add(this);\n          } else {\n            this.syncErrorThrowable = true;\n            this.destination = new SafeSubscriber<T>(this, <PartialObserver<any>> destinationOrNext);\n          }\n          break;\n        }\n      default:\n        this.syncErrorThrowable = true;\n        this.destination = new SafeSubscriber<T>(this, <((value: T) => void)> destinationOrNext, error, complete);\n        break;\n    }\n  }\n\n  /**\n   * The {@link Observer} callback to receive notifications of type `next` from\n   * the Observable, with a value. The Observable may call this method 0 or more\n   * times.\n   * @param {T} [value] The `next` value.\n   * @return {void}\n   */\n  next(value?: T): void {\n    if (!this.isStopped) {\n      this._next(value);\n    }\n  }\n\n  /**\n   * The {@link Observer} callback to receive notifications of type `error` from\n   * the Observable, with an attached {@link Error}. Notifies the Observer that\n   * the Observable has experienced an error condition.\n   * @param {any} [err] The `error` exception.\n   * @return {void}\n   */\n  error(err?: any): void {\n    if (!this.isStopped) {\n      this.isStopped = true;\n      this._error(err);\n    }\n  }\n\n  /**\n   * The {@link Observer} callback to receive a valueless notification of type\n   * `complete` from the Observable. Notifies the Observer that the Observable\n   * has finished sending push-based notifications.\n   * @return {void}\n   */\n  complete(): void {\n    if (!this.isStopped) {\n      this.isStopped = true;\n      this._complete();\n    }\n  }\n\n  unsubscribe(): void {\n    if (this.closed) {\n      return;\n    }\n    this.isStopped = true;\n    super.unsubscribe();\n  }\n\n  protected _next(value: T): void {\n    this.destination.next(value);\n  }\n\n  protected _error(err: any): void {\n    this.destination.error(err);\n    this.unsubscribe();\n  }\n\n  protected _complete(): void {\n    this.destination.complete();\n    this.unsubscribe();\n  }\n\n  protected _unsubscribeAndRecycle(): Subscriber<T> {\n    const { _parent, _parents } = this;\n    this._parent = null;\n    this._parents = null;\n    this.unsubscribe();\n    this.closed = false;\n    this.isStopped = false;\n    this._parent = _parent;\n    this._parents = _parents;\n    return this;\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SafeSubscriber<T> extends Subscriber<T> {\n\n  private _context: any;\n\n  constructor(private _parentSubscriber: Subscriber<T>,\n              observerOrNext?: PartialObserver<T> | ((value: T) => void),\n              error?: (e?: any) => void,\n              complete?: () => void) {\n    super();\n\n    let next: ((value: T) => void);\n    let context: any = this;\n\n    if (isFunction(observerOrNext)) {\n      next = (<((value: T) => void)> observerOrNext);\n    } else if (observerOrNext) {\n      next = (<PartialObserver<T>> observerOrNext).next;\n      error = (<PartialObserver<T>> observerOrNext).error;\n      complete = (<PartialObserver<T>> observerOrNext).complete;\n      if (observerOrNext !== emptyObserver) {\n        context = Object.create(observerOrNext);\n        if (isFunction(context.unsubscribe)) {\n          this.add(<() => void> context.unsubscribe.bind(context));\n        }\n        context.unsubscribe = this.unsubscribe.bind(this);\n      }\n    }\n\n    this._context = context;\n    this._next = next;\n    this._error = error;\n    this._complete = complete;\n  }\n\n  next(value?: T): void {\n    if (!this.isStopped && this._next) {\n      const { _parentSubscriber } = this;\n      if (!_parentSubscriber.syncErrorThrowable) {\n        this.__tryOrUnsub(this._next, value);\n      } else if (this.__tryOrSetError(_parentSubscriber, this._next, value)) {\n        this.unsubscribe();\n      }\n    }\n  }\n\n  error(err?: any): void {\n    if (!this.isStopped) {\n      const { _parentSubscriber } = this;\n      if (this._error) {\n        if (!_parentSubscriber.syncErrorThrowable) {\n          this.__tryOrUnsub(this._error, err);\n          this.unsubscribe();\n        } else {\n          this.__tryOrSetError(_parentSubscriber, this._error, err);\n          this.unsubscribe();\n        }\n      } else if (!_parentSubscriber.syncErrorThrowable) {\n        this.unsubscribe();\n        throw err;\n      } else {\n        _parentSubscriber.syncErrorValue = err;\n        _parentSubscriber.syncErrorThrown = true;\n        this.unsubscribe();\n      }\n    }\n  }\n\n  complete(): void {\n    if (!this.isStopped) {\n      const { _parentSubscriber } = this;\n      if (this._complete) {\n        const wrappedComplete = () => this._complete.call(this._context);\n\n        if (!_parentSubscriber.syncErrorThrowable) {\n          this.__tryOrUnsub(wrappedComplete);\n          this.unsubscribe();\n        } else {\n          this.__tryOrSetError(_parentSubscriber, wrappedComplete);\n          this.unsubscribe();\n        }\n      } else {\n        this.unsubscribe();\n      }\n    }\n  }\n\n  private __tryOrUnsub(fn: Function, value?: any): void {\n    try {\n      fn.call(this._context, value);\n    } catch (err) {\n      this.unsubscribe();\n      throw err;\n    }\n  }\n\n  private __tryOrSetError(parent: Subscriber<T>, fn: Function, value?: any): boolean {\n    try {\n      fn.call(this._context, value);\n    } catch (err) {\n      parent.syncErrorValue = err;\n      parent.syncErrorThrown = true;\n      return true;\n    }\n    return false;\n  }\n\n  protected _unsubscribe(): void {\n    const { _parentSubscriber } = this;\n    this._context = null;\n    this._parentSubscriber = null;\n    _parentSubscriber.unsubscribe();\n  }\n}\n","import { Subscriber } from '../Subscriber';\nimport { rxSubscriber as rxSubscriberSymbol } from '../symbol/rxSubscriber';\nimport { PartialObserver, empty as emptyObserver } from '../Observer';\n\nexport function toSubscriber<T>(\n  nextOrObserver?: PartialObserver<T> | ((value: T) => void),\n  error?: (error: any) => void,\n  complete?: () => void): Subscriber<T> {\n\n  if (nextOrObserver) {\n    if (nextOrObserver instanceof Subscriber) {\n      return (<Subscriber<T>> nextOrObserver);\n    }\n\n    if (nextOrObserver[rxSubscriberSymbol]) {\n      return nextOrObserver[rxSubscriberSymbol]();\n    }\n  }\n\n  if (!nextOrObserver && !error && !complete) {\n    return new Subscriber(emptyObserver);\n  }\n\n  return new Subscriber(nextOrObserver, error, complete);\n}\n","import { root } from '../util/root';\n\nexport function getSymbolObservable(context: any) {\n  let $$observable: any;\n  let Symbol = context.Symbol;\n\n  if (typeof Symbol === 'function') {\n    if (Symbol.observable) {\n      $$observable = Symbol.observable;\n    } else {\n        $$observable = Symbol('observable');\n        Symbol.observable = $$observable;\n    }\n  } else {\n    $$observable = '@@observable';\n  }\n\n  return $$observable;\n}\n\nexport const observable = getSymbolObservable(root);\n\n/**\n * @deprecated use observable instead\n */\nexport const $$observable = observable;\n","/* tslint:disable:no-empty */\nexport function noop() { }\n","import { noop } from './noop';\nimport { UnaryFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function pipe<T>(): UnaryFunction<T, T>;\nexport function pipe<T, A>(op1: UnaryFunction<T, A>): UnaryFunction<T, A>;\nexport function pipe<T, A, B>(op1: UnaryFunction<T, A>, op2: UnaryFunction<A, B>): UnaryFunction<T, B>;\nexport function pipe<T, A, B, C>(op1: UnaryFunction<T, A>, op2: UnaryFunction<A, B>, op3: UnaryFunction<B, C>): UnaryFunction<T, C>;\nexport function pipe<T, A, B, C, D>(op1: UnaryFunction<T, A>, op2: UnaryFunction<A, B>, op3: UnaryFunction<B, C>, op4: UnaryFunction<C, D>): UnaryFunction<T, D>;\nexport function pipe<T, A, B, C, D, E>(op1: UnaryFunction<T, A>, op2: UnaryFunction<A, B>, op3: UnaryFunction<B, C>, op4: UnaryFunction<C, D>, op5: UnaryFunction<D, E>): UnaryFunction<T, E>;\nexport function pipe<T, A, B, C, D, E, F>(op1: UnaryFunction<T, A>, op2: UnaryFunction<A, B>, op3: UnaryFunction<B, C>, op4: UnaryFunction<C, D>, op5: UnaryFunction<D, E>, op6: UnaryFunction<E, F>): UnaryFunction<T, F>;\nexport function pipe<T, A, B, C, D, E, F, G>(op1: UnaryFunction<T, A>, op2: UnaryFunction<A, B>, op3: UnaryFunction<B, C>, op4: UnaryFunction<C, D>, op5: UnaryFunction<D, E>, op6: UnaryFunction<E, F>, op7: UnaryFunction<F, G>): UnaryFunction<T, G>;\nexport function pipe<T, A, B, C, D, E, F, G, H>(op1: UnaryFunction<T, A>, op2: UnaryFunction<A, B>, op3: UnaryFunction<B, C>, op4: UnaryFunction<C, D>, op5: UnaryFunction<D, E>, op6: UnaryFunction<E, F>, op7: UnaryFunction<F, G>, op8: UnaryFunction<G, H>): UnaryFunction<T, H>;\nexport function pipe<T, A, B, C, D, E, F, G, H, I>(op1: UnaryFunction<T, A>, op2: UnaryFunction<A, B>, op3: UnaryFunction<B, C>, op4: UnaryFunction<C, D>, op5: UnaryFunction<D, E>, op6: UnaryFunction<E, F>, op7: UnaryFunction<F, G>, op8: UnaryFunction<G, H>, op9: UnaryFunction<H, I>): UnaryFunction<T, I>;\n/* tslint:enable:max-line-length */\n\nexport function pipe<T, R>(...fns: Array<UnaryFunction<T, R>>): UnaryFunction<T, R> {\n  return pipeFromArray(fns);\n}\n\n/* @internal */\nexport function pipeFromArray<T, R>(fns: Array<UnaryFunction<T, R>>): UnaryFunction<T, R> {\n  if (!fns) {\n    return noop as UnaryFunction<any, any>;\n  }\n\n  if (fns.length === 1) {\n    return fns[0];\n  }\n\n  return function piped(input: T): R {\n    return fns.reduce((prev: any, fn: UnaryFunction<T, R>) => fn(prev), input);\n  };\n}\n","import { PartialObserver } from './Observer';\nimport { Operator } from './Operator';\nimport { Subscriber } from './Subscriber';\nimport { Subscription, AnonymousSubscription, TeardownLogic } from './Subscription';\nimport { root } from './util/root';\nimport { toSubscriber } from './util/toSubscriber';\nimport { IfObservable } from './observable/IfObservable';\nimport { ErrorObservable } from './observable/ErrorObservable';\nimport { observable as Symbol_observable } from './symbol/observable';\nimport { OperatorFunction } from './interfaces';\nimport { pipeFromArray } from './util/pipe';\n\nexport interface Subscribable<T> {\n  subscribe(observerOrNext?: PartialObserver<T> | ((value: T) => void),\n            error?: (error: any) => void,\n            complete?: () => void): AnonymousSubscription;\n}\n\nexport type SubscribableOrPromise<T> = Subscribable<T> | PromiseLike<T>;\nexport type ObservableInput<T> = SubscribableOrPromise<T> | ArrayLike<T>;\n\n/**\n * A representation of any set of values over any amount of time. This is the most basic building block\n * of RxJS.\n *\n * @class Observable<T>\n */\nexport class Observable<T> implements Subscribable<T> {\n\n  public _isScalar: boolean = false;\n\n  protected source: Observable<any>;\n  protected operator: Operator<any, T>;\n\n  /**\n   * @constructor\n   * @param {Function} subscribe the function that is called when the Observable is\n   * initially subscribed to. This function is given a Subscriber, to which new values\n   * can be `next`ed, or an `error` method can be called to raise an error, or\n   * `complete` can be called to notify of a successful completion.\n   */\n  constructor(subscribe?: (this: Observable<T>, subscriber: Subscriber<T>) => TeardownLogic) {\n    if (subscribe) {\n      this._subscribe = subscribe;\n    }\n  }\n\n  // HACK: Since TypeScript inherits static properties too, we have to\n  // fight against TypeScript here so Subject can have a different static create signature\n  /**\n   * Creates a new cold Observable by calling the Observable constructor\n   * @static true\n   * @owner Observable\n   * @method create\n   * @param {Function} subscribe? the subscriber function to be passed to the Observable constructor\n   * @return {Observable} a new cold observable\n   */\n  static create: Function = <T>(subscribe?: (subscriber: Subscriber<T>) => TeardownLogic) => {\n    return new Observable<T>(subscribe);\n  }\n\n  /**\n   * Creates a new Observable, with this Observable as the source, and the passed\n   * operator defined as the new observable's operator.\n   * @method lift\n   * @param {Operator} operator the operator defining the operation to take on the observable\n   * @return {Observable} a new observable with the Operator applied\n   */\n  lift<R>(operator: Operator<T, R>): Observable<R> {\n    const observable = new Observable<R>();\n    observable.source = this;\n    observable.operator = operator;\n    return observable;\n  }\n\n  subscribe(): Subscription;\n  subscribe(observer: PartialObserver<T>): Subscription;\n  subscribe(next?: (value: T) => void, error?: (error: any) => void, complete?: () => void): Subscription;\n  /**\n   * Invokes an execution of an Observable and registers Observer handlers for notifications it will emit.\n   *\n   * <span class=\"informal\">Use it when you have all these Observables, but still nothing is happening.</span>\n   *\n   * `subscribe` is not a regular operator, but a method that calls Observable's internal `subscribe` function. It\n   * might be for example a function that you passed to a {@link create} static factory, but most of the time it is\n   * a library implementation, which defines what and when will be emitted by an Observable. This means that calling\n   * `subscribe` is actually the moment when Observable starts its work, not when it is created, as it is often\n   * thought.\n   *\n   * Apart from starting the execution of an Observable, this method allows you to listen for values\n   * that an Observable emits, as well as for when it completes or errors. You can achieve this in two\n   * following ways.\n   *\n   * The first way is creating an object that implements {@link Observer} interface. It should have methods\n   * defined by that interface, but note that it should be just a regular JavaScript object, which you can create\n   * yourself in any way you want (ES6 class, classic function constructor, object literal etc.). In particular do\n   * not attempt to use any RxJS implementation details to create Observers - you don't need them. Remember also\n   * that your object does not have to implement all methods. If you find yourself creating a method that doesn't\n   * do anything, you can simply omit it. Note however, that if `error` method is not provided, all errors will\n   * be left uncaught.\n   *\n   * The second way is to give up on Observer object altogether and simply provide callback functions in place of its methods.\n   * This means you can provide three functions as arguments to `subscribe`, where first function is equivalent\n   * of a `next` method, second of an `error` method and third of a `complete` method. Just as in case of Observer,\n   * if you do not need to listen for something, you can omit a function, preferably by passing `undefined` or `null`,\n   * since `subscribe` recognizes these functions by where they were placed in function call. When it comes\n   * to `error` function, just as before, if not provided, errors emitted by an Observable will be thrown.\n   *\n   * Whatever style of calling `subscribe` you use, in both cases it returns a Subscription object.\n   * This object allows you to call `unsubscribe` on it, which in turn will stop work that an Observable does and will clean\n   * up all resources that an Observable used. Note that cancelling a subscription will not call `complete` callback\n   * provided to `subscribe` function, which is reserved for a regular completion signal that comes from an Observable.\n   *\n   * Remember that callbacks provided to `subscribe` are not guaranteed to be called asynchronously.\n   * It is an Observable itself that decides when these functions will be called. For example {@link of}\n   * by default emits all its values synchronously. Always check documentation for how given Observable\n   * will behave when subscribed and if its default behavior can be modified with a {@link Scheduler}.\n   *\n   * @example <caption>Subscribe with an Observer</caption>\n   * const sumObserver = {\n   *   sum: 0,\n   *   next(value) {\n   *     console.log('Adding: ' + value);\n   *     this.sum = this.sum + value;\n   *   },\n   *   error() { // We actually could just remove this method,\n   *   },        // since we do not really care about errors right now.\n   *   complete() {\n   *     console.log('Sum equals: ' + this.sum);\n   *   }\n   * };\n   *\n   * Rx.Observable.of(1, 2, 3) // Synchronously emits 1, 2, 3 and then completes.\n   * .subscribe(sumObserver);\n   *\n   * // Logs:\n   * // \"Adding: 1\"\n   * // \"Adding: 2\"\n   * // \"Adding: 3\"\n   * // \"Sum equals: 6\"\n   *\n   *\n   * @example <caption>Subscribe with functions</caption>\n   * let sum = 0;\n   *\n   * Rx.Observable.of(1, 2, 3)\n   * .subscribe(\n   *   function(value) {\n   *     console.log('Adding: ' + value);\n   *     sum = sum + value;\n   *   },\n   *   undefined,\n   *   function() {\n   *     console.log('Sum equals: ' + sum);\n   *   }\n   * );\n   *\n   * // Logs:\n   * // \"Adding: 1\"\n   * // \"Adding: 2\"\n   * // \"Adding: 3\"\n   * // \"Sum equals: 6\"\n   *\n   *\n   * @example <caption>Cancel a subscription</caption>\n   * const subscription = Rx.Observable.interval(1000).subscribe(\n   *   num => console.log(num),\n   *   undefined,\n   *   () => console.log('completed!') // Will not be called, even\n   * );                                // when cancelling subscription\n   *\n   *\n   * setTimeout(() => {\n   *   subscription.unsubscribe();\n   *   console.log('unsubscribed!');\n   * }, 2500);\n   *\n   * // Logs:\n   * // 0 after 1s\n   * // 1 after 2s\n   * // \"unsubscribed!\" after 2.5s\n   *\n   *\n   * @param {Observer|Function} observerOrNext (optional) Either an observer with methods to be called,\n   *  or the first of three possible handlers, which is the handler for each value emitted from the subscribed\n   *  Observable.\n   * @param {Function} error (optional) A handler for a terminal event resulting from an error. If no error handler is provided,\n   *  the error will be thrown as unhandled.\n   * @param {Function} complete (optional) A handler for a terminal event resulting from successful completion.\n   * @return {ISubscription} a subscription reference to the registered handlers\n   * @method subscribe\n   */\n  subscribe(observerOrNext?: PartialObserver<T> | ((value: T) => void),\n            error?: (error: any) => void,\n            complete?: () => void): Subscription {\n\n    const { operator } = this;\n    const sink = toSubscriber(observerOrNext, error, complete);\n\n    if (operator) {\n      operator.call(sink, this.source);\n    } else {\n      sink.add(this.source ? this._subscribe(sink) : this._trySubscribe(sink));\n    }\n\n    if (sink.syncErrorThrowable) {\n      sink.syncErrorThrowable = false;\n      if (sink.syncErrorThrown) {\n        throw sink.syncErrorValue;\n      }\n    }\n\n    return sink;\n  }\n\n  protected _trySubscribe(sink: Subscriber<T>): TeardownLogic {\n    try {\n      return this._subscribe(sink);\n    } catch (err) {\n      sink.syncErrorThrown = true;\n      sink.syncErrorValue = err;\n      sink.error(err);\n    }\n  }\n\n  /**\n   * @method forEach\n   * @param {Function} next a handler for each value emitted by the observable\n   * @param {PromiseConstructor} [PromiseCtor] a constructor function used to instantiate the Promise\n   * @return {Promise} a promise that either resolves on observable completion or\n   *  rejects with the handled error\n   */\n  forEach(next: (value: T) => void, PromiseCtor?: typeof Promise): Promise<void> {\n    if (!PromiseCtor) {\n      if (root.Rx && root.Rx.config && root.Rx.config.Promise) {\n        PromiseCtor = root.Rx.config.Promise;\n      } else if (root.Promise) {\n        PromiseCtor = root.Promise;\n      }\n    }\n\n    if (!PromiseCtor) {\n      throw new Error('no Promise impl found');\n    }\n\n    return new PromiseCtor<void>((resolve, reject) => {\n      // Must be declared in a separate statement to avoid a RefernceError when\n      // accessing subscription below in the closure due to Temporal Dead Zone.\n      let subscription: Subscription;\n      subscription = this.subscribe((value) => {\n        if (subscription) {\n          // if there is a subscription, then we can surmise\n          // the next handling is asynchronous. Any errors thrown\n          // need to be rejected explicitly and unsubscribe must be\n          // called manually\n          try {\n            next(value);\n          } catch (err) {\n            reject(err);\n            subscription.unsubscribe();\n          }\n        } else {\n          // if there is NO subscription, then we're getting a nexted\n          // value synchronously during subscription. We can just call it.\n          // If it errors, Observable's `subscribe` will ensure the\n          // unsubscription logic is called, then synchronously rethrow the error.\n          // After that, Promise will trap the error and send it\n          // down the rejection path.\n          next(value);\n        }\n      }, reject, resolve);\n    });\n  }\n\n  protected _subscribe(subscriber: Subscriber<any>): TeardownLogic {\n    return this.source.subscribe(subscriber);\n  }\n\n  // `if` and `throw` are special snow flakes, the compiler sees them as reserved words\n  static if: typeof IfObservable.create;\n  static throw: typeof ErrorObservable.create;\n\n  /**\n   * An interop point defined by the es7-observable spec https://github.com/zenparsing/es-observable\n   * @method Symbol.observable\n   * @return {Observable} this instance of the observable\n   */\n  [Symbol_observable]() {\n    return this;\n  }\n\n  /* tslint:disable:max-line-length */\n  pipe(): Observable<T>\n  pipe<A>(op1: OperatorFunction<T, A>): Observable<A>\n  pipe<A, B>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>): Observable<B>\n  pipe<A, B, C>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>): Observable<C>\n  pipe<A, B, C, D>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>, op4: OperatorFunction<C, D>): Observable<D>\n  pipe<A, B, C, D, E>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>, op4: OperatorFunction<C, D>, op5: OperatorFunction<D, E>): Observable<E>\n  pipe<A, B, C, D, E, F>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>, op4: OperatorFunction<C, D>, op5: OperatorFunction<D, E>, op6: OperatorFunction<E, F>): Observable<F>\n  pipe<A, B, C, D, E, F, G>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>, op4: OperatorFunction<C, D>, op5: OperatorFunction<D, E>, op6: OperatorFunction<E, F>, op7: OperatorFunction<F, G>): Observable<G>\n  pipe<A, B, C, D, E, F, G, H>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>, op4: OperatorFunction<C, D>, op5: OperatorFunction<D, E>, op6: OperatorFunction<E, F>, op7: OperatorFunction<F, G>, op8: OperatorFunction<G, H>): Observable<H>\n  pipe<A, B, C, D, E, F, G, H, I>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>, op4: OperatorFunction<C, D>, op5: OperatorFunction<D, E>, op6: OperatorFunction<E, F>, op7: OperatorFunction<F, G>, op8: OperatorFunction<G, H>, op9: OperatorFunction<H, I>): Observable<I>\n  /* tslint:enable:max-line-length */\n\n  /**\n   * Used to stitch together functional operators into a chain.\n   * @method pipe\n   * @return {Observable} the Observable result of all of the operators having\n   * been called in the order they were passed in.\n   *\n   * @example\n   *\n   * import { map, filter, scan } from 'rxjs/operators';\n   *\n   * Rx.Observable.interval(1000)\n   *   .pipe(\n   *     filter(x => x % 2 === 0),\n   *     map(x => x + x),\n   *     scan((acc, x) => acc + x)\n   *   )\n   *   .subscribe(x => console.log(x))\n   */\n  pipe<R>(...operations: OperatorFunction<T, R>[]): Observable<R> {\n    if (operations.length === 0) {\n      return this as any;\n    }\n\n    return pipeFromArray(operations)(this);\n  }\n\n  /* tslint:disable:max-line-length */\n  toPromise<T>(this: Observable<T>): Promise<T>;\n  toPromise<T>(this: Observable<T>, PromiseCtor: typeof Promise): Promise<T>;\n  toPromise<T>(this: Observable<T>, PromiseCtor: PromiseConstructorLike): Promise<T>;\n  /* tslint:enable:max-line-length */\n\n  toPromise(PromiseCtor?: PromiseConstructorLike) {\n    if (!PromiseCtor) {\n      if (root.Rx && root.Rx.config && root.Rx.config.Promise) {\n        PromiseCtor = root.Rx.config.Promise;\n      } else if (root.Promise) {\n        PromiseCtor = root.Promise;\n      }\n    }\n\n    if (!PromiseCtor) {\n      throw new Error('no Promise impl found');\n    }\n\n    return new PromiseCtor((resolve, reject) => {\n      let value: any;\n      this.subscribe((x: T) => value = x, (err: any) => reject(err), () => resolve(value));\n    }) as Promise<T>;\n  }\n}\n","import { IScheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { TeardownLogic } from '../Subscription';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class ScalarObservable<T> extends Observable<T> {\n  static create<T>(value: T, scheduler?: IScheduler): ScalarObservable<T> {\n    return new ScalarObservable(value, scheduler);\n  }\n\n  static dispatch(state: any): void {\n    const { done, value, subscriber } = state;\n\n    if (done) {\n      subscriber.complete();\n      return;\n    }\n\n    subscriber.next(value);\n    if (subscriber.closed) {\n      return;\n    }\n\n    state.done = true;\n    (<any> this).schedule(state);\n  }\n\n  _isScalar: boolean = true;\n\n  constructor(public value: T, private scheduler?: IScheduler) {\n    super();\n    if (scheduler) {\n      this._isScalar = false;\n    }\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): TeardownLogic {\n    const value = this.value;\n    const scheduler = this.scheduler;\n\n    if (scheduler) {\n      return scheduler.schedule(ScalarObservable.dispatch, 0, {\n        done: false, value, subscriber\n      });\n    } else {\n      subscriber.next(value);\n      if (!subscriber.closed) {\n        subscriber.complete();\n      }\n    }\n  }\n}\n","import { IScheduler } from '../Scheduler';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\n\nexport interface DispatchArg<T> {\n  subscriber: Subscriber<T>;\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class EmptyObservable<T> extends Observable<T> {\n\n  /**\n   * Creates an Observable that emits no items to the Observer and immediately\n   * emits a complete notification.\n   *\n   * <span class=\"informal\">Just emits 'complete', and nothing else.\n   * </span>\n   *\n   * <img src=\"./img/empty.png\" width=\"100%\">\n   *\n   * This static operator is useful for creating a simple Observable that only\n   * emits the complete notification. It can be used for composing with other\n   * Observables, such as in a {@link mergeMap}.\n   *\n   * @example <caption>Emit the number 7, then complete.</caption>\n   * var result = Rx.Observable.empty().startWith(7);\n   * result.subscribe(x => console.log(x));\n   *\n   * @example <caption>Map and flatten only odd numbers to the sequence 'a', 'b', 'c'</caption>\n   * var interval = Rx.Observable.interval(1000);\n   * var result = interval.mergeMap(x =>\n   *   x % 2 === 1 ? Rx.Observable.of('a', 'b', 'c') : Rx.Observable.empty()\n   * );\n   * result.subscribe(x => console.log(x));\n   *\n   * // Results in the following to the console:\n   * // x is equal to the count on the interval eg(0,1,2,3,...)\n   * // x will occur every 1000ms\n   * // if x % 2 is equal to 1 print abc\n   * // if x % 2 is not equal to 1 nothing will be output\n   *\n   * @see {@link create}\n   * @see {@link never}\n   * @see {@link of}\n   * @see {@link throw}\n   *\n   * @param {Scheduler} [scheduler] A {@link IScheduler} to use for scheduling\n   * the emission of the complete notification.\n   * @return {Observable} An \"empty\" Observable: emits only the complete\n   * notification.\n   * @static true\n   * @name empty\n   * @owner Observable\n   */\n  static create<T>(scheduler?: IScheduler): Observable<T> {\n    return new EmptyObservable<T>(scheduler);\n  }\n\n  static dispatch<T>(arg: DispatchArg<T>) {\n    const { subscriber } = arg;\n    subscriber.complete();\n  }\n\n  constructor(private scheduler?: IScheduler) {\n    super();\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): TeardownLogic {\n\n    const scheduler = this.scheduler;\n\n    if (scheduler) {\n      return scheduler.schedule(EmptyObservable.dispatch, 0, { subscriber });\n    } else {\n      subscriber.complete();\n    }\n  }\n}\n","import { Scheduler } from '../Scheduler';\nexport function isScheduler(value: any): value is Scheduler {\n  return value && typeof (<any>value).schedule === 'function';\n}\n","import { IScheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { ScalarObservable } from './ScalarObservable';\nimport { EmptyObservable } from './EmptyObservable';\nimport { Subscriber } from '../Subscriber';\nimport { isScheduler } from '../util/isScheduler';\nimport { TeardownLogic } from '../Subscription';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class ArrayObservable<T> extends Observable<T> {\n\n  static create<T>(array: T[], scheduler?: IScheduler): Observable<T> {\n    return new ArrayObservable(array, scheduler);\n  }\n\n  static of<T>(item1: T, scheduler?: IScheduler): Observable<T>;\n  static of<T>(item1: T, item2: T, scheduler?: IScheduler): Observable<T>;\n  static of<T>(item1: T, item2: T, item3: T, scheduler?: IScheduler): Observable<T>;\n  static of<T>(item1: T, item2: T, item3: T, item4: T, scheduler?: IScheduler): Observable<T>;\n  static of<T>(item1: T, item2: T, item3: T, item4: T, item5: T, scheduler?: IScheduler): Observable<T>;\n  static of<T>(item1: T, item2: T, item3: T, item4: T, item5: T, item6: T, scheduler?: IScheduler): Observable<T>;\n  static of<T>(...array: Array<T | IScheduler>): Observable<T>;\n  /**\n   * Creates an Observable that emits some values you specify as arguments,\n   * immediately one after the other, and then emits a complete notification.\n   *\n   * <span class=\"informal\">Emits the arguments you provide, then completes.\n   * </span>\n   *\n   * <img src=\"./img/of.png\" width=\"100%\">\n   *\n   * This static operator is useful for creating a simple Observable that only\n   * emits the arguments given, and the complete notification thereafter. It can\n   * be used for composing with other Observables, such as with {@link concat}.\n   * By default, it uses a `null` IScheduler, which means the `next`\n   * notifications are sent synchronously, although with a different IScheduler\n   * it is possible to determine when those notifications will be delivered.\n   *\n   * @example <caption>Emit 10, 20, 30, then 'a', 'b', 'c', then start ticking every second.</caption>\n   * var numbers = Rx.Observable.of(10, 20, 30);\n   * var letters = Rx.Observable.of('a', 'b', 'c');\n   * var interval = Rx.Observable.interval(1000);\n   * var result = numbers.concat(letters).concat(interval);\n   * result.subscribe(x => console.log(x));\n   *\n   * @see {@link create}\n   * @see {@link empty}\n   * @see {@link never}\n   * @see {@link throw}\n   *\n   * @param {...T} values Arguments that represent `next` values to be emitted.\n   * @param {Scheduler} [scheduler] A {@link IScheduler} to use for scheduling\n   * the emissions of the `next` notifications.\n   * @return {Observable<T>} An Observable that emits each given input value.\n   * @static true\n   * @name of\n   * @owner Observable\n   */\n  static of<T>(...array: Array<T | IScheduler>): Observable<T> {\n    let scheduler = <IScheduler>array[array.length - 1];\n    if (isScheduler(scheduler)) {\n      array.pop();\n    } else {\n      scheduler = null;\n    }\n\n    const len = array.length;\n    if (len > 1) {\n      return new ArrayObservable<T>(<any>array, scheduler);\n    } else if (len === 1) {\n      return new ScalarObservable<T>(<any>array[0], scheduler);\n    } else {\n      return new EmptyObservable<T>(scheduler);\n    }\n  }\n\n  static dispatch(state: any) {\n\n    const { array, index, count, subscriber } = state;\n\n    if (index >= count) {\n      subscriber.complete();\n      return;\n    }\n\n    subscriber.next(array[index]);\n\n    if (subscriber.closed) {\n      return;\n    }\n\n    state.index = index + 1;\n\n    (<any> this).schedule(state);\n  }\n\n  // value used if Array has one value and _isScalar\n  value: any;\n\n  constructor(private array: T[], private scheduler?: IScheduler) {\n    super();\n    if (!scheduler && array.length === 1) {\n      this._isScalar = true;\n      this.value = array[0];\n    }\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): TeardownLogic {\n    let index = 0;\n    const array = this.array;\n    const count = array.length;\n    const scheduler = this.scheduler;\n\n    if (scheduler) {\n      return scheduler.schedule(ArrayObservable.dispatch, 0, {\n        array, index, count, subscriber\n      });\n    } else {\n      for (let i = 0; i < count && !subscriber.closed; i++) {\n        subscriber.next(array[i]);\n      }\n      subscriber.complete();\n    }\n  }\n}\n","export const isArrayLike = (<T>(x: any): x is ArrayLike<T> => x && typeof x.length === 'number');","export function isPromise<T>(value: any | Promise<T>): value is Promise<T> {\n  return value && typeof (<any>value).subscribe !== 'function' && typeof (value as any).then === 'function';\n}\n","import { root } from '../util/root';\n\nexport function symbolIteratorPonyfill(root: any) {\n  const Symbol: any = root.Symbol;\n\n  if (typeof Symbol === 'function') {\n    if (!Symbol.iterator) {\n      Symbol.iterator = Symbol('iterator polyfill');\n    }\n    return Symbol.iterator;\n  } else {\n    // [for Mozilla Gecko 27-35:](https://mzl.la/2ewE1zC)\n    const { Set } = root;\n    if (Set && typeof new Set()['@@iterator'] === 'function') {\n      return '@@iterator';\n    }\n    const { Map } = root;\n    // required for compatability with es6-shim\n    if (Map) {\n      let keys = Object.getOwnPropertyNames(Map.prototype);\n      for (let i = 0; i < keys.length; ++i) {\n        let key = keys[i];\n        // according to spec, Map.prototype[@@iterator] and Map.orototype.entries must be equal.\n        if (key !== 'entries' && key !== 'size' && Map.prototype[key] === Map.prototype['entries']) {\n          return key;\n        }\n      }\n    }\n    return '@@iterator';\n  }\n}\n\nexport const iterator = symbolIteratorPonyfill(root);\n\n/**\n * @deprecated use iterator instead\n */\nexport const $$iterator = iterator;\n","import { Subscriber } from './Subscriber';\nimport { OuterSubscriber } from './OuterSubscriber';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class InnerSubscriber<T, R> extends Subscriber<R> {\n  private index: number = 0;\n\n  constructor(private parent: OuterSubscriber<T, R>, private outerValue: T, private outerIndex: number) {\n    super();\n  }\n\n  protected _next(value: R): void {\n    this.parent.notifyNext(this.outerValue, value, this.outerIndex, this.index++, this);\n  }\n\n  protected _error(error: any): void {\n    this.parent.notifyError(error, this);\n    this.unsubscribe();\n  }\n\n  protected _complete(): void {\n    this.parent.notifyComplete(this);\n    this.unsubscribe();\n  }\n}\n","import { root } from './root';\nimport { isArrayLike } from './isArrayLike';\nimport { isPromise } from './isPromise';\nimport { isObject } from './isObject';\nimport { Subscriber } from '../Subscriber';\nimport { Observable, ObservableInput } from '../Observable';\nimport { iterator as Symbol_iterator } from '../symbol/iterator';\nimport { Subscription } from '../Subscription';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { observable as Symbol_observable } from '../symbol/observable';\n\nexport function subscribeToResult<T, R>(outerSubscriber: OuterSubscriber<T, R>,\n                                        result: any,\n                                        outerValue?: T,\n                                        outerIndex?: number): Subscription;\nexport function subscribeToResult<T>(outerSubscriber: OuterSubscriber<any, any>,\n                                     result: ObservableInput<T>,\n                                     outerValue?: T,\n                                     outerIndex?: number): Subscription {\n  let destination: Subscriber<any> = new InnerSubscriber(outerSubscriber, outerValue, outerIndex);\n\n  if (destination.closed) {\n    return null;\n  }\n\n  if (result instanceof Observable) {\n    if (result._isScalar) {\n      destination.next((<any>result).value);\n      destination.complete();\n      return null;\n    } else {\n      destination.syncErrorThrowable = true;\n      return result.subscribe(destination);\n    }\n  } else if (isArrayLike(result)) {\n    for (let i = 0, len = result.length; i < len && !destination.closed; i++) {\n      destination.next(result[i]);\n    }\n    if (!destination.closed) {\n      destination.complete();\n    }\n  } else if (isPromise(result)) {\n    result.then(\n      (value) => {\n        if (!destination.closed) {\n          destination.next(<any>value);\n          destination.complete();\n        }\n      },\n      (err: any) => destination.error(err)\n    )\n    .then(null, (err: any) => {\n      // Escaping the Promise trap: globally throw unhandled errors\n      root.setTimeout(() => { throw err; });\n    });\n    return destination;\n  } else if (result && typeof result[Symbol_iterator] === 'function') {\n    const iterator = <any>result[Symbol_iterator]();\n    do {\n      let item = iterator.next();\n      if (item.done) {\n        destination.complete();\n        break;\n      }\n      destination.next(item.value);\n      if (destination.closed) {\n        break;\n      }\n    } while (true);\n  } else if (result && typeof result[Symbol_observable] === 'function') {\n    const obs = result[Symbol_observable]();\n    if (typeof obs.subscribe !== 'function') {\n      destination.error(new TypeError('Provided object does not correctly implement Symbol.observable'));\n    } else {\n      return obs.subscribe(new InnerSubscriber(outerSubscriber, outerValue, outerIndex));\n    }\n  } else {\n    const value = isObject(result) ? 'an invalid object' : `'${result}'`;\n    const msg = `You provided ${value} where a stream was expected.`\n      + ' You can provide an Observable, Promise, Array, or Iterable.';\n    destination.error(new TypeError(msg));\n  }\n  return null;\n}\n","import { Subscriber } from './Subscriber';\nimport { InnerSubscriber } from './InnerSubscriber';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class OuterSubscriber<T, R> extends Subscriber<T> {\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.destination.next(innerValue);\n  }\n\n  notifyError(error: any, innerSub: InnerSubscriber<T, R>): void {\n    this.destination.error(error);\n  }\n\n  notifyComplete(innerSub: InnerSubscriber<T, R>): void {\n    this.destination.complete();\n  }\n}\n","import { Observable, ObservableInput } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { OperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function mergeMap<T, R>(project: (value: T, index: number) => ObservableInput<R>, concurrent?: number): OperatorFunction<T, R>;\nexport function mergeMap<T, I, R>(project: (value: T, index: number) => ObservableInput<I>, resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R, concurrent?: number): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Projects each source value to an Observable which is merged in the output\n * Observable.\n *\n * <span class=\"informal\">Maps each value to an Observable, then flattens all of\n * these inner Observables using {@link mergeAll}.</span>\n *\n * <img src=\"./img/mergeMap.png\" width=\"100%\">\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an Observable, and then merging those resulting Observables and\n * emitting the results of this merger.\n *\n * @example <caption>Map and flatten each letter to an Observable ticking every 1 second</caption>\n * var letters = Rx.Observable.of('a', 'b', 'c');\n * var result = letters.mergeMap(x =>\n *   Rx.Observable.interval(1000).map(i => x+i)\n * );\n * result.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // a0\n * // b0\n * // c0\n * // a1\n * // b1\n * // c1\n * // continues to list a,b,c with respective ascending integers\n *\n * @see {@link concatMap}\n * @see {@link exhaustMap}\n * @see {@link merge}\n * @see {@link mergeAll}\n * @see {@link mergeMapTo}\n * @see {@link mergeScan}\n * @see {@link switchMap}\n *\n * @param {function(value: T, ?index: number): ObservableInput} project A function\n * that, when applied to an item emitted by the source Observable, returns an\n * Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n * Observables being subscribed to concurrently.\n * @return {Observable} An Observable that emits the result of applying the\n * projection function (and the optional `resultSelector`) to each item emitted\n * by the source Observable and merging the results of the Observables obtained\n * from this transformation.\n * @method mergeMap\n * @owner Observable\n */\nexport function mergeMap<T, I, R>(project: (value: T, index: number) => ObservableInput<I>,\n                                  resultSelector?: ((outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R) | number,\n                                  concurrent: number = Number.POSITIVE_INFINITY): OperatorFunction<T, I|R> {\n  return function mergeMapOperatorFunction(source: Observable<T>) {\n    if (typeof resultSelector === 'number') {\n      concurrent = <number>resultSelector;\n      resultSelector = null;\n    }\n    return source.lift(new MergeMapOperator(project, <any>resultSelector, concurrent));\n  };\n}\n\nexport class MergeMapOperator<T, I, R> implements Operator<T, I> {\n  constructor(private project: (value: T, index: number) => ObservableInput<I>,\n              private resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R,\n              private concurrent: number = Number.POSITIVE_INFINITY) {\n  }\n\n  call(observer: Subscriber<I>, source: any): any {\n    return source.subscribe(new MergeMapSubscriber(\n      observer, this.project, this.resultSelector, this.concurrent\n    ));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class MergeMapSubscriber<T, I, R> extends OuterSubscriber<T, I> {\n  private hasCompleted: boolean = false;\n  private buffer: T[] = [];\n  private active: number = 0;\n  protected index: number = 0;\n\n  constructor(destination: Subscriber<I>,\n              private project: (value: T, index: number) => ObservableInput<I>,\n              private resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R,\n              private concurrent: number = Number.POSITIVE_INFINITY) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    if (this.active < this.concurrent) {\n      this._tryNext(value);\n    } else {\n      this.buffer.push(value);\n    }\n  }\n\n  protected _tryNext(value: T) {\n    let result: ObservableInput<I>;\n    const index = this.index++;\n    try {\n      result = this.project(value, index);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.active++;\n    this._innerSub(result, value, index);\n  }\n\n  private _innerSub(ish: ObservableInput<I>, value: T, index: number): void {\n    this.add(subscribeToResult<T, I>(this, ish, value, index));\n  }\n\n  protected _complete(): void {\n    this.hasCompleted = true;\n    if (this.active === 0 && this.buffer.length === 0) {\n      this.destination.complete();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: I,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, I>): void {\n    if (this.resultSelector) {\n      this._notifyResultSelector(outerValue, innerValue, outerIndex, innerIndex);\n    } else {\n      this.destination.next(innerValue);\n    }\n  }\n\n  private _notifyResultSelector(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) {\n    let result: R;\n    try {\n      result = this.resultSelector(outerValue, innerValue, outerIndex, innerIndex);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.destination.next(result);\n  }\n\n  notifyComplete(innerSub: Subscription): void {\n    const buffer = this.buffer;\n    this.remove(innerSub);\n    this.active--;\n    if (buffer.length > 0) {\n      this._next(buffer.shift());\n    } else if (this.active === 0 && this.hasCompleted) {\n      this.destination.complete();\n    }\n  }\n}\n","export function identity<T>(x: T): T {\n  return x;\n}\n","\nimport { ObservableInput } from '../Observable';\nimport { mergeMap } from './mergeMap';\nimport { identity } from '../util/identity';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Converts a higher-order Observable into a first-order Observable which\n * concurrently delivers all values that are emitted on the inner Observables.\n *\n * <span class=\"informal\">Flattens an Observable-of-Observables.</span>\n *\n * <img src=\"./img/mergeAll.png\" width=\"100%\">\n *\n * `mergeAll` subscribes to an Observable that emits Observables, also known as\n * a higher-order Observable. Each time it observes one of these emitted inner\n * Observables, it subscribes to that and delivers all the values from the\n * inner Observable on the output Observable. The output Observable only\n * completes once all inner Observables have completed. Any error delivered by\n * a inner Observable will be immediately emitted on the output Observable.\n *\n * @example <caption>Spawn a new interval Observable for each click event, and blend their outputs as one Observable</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var higherOrder = clicks.map((ev) => Rx.Observable.interval(1000));\n * var firstOrder = higherOrder.mergeAll();\n * firstOrder.subscribe(x => console.log(x));\n *\n * @example <caption>Count from 0 to 9 every second for each click, but only allow 2 concurrent timers</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var higherOrder = clicks.map((ev) => Rx.Observable.interval(1000).take(10));\n * var firstOrder = higherOrder.mergeAll(2);\n * firstOrder.subscribe(x => console.log(x));\n *\n * @see {@link combineAll}\n * @see {@link concatAll}\n * @see {@link exhaust}\n * @see {@link merge}\n * @see {@link mergeMap}\n * @see {@link mergeMapTo}\n * @see {@link mergeScan}\n * @see {@link switch}\n * @see {@link zipAll}\n *\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of inner\n * Observables being subscribed to concurrently.\n * @return {Observable} An Observable that emits values coming from all the\n * inner Observables emitted by the source Observable.\n * @method mergeAll\n * @owner Observable\n */\nexport function mergeAll<T>(concurrent: number = Number.POSITIVE_INFINITY): MonoTypeOperatorFunction<T> {\n  return mergeMap(identity as (value: T, index: number) => ObservableInput<{}>, null, concurrent);\n}","import { Observable, ObservableInput } from '../Observable';\nimport { IScheduler } from '../Scheduler';\nimport { ArrayObservable } from '../observable/ArrayObservable';\nimport { mergeAll } from './mergeAll';\nimport { isScheduler } from '../util/isScheduler';\nimport { OperatorFunction, MonoTypeOperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function merge<T>(scheduler?: IScheduler): MonoTypeOperatorFunction<T>;\nexport function merge<T>(concurrent?: number, scheduler?: IScheduler): MonoTypeOperatorFunction<T>;\nexport function merge<T, T2>(v2: ObservableInput<T2>, scheduler?: IScheduler): OperatorFunction<T, T | T2>;\nexport function merge<T, T2>(v2: ObservableInput<T2>, concurrent?: number, scheduler?: IScheduler): OperatorFunction<T, T | T2>;\nexport function merge<T, T2, T3>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, scheduler?: IScheduler): OperatorFunction<T, T | T2 | T3>;\nexport function merge<T, T2, T3>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, concurrent?: number, scheduler?: IScheduler): OperatorFunction<T, T | T2 | T3>;\nexport function merge<T, T2, T3, T4>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, scheduler?: IScheduler): OperatorFunction<T, T | T2 | T3 | T4>;\nexport function merge<T, T2, T3, T4>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, concurrent?: number, scheduler?: IScheduler): OperatorFunction<T, T | T2 | T3 | T4>;\nexport function merge<T, T2, T3, T4, T5>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, scheduler?: IScheduler): OperatorFunction<T, T | T2 | T3 | T4 | T5>;\nexport function merge<T, T2, T3, T4, T5>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, concurrent?: number, scheduler?: IScheduler): OperatorFunction<T, T | T2 | T3 | T4 | T5>;\nexport function merge<T, T2, T3, T4, T5, T6>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, scheduler?: IScheduler): OperatorFunction<T, T | T2 | T3 | T4 | T5 | T6>;\nexport function merge<T, T2, T3, T4, T5, T6>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, concurrent?: number, scheduler?: IScheduler): OperatorFunction<T, T | T2 | T3 | T4 | T5 | T6>;\nexport function merge<T>(...observables: Array<ObservableInput<T> | IScheduler | number>): MonoTypeOperatorFunction<T>;\nexport function merge<T, R>(...observables: Array<ObservableInput<any> | IScheduler | number>): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\nexport function merge<T, R>(...observables: Array<ObservableInput<any> | IScheduler | number>): OperatorFunction<T, R> {\n  return (source: Observable<T>) => source.lift.call(mergeStatic(source, ...observables));\n}\n\n/* tslint:disable:max-line-length */\nexport function mergeStatic<T>(v1: ObservableInput<T>, scheduler?: IScheduler): Observable<T>;\nexport function mergeStatic<T>(v1: ObservableInput<T>, concurrent?: number, scheduler?: IScheduler): Observable<T>;\nexport function mergeStatic<T, T2>(v1: ObservableInput<T>, v2: ObservableInput<T2>, scheduler?: IScheduler): Observable<T | T2>;\nexport function mergeStatic<T, T2>(v1: ObservableInput<T>, v2: ObservableInput<T2>, concurrent?: number, scheduler?: IScheduler): Observable<T | T2>;\nexport function mergeStatic<T, T2, T3>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, scheduler?: IScheduler): Observable<T | T2 | T3>;\nexport function mergeStatic<T, T2, T3>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, concurrent?: number, scheduler?: IScheduler): Observable<T | T2 | T3>;\nexport function mergeStatic<T, T2, T3, T4>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, scheduler?: IScheduler): Observable<T | T2 | T3 | T4>;\nexport function mergeStatic<T, T2, T3, T4>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, concurrent?: number, scheduler?: IScheduler): Observable<T | T2 | T3 | T4>;\nexport function mergeStatic<T, T2, T3, T4, T5>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, scheduler?: IScheduler): Observable<T | T2 | T3 | T4 | T5>;\nexport function mergeStatic<T, T2, T3, T4, T5>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, concurrent?: number, scheduler?: IScheduler): Observable<T | T2 | T3 | T4 | T5>;\nexport function mergeStatic<T, T2, T3, T4, T5, T6>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, scheduler?: IScheduler): Observable<T | T2 | T3 | T4 | T5 | T6>;\nexport function mergeStatic<T, T2, T3, T4, T5, T6>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, concurrent?: number, scheduler?: IScheduler): Observable<T | T2 | T3 | T4 | T5 | T6>;\nexport function mergeStatic<T>(...observables: (ObservableInput<T> | IScheduler | number)[]): Observable<T>;\nexport function mergeStatic<T, R>(...observables: (ObservableInput<any> | IScheduler | number)[]): Observable<R>;\n/* tslint:enable:max-line-length */\n/**\n * Creates an output Observable which concurrently emits all values from every\n * given input Observable.\n *\n * <span class=\"informal\">Flattens multiple Observables together by blending\n * their values into one Observable.</span>\n *\n * <img src=\"./img/merge.png\" width=\"100%\">\n *\n * `merge` subscribes to each given input Observable (as arguments), and simply\n * forwards (without doing any transformation) all the values from all the input\n * Observables to the output Observable. The output Observable only completes\n * once all input Observables have completed. Any error delivered by an input\n * Observable will be immediately emitted on the output Observable.\n *\n * @example <caption>Merge together two Observables: 1s interval and clicks</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var timer = Rx.Observable.interval(1000);\n * var clicksOrTimer = Rx.Observable.merge(clicks, timer);\n * clicksOrTimer.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // timer will emit ascending values, one every second(1000ms) to console\n * // clicks logs MouseEvents to console everytime the \"document\" is clicked\n * // Since the two streams are merged you see these happening\n * // as they occur.\n *\n * @example <caption>Merge together 3 Observables, but only 2 run concurrently</caption>\n * var timer1 = Rx.Observable.interval(1000).take(10);\n * var timer2 = Rx.Observable.interval(2000).take(6);\n * var timer3 = Rx.Observable.interval(500).take(10);\n * var concurrent = 2; // the argument\n * var merged = Rx.Observable.merge(timer1, timer2, timer3, concurrent);\n * merged.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // - First timer1 and timer2 will run concurrently\n * // - timer1 will emit a value every 1000ms for 10 iterations\n * // - timer2 will emit a value every 2000ms for 6 iterations\n * // - after timer1 hits it's max iteration, timer2 will\n * //   continue, and timer3 will start to run concurrently with timer2\n * // - when timer2 hits it's max iteration it terminates, and\n * //   timer3 will continue to emit a value every 500ms until it is complete\n *\n * @see {@link mergeAll}\n * @see {@link mergeMap}\n * @see {@link mergeMapTo}\n * @see {@link mergeScan}\n *\n * @param {...ObservableInput} observables Input Observables to merge together.\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n * Observables being subscribed to concurrently.\n * @param {Scheduler} [scheduler=null] The IScheduler to use for managing\n * concurrency of input Observables.\n * @return {Observable} an Observable that emits items that are the result of\n * every input Observable.\n * @static true\n * @name merge\n * @owner Observable\n */\nexport function mergeStatic<T, R>(...observables: Array<ObservableInput<any> | IScheduler | number>): Observable<R> {\n let concurrent = Number.POSITIVE_INFINITY;\n let scheduler: IScheduler = null;\n  let last: any = observables[observables.length - 1];\n  if (isScheduler(last)) {\n    scheduler = <IScheduler>observables.pop();\n    if (observables.length > 1 && typeof observables[observables.length - 1] === 'number') {\n      concurrent = <number>observables.pop();\n    }\n  } else if (typeof last === 'number') {\n    concurrent = <number>observables.pop();\n  }\n\n  if (scheduler === null && observables.length === 1 && observables[0] instanceof Observable) {\n    return <Observable<R>>observables[0];\n  }\n\n  return mergeAll(concurrent)(new ArrayObservable(<any>observables, scheduler)) as Observable<R>;\n}\n","import { Observable, ObservableInput } from '../Observable';\nimport { IScheduler } from '../Scheduler';\nimport { merge as higherOrder } from '../operators/merge';\n\nexport { mergeStatic } from '../operators/merge';\n\n/* tslint:disable:max-line-length */\nexport function merge<T>(this: Observable<T>, scheduler?: IScheduler): Observable<T>;\nexport function merge<T>(this: Observable<T>, concurrent?: number, scheduler?: IScheduler): Observable<T>;\nexport function merge<T, T2>(this: Observable<T>, v2: ObservableInput<T2>, scheduler?: IScheduler): Observable<T | T2>;\nexport function merge<T, T2>(this: Observable<T>, v2: ObservableInput<T2>, concurrent?: number, scheduler?: IScheduler): Observable<T | T2>;\nexport function merge<T, T2, T3>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, scheduler?: IScheduler): Observable<T | T2 | T3>;\nexport function merge<T, T2, T3>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, concurrent?: number, scheduler?: IScheduler): Observable<T | T2 | T3>;\nexport function merge<T, T2, T3, T4>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, scheduler?: IScheduler): Observable<T | T2 | T3 | T4>;\nexport function merge<T, T2, T3, T4>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, concurrent?: number, scheduler?: IScheduler): Observable<T | T2 | T3 | T4>;\nexport function merge<T, T2, T3, T4, T5>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, scheduler?: IScheduler): Observable<T | T2 | T3 | T4 | T5>;\nexport function merge<T, T2, T3, T4, T5>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, concurrent?: number, scheduler?: IScheduler): Observable<T | T2 | T3 | T4 | T5>;\nexport function merge<T, T2, T3, T4, T5, T6>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, scheduler?: IScheduler): Observable<T | T2 | T3 | T4 | T5 | T6>;\nexport function merge<T, T2, T3, T4, T5, T6>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, concurrent?: number, scheduler?: IScheduler): Observable<T | T2 | T3 | T4 | T5 | T6>;\nexport function merge<T>(this: Observable<T>, ...observables: Array<ObservableInput<T> | IScheduler | number>): Observable<T>;\nexport function merge<T, R>(this: Observable<T>, ...observables: Array<ObservableInput<any> | IScheduler | number>): Observable<R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Creates an output Observable which concurrently emits all values from every\n * given input Observable.\n *\n * <span class=\"informal\">Flattens multiple Observables together by blending\n * their values into one Observable.</span>\n *\n * <img src=\"./img/merge.png\" width=\"100%\">\n *\n * `merge` subscribes to each given input Observable (either the source or an\n * Observable given as argument), and simply forwards (without doing any\n * transformation) all the values from all the input Observables to the output\n * Observable. The output Observable only completes once all input Observables\n * have completed. Any error delivered by an input Observable will be immediately\n * emitted on the output Observable.\n *\n * @example <caption>Merge together two Observables: 1s interval and clicks</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var timer = Rx.Observable.interval(1000);\n * var clicksOrTimer = clicks.merge(timer);\n * clicksOrTimer.subscribe(x => console.log(x));\n *\n * @example <caption>Merge together 3 Observables, but only 2 run concurrently</caption>\n * var timer1 = Rx.Observable.interval(1000).take(10);\n * var timer2 = Rx.Observable.interval(2000).take(6);\n * var timer3 = Rx.Observable.interval(500).take(10);\n * var concurrent = 2; // the argument\n * var merged = timer1.merge(timer2, timer3, concurrent);\n * merged.subscribe(x => console.log(x));\n *\n * @see {@link mergeAll}\n * @see {@link mergeMap}\n * @see {@link mergeMapTo}\n * @see {@link mergeScan}\n *\n * @param {ObservableInput} other An input Observable to merge with the source\n * Observable. More than one input Observables may be given as argument.\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n * Observables being subscribed to concurrently.\n * @param {Scheduler} [scheduler=null] The IScheduler to use for managing\n * concurrency of input Observables.\n * @return {Observable} An Observable that emits items that are the result of\n * every input Observable.\n * @method merge\n * @owner Observable\n */\nexport function merge<T, R>(this: Observable<T>, ...observables: Array<ObservableInput<any> | IScheduler | number>): Observable<R> {\n  return higherOrder(...observables)(this) as Observable<R>;\n}\n","import {  mergeStatic  } from '../operator/merge';\n\nexport const merge = mergeStatic;","/**\n * An error thrown when an action is invalid because the object has been\n * unsubscribed.\n *\n * @see {@link Subject}\n * @see {@link BehaviorSubject}\n *\n * @class ObjectUnsubscribedError\n */\nexport class ObjectUnsubscribedError extends Error {\n  constructor() {\n    const err: any = super('object unsubscribed');\n    (<any> this).name = err.name = 'ObjectUnsubscribedError';\n    (<any> this).stack = err.stack;\n    (<any> this).message = err.message;\n  }\n}\n","import { Subject } from './Subject';\nimport { Observer } from './Observer';\nimport { Subscription } from './Subscription';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class SubjectSubscription<T> extends Subscription {\n  closed: boolean = false;\n\n  constructor(public subject: Subject<T>, public subscriber: Observer<T>) {\n    super();\n  }\n\n  unsubscribe() {\n    if (this.closed) {\n      return;\n    }\n\n    this.closed = true;\n\n    const subject = this.subject;\n    const observers = subject.observers;\n\n    this.subject = null;\n\n    if (!observers || observers.length === 0 || subject.isStopped || subject.closed) {\n      return;\n    }\n\n    const subscriberIndex = observers.indexOf(this.subscriber);\n\n    if (subscriberIndex !== -1) {\n      observers.splice(subscriberIndex, 1);\n    }\n  }\n}\n","import { Operator } from './Operator';\nimport { Observer } from './Observer';\nimport { Observable } from './Observable';\nimport { Subscriber } from './Subscriber';\nimport { ISubscription, Subscription, TeardownLogic } from './Subscription';\nimport { ObjectUnsubscribedError } from './util/ObjectUnsubscribedError';\nimport { SubjectSubscription } from './SubjectSubscription';\nimport { rxSubscriber as rxSubscriberSymbol } from './symbol/rxSubscriber';\n\n/**\n * @class SubjectSubscriber<T>\n */\nexport class SubjectSubscriber<T> extends Subscriber<T> {\n  constructor(protected destination: Subject<T>) {\n    super(destination);\n  }\n}\n\n/**\n * @class Subject<T>\n */\nexport class Subject<T> extends Observable<T> implements ISubscription {\n\n  [rxSubscriberSymbol]() {\n    return new SubjectSubscriber(this);\n  }\n\n  observers: Observer<T>[] = [];\n\n  closed = false;\n\n  isStopped = false;\n\n  hasError = false;\n\n  thrownError: any = null;\n\n  constructor() {\n    super();\n  }\n\n  static create: Function = <T>(destination: Observer<T>, source: Observable<T>): AnonymousSubject<T> => {\n    return new AnonymousSubject<T>(destination, source);\n  }\n\n  lift<R>(operator: Operator<T, R>): Observable<R> {\n    const subject = new AnonymousSubject(this, this);\n    subject.operator = <any>operator;\n    return <any>subject;\n  }\n\n  next(value?: T) {\n    if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    }\n    if (!this.isStopped) {\n      const { observers } = this;\n      const len = observers.length;\n      const copy = observers.slice();\n      for (let i = 0; i < len; i++) {\n        copy[i].next(value);\n      }\n    }\n  }\n\n  error(err: any) {\n    if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    }\n    this.hasError = true;\n    this.thrownError = err;\n    this.isStopped = true;\n    const { observers } = this;\n    const len = observers.length;\n    const copy = observers.slice();\n    for (let i = 0; i < len; i++) {\n      copy[i].error(err);\n    }\n    this.observers.length = 0;\n  }\n\n  complete() {\n    if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    }\n    this.isStopped = true;\n    const { observers } = this;\n    const len = observers.length;\n    const copy = observers.slice();\n    for (let i = 0; i < len; i++) {\n      copy[i].complete();\n    }\n    this.observers.length = 0;\n  }\n\n  unsubscribe() {\n    this.isStopped = true;\n    this.closed = true;\n    this.observers = null;\n  }\n\n  protected _trySubscribe(subscriber: Subscriber<T>): TeardownLogic {\n    if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    } else {\n      return super._trySubscribe(subscriber);\n    }\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): Subscription {\n    if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    } else if (this.hasError) {\n      subscriber.error(this.thrownError);\n      return Subscription.EMPTY;\n    } else if (this.isStopped) {\n      subscriber.complete();\n      return Subscription.EMPTY;\n    } else {\n      this.observers.push(subscriber);\n      return new SubjectSubscription(this, subscriber);\n    }\n  }\n\n  asObservable(): Observable<T> {\n    const observable = new Observable<T>();\n    (<any>observable).source = this;\n    return observable;\n  }\n}\n\n/**\n * @class AnonymousSubject<T>\n */\nexport class AnonymousSubject<T> extends Subject<T> {\n  constructor(protected destination?: Observer<T>, source?: Observable<T>) {\n    super();\n    this.source = source;\n  }\n\n  next(value: T) {\n    const { destination } = this;\n    if (destination && destination.next) {\n      destination.next(value);\n    }\n  }\n\n  error(err: any) {\n    const { destination } = this;\n    if (destination && destination.error) {\n      this.destination.error(err);\n    }\n  }\n\n  complete() {\n    const { destination } = this;\n    if (destination && destination.complete) {\n      this.destination.complete();\n    }\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): Subscription {\n    const { source } = this;\n    if (source) {\n      return this.source.subscribe(subscriber);\n    } else {\n      return Subscription.EMPTY;\n    }\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription, TeardownLogic } from '../Subscription';\nimport { MonoTypeOperatorFunction } from '../interfaces';\nimport { ConnectableObservable } from '../observable/ConnectableObservable';\nimport { Observable } from '../Observable';\n\nexport function refCount<T>(): MonoTypeOperatorFunction<T> {\n  return function refCountOperatorFunction(source: ConnectableObservable<T>): Observable<T> {\n    return source.lift(new RefCountOperator(source));\n  };\n}\n\nclass RefCountOperator<T> implements Operator<T, T> {\n  constructor(private connectable: ConnectableObservable<T>) {\n  }\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n\n    const { connectable } = this;\n    (<any> connectable)._refCount++;\n\n    const refCounter = new RefCountSubscriber(subscriber, connectable);\n    const subscription = source.subscribe(refCounter);\n\n    if (!refCounter.closed) {\n      (<any> refCounter).connection = connectable.connect();\n    }\n\n    return subscription;\n  }\n}\n\nclass RefCountSubscriber<T> extends Subscriber<T> {\n\n  private connection: Subscription;\n\n  constructor(destination: Subscriber<T>,\n              private connectable: ConnectableObservable<T>) {\n    super(destination);\n  }\n\n  protected _unsubscribe() {\n\n    const { connectable } = this;\n    if (!connectable) {\n      this.connection = null;\n      return;\n    }\n\n    this.connectable = null;\n    const refCount = (<any> connectable)._refCount;\n    if (refCount <= 0) {\n      this.connection = null;\n      return;\n    }\n\n    (<any> connectable)._refCount = refCount - 1;\n    if (refCount > 1) {\n      this.connection = null;\n      return;\n    }\n\n    ///\n    // Compare the local RefCountSubscriber's connection Subscription to the\n    // connection Subscription on the shared ConnectableObservable. In cases\n    // where the ConnectableObservable source synchronously emits values, and\n    // the RefCountSubscriber's downstream Observers synchronously unsubscribe,\n    // execution continues to here before the RefCountOperator has a chance to\n    // supply the RefCountSubscriber with the shared connection Subscription.\n    // For example:\n    // ```\n    // Observable.range(0, 10)\n    //   .publish()\n    //   .refCount()\n    //   .take(5)\n    //   .subscribe();\n    // ```\n    // In order to account for this case, RefCountSubscriber should only dispose\n    // the ConnectableObservable's shared connection Subscription if the\n    // connection Subscription exists, *and* either:\n    //   a. RefCountSubscriber doesn't have a reference to the shared connection\n    //      Subscription yet, or,\n    //   b. RefCountSubscriber's connection Subscription reference is identical\n    //      to the shared connection Subscription\n    ///\n    const { connection } = this;\n    const sharedConnection = (<any> connectable)._connection;\n    this.connection = null;\n\n    if (sharedConnection && (!connection || sharedConnection === connection)) {\n      sharedConnection.unsubscribe();\n    }\n  }\n}\n","import { Subject, SubjectSubscriber } from '../Subject';\nimport { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription, TeardownLogic } from '../Subscription';\nimport { refCount as higherOrderRefCount } from '../operators/refCount';\n\n/**\n * @class ConnectableObservable<T>\n */\nexport class ConnectableObservable<T> extends Observable<T> {\n\n  protected _subject: Subject<T>;\n  protected _refCount: number = 0;\n  protected _connection: Subscription;\n  _isComplete = false;\n\n  constructor(protected source: Observable<T>,\n              protected subjectFactory: () => Subject<T>) {\n    super();\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>) {\n    return this.getSubject().subscribe(subscriber);\n  }\n\n  protected getSubject(): Subject<T> {\n    const subject = this._subject;\n    if (!subject || subject.isStopped) {\n      this._subject = this.subjectFactory();\n    }\n    return this._subject;\n  }\n\n  connect(): Subscription {\n    let connection = this._connection;\n    if (!connection) {\n      this._isComplete = false;\n      connection = this._connection = new Subscription();\n      connection.add(this.source\n        .subscribe(new ConnectableSubscriber(this.getSubject(), this)));\n      if (connection.closed) {\n        this._connection = null;\n        connection = Subscription.EMPTY;\n      } else {\n        this._connection = connection;\n      }\n    }\n    return connection;\n  }\n\n  refCount(): Observable<T> {\n    return higherOrderRefCount()(this) as Observable<T>;\n  }\n}\n\nconst connectableProto = <any>ConnectableObservable.prototype;\n\nexport const connectableObservableDescriptor: PropertyDescriptorMap = {\n  operator: { value: null },\n  _refCount: { value: 0, writable: true },\n  _subject: { value: null, writable: true },\n  _connection: { value: null, writable: true },\n  _subscribe: { value: connectableProto._subscribe },\n  _isComplete: { value: connectableProto._isComplete, writable: true },\n  getSubject: { value: connectableProto.getSubject },\n  connect: { value: connectableProto.connect },\n  refCount: { value: connectableProto.refCount }\n};\n\nclass ConnectableSubscriber<T> extends SubjectSubscriber<T> {\n  constructor(destination: Subject<T>,\n              private connectable: ConnectableObservable<T>) {\n    super(destination);\n  }\n  protected _error(err: any): void {\n    this._unsubscribe();\n    super._error(err);\n  }\n  protected _complete(): void {\n    this.connectable._isComplete = true;\n    this._unsubscribe();\n    super._complete();\n  }\n  protected _unsubscribe() {\n    const connectable = <any>this.connectable;\n    if (connectable) {\n      this.connectable = null;\n      const connection = connectable._connection;\n      connectable._refCount = 0;\n      connectable._subject = null;\n      connectable._connection = null;\n      if (connection) {\n        connection.unsubscribe();\n      }\n    }\n  }\n}\n\nclass RefCountOperator<T> implements Operator<T, T> {\n  constructor(private connectable: ConnectableObservable<T>) {\n  }\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n\n    const { connectable } = this;\n    (<any> connectable)._refCount++;\n\n    const refCounter = new RefCountSubscriber(subscriber, connectable);\n    const subscription = source.subscribe(refCounter);\n\n    if (!refCounter.closed) {\n      (<any> refCounter).connection = connectable.connect();\n    }\n\n    return subscription;\n  }\n}\n\nclass RefCountSubscriber<T> extends Subscriber<T> {\n\n  private connection: Subscription;\n\n  constructor(destination: Subscriber<T>,\n              private connectable: ConnectableObservable<T>) {\n    super(destination);\n  }\n\n  protected _unsubscribe() {\n\n    const { connectable } = this;\n    if (!connectable) {\n      this.connection = null;\n      return;\n    }\n\n    this.connectable = null;\n    const refCount = (<any> connectable)._refCount;\n    if (refCount <= 0) {\n      this.connection = null;\n      return;\n    }\n\n    (<any> connectable)._refCount = refCount - 1;\n    if (refCount > 1) {\n      this.connection = null;\n      return;\n    }\n\n    ///\n    // Compare the local RefCountSubscriber's connection Subscription to the\n    // connection Subscription on the shared ConnectableObservable. In cases\n    // where the ConnectableObservable source synchronously emits values, and\n    // the RefCountSubscriber's downstream Observers synchronously unsubscribe,\n    // execution continues to here before the RefCountOperator has a chance to\n    // supply the RefCountSubscriber with the shared connection Subscription.\n    // For example:\n    // ```\n    // Observable.range(0, 10)\n    //   .publish()\n    //   .refCount()\n    //   .take(5)\n    //   .subscribe();\n    // ```\n    // In order to account for this case, RefCountSubscriber should only dispose\n    // the ConnectableObservable's shared connection Subscription if the\n    // connection Subscription exists, *and* either:\n    //   a. RefCountSubscriber doesn't have a reference to the shared connection\n    //      Subscription yet, or,\n    //   b. RefCountSubscriber's connection Subscription reference is identical\n    //      to the shared connection Subscription\n    ///\n    const { connection } = this;\n    const sharedConnection = (<any> connectable)._connection;\n    this.connection = null;\n\n    if (sharedConnection && (!connection || sharedConnection === connection)) {\n      sharedConnection.unsubscribe();\n    }\n  }\n}\n","import { Subject } from '../Subject';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { ConnectableObservable, connectableObservableDescriptor } from '../observable/ConnectableObservable';\nimport { FactoryOrValue, MonoTypeOperatorFunction, OperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function multicast<T>(subjectOrSubjectFactory: FactoryOrValue<Subject<T>>): MonoTypeOperatorFunction<T>;\nexport function multicast<T>(SubjectFactory: (this: Observable<T>) => Subject<T>, selector?: MonoTypeOperatorFunction<T>): MonoTypeOperatorFunction<T>;\nexport function multicast<T, R>(SubjectFactory: (this: Observable<T>) => Subject<T>, selector?: OperatorFunction<T, R>): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Returns an Observable that emits the results of invoking a specified selector on items\n * emitted by a ConnectableObservable that shares a single subscription to the underlying stream.\n *\n * <img src=\"./img/multicast.png\" width=\"100%\">\n *\n * @param {Function|Subject} subjectOrSubjectFactory - Factory function to create an intermediate subject through\n * which the source sequence's elements will be multicast to the selector function\n * or Subject to push source elements into.\n * @param {Function} [selector] - Optional selector function that can use the multicasted source stream\n * as many times as needed, without causing multiple subscriptions to the source stream.\n * Subscribers to the given source will receive all notifications of the source from the\n * time of the subscription forward.\n * @return {Observable} An Observable that emits the results of invoking the selector\n * on the items emitted by a `ConnectableObservable` that shares a single subscription to\n * the underlying stream.\n * @method multicast\n * @owner Observable\n */\nexport function multicast<T, R>(subjectOrSubjectFactory: Subject<T> | (() => Subject<T>),\n                                selector?: (source: Observable<T>) => Observable<R>): OperatorFunction<T, R> {\n  return function multicastOperatorFunction(source: Observable<T>): Observable<R> {\n    let subjectFactory: () => Subject<T>;\n    if (typeof subjectOrSubjectFactory === 'function') {\n      subjectFactory = <() => Subject<T>>subjectOrSubjectFactory;\n    } else {\n      subjectFactory = function subjectFactory() {\n        return <Subject<T>>subjectOrSubjectFactory;\n      };\n    }\n\n    if (typeof selector === 'function') {\n      return source.lift(new MulticastOperator(subjectFactory, selector));\n    }\n\n    const connectable: any = Object.create(source, connectableObservableDescriptor);\n    connectable.source = source;\n    connectable.subjectFactory = subjectFactory;\n\n    return <ConnectableObservable<R>> connectable;\n  };\n}\n\nexport class MulticastOperator<T, R> implements Operator<T, R> {\n  constructor(private subjectFactory: () => Subject<T>,\n              private selector: (source: Observable<T>) => Observable<R>) {\n  }\n  call(subscriber: Subscriber<R>, source: any): any {\n    const { selector } = this;\n    const subject = this.subjectFactory();\n    const subscription = selector(subject).subscribe(subscriber);\n    subscription.add(source.subscribe(subject));\n    return subscription;\n  }\n}\n","import { Observable } from '../Observable';\nimport { multicast } from './multicast';\nimport { refCount } from './refCount';\nimport { Subject } from '../Subject';\n\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\nfunction shareSubjectFactory() {\n  return new Subject();\n}\n\n/**\n * Returns a new Observable that multicasts (shares) the original Observable. As long as there is at least one\n * Subscriber this Observable will be subscribed and emitting data. When all subscribers have unsubscribed it will\n * unsubscribe from the source Observable. Because the Observable is multicasting it makes the stream `hot`.\n * This is an alias for .multicast(() => new Subject()).refCount().\n *\n * <img src=\"./img/share.png\" width=\"100%\">\n *\n * @return {Observable<T>} An Observable that upon connection causes the source Observable to emit items to its Observers.\n * @method share\n * @owner Observable\n */\nexport function share<T>(): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => refCount()(multicast(shareSubjectFactory)(source)) as Observable<T>;\n};\n","import { Observable } from '../Observable';\nimport { share as higherOrder } from '../operators/share';\n\n/**\n * Returns a new Observable that multicasts (shares) the original Observable. As long as there is at least one\n * Subscriber this Observable will be subscribed and emitting data. When all subscribers have unsubscribed it will\n * unsubscribe from the source Observable. Because the Observable is multicasting it makes the stream `hot`.\n *\n * This behaves similarly to .publish().refCount(), with a behavior difference when the source observable emits complete.\n * .publish().refCount() will not resubscribe to the original source, however .share() will resubscribe to the original source.\n * Observable.of(\"test\").publish().refCount() will not re-emit \"test\" on new subscriptions, Observable.of(\"test\").share() will\n * re-emit \"test\" to new subscriptions.\n *\n * <img src=\"./img/share.png\" width=\"100%\">\n *\n * @return {Observable<T>} An Observable that upon connection causes the source Observable to emit items to its Observers.\n * @method share\n * @owner Observable\n */\nexport function share<T>(this: Observable<T>): Observable<T> {\n  return higherOrder()(this) as Observable<T>;\n};\n","\n/**\n * Creates a token that can be used in a DI Provider.\n * \n * ### Example ([live demo](http://plnkr.co/edit/Ys9ezXpj2Mnoy3Uc8KBp?p=preview))\n * \n * ```typescript\n * var t = new OpaqueToken(\"value\");\n * \n * var injector = Injector.resolveAndCreate([\n *   {provide: t, useValue: \"bindingValue\"}\n * ]);\n * \n * expect(injector.get(t)).toEqual(\"bindingValue\");\n * ```\n * \n * Using an `OpaqueToken` is preferable to using strings as tokens because of possible collisions\n * caused by multiple providers using the same string as two different tokens.\n * \n * Using an `OpaqueToken` is preferable to using an `Object` as tokens because it provides better\n * error messages.\n * @deprecated since v4.0.0 because it does not support type information, use `InjectionToken<?>`\n * instead.\n */\nexport class OpaqueToken {\n/**\n * @param {?} _desc\n */\nconstructor(protected _desc: string) {}\n/**\n * @return {?}\n */\ntoString(): string { return `Token ${this._desc}`; }\n}\n\nfunction OpaqueToken_tsickle_Closure_declarations() {\n/** @type {?} */\nOpaqueToken.prototype._desc;\n}\n\n/**\n * Creates a token that can be used in a DI Provider.\n * \n * Use an `InjectionToken` whenever the type you are injecting is not reified (does not have a\n * runtime representation) such as when injecting an interface, callable type, array or\n * parametrized type.\n * \n * `InjectionToken` is parameterized on `T` which is the type of object which will be returned by\n * the `Injector`. This provides additional level of type safety.\n * \n * ```\n * interface MyInterface {...}\n * var myInterface = injector.get(new InjectionToken<MyInterface>('SomeToken'));\n * // myInterface is inferred to be MyInterface.\n * ```\n * \n * ### Example\n * \n * {\\@example core/di/ts/injector_spec.ts region='InjectionToken'}\n * \n * \\@stable\n */\nexport class InjectionToken<T> extends OpaqueToken {\nprivate _differentiate_from_OpaqueToken_structurally: any;\n/**\n * @param {?} desc\n */\nconstructor(desc: string) { super(desc); }\n/**\n * @return {?}\n */\ntoString(): string { return `InjectionToken ${this._desc}`; }\n}\n\nfunction InjectionToken_tsickle_Closure_declarations() {\n/** @type {?} */\nInjectionToken.prototype._differentiate_from_OpaqueToken_structurally;\n}\n\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n// Import zero symbols from zone.js. This causes the zone ambient type to be\n// added to the type-checker, without emitting any runtime module load statement\n\nimport {} from 'zone.js';\n\n// TODO(jteplitz602): Load WorkerGlobalScope from lib.webworker.d.ts file #3492\ndeclare var WorkerGlobalScope: any /** TODO #9100 */;\n// CommonJS / Node have global context exposed as \"global\" variable.\n// We don't want to include the whole node.d.ts this this compilation unit so we'll just fake\n// the global \"global\" var for now.\ndeclare var global: any /** TODO #9100 */;\nconst /** @type {?} */ __window = typeof window !== 'undefined' && window;\nconst /** @type {?} */ __self = typeof self !== 'undefined' && typeof WorkerGlobalScope !== 'undefined' &&\n    self instanceof WorkerGlobalScope && self;\nconst /** @type {?} */ __global = typeof global !== 'undefined' && global;\nconst /** @type {?} */ _global: {[name: string]: any} = __window || __global || __self;\nexport {_global as global};\n\n// When Symbol.iterator doesn't exist, retrieves the key used in es6-shim\ndeclare const Symbol: any;\nlet /** @type {?} */ _symbolIterator: any = null;\n/**\n * @return {?}\n */\nexport function getSymbolIterator(): string|symbol {\n  if (!_symbolIterator) {\n    const /** @type {?} */ Symbol = _global['Symbol'];\n    if (Symbol && Symbol.iterator) {\n      _symbolIterator = Symbol.iterator;\n    } else {\n      // es6-shim specific logic\n      const /** @type {?} */ keys = Object.getOwnPropertyNames(Map.prototype);\n      for (let /** @type {?} */ i = 0; i < keys.length; ++i) {\n        const /** @type {?} */ key = keys[i];\n        if (key !== 'entries' && key !== 'size' &&\n            ( /** @type {?} */((Map as any))).prototype[key] === Map.prototype['entries']) {\n          _symbolIterator = key;\n        }\n      }\n    }\n  }\n  return _symbolIterator;\n}\n/**\n * @param {?} fn\n * @return {?}\n */\nexport function scheduleMicroTask(fn: Function) {\n  Zone.current.scheduleMicroTask('scheduleMicrotask', fn);\n}\n/**\n * @param {?} a\n * @param {?} b\n * @return {?}\n */\nexport function looseIdentical(a: any, b: any): boolean {\n  return a === b || typeof a === 'number' && typeof b === 'number' && isNaN(a) && isNaN(b);\n}\n/**\n * @param {?} token\n * @return {?}\n */\nexport function stringify(token: any): string {\n  if (typeof token === 'string') {\n    return token;\n  }\n\n  if (token == null) {\n    return '' + token;\n  }\n\n  if (token.overriddenName) {\n    return `${token.overriddenName}`;\n  }\n\n  if (token.name) {\n    return `${token.name}`;\n  }\n\n  const /** @type {?} */ res = token.toString();\n\n  if (res == null) {\n    return '' + res;\n  }\n\n  const /** @type {?} */ newLineIndex = res.indexOf('\\n');\n  return newLineIndex === -1 ? res : res.substring(0, newLineIndex);\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Type} from '../type';\nimport {global, stringify} from '../util';\n\nlet /** @type {?} */ _nextClassId = 0;\nconst /** @type {?} */ Reflect = global['Reflect'];\n\n/**\n * Declares the interface to be used with {@link Class}.\n *\n * @stable\n */\nexport type ClassDefinition = {\n  /**\n   * Optional argument for specifying the superclass.\n   */\n  extends?: Type<any>;\n\n  /**\n   * Required constructor function for a class.\n   *\n   * The function may be optionally wrapped in an `Array`, in which case additional parameter\n   * annotations may be specified.\n   * The number of arguments and the number of parameter annotations must match.\n   *\n   * See {@link Class} for example of usage.\n   */\n  constructor: Function | any[];\n} &\n{\n  /**\n   * Other methods on the class. Note that values should have type 'Function' but TS requires\n   * all properties to have a narrower type than the index signature.\n   */\n  [x: string]: Type<any>|Function|any[];\n};\n\n/**\n * An interface implemented by all Angular type decorators, which allows them to be used as ES7\n * decorators as well as\n * Angular DSL syntax.\n *\n * DSL syntax:\n *\n * ```\n * var MyClass = ng\n *   .Component({...})\n *   .Class({...});\n * ```\n *\n * ES7 syntax:\n *\n * ```\n * @ng.Component({...})\n * class MyClass {...}\n * ```\n * @stable\n */\nexport interface TypeDecorator {\n  /**\n   * Invoke as ES7 decorator.\n   */\n  <T extends Type<any>>(type: T): T;\n\n  // Make TypeDecorator assignable to built-in ParameterDecorator type.\n  // ParameterDecorator is declared in lib.d.ts as a `declare type`\n  // so we cannot declare this interface as a subtype.\n  // see https://github.com/angular/angular/issues/3379#issuecomment-126169417\n  (target: Object, propertyKey?: string|symbol, parameterIndex?: number): void;\n\n  /**\n   * Storage for the accumulated annotations so far used by the DSL syntax.\n   *\n   * Used by {@link Class} to annotate the generated class.\n   */\n  annotations: any[];\n\n  /**\n   * Generate a class from the definition and annotate it with {@link TypeDecorator#annotations}.\n   */\n  Class(obj: ClassDefinition): Type<any>;\n}\n/**\n * @param {?} annotation\n * @return {?}\n */\nfunction extractAnnotation(annotation: any): any {\n  if (typeof annotation === 'function' && annotation.hasOwnProperty('annotation')) {\n    // it is a decorator, extract annotation\n    annotation = annotation.annotation;\n  }\n  return annotation;\n}\n/**\n * @param {?} fnOrArray\n * @param {?} key\n * @return {?}\n */\nfunction applyParams(fnOrArray: Function | any[] | undefined, key: string): Function {\n  if (fnOrArray === Object || fnOrArray === String || fnOrArray === Function ||\n      fnOrArray === Number || fnOrArray === Array) {\n    throw new Error(`Can not use native ${stringify(fnOrArray)} as constructor`);\n  }\n\n  if (typeof fnOrArray === 'function') {\n    return fnOrArray;\n  }\n\n  if (Array.isArray(fnOrArray)) {\n    const /** @type {?} */ annotations: any[] = /** @type {?} */(( fnOrArray as any[]));\n    const /** @type {?} */ annoLength = annotations.length - 1;\n    const /** @type {?} */ fn: Function = fnOrArray[annoLength];\n    if (typeof fn !== 'function') {\n      throw new Error(\n          `Last position of Class method array must be Function in key ${key} was '${stringify(fn)}'`);\n    }\n    if (annoLength != fn.length) {\n      throw new Error(\n          `Number of annotations (${annoLength}) does not match number of arguments (${fn.length}) in the function: ${stringify(fn)}`);\n    }\n    const /** @type {?} */ paramsAnnotations: any[][] = [];\n    for (let /** @type {?} */ i = 0, /** @type {?} */ ii = annotations.length - 1; i < ii; i++) {\n      const /** @type {?} */ paramAnnotations: any[] = [];\n      paramsAnnotations.push(paramAnnotations);\n      const /** @type {?} */ annotation = annotations[i];\n      if (Array.isArray(annotation)) {\n        for (let /** @type {?} */ j = 0; j < annotation.length; j++) {\n          paramAnnotations.push(extractAnnotation(annotation[j]));\n        }\n      } else if (typeof annotation === 'function') {\n        paramAnnotations.push(extractAnnotation(annotation));\n      } else {\n        paramAnnotations.push(annotation);\n      }\n    }\n    Reflect.defineMetadata('parameters', paramsAnnotations, fn);\n    return fn;\n  }\n\n  throw new Error(\n      `Only Function or Array is supported in Class definition for key '${key}' is '${stringify(fnOrArray)}'`);\n}\n/**\n * Provides a way for expressing ES6 classes with parameter annotations in ES5.\n * \n * ## Basic Example\n * \n * ```\n * var Greeter = ng.Class({\n *   constructor: function(name) {\n *     this.name = name;\n *   },\n * \n *   greet: function() {\n *     alert('Hello ' + this.name + '!');\n *   }\n * });\n * ```\n * \n * is equivalent to ES6:\n * \n * ```\n * class Greeter {\n *   constructor(name) {\n *     this.name = name;\n *   }\n * \n *   greet() {\n *     alert('Hello ' + this.name + '!');\n *   }\n * }\n * ```\n * \n * or equivalent to ES5:\n * \n * ```\n * var Greeter = function (name) {\n *   this.name = name;\n * }\n * \n * Greeter.prototype.greet = function () {\n *   alert('Hello ' + this.name + '!');\n * }\n * ```\n * \n * ### Example with parameter annotations\n * \n * ```\n * var MyService = ng.Class({\n *   constructor: [String, [new Optional(), Service], function(name, myService) {\n *     ...\n *   }]\n * });\n * ```\n * \n * is equivalent to ES6:\n * \n * ```\n * class MyService {\n *   constructor(name: string, \\@Optional() myService: Service) {\n *     ...\n *   }\n * }\n * ```\n * \n * ### Example with inheritance\n * \n * ```\n * var Shape = ng.Class({\n *   constructor: (color) {\n *     this.color = color;\n *   }\n * });\n * \n * var Square = ng.Class({\n *   extends: Shape,\n *   constructor: function(color, size) {\n *     Shape.call(this, color);\n *     this.size = size;\n *   }\n * });\n * ```\n * @suppress {globalThis}\n * \\@stable\n * @param {?} clsDef\n * @return {?}\n */\nexport function Class(clsDef: ClassDefinition): Type<any> {\n  const /** @type {?} */ constructor = applyParams(\n      clsDef.hasOwnProperty('constructor') ? clsDef.constructor : undefined, 'constructor');\n\n  let /** @type {?} */ proto = constructor.prototype;\n\n  if (clsDef.hasOwnProperty('extends')) {\n    if (typeof clsDef.extends === 'function') {\n      ( /** @type {?} */((<Function>constructor))).prototype = proto =\n          Object.create(( /** @type {?} */((<Function>clsDef.extends))).prototype);\n    } else {\n      throw new Error(\n          `Class definition 'extends' property must be a constructor function was: ${stringify(clsDef.extends)}`);\n    }\n  }\n\n  for (const /** @type {?} */ key in clsDef) {\n    if (key !== 'extends' && key !== 'prototype' && clsDef.hasOwnProperty(key)) {\n      proto[key] = applyParams(clsDef[key], key);\n    }\n  }\n\n  if (this && this.annotations instanceof Array) {\n    Reflect.defineMetadata('annotations', this.annotations, constructor);\n  }\n\n  const /** @type {?} */ constructorName = constructor['name'];\n  if (!constructorName || constructorName === 'constructor') {\n    ( /** @type {?} */((constructor as any)))['overriddenName'] = `class${_nextClassId++}`;\n  }\n\n  return /** @type {?} */(( <Type<any>>constructor));\n}\n/**\n * @suppress {globalThis}\n * @param {?} name\n * @param {?=} props\n * @param {?=} parentClass\n * @param {?=} chainFn\n * @return {?}\n */\nexport function makeDecorator(\n    name: string, props?: (...args: any[]) => any, parentClass?: any,\n    chainFn?: (fn: Function) => void): (...args: any[]) => (cls: any) => any {\n  const /** @type {?} */ metaCtor = makeMetadataCtor(props);\n/**\n * @param {?} objOrType\n * @return {?}\n */\nfunction DecoratorFactory(objOrType: any): (cls: any) => any {\n    if (!(Reflect && Reflect.getOwnMetadata)) {\n      throw 'reflect-metadata shim is required when using class decorators';\n    }\n\n    if (this instanceof DecoratorFactory) {\n      metaCtor.call(this, objOrType);\n      return this;\n    }\n\n    const /** @type {?} */ annotationInstance = new ( /** @type {?} */((<any>DecoratorFactory)))(objOrType);\n    const /** @type {?} */ chainAnnotation =\n        typeof this === 'function' && Array.isArray(this.annotations) ? this.annotations : [];\n    chainAnnotation.push(annotationInstance);\n    const /** @type {?} */ TypeDecorator: TypeDecorator = /** @type {?} */(( <TypeDecorator>function TypeDecorator(cls: Type<any>) {\n      const /** @type {?} */ annotations = Reflect.getOwnMetadata('annotations', cls) || [];\n      annotations.push(annotationInstance);\n      Reflect.defineMetadata('annotations', annotations, cls);\n      return cls;\n    }));\n    TypeDecorator.annotations = chainAnnotation;\n    TypeDecorator.Class = Class;\n    if (chainFn) chainFn(TypeDecorator);\n    return TypeDecorator;\n  }\n\n  if (parentClass) {\n    DecoratorFactory.prototype = Object.create(parentClass.prototype);\n  }\n\n  DecoratorFactory.prototype.toString = () => `@${name}`;\n  ( /** @type {?} */((<any>DecoratorFactory))).annotationCls = DecoratorFactory;\n  return DecoratorFactory;\n}\n/**\n * @param {?=} props\n * @return {?}\n */\nfunction makeMetadataCtor(props?: (...args: any[]) => any): any {\n  return function ctor(...args: any[]) {\n    if (props) {\n      const /** @type {?} */ values = props(...args);\n      for (const /** @type {?} */ propName in values) {\n        this[propName] = values[propName];\n      }\n    }\n  };\n}\n/**\n * @param {?} name\n * @param {?=} props\n * @param {?=} parentClass\n * @return {?}\n */\nexport function makeParamDecorator(\n    name: string, props?: (...args: any[]) => any, parentClass?: any): any {\n  const /** @type {?} */ metaCtor = makeMetadataCtor(props);\n/**\n * @param {...?} args\n * @return {?}\n */\nfunction ParamDecoratorFactory(...args: any[]): any {\n    if (this instanceof ParamDecoratorFactory) {\n      metaCtor.apply(this, args);\n      return this;\n    }\n    const /** @type {?} */ annotationInstance = new ( /** @type {?} */((<any>ParamDecoratorFactory)))(...args);\n\n    ( /** @type {?} */((<any>ParamDecorator))).annotation = annotationInstance;\n    return ParamDecorator;\n/**\n * @param {?} cls\n * @param {?} unusedKey\n * @param {?} index\n * @return {?}\n */\nfunction ParamDecorator(cls: any, unusedKey: any, index: number): any {\n      const /** @type {?} */ parameters: (any[] | null)[] = Reflect.getOwnMetadata('parameters', cls) || [];\n\n      // there might be gaps if some in between parameters do not have annotations.\n      // we pad with nulls.\n      while (parameters.length <= index) {\n        parameters.push(null);\n      }\n\n      parameters[index] = parameters[index] || []; /** @type {?} */((\n      parameters[index])).push(annotationInstance);\n\n      Reflect.defineMetadata('parameters', parameters, cls);\n      return cls;\n    }\n  }\n  if (parentClass) {\n    ParamDecoratorFactory.prototype = Object.create(parentClass.prototype);\n  }\n  ParamDecoratorFactory.prototype.toString = () => `@${name}`;\n  ( /** @type {?} */((<any>ParamDecoratorFactory))).annotationCls = ParamDecoratorFactory;\n  return ParamDecoratorFactory;\n}\n/**\n * @param {?} name\n * @param {?=} props\n * @param {?=} parentClass\n * @return {?}\n */\nexport function makePropDecorator(\n    name: string, props?: (...args: any[]) => any, parentClass?: any): any {\n  const /** @type {?} */ metaCtor = makeMetadataCtor(props);\n/**\n * @param {...?} args\n * @return {?}\n */\nfunction PropDecoratorFactory(...args: any[]): any {\n    if (this instanceof PropDecoratorFactory) {\n      metaCtor.apply(this, args);\n      return this;\n    }\n\n    const /** @type {?} */ decoratorInstance = new ( /** @type {?} */((<any>PropDecoratorFactory)))(...args);\n\n    return function PropDecorator(target: any, name: string) {\n      const /** @type {?} */ meta = Reflect.getOwnMetadata('propMetadata', target.constructor) || {};\n      meta[name] = meta.hasOwnProperty(name) && meta[name] || [];\n      meta[name].unshift(decoratorInstance);\n      Reflect.defineMetadata('propMetadata', meta, target.constructor);\n    };\n  }\n\n  if (parentClass) {\n    PropDecoratorFactory.prototype = Object.create(parentClass.prototype);\n  }\n\n  PropDecoratorFactory.prototype.toString = () => `@${name}`;\n  ( /** @type {?} */((<any>PropDecoratorFactory))).annotationCls = PropDecoratorFactory;\n  return PropDecoratorFactory;\n}\n","\nexport type ChangeDetectionStrategy = number;\nexport let ChangeDetectionStrategy: any = {};\nChangeDetectionStrategy.OnPush = 0;\nChangeDetectionStrategy.Default = 1;\nChangeDetectionStrategy[ChangeDetectionStrategy.OnPush] = \"OnPush\";\nChangeDetectionStrategy[ChangeDetectionStrategy.Default] = \"Default\";\n\nexport type ChangeDetectorStatus = number;\nexport let ChangeDetectorStatus: any = {};\nChangeDetectorStatus.CheckOnce = 0;\nChangeDetectorStatus.Checked = 1;\nChangeDetectorStatus.CheckAlways = 2;\nChangeDetectorStatus.Detached = 3;\nChangeDetectorStatus.Errored = 4;\nChangeDetectorStatus.Destroyed = 5;\nChangeDetectorStatus[ChangeDetectorStatus.CheckOnce] = \"CheckOnce\";\nChangeDetectorStatus[ChangeDetectorStatus.Checked] = \"Checked\";\nChangeDetectorStatus[ChangeDetectorStatus.CheckAlways] = \"CheckAlways\";\nChangeDetectorStatus[ChangeDetectorStatus.Detached] = \"Detached\";\nChangeDetectorStatus[ChangeDetectorStatus.Errored] = \"Errored\";\nChangeDetectorStatus[ChangeDetectorStatus.Destroyed] = \"Destroyed\";\n\n/**\n * @param {?} changeDetectionStrategy\n * @return {?}\n */\nexport function isDefaultChangeDetectionStrategy(changeDetectionStrategy: ChangeDetectionStrategy):\n    boolean {\n  return changeDetectionStrategy == null ||\n      changeDetectionStrategy === ChangeDetectionStrategy.Default;\n}\n","\nexport type ViewEncapsulation = number;\nexport let ViewEncapsulation: any = {};\nViewEncapsulation.Emulated = 0;\nViewEncapsulation.Native = 1;\nViewEncapsulation.None = 2;\nViewEncapsulation[ViewEncapsulation.Emulated] = \"Emulated\";\nViewEncapsulation[ViewEncapsulation.Native] = \"Native\";\nViewEncapsulation[ViewEncapsulation.None] = \"None\";\n\n/**\n * Metadata properties available for configuring Views.\n * \n * For details on the `\\@Component` annotation, see {\\@link Component}.\n * \n * ### Example\n * \n * ```\n * \\@Component({ \n *   selector: 'greet',\n *   template: 'Hello {{name}}!',\n * })\n * class Greet {\n *   name: string;\n * \n *   constructor() {\n *     this.name = 'World';\n *   }\n * }\n * ```\n * \n * @deprecated Use Component instead.\n * \n * {\\@link Component}\n */\nexport class ViewMetadata {\n/**\n * {\\@link Component#templateUrl}\n */\ntemplateUrl: string|undefined;\n/**\n * {\\@link Component#template}\n */\ntemplate: string|undefined;\n/**\n * {\\@link Component#stylesUrl}\n */\nstyleUrls: string[]|undefined;\n/**\n * {\\@link Component#styles}\n */\nstyles: string[]|undefined;\n/**\n * {\\@link Component#encapsulation}\n */\nencapsulation: ViewEncapsulation|undefined;\n/**\n * {\\@link Component#animation}\n */\nanimations: any[]|undefined;\n/**\n * {\\@link Component#interpolation}\n */\ninterpolation: [string, string]|undefined;\n/**\n * @param {?=} opts\n */\nconstructor(opts: {\n    templateUrl?: string,\n    template?: string,\n    encapsulation?: ViewEncapsulation,\n    styles?: string[],\n    styleUrls?: string[],\n    animations?: any[],\n    interpolation?: [string, string]\n  } = {}) {\n    this.templateUrl = opts.templateUrl;\n    this.template = opts.template;\n    this.styleUrls = opts.styleUrls;\n    this.styles = opts.styles;\n    this.encapsulation = opts.encapsulation;\n    this.animations = opts.animations;\n    this.interpolation = opts.interpolation;\n  }\n}\n\nfunction ViewMetadata_tsickle_Closure_declarations() {\n/**\n * {\\@link Component#templateUrl}\n * @type {?}\n */\nViewMetadata.prototype.templateUrl;\n/**\n * {\\@link Component#template}\n * @type {?}\n */\nViewMetadata.prototype.template;\n/**\n * {\\@link Component#stylesUrl}\n * @type {?}\n */\nViewMetadata.prototype.styleUrls;\n/**\n * {\\@link Component#styles}\n * @type {?}\n */\nViewMetadata.prototype.styles;\n/**\n * {\\@link Component#encapsulation}\n * @type {?}\n */\nViewMetadata.prototype.encapsulation;\n/**\n * {\\@link Component#animation}\n * @type {?}\n */\nViewMetadata.prototype.animations;\n/**\n * {\\@link Component#interpolation}\n * @type {?}\n */\nViewMetadata.prototype.interpolation;\n}\n\n","\n/**\n * \\@whatItDoes Represents the version of Angular\n * \n * \\@stable\n */\nexport class Version {\n/**\n * @param {?} full\n */\nconstructor(public full: string) {}\n/**\n * @return {?}\n */\nget major(): string { return this.full.split('.')[0]; }\n/**\n * @return {?}\n */\nget minor(): string { return this.full.split('.')[1]; }\n/**\n * @return {?}\n */\nget patch(): string { return this.full.split('.').slice(2).join('.'); }\n}\n\nfunction Version_tsickle_Closure_declarations() {\n/** @type {?} */\nVersion.prototype.full;\n}\n\n/**\n * \\@stable\n */\nexport const VERSION = new Version('4.4.6');\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Type} from '../type';\nimport {stringify} from '../util';\n\nimport {InjectionToken} from './injection_token';\n\nconst /** @type {?} */ _THROW_IF_NOT_FOUND = new Object();\nexport const /** @type {?} */ THROW_IF_NOT_FOUND = _THROW_IF_NOT_FOUND;\nclass _NullInjector implements Injector {\n/**\n * @param {?} token\n * @param {?=} notFoundValue\n * @return {?}\n */\nget(token: any, notFoundValue: any = _THROW_IF_NOT_FOUND): any {\n    if (notFoundValue === _THROW_IF_NOT_FOUND) {\n      throw new Error(`No provider for ${stringify(token)}!`);\n    }\n    return notFoundValue;\n  }\n}\n/**\n * \\@whatItDoes Injector interface\n * \\@howToUse \n * ```\n * const injector: Injector = ...;\n * injector.get(...);\n * ```\n * \n * \\@description \n * For more details, see the {\\@linkDocs guide/dependency-injection \"Dependency Injection Guide\"}.\n * \n * ### Example\n * \n * {\\@example core/di/ts/injector_spec.ts region='Injector'}\n * \n * `Injector` returns itself when given `Injector` as a token:\n * {\\@example core/di/ts/injector_spec.ts region='injectInjector'}\n * \n * \\@stable\n * @abstract\n */\nexport abstract class Injector {\n  static THROW_IF_NOT_FOUND = _THROW_IF_NOT_FOUND;\n  static NULL: Injector = new _NullInjector();\n/**\n * Retrieves an instance from the injector based on the provided token.\n * If not found:\n * - Throws an error if no `notFoundValue` that is not equal to\n * Injector.THROW_IF_NOT_FOUND is given\n * - Returns the `notFoundValue` otherwise\n * @abstract\n * @template T\n * @param {?} token\n * @param {?=} notFoundValue\n * @return {?}\n */\nget<T>(token: Type<T>|InjectionToken<T>, notFoundValue?: T) {}\n/**\n * @deprecated from v4.0.0 use Type<T> or InjectionToken<T>\n * @suppress {duplicate}\n * @abstract\n * @param {?} token\n * @param {?=} notFoundValue\n * @return {?}\n */\nget(token: any, notFoundValue?: any) {}\n}\n\nfunction Injector_tsickle_Closure_declarations() {\n/** @type {?} */\nInjector.THROW_IF_NOT_FOUND;\n/** @type {?} */\nInjector.NULL;\n}\n\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {DebugContext} from './view';\n\nexport const /** @type {?} */ ERROR_TYPE = 'ngType';\nexport const /** @type {?} */ ERROR_COMPONENT_TYPE = 'ngComponentType';\nexport const /** @type {?} */ ERROR_DEBUG_CONTEXT = 'ngDebugContext';\nexport const /** @type {?} */ ERROR_ORIGINAL_ERROR = 'ngOriginalError';\nexport const /** @type {?} */ ERROR_LOGGER = 'ngErrorLogger';\n/**\n * @param {?} error\n * @return {?}\n */\nexport function getType(error: Error): Function {\n  return ( /** @type {?} */((error as any)))[ERROR_TYPE];\n}\n/**\n * @param {?} error\n * @return {?}\n */\nexport function getDebugContext(error: Error): DebugContext {\n  return ( /** @type {?} */((error as any)))[ERROR_DEBUG_CONTEXT];\n}\n/**\n * @param {?} error\n * @return {?}\n */\nexport function getOriginalError(error: Error): Error {\n  return ( /** @type {?} */((error as any)))[ERROR_ORIGINAL_ERROR];\n}\n/**\n * @param {?} error\n * @return {?}\n */\nexport function getErrorLogger(error: Error): (console: Console, ...values: any[]) => void {\n  return ( /** @type {?} */((error as any)))[ERROR_LOGGER] || defaultErrorLogger;\n}\n/**\n * @param {?} console\n * @param {...?} values\n * @return {?}\n */\nfunction defaultErrorLogger(console: Console, ...values: any[]) {\n  ( /** @type {?} */((<any>console.error)))(...values);\n}","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {ERROR_ORIGINAL_ERROR, getDebugContext, getErrorLogger, getOriginalError} from './errors';\n/**\n * \\@whatItDoes Provides a hook for centralized exception handling.\n * \n * \\@description \n * \n * The default implementation of `ErrorHandler` prints error messages to the `console`. To\n * intercept error handling, write a custom exception handler that replaces this default as\n * appropriate for your app.\n * \n * ### Example\n * \n * ```\n * class MyErrorHandler implements ErrorHandler {\n *   handleError(error) {\n *     // do something with the exception\n *   }\n * }\n * \n * \\@NgModule({ \n *   providers: [{provide: ErrorHandler, useClass: MyErrorHandler}]\n * })\n * class MyModule {}\n * ```\n * \n * \\@stable\n */\nexport class ErrorHandler {\n/**\n * \\@internal\n */\n_console: Console = console;\n/**\n * @param {?=} deprecatedParameter\n */\nconstructor(\n      /**\n       * @deprecated since v4.0 parameter no longer has an effect, as ErrorHandler will never\n       * rethrow.\n       */\n      deprecatedParameter?: boolean) {}\n/**\n * @param {?} error\n * @return {?}\n */\nhandleError(error: any): void {\n    const /** @type {?} */ originalError = this._findOriginalError(error);\n    const /** @type {?} */ context = this._findContext(error);\n    // Note: Browser consoles show the place from where console.error was called.\n    // We can use this to give users additional information about the error.\n    const /** @type {?} */ errorLogger = getErrorLogger(error);\n\n    errorLogger(this._console, `ERROR`, error);\n    if (originalError) {\n      errorLogger(this._console, `ORIGINAL ERROR`, originalError);\n    }\n    if (context) {\n      errorLogger(this._console, 'ERROR CONTEXT', context);\n    }\n  }\n/**\n * \\@internal\n * @param {?} error\n * @return {?}\n */\n_findContext(error: any): any {\n    if (error) {\n      return getDebugContext(error) ? getDebugContext(error) :\n                                      this._findContext(getOriginalError(error));\n    }\n\n    return null;\n  }\n/**\n * \\@internal\n * @param {?} error\n * @return {?}\n */\n_findOriginalError(error: Error): any {\n    let /** @type {?} */ e = getOriginalError(error);\n    while (e && getOriginalError(e)) {\n      e = getOriginalError(e);\n    }\n\n    return e;\n  }\n}\n\nfunction ErrorHandler_tsickle_Closure_declarations() {\n/**\n * \\@internal\n * @type {?}\n */\nErrorHandler.prototype._console;\n}\n\n/**\n * @param {?} message\n * @param {?} originalError\n * @return {?}\n */\nexport function wrappedError(message: string, originalError: any): Error {\n  const /** @type {?} */ msg =\n      `${message} caused by: ${originalError instanceof Error ? originalError.message: originalError }`;\n  const /** @type {?} */ error = Error(msg);\n  ( /** @type {?} */((error as any)))[ERROR_ORIGINAL_ERROR] = originalError;\n  return error;\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {stringify} from '../util';\nimport {resolveForwardRef} from './forward_ref';\n/**\n * A unique object used for retrieving items from the {\\@link ReflectiveInjector}.\n * \n * Keys have:\n * - a system-wide unique `id`.\n * - a `token`.\n * \n * `Key` is used internally by {\\@link ReflectiveInjector} because its system-wide unique `id` allows\n * the\n * injector to store created objects in a more efficient way.\n * \n * `Key` should not be created directly. {\\@link ReflectiveInjector} creates keys automatically when\n * resolving\n * providers.\n * \\@experimental\n */\nexport class ReflectiveKey {\n/**\n * Private\n * @param {?} token\n * @param {?} id\n */\nconstructor(public token: Object,\npublic id: number) {\n    if (!token) {\n      throw new Error('Token must be defined!');\n    }\n  }\n/**\n * Returns a stringified token.\n * @return {?}\n */\nget displayName(): string { return stringify(this.token); }\n/**\n * Retrieves a `Key` for a token.\n * @param {?} token\n * @return {?}\n */\nstatic get(token: Object): ReflectiveKey {\n    return _globalKeyRegistry.get(resolveForwardRef(token));\n  }\n/**\n * @return {?} the number of keys registered in the system.\n */\nstatic get numberOfKeys(): number { return _globalKeyRegistry.numberOfKeys; }\n}\n\nfunction ReflectiveKey_tsickle_Closure_declarations() {\n/** @type {?} */\nReflectiveKey.prototype.token;\n/** @type {?} */\nReflectiveKey.prototype.id;\n}\n\n/**\n * \\@internal\n */\nexport class KeyRegistry {\nprivate _allKeys = new Map<Object, ReflectiveKey>();\n/**\n * @param {?} token\n * @return {?}\n */\nget(token: Object): ReflectiveKey {\n    if (token instanceof ReflectiveKey) return token;\n\n    if (this._allKeys.has(token)) {\n      return /** @type {?} */(( this._allKeys.get(token)));\n    }\n\n    const /** @type {?} */ newKey = new ReflectiveKey(token, ReflectiveKey.numberOfKeys);\n    this._allKeys.set(token, newKey);\n    return newKey;\n  }\n/**\n * @return {?}\n */\nget numberOfKeys(): number { return this._allKeys.size; }\n}\n\nfunction KeyRegistry_tsickle_Closure_declarations() {\n/** @type {?} */\nKeyRegistry.prototype._allKeys;\n}\n\n\nconst /** @type {?} */ _globalKeyRegistry = new KeyRegistry();\n","\n/**\n * \\@whatItDoes Represents a type that a Component or other object is instances of.\n * \n * \\@description \n * \n * An example of a `Type` is `MyCustomComponent` class, which in JavaScript is be represented by\n * the `MyCustomComponent` constructor function.\n * \n * \\@stable\n */\nexport const Type = Function;\n/**\n * @param {?} v\n * @return {?}\n */\nexport function isType(v: any): v is Type<any> {\n  return typeof v === 'function';\n}\n\nexport interface Type<T> extends Function { new (...args: any[]): T; }\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Type, isType} from '../type';\nimport {global, stringify} from '../util';\nimport {PlatformReflectionCapabilities} from './platform_reflection_capabilities';\nimport {GetterFn, MethodFn, SetterFn} from './types';\n/**\n * Attention: This regex has to hold even if the code is minified!\n */\nexport const DELEGATE_CTOR = /^function\\s+\\S+\\(\\)\\s*{[\\s\\S]+\\.apply\\(this,\\s*arguments\\)/;\nexport class ReflectionCapabilities implements PlatformReflectionCapabilities {\nprivate _reflect: any;\n/**\n * @param {?=} reflect\n */\nconstructor(reflect?: any) { this._reflect = reflect || global['Reflect']; }\n/**\n * @return {?}\n */\nisReflectionEnabled(): boolean { return true; }\n/**\n * @template T\n * @param {?} t\n * @return {?}\n */\nfactory<T>(t: Type<T>): (args: any[]) => T { return (...args: any[]) => new t(...args); }\n/**\n * \\@internal\n * @param {?} paramTypes\n * @param {?} paramAnnotations\n * @return {?}\n */\n_zipTypesAndAnnotations(paramTypes: any[], paramAnnotations: any[]): any[][] {\n    let /** @type {?} */ result: any[][];\n\n    if (typeof paramTypes === 'undefined') {\n      result = new Array(paramAnnotations.length);\n    } else {\n      result = new Array(paramTypes.length);\n    }\n\n    for (let /** @type {?} */ i = 0; i < result.length; i++) {\n      // TS outputs Object for parameters without types, while Traceur omits\n      // the annotations. For now we preserve the Traceur behavior to aid\n      // migration, but this can be revisited.\n      if (typeof paramTypes === 'undefined') {\n        result[i] = [];\n      } else if (paramTypes[i] != Object) {\n        result[i] = [paramTypes[i]];\n      } else {\n        result[i] = [];\n      }\n      if (paramAnnotations && paramAnnotations[i] != null) {\n        result[i] = result[i].concat(paramAnnotations[i]);\n      }\n    }\n    return result;\n  }\n/**\n * @param {?} type\n * @param {?} parentCtor\n * @return {?}\n */\nprivate _ownParameters(type: Type<any>, parentCtor: any): any[][]|null {\n    // If we have no decorators, we only have function.length as metadata.\n    // In that case, to detect whether a child class declared an own constructor or not,\n    // we need to look inside of that constructor to check whether it is\n    // just calling the parent.\n    // This also helps to work around for https://github.com/Microsoft/TypeScript/issues/12439\n    // that sets 'design:paramtypes' to []\n    // if a class inherits from another class but has no ctor declared itself.\n    if (DELEGATE_CTOR.exec(type.toString())) {\n      return null;\n    }\n\n    // Prefer the direct API.\n    if (( /** @type {?} */((<any>type))).parameters && ( /** @type {?} */((<any>type))).parameters !== parentCtor.parameters) {\n      return ( /** @type {?} */((<any>type))).parameters;\n    }\n\n    // API of tsickle for lowering decorators to properties on the class.\n    const /** @type {?} */ tsickleCtorParams = ( /** @type {?} */((<any>type))).ctorParameters;\n    if (tsickleCtorParams && tsickleCtorParams !== parentCtor.ctorParameters) {\n      // Newer tsickle uses a function closure\n      // Retain the non-function case for compatibility with older tsickle\n      const /** @type {?} */ ctorParameters =\n          typeof tsickleCtorParams === 'function' ? tsickleCtorParams() : tsickleCtorParams;\n      const /** @type {?} */ paramTypes = ctorParameters.map((ctorParam: any) => ctorParam && ctorParam.type);\n      const /** @type {?} */ paramAnnotations = ctorParameters.map(\n          (ctorParam: any) =>\n              ctorParam && convertTsickleDecoratorIntoMetadata(ctorParam.decorators));\n      return this._zipTypesAndAnnotations(paramTypes, paramAnnotations);\n    }\n\n    // API for metadata created by invoking the decorators.\n    if (this._reflect != null && this._reflect.getOwnMetadata != null) {\n      const /** @type {?} */ paramAnnotations = this._reflect.getOwnMetadata('parameters', type);\n      const /** @type {?} */ paramTypes = this._reflect.getOwnMetadata('design:paramtypes', type);\n      if (paramTypes || paramAnnotations) {\n        return this._zipTypesAndAnnotations(paramTypes, paramAnnotations);\n      }\n    }\n\n    // If a class has no decorators, at least create metadata\n    // based on function.length.\n    // Note: We know that this is a real constructor as we checked\n    // the content of the constructor above.\n    return new Array(( /** @type {?} */((<any>type.length)))).fill(undefined);\n  }\n/**\n * @param {?} type\n * @return {?}\n */\nparameters(type: Type<any>): any[][] {\n    // Note: only report metadata if we have at least one class decorator\n    // to stay in sync with the static reflector.\n    if (!isType(type)) {\n      return [];\n    }\n    const /** @type {?} */ parentCtor = getParentCtor(type);\n    let /** @type {?} */ parameters = this._ownParameters(type, parentCtor);\n    if (!parameters && parentCtor !== Object) {\n      parameters = this.parameters(parentCtor);\n    }\n    return parameters || [];\n  }\n/**\n * @param {?} typeOrFunc\n * @param {?} parentCtor\n * @return {?}\n */\nprivate _ownAnnotations(typeOrFunc: Type<any>, parentCtor: any): any[]|null {\n    // Prefer the direct API.\n    if (( /** @type {?} */((<any>typeOrFunc))).annotations && ( /** @type {?} */((<any>typeOrFunc))).annotations !== parentCtor.annotations) {\n      let /** @type {?} */ annotations = ( /** @type {?} */((<any>typeOrFunc))).annotations;\n      if (typeof annotations === 'function' && annotations.annotations) {\n        annotations = annotations.annotations;\n      }\n      return annotations;\n    }\n\n    // API of tsickle for lowering decorators to properties on the class.\n    if (( /** @type {?} */((<any>typeOrFunc))).decorators && ( /** @type {?} */((<any>typeOrFunc))).decorators !== parentCtor.decorators) {\n      return convertTsickleDecoratorIntoMetadata(( /** @type {?} */((<any>typeOrFunc))).decorators);\n    }\n\n    // API for metadata created by invoking the decorators.\n    if (this._reflect && this._reflect.getOwnMetadata) {\n      return this._reflect.getOwnMetadata('annotations', typeOrFunc);\n    }\n    return null;\n  }\n/**\n * @param {?} typeOrFunc\n * @return {?}\n */\nannotations(typeOrFunc: Type<any>): any[] {\n    if (!isType(typeOrFunc)) {\n      return [];\n    }\n    const /** @type {?} */ parentCtor = getParentCtor(typeOrFunc);\n    const /** @type {?} */ ownAnnotations = this._ownAnnotations(typeOrFunc, parentCtor) || [];\n    const /** @type {?} */ parentAnnotations = parentCtor !== Object ? this.annotations(parentCtor) : [];\n    return parentAnnotations.concat(ownAnnotations);\n  }\n/**\n * @param {?} typeOrFunc\n * @param {?} parentCtor\n * @return {?}\n */\nprivate _ownPropMetadata(typeOrFunc: any, parentCtor: any): {[key: string]: any[]}|null {\n    // Prefer the direct API.\n    if (( /** @type {?} */((<any>typeOrFunc))).propMetadata &&\n        ( /** @type {?} */((<any>typeOrFunc))).propMetadata !== parentCtor.propMetadata) {\n      let /** @type {?} */ propMetadata = ( /** @type {?} */((<any>typeOrFunc))).propMetadata;\n      if (typeof propMetadata === 'function' && propMetadata.propMetadata) {\n        propMetadata = propMetadata.propMetadata;\n      }\n      return propMetadata;\n    }\n\n    // API of tsickle for lowering decorators to properties on the class.\n    if (( /** @type {?} */((<any>typeOrFunc))).propDecorators &&\n        ( /** @type {?} */((<any>typeOrFunc))).propDecorators !== parentCtor.propDecorators) {\n      const /** @type {?} */ propDecorators = ( /** @type {?} */((<any>typeOrFunc))).propDecorators;\n      const /** @type {?} */ propMetadata = /** @type {?} */(( <{[key: string]: any[]}>{}));\n      Object.keys(propDecorators).forEach(prop => {\n        propMetadata[prop] = convertTsickleDecoratorIntoMetadata(propDecorators[prop]);\n      });\n      return propMetadata;\n    }\n\n    // API for metadata created by invoking the decorators.\n    if (this._reflect && this._reflect.getOwnMetadata) {\n      return this._reflect.getOwnMetadata('propMetadata', typeOrFunc);\n    }\n    return null;\n  }\n/**\n * @param {?} typeOrFunc\n * @return {?}\n */\npropMetadata(typeOrFunc: any): {[key: string]: any[]} {\n    if (!isType(typeOrFunc)) {\n      return {};\n    }\n    const /** @type {?} */ parentCtor = getParentCtor(typeOrFunc);\n    const /** @type {?} */ propMetadata: {[key: string]: any[]} = {};\n    if (parentCtor !== Object) {\n      const /** @type {?} */ parentPropMetadata = this.propMetadata(parentCtor);\n      Object.keys(parentPropMetadata).forEach((propName) => {\n        propMetadata[propName] = parentPropMetadata[propName];\n      });\n    }\n    const /** @type {?} */ ownPropMetadata = this._ownPropMetadata(typeOrFunc, parentCtor);\n    if (ownPropMetadata) {\n      Object.keys(ownPropMetadata).forEach((propName) => {\n        const /** @type {?} */ decorators: any[] = [];\n        if (propMetadata.hasOwnProperty(propName)) {\n          decorators.push(...propMetadata[propName]);\n        }\n        decorators.push(...ownPropMetadata[propName]);\n        propMetadata[propName] = decorators;\n      });\n    }\n    return propMetadata;\n  }\n/**\n * @param {?} type\n * @param {?} lcProperty\n * @return {?}\n */\nhasLifecycleHook(type: any, lcProperty: string): boolean {\n    return type instanceof Type && lcProperty in type.prototype;\n  }\n/**\n * @param {?} name\n * @return {?}\n */\ngetter(name: string): GetterFn { return /** @type {?} */(( <GetterFn>new Function('o', 'return o.' + name + ';'))); }\n/**\n * @param {?} name\n * @return {?}\n */\nsetter(name: string): SetterFn {\n    return /** @type {?} */(( <SetterFn>new Function('o', 'v', 'return o.' + name + ' = v;')));\n  }\n/**\n * @param {?} name\n * @return {?}\n */\nmethod(name: string): MethodFn {\n    const /** @type {?} */ functionBody = `if (!o.${name}) throw new Error('\"${name}\" is undefined');\n        return o.${name}.apply(o, args);`;\n    return /** @type {?} */(( <MethodFn>new Function('o', 'args', functionBody)));\n  }\n/**\n * @param {?} type\n * @return {?}\n */\nimportUri(type: any): string {\n    // StaticSymbol\n    if (typeof type === 'object' && type['filePath']) {\n      return type['filePath'];\n    }\n    // Runtime type\n    return `./${stringify(type)}`;\n  }\n/**\n * @param {?} type\n * @return {?}\n */\nresourceUri(type: any): string { return `./${stringify(type)}`; }\n/**\n * @param {?} name\n * @param {?} moduleUrl\n * @param {?} members\n * @param {?} runtime\n * @return {?}\n */\nresolveIdentifier(name: string, moduleUrl: string, members: string[], runtime: any): any {\n    return runtime;\n  }\n/**\n * @param {?} enumIdentifier\n * @param {?} name\n * @return {?}\n */\nresolveEnum(enumIdentifier: any, name: string): any { return enumIdentifier[name]; }\n}\n\nfunction ReflectionCapabilities_tsickle_Closure_declarations() {\n/** @type {?} */\nReflectionCapabilities.prototype._reflect;\n}\n\n/**\n * @param {?} decoratorInvocations\n * @return {?}\n */\nfunction convertTsickleDecoratorIntoMetadata(decoratorInvocations: any[]): any[] {\n  if (!decoratorInvocations) {\n    return [];\n  }\n  return decoratorInvocations.map(decoratorInvocation => {\n    const /** @type {?} */ decoratorType = decoratorInvocation.type;\n    const /** @type {?} */ annotationCls = decoratorType.annotationCls;\n    const /** @type {?} */ annotationArgs = decoratorInvocation.args ? decoratorInvocation.args : [];\n    return new annotationCls(...annotationArgs);\n  });\n}\n/**\n * @param {?} ctor\n * @return {?}\n */\nfunction getParentCtor(ctor: Function): Type<any> {\n  const /** @type {?} */ parentProto = Object.getPrototypeOf(ctor.prototype);\n  const /** @type {?} */ parentCtor = parentProto ? parentProto.constructor : null;\n  // Note: We always use `Object` as the null value\n  // to simplify checking later on.\n  return parentCtor || Object;\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Type} from '../type';\nimport {PlatformReflectionCapabilities} from './platform_reflection_capabilities';\nimport {GetterFn, MethodFn, SetterFn} from './types';\n\nexport {PlatformReflectionCapabilities} from './platform_reflection_capabilities';\nexport {GetterFn, MethodFn, SetterFn} from './types';\n/**\n * Provides access to reflection data about symbols. Used internally by Angular\n * to power dependency injection and compilation.\n */\nexport class Reflector {\n/**\n * @param {?} reflectionCapabilities\n */\nconstructor(public reflectionCapabilities: PlatformReflectionCapabilities) {}\n/**\n * @param {?} caps\n * @return {?}\n */\nupdateCapabilities(caps: PlatformReflectionCapabilities) { this.reflectionCapabilities = caps; }\n/**\n * @param {?} type\n * @return {?}\n */\nfactory(type: Type<any>): Function { return this.reflectionCapabilities.factory(type); }\n/**\n * @param {?} typeOrFunc\n * @return {?}\n */\nparameters(typeOrFunc: Type<any>): any[][] {\n    return this.reflectionCapabilities.parameters(typeOrFunc);\n  }\n/**\n * @param {?} typeOrFunc\n * @return {?}\n */\nannotations(typeOrFunc: Type<any>): any[] {\n    return this.reflectionCapabilities.annotations(typeOrFunc);\n  }\n/**\n * @param {?} typeOrFunc\n * @return {?}\n */\npropMetadata(typeOrFunc: Type<any>): {[key: string]: any[]} {\n    return this.reflectionCapabilities.propMetadata(typeOrFunc);\n  }\n/**\n * @param {?} type\n * @param {?} lcProperty\n * @return {?}\n */\nhasLifecycleHook(type: any, lcProperty: string): boolean {\n    return this.reflectionCapabilities.hasLifecycleHook(type, lcProperty);\n  }\n/**\n * @param {?} name\n * @return {?}\n */\ngetter(name: string): GetterFn { return this.reflectionCapabilities.getter(name); }\n/**\n * @param {?} name\n * @return {?}\n */\nsetter(name: string): SetterFn { return this.reflectionCapabilities.setter(name); }\n/**\n * @param {?} name\n * @return {?}\n */\nmethod(name: string): MethodFn { return this.reflectionCapabilities.method(name); }\n/**\n * @param {?} type\n * @return {?}\n */\nimportUri(type: any): string { return this.reflectionCapabilities.importUri(type); }\n/**\n * @param {?} type\n * @return {?}\n */\nresourceUri(type: any): string { return this.reflectionCapabilities.resourceUri(type); }\n/**\n * @param {?} name\n * @param {?} moduleUrl\n * @param {?} members\n * @param {?} runtime\n * @return {?}\n */\nresolveIdentifier(name: string, moduleUrl: string, members: string[], runtime: any): any {\n    return this.reflectionCapabilities.resolveIdentifier(name, moduleUrl, members, runtime);\n  }\n/**\n * @param {?} identifier\n * @param {?} name\n * @return {?}\n */\nresolveEnum(identifier: any, name: string): any {\n    return this.reflectionCapabilities.resolveEnum(identifier, name);\n  }\n}\n\nfunction Reflector_tsickle_Closure_declarations() {\n/** @type {?} */\nReflector.prototype.reflectionCapabilities;\n}\n\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {ReflectionCapabilities} from './reflection_capabilities';\nimport {Reflector} from './reflector';\n\nexport {Reflector} from './reflector';\n/**\n * The {\\@link Reflector} used internally in Angular to access metadata\n * about symbols.\n */\nexport const reflector = new Reflector(new ReflectionCapabilities());\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {reflector} from '../reflection/reflection';\nimport {Type} from '../type';\n\nimport {resolveForwardRef} from './forward_ref';\nimport {InjectionToken} from './injection_token';\nimport {Inject, Optional, Self, SkipSelf} from './metadata';\nimport {ClassProvider, ExistingProvider, FactoryProvider, Provider, TypeProvider, ValueProvider} from './provider';\nimport {invalidProviderError, mixingMultiProvidersWithRegularProvidersError, noAnnotationError} from './reflective_errors';\nimport {ReflectiveKey} from './reflective_key';\n\n\ninterface NormalizedProvider extends TypeProvider, ValueProvider, ClassProvider, ExistingProvider,\n    FactoryProvider {}\n/**\n * `Dependency` is used by the framework to extend DI.\n * This is internal to Angular and should not be used directly.\n */\nexport class ReflectiveDependency {\n/**\n * @param {?} key\n * @param {?} optional\n * @param {?} visibility\n */\nconstructor(\npublic key: ReflectiveKey,\npublic optional: boolean,\npublic visibility: Self|SkipSelf|null) {}\n/**\n * @param {?} key\n * @return {?}\n */\nstatic fromKey(key: ReflectiveKey): ReflectiveDependency {\n    return new ReflectiveDependency(key, false, null);\n  }\n}\n\nfunction ReflectiveDependency_tsickle_Closure_declarations() {\n/** @type {?} */\nReflectiveDependency.prototype.key;\n/** @type {?} */\nReflectiveDependency.prototype.optional;\n/** @type {?} */\nReflectiveDependency.prototype.visibility;\n}\n\n\nconst /** @type {?} */ _EMPTY_LIST: any[] = [];\n\n/**\n * An internal resolved representation of a {@link Provider} used by the {@link Injector}.\n *\n * It is usually created automatically by `Injector.resolveAndCreate`.\n *\n * It can be created manually, as follows:\n *\n * ### Example ([live demo](http://plnkr.co/edit/RfEnhh8kUEI0G3qsnIeT?p%3Dpreview&p=preview))\n *\n * ```typescript\n * var resolvedProviders = Injector.resolve([{ provide: 'message', useValue: 'Hello' }]);\n * var injector = Injector.fromResolvedProviders(resolvedProviders);\n *\n * expect(injector.get('message')).toEqual('Hello');\n * ```\n *\n * @experimental\n */\nexport interface ResolvedReflectiveProvider {\n  /**\n   * A key, usually a `Type<any>`.\n   */\n  key: ReflectiveKey;\n\n  /**\n   * Factory function which can return an instance of an object represented by a key.\n   */\n  resolvedFactories: ResolvedReflectiveFactory[];\n\n  /**\n   * Indicates if the provider is a multi-provider or a regular provider.\n   */\n  multiProvider: boolean;\n}\nexport class ResolvedReflectiveProvider_ implements ResolvedReflectiveProvider {\n/**\n * @param {?} key\n * @param {?} resolvedFactories\n * @param {?} multiProvider\n */\nconstructor(\npublic key: ReflectiveKey,\npublic resolvedFactories: ResolvedReflectiveFactory[],\npublic multiProvider: boolean) {}\n/**\n * @return {?}\n */\nget resolvedFactory(): ResolvedReflectiveFactory { return this.resolvedFactories[0]; }\n}\n\nfunction ResolvedReflectiveProvider__tsickle_Closure_declarations() {\n/** @type {?} */\nResolvedReflectiveProvider_.prototype.key;\n/** @type {?} */\nResolvedReflectiveProvider_.prototype.resolvedFactories;\n/** @type {?} */\nResolvedReflectiveProvider_.prototype.multiProvider;\n}\n\n/**\n * An internal resolved representation of a factory function created by resolving {\\@link\n * Provider}.\n * \\@experimental\n */\nexport class ResolvedReflectiveFactory {\n/**\n * @param {?} factory\n * @param {?} dependencies\n */\nconstructor(\npublic factory: Function,\npublic dependencies: ReflectiveDependency[]) {}\n}\n\nfunction ResolvedReflectiveFactory_tsickle_Closure_declarations() {\n/**\n * Factory function which can return an instance of an object represented by a key.\n * @type {?}\n */\nResolvedReflectiveFactory.prototype.factory;\n/**\n * Arguments (dependencies) to the `factory` function.\n * @type {?}\n */\nResolvedReflectiveFactory.prototype.dependencies;\n}\n\n/**\n * Resolve a single provider.\n * @param {?} provider\n * @return {?}\n */\nfunction resolveReflectiveFactory(provider: NormalizedProvider): ResolvedReflectiveFactory {\n  let /** @type {?} */ factoryFn: Function;\n  let /** @type {?} */ resolvedDeps: ReflectiveDependency[];\n  if (provider.useClass) {\n    const /** @type {?} */ useClass = resolveForwardRef(provider.useClass);\n    factoryFn = reflector.factory(useClass);\n    resolvedDeps = _dependenciesFor(useClass);\n  } else if (provider.useExisting) {\n    factoryFn = (aliasInstance: any) => aliasInstance;\n    resolvedDeps = [ReflectiveDependency.fromKey(ReflectiveKey.get(provider.useExisting))];\n  } else if (provider.useFactory) {\n    factoryFn = provider.useFactory;\n    resolvedDeps = constructDependencies(provider.useFactory, provider.deps);\n  } else {\n    factoryFn = () => provider.useValue;\n    resolvedDeps = _EMPTY_LIST;\n  }\n  return new ResolvedReflectiveFactory(factoryFn, resolvedDeps);\n}\n/**\n * Converts the {\\@link Provider} into {\\@link ResolvedProvider}.\n * \n * {\\@link Injector} internally only uses {\\@link ResolvedProvider}, {\\@link Provider} contains\n * convenience provider syntax.\n * @param {?} provider\n * @return {?}\n */\nfunction resolveReflectiveProvider(provider: NormalizedProvider): ResolvedReflectiveProvider {\n  return new ResolvedReflectiveProvider_(\n      ReflectiveKey.get(provider.provide), [resolveReflectiveFactory(provider)],\n      provider.multi || false);\n}\n/**\n * Resolve a list of Providers.\n * @param {?} providers\n * @return {?}\n */\nexport function resolveReflectiveProviders(providers: Provider[]): ResolvedReflectiveProvider[] {\n  const /** @type {?} */ normalized = _normalizeProviders(providers, []);\n  const /** @type {?} */ resolved = normalized.map(resolveReflectiveProvider);\n  const /** @type {?} */ resolvedProviderMap = mergeResolvedReflectiveProviders(resolved, new Map());\n  return Array.from(resolvedProviderMap.values());\n}\n/**\n * Merges a list of ResolvedProviders into a list where\n * each key is contained exactly once and multi providers\n * have been merged.\n * @param {?} providers\n * @param {?} normalizedProvidersMap\n * @return {?}\n */\nexport function mergeResolvedReflectiveProviders(\n    providers: ResolvedReflectiveProvider[],\n    normalizedProvidersMap: Map<number, ResolvedReflectiveProvider>):\n    Map<number, ResolvedReflectiveProvider> {\n  for (let /** @type {?} */ i = 0; i < providers.length; i++) {\n    const /** @type {?} */ provider = providers[i];\n    const /** @type {?} */ existing = normalizedProvidersMap.get(provider.key.id);\n    if (existing) {\n      if (provider.multiProvider !== existing.multiProvider) {\n        throw mixingMultiProvidersWithRegularProvidersError(existing, provider);\n      }\n      if (provider.multiProvider) {\n        for (let /** @type {?} */ j = 0; j < provider.resolvedFactories.length; j++) {\n          existing.resolvedFactories.push(provider.resolvedFactories[j]);\n        }\n      } else {\n        normalizedProvidersMap.set(provider.key.id, provider);\n      }\n    } else {\n      let /** @type {?} */ resolvedProvider: ResolvedReflectiveProvider;\n      if (provider.multiProvider) {\n        resolvedProvider = new ResolvedReflectiveProvider_(\n            provider.key, provider.resolvedFactories.slice(), provider.multiProvider);\n      } else {\n        resolvedProvider = provider;\n      }\n      normalizedProvidersMap.set(provider.key.id, resolvedProvider);\n    }\n  }\n  return normalizedProvidersMap;\n}\n/**\n * @param {?} providers\n * @param {?} res\n * @return {?}\n */\nfunction _normalizeProviders(providers: Provider[], res: Provider[]): Provider[] {\n  providers.forEach(b => {\n    if (b instanceof Type) {\n      res.push({provide: b, useClass: b});\n\n    } else if (b && typeof b == 'object' && ( /** @type {?} */((b as any))).provide !== undefined) {\n      res.push( /** @type {?} */((b as NormalizedProvider)));\n\n    } else if (b instanceof Array) {\n      _normalizeProviders(b, res);\n\n    } else {\n      throw invalidProviderError(b);\n    }\n  });\n\n  return res;\n}\n/**\n * @param {?} typeOrFunc\n * @param {?=} dependencies\n * @return {?}\n */\nexport function constructDependencies(\n    typeOrFunc: any, dependencies?: any[]): ReflectiveDependency[] {\n  if (!dependencies) {\n    return _dependenciesFor(typeOrFunc);\n  } else {\n    const /** @type {?} */ params: any[][] = dependencies.map(t => [t]);\n    return dependencies.map(t => _extractToken(typeOrFunc, t, params));\n  }\n}\n/**\n * @param {?} typeOrFunc\n * @return {?}\n */\nfunction _dependenciesFor(typeOrFunc: any): ReflectiveDependency[] {\n  const /** @type {?} */ params = reflector.parameters(typeOrFunc);\n\n  if (!params) return [];\n  if (params.some(p => p == null)) {\n    throw noAnnotationError(typeOrFunc, params);\n  }\n  return params.map(p => _extractToken(typeOrFunc, p, params));\n}\n/**\n * @param {?} typeOrFunc\n * @param {?} metadata\n * @param {?} params\n * @return {?}\n */\nfunction _extractToken(\n    typeOrFunc: any, metadata: any[] | any, params: any[][]): ReflectiveDependency {\n  let /** @type {?} */ token: any = null;\n  let /** @type {?} */ optional = false;\n\n  if (!Array.isArray(metadata)) {\n    if (metadata instanceof Inject) {\n      return _createDependency(metadata.token, optional, null);\n    } else {\n      return _createDependency(metadata, optional, null);\n    }\n  }\n\n  let /** @type {?} */ visibility: Self|SkipSelf|null = null;\n\n  for (let /** @type {?} */ i = 0; i < metadata.length; ++i) {\n    const /** @type {?} */ paramMetadata = metadata[i];\n\n    if (paramMetadata instanceof Type) {\n      token = paramMetadata;\n\n    } else if (paramMetadata instanceof Inject) {\n      token = paramMetadata.token;\n\n    } else if (paramMetadata instanceof Optional) {\n      optional = true;\n\n    } else if (paramMetadata instanceof Self || paramMetadata instanceof SkipSelf) {\n      visibility = paramMetadata;\n    } else if (paramMetadata instanceof InjectionToken) {\n      token = paramMetadata;\n    }\n  }\n\n  token = resolveForwardRef(token);\n\n  if (token != null) {\n    return _createDependency(token, optional, visibility);\n  } else {\n    throw noAnnotationError(typeOrFunc, params);\n  }\n}\n/**\n * @param {?} token\n * @param {?} optional\n * @param {?} visibility\n * @return {?}\n */\nfunction _createDependency(\n    token: any, optional: boolean, visibility: Self | SkipSelf | null): ReflectiveDependency {\n  return new ReflectiveDependency(ReflectiveKey.get(token), optional, visibility);\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {BindingDef, BindingFlags, NodeDef, NodeFlags, TextData, ViewData, asTextData} from './types';\nimport {checkAndUpdateBinding, getParentRenderElement} from './util';\n/**\n * @param {?} checkIndex\n * @param {?} ngContentIndex\n * @param {?} staticText\n * @return {?}\n */\nexport function textDef(\n    checkIndex: number, ngContentIndex: number | null, staticText: string[]): NodeDef {\n  const /** @type {?} */ bindings: BindingDef[] = new Array(staticText.length - 1);\n  for (let /** @type {?} */ i = 1; i < staticText.length; i++) {\n    bindings[i - 1] = {\n      flags: BindingFlags.TypeProperty,\n      name: null,\n      ns: null,\n      nonMinifiedName: null,\n      securityContext: null,\n      suffix: staticText[i],\n    };\n  }\n\n  return {\n    // will bet set by the view definition\n    nodeIndex: -1,\n    parent: null,\n    renderParent: null,\n    bindingIndex: -1,\n    outputIndex: -1,\n    // regular values\n    checkIndex,\n    flags: NodeFlags.TypeText,\n    childFlags: 0,\n    directChildFlags: 0,\n    childMatchedQueries: 0,\n    matchedQueries: {},\n    matchedQueryIds: 0,\n    references: {}, ngContentIndex,\n    childCount: 0, bindings,\n    bindingFlags: BindingFlags.TypeProperty,\n    outputs: [],\n    element: null,\n    provider: null,\n    text: {prefix: staticText[0]},\n    query: null,\n    ngContent: null,\n  };\n}\n/**\n * @param {?} view\n * @param {?} renderHost\n * @param {?} def\n * @return {?}\n */\nexport function createText(view: ViewData, renderHost: any, def: NodeDef): TextData {\n  let /** @type {?} */ renderNode: any;\n  const /** @type {?} */ renderer = view.renderer;\n  renderNode = renderer.createText( /** @type {?} */((def.text)).prefix);\n  const /** @type {?} */ parentEl = getParentRenderElement(view, renderHost, def);\n  if (parentEl) {\n    renderer.appendChild(parentEl, renderNode);\n  }\n  return {renderText: renderNode};\n}\n/**\n * @param {?} view\n * @param {?} def\n * @param {?} v0\n * @param {?} v1\n * @param {?} v2\n * @param {?} v3\n * @param {?} v4\n * @param {?} v5\n * @param {?} v6\n * @param {?} v7\n * @param {?} v8\n * @param {?} v9\n * @return {?}\n */\nexport function checkAndUpdateTextInline(\n    view: ViewData, def: NodeDef, v0: any, v1: any, v2: any, v3: any, v4: any, v5: any, v6: any,\n    v7: any, v8: any, v9: any): boolean {\n  let /** @type {?} */ changed = false;\n  const /** @type {?} */ bindings = def.bindings;\n  const /** @type {?} */ bindLen = bindings.length;\n  if (bindLen > 0 && checkAndUpdateBinding(view, def, 0, v0)) changed = true;\n  if (bindLen > 1 && checkAndUpdateBinding(view, def, 1, v1)) changed = true;\n  if (bindLen > 2 && checkAndUpdateBinding(view, def, 2, v2)) changed = true;\n  if (bindLen > 3 && checkAndUpdateBinding(view, def, 3, v3)) changed = true;\n  if (bindLen > 4 && checkAndUpdateBinding(view, def, 4, v4)) changed = true;\n  if (bindLen > 5 && checkAndUpdateBinding(view, def, 5, v5)) changed = true;\n  if (bindLen > 6 && checkAndUpdateBinding(view, def, 6, v6)) changed = true;\n  if (bindLen > 7 && checkAndUpdateBinding(view, def, 7, v7)) changed = true;\n  if (bindLen > 8 && checkAndUpdateBinding(view, def, 8, v8)) changed = true;\n  if (bindLen > 9 && checkAndUpdateBinding(view, def, 9, v9)) changed = true;\n\n  if (changed) {\n    let /** @type {?} */ value = /** @type {?} */(( def.text)).prefix;\n    if (bindLen > 0) value += _addInterpolationPart(v0, bindings[0]);\n    if (bindLen > 1) value += _addInterpolationPart(v1, bindings[1]);\n    if (bindLen > 2) value += _addInterpolationPart(v2, bindings[2]);\n    if (bindLen > 3) value += _addInterpolationPart(v3, bindings[3]);\n    if (bindLen > 4) value += _addInterpolationPart(v4, bindings[4]);\n    if (bindLen > 5) value += _addInterpolationPart(v5, bindings[5]);\n    if (bindLen > 6) value += _addInterpolationPart(v6, bindings[6]);\n    if (bindLen > 7) value += _addInterpolationPart(v7, bindings[7]);\n    if (bindLen > 8) value += _addInterpolationPart(v8, bindings[8]);\n    if (bindLen > 9) value += _addInterpolationPart(v9, bindings[9]);\n    const /** @type {?} */ renderNode = asTextData(view, def.nodeIndex).renderText;\n    view.renderer.setValue(renderNode, value);\n  }\n  return changed;\n}\n/**\n * @param {?} view\n * @param {?} def\n * @param {?} values\n * @return {?}\n */\nexport function checkAndUpdateTextDynamic(view: ViewData, def: NodeDef, values: any[]): boolean {\n  const /** @type {?} */ bindings = def.bindings;\n  let /** @type {?} */ changed = false;\n  for (let /** @type {?} */ i = 0; i < values.length; i++) {\n    // Note: We need to loop over all values, so that\n    // the old values are updates as well!\n    if (checkAndUpdateBinding(view, def, i, values[i])) {\n      changed = true;\n    }\n  }\n  if (changed) {\n    let /** @type {?} */ value = '';\n    for (let /** @type {?} */ i = 0; i < values.length; i++) {\n      value = value + _addInterpolationPart(values[i], bindings[i]);\n    }\n    value = /** @type {?} */(( def.text)).prefix + value;\n    const /** @type {?} */ renderNode = asTextData(view, def.nodeIndex).renderText;\n    view.renderer.setValue(renderNode, value);\n  }\n  return changed;\n}\n/**\n * @param {?} value\n * @param {?} binding\n * @return {?}\n */\nfunction _addInterpolationPart(value: any, binding: BindingDef): string {\n  const /** @type {?} */ valueStr = value != null ? value.toString() : '';\n  return valueStr + binding.suffix;\n}\n","\n/**\n * @license \n * Copyright Google Inc. All Rights Reserved.\n * \n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n * @param {?} cookieStr\n * @param {?} name\n * @return {?}\n */\nexport function parseCookieValue(cookieStr: string, name: string): string|null {\n  name = encodeURIComponent(name);\n  for (const /** @type {?} */ cookie of cookieStr.split(';')) {\n    const /** @type {?} */ eqIndex = cookie.indexOf('=');\n    const [cookieName, cookieValue]: string[] =\n        eqIndex == -1 ? [cookie, ''] : [cookie.slice(0, eqIndex), cookie.slice(eqIndex + 1)];\n    if (cookieName.trim() === name) {\n      return decodeURIComponent(cookieValue);\n    }\n  }\n  return null;\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {DOCUMENT as commonDOCUMENT} from '@angular/common';\nimport {InjectionToken} from '@angular/core';\n/**\n * A DI Token representing the main rendering context. In a browser this is the DOM Document.\n * \n * Note: Document might not be available in the Application Context when Application and Rendering\n * Contexts are not the same (e.g. when running the application into a Web Worker).\n * \n * @deprecated import from `\\@angular/common` instead.\n */\nexport const DOCUMENT = commonDOCUMENT;\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {ɵglobal as global} from '@angular/core';\n\nconst /** @type {?} */ CAMEL_CASE_REGEXP = /([A-Z])/g;\nconst /** @type {?} */ DASH_CASE_REGEXP = /-([a-z])/g;\n/**\n * @param {?} input\n * @return {?}\n */\nexport function camelCaseToDashCase(input: string): string {\n  return input.replace(CAMEL_CASE_REGEXP, (...m: string[]) => '-' + m[1].toLowerCase());\n}\n/**\n * @param {?} input\n * @return {?}\n */\nexport function dashCaseToCamelCase(input: string): string {\n  return input.replace(DASH_CASE_REGEXP, (...m: string[]) => m[1].toUpperCase());\n}\n/**\n * Exports the value under a given `name` in the global property `ng`. For example `ng.probe` if\n * `name` is `'probe'`.\n * @param {?} name Name under which it will be exported. Keep in mind this will be a property of the\n * global `ng` object.\n * @param {?} value The value to export.\n * @return {?}\n */\nexport function exportNgVar(name: string, value: any): void {\n  if (!ng) {\n    global['ng'] = ng = ( /** @type {?} */((global['ng'] as{[key: string]: any} | undefined))) || {};\n  }\n  ng[name] = value;\n}\n\nlet /** @type {?} */ ng: {[key: string]: any}|undefined;\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {isDevMode} from '@angular/core';\n\nimport {getDOM} from '../dom/dom_adapter';\n\nimport {sanitizeUrl} from './url_sanitizer';\n/**\n * Regular expression for safe style values.\n * \n * Quotes (\" and ') are allowed, but a check must be done elsewhere to ensure they're balanced.\n * \n * ',' allows multiple values to be assigned to the same property (e.g. background-attachment or\n * font-family) and hence could allow multiple values to get injected, but that should pose no risk\n * of XSS.\n * \n * The function expression checks only for XSS safety, not for CSS validity.\n * \n * This regular expression was taken from the Closure sanitization library, and augmented for\n * transformation values.\n */\nconst VALUES = '[-,.\"\\'%_!# a-zA-Z0-9]+';\nconst /** @type {?} */ TRANSFORMATION_FNS = '(?:matrix|translate|scale|rotate|skew|perspective)(?:X|Y|3d)?';\nconst /** @type {?} */ COLOR_FNS = '(?:rgb|hsl)a?';\nconst /** @type {?} */ GRADIENTS = '(?:repeating-)?(?:linear|radial)-gradient';\nconst /** @type {?} */ CSS3_FNS = '(?:calc|attr)';\nconst /** @type {?} */ FN_ARGS = '\\\\([-0-9.%, #a-zA-Z]+\\\\)';\nconst /** @type {?} */ SAFE_STYLE_VALUE = new RegExp(\n    `^(${VALUES}|` +\n        `(?:${TRANSFORMATION_FNS}|${COLOR_FNS}|${GRADIENTS}|${CSS3_FNS})` +\n        `${FN_ARGS})$`,\n    'g');\n/**\n * Matches a `url(...)` value with an arbitrary argument as long as it does\n * not contain parentheses.\n * \n * The URL value still needs to be sanitized separately.\n * \n * `url(...)` values are a very common use case, e.g. for `background-image`. With carefully crafted\n * CSS style rules, it is possible to construct an information leak with `url` values in CSS, e.g.\n * by observing whether scroll bars are displayed, or character ranges used by a font face\n * definition.\n * \n * Angular only allows binding CSS values (as opposed to entire CSS rules), so it is unlikely that\n * binding a URL value without further cooperation from the page will cause an information leak, and\n * if so, it is just a leak, not a full blown XSS vulnerability.\n * \n * Given the common use case, low likelihood of attack vector, and low impact of an attack, this\n * code is permissive and allows URLs that sanitize otherwise.\n */\nconst URL_RE = /^url\\(([^)]+)\\)$/;\n/**\n * Checks that quotes (\" and ') are properly balanced inside a string. Assumes\n * that neither escape (\\) nor any other character that could result in\n * breaking out of a string parsing context are allowed;\n * see http://www.w3.org/TR/css3-syntax/#string-token-diagram.\n * \n * This code was taken from the Closure sanitization library.\n * @param {?} value\n * @return {?}\n */\nfunction hasBalancedQuotes(value: string) {\n  let /** @type {?} */ outsideSingle = true;\n  let /** @type {?} */ outsideDouble = true;\n  for (let /** @type {?} */ i = 0; i < value.length; i++) {\n    const /** @type {?} */ c = value.charAt(i);\n    if (c === '\\'' && outsideDouble) {\n      outsideSingle = !outsideSingle;\n    } else if (c === '\"' && outsideSingle) {\n      outsideDouble = !outsideDouble;\n    }\n  }\n  return outsideSingle && outsideDouble;\n}\n/**\n * Sanitizes the given untrusted CSS style property value (i.e. not an entire object, just a single\n * value) and returns a value that is safe to use in a browser environment.\n * @param {?} value\n * @return {?}\n */\nexport function sanitizeStyle(value: string): string {\n  value = String(value).trim();  // Make sure it's actually a string.\n  if (!value) return '';\n\n  // Single url(...) values are supported, but only for URLs that sanitize cleanly. See above for\n  // reasoning behind this.\n  const /** @type {?} */ urlMatch = value.match(URL_RE);\n  if ((urlMatch && sanitizeUrl(urlMatch[1]) === urlMatch[1]) ||\n      value.match(SAFE_STYLE_VALUE) && hasBalancedQuotes(value)) {\n    return value;  // Safe style values.\n  }\n\n  if (isDevMode()) {\n    getDOM().log(\n        `WARNING: sanitizing unsafe style value ${value} (see http://g.co/ng/security#xss).`);\n  }\n\n  return 'unsafe';\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {InjectionToken} from '@angular/core';\n\n/**\n * A `ControlValueAccessor` acts as a bridge between the Angular forms API and a\n * native element in the DOM.\n *\n * Implement this interface if you want to create a custom form control directive\n * that integrates with Angular forms.\n *\n * @stable\n */\nexport interface ControlValueAccessor {\n  /**\n   * Writes a new value to the element.\n   *\n   * This method will be called by the forms API to write to the view when programmatic\n   * (model -> view) changes are requested.\n   *\n   * Example implementation of `writeValue`:\n   *\n   * ```ts\n   * writeValue(value: any): void {\n   *   this._renderer.setProperty(this._elementRef.nativeElement, 'value', value);\n   * }\n   * ```\n   */\n  writeValue(obj: any): void;\n\n  /**\n   * Registers a callback function that should be called when the control's value\n   * changes in the UI.\n   *\n   * This is called by the forms API on initialization so it can update the form\n   * model when values propagate from the view (view -> model).\n   *\n   * If you are implementing `registerOnChange` in your own value accessor, you\n   * will typically want to save the given function so your class can call it\n   * at the appropriate time.\n   *\n   * ```ts\n   * registerOnChange(fn: (_: any) => void): void {\n   *   this._onChange = fn;\n   * }\n   * ```\n   *\n   * When the value changes in the UI, your class should call the registered\n   * function to allow the forms API to update itself:\n   *\n   * ```ts\n   * host: {\n   *    (change): '_onChange($event.target.value)'\n   * }\n   * ```\n   *\n   */\n  registerOnChange(fn: any): void;\n\n  /**\n   * Registers a callback function that should be called when the control receives\n   * a blur event.\n   *\n   * This is called by the forms API on initialization so it can update the form model\n   * on blur.\n   *\n   * If you are implementing `registerOnTouched` in your own value accessor, you\n   * will typically want to save the given function so your class can call it\n   * when the control should be considered blurred (a.k.a. \"touched\").\n   *\n   * ```ts\n   * registerOnTouched(fn: any): void {\n   *   this._onTouched = fn;\n   * }\n   * ```\n   *\n   * On blur (or equivalent), your class should call the registered function to allow\n   * the forms API to update itself:\n   *\n   * ```ts\n   * host: {\n   *    '(blur)': '_onTouched()'\n   * }\n   * ```\n   */\n  registerOnTouched(fn: any): void;\n\n  /**\n   * This function is called by the forms API when the control status changes to\n   * or from \"DISABLED\". Depending on the value, it should enable or disable the\n   * appropriate DOM element.\n   *\n   * Example implementation of `setDisabledState`:\n   *\n   * ```ts\n   * setDisabledState(isDisabled: boolean): void {\n   *   this._renderer.setProperty(this._elementRef.nativeElement, 'disabled', isDisabled);\n   * }\n   * ```\n   *\n   * @param isDisabled\n   */\n  setDisabledState?(isDisabled: boolean): void;\n}\n/**\n * Used to provide a {\\@link ControlValueAccessor} for form controls.\n * \n * See {\\@link DefaultValueAccessor} for how to implement one.\n * \\@stable\n */\nexport const NG_VALUE_ACCESSOR = new InjectionToken<ControlValueAccessor>('NgValueAccessor');\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {InjectionToken} from '../di/injection_token';\nimport {Type} from '../type';\nimport {makeParamDecorator, makePropDecorator} from '../util/decorators';\n/**\n * This token can be used to create a virtual provider that will populate the\n * `entryComponents` fields of components and ng modules based on its `useValue`.\n * All components that are referenced in the `useValue` value (either directly\n * or in a nested array or map) will be added to the `entryComponents` property.\n * \n * ### Example\n * The following example shows how the router can populate the `entryComponents`\n * field of an NgModule based on the router configuration which refers\n * to components.\n * \n * ```typescript\n * // helper function inside the router\n * function provideRoutes(routes) {\n *   return [\n *     {provide: ROUTES, useValue: routes},\n *     {provide: ANALYZE_FOR_ENTRY_COMPONENTS, useValue: routes, multi: true}\n *   ];\n * }\n * \n * // user code\n * let routes = [\n *   {path: '/root', component: RootComp},\n *   {path: '/teams', component: TeamsComp}\n * ];\n * \n * \\@NgModule({ \n *   providers: [provideRoutes(routes)]\n * })\n * class ModuleWithRoutes {}\n * ```\n * \n * \\@experimental\n */\nexport const ANALYZE_FOR_ENTRY_COMPONENTS = new InjectionToken<any>('AnalyzeForEntryComponents');\n\n/**\n * Type of the Attribute decorator / constructor function.\n *\n * @stable\n */\nexport interface AttributeDecorator {\n  /**\n   * Specifies that a constant attribute value should be injected.\n   *\n   * The directive can inject constant string literals of host element attributes.\n   *\n   * ### Example\n   *\n   * Suppose we have an `<input>` element and want to know its `type`.\n   *\n   * ```html\n   * <input type=\"text\">\n   * ```\n   *\n   * A decorator can inject string literal `text` like so:\n   *\n   * {@example core/ts/metadata/metadata.ts region='attributeMetadata'}\n   *\n   * ### Example as TypeScript Decorator\n   *\n   * {@example core/ts/metadata/metadata.ts region='attributeFactory'}\n   *\n   * ### Example as ES5 DSL\n   *\n   * ```\n   * var MyComponent = ng\n   *   .Component({...})\n   *   .Class({\n   *     constructor: [new ng.Attribute('title'), function(title) {\n   *       ...\n   *     }]\n   *   })\n   * ```\n   *\n   * ### Example as ES5 annotation\n   *\n   * ```\n   * var MyComponent = function(title) {\n   *   ...\n   * };\n   *\n   * MyComponent.annotations = [\n   *   new ng.Component({...})\n   * ]\n   * MyComponent.parameters = [\n   *   [new ng.Attribute('title')]\n   * ]\n   * ```\n   *\n   * @stable\n   */\n  (name: string): any;\n  new (name: string): Attribute;\n}\n\n\n/**\n * Type of the Attribute metadata.\n */\nexport interface Attribute { attributeName?: string; }\n/**\n * Attribute decorator and metadata.\n * \n * \\@stable\n * \\@Annotation\n */\nexport const Attribute: AttributeDecorator =\n    makeParamDecorator('Attribute', (attributeName?: string) => ({attributeName}));\n\n/**\n * Type of the Query metadata.\n *\n * @stable\n */\nexport interface Query {\n  descendants: boolean;\n  first: boolean;\n  read: any;\n  isViewQuery: boolean;\n  selector: any;\n}\n/**\n * Base class for query metadata.\n * \n * See {\\@link ContentChildren}, {\\@link ContentChild}, {\\@link ViewChildren}, {\\@link ViewChild} for\n * more information.\n * \n * \\@stable\n * @abstract\n */\nexport abstract class Query {}\n\n/**\n * Type of the ContentChildren decorator / constructor function.\n *\n * See {@link ContentChildren}.\n *\n * @stable\n */\nexport interface ContentChildrenDecorator {\n  /**\n   * @whatItDoes Configures a content query.\n   *\n   * @howToUse\n   *\n   * {@example core/di/ts/contentChildren/content_children_howto.ts region='HowTo'}\n   *\n   * @description\n   *\n   * You can use ContentChildren to get the {@link QueryList} of elements or directives from the\n   * content DOM. Any time a child element is added, removed, or moved, the query list will be\n   * updated,\n   * and the changes observable of the query list will emit a new value.\n   *\n   * Content queries are set before the `ngAfterContentInit` callback is called.\n   *\n   * **Metadata Properties**:\n   *\n   * * **selector** - the directive type or the name used for querying.\n   * * **descendants** - include only direct children or all descendants.\n   * * **read** - read a different token from the queried elements.\n   *\n   * Let's look at an example:\n   *\n   * {@example core/di/ts/contentChildren/content_children_example.ts region='Component'}\n   *\n   * **npm package**: `@angular/core`\n   *\n   * @stable\n   * @Annotation\n   */\n  (selector: Type<any>|Function|string, opts?: {descendants?: boolean, read?: any}): any;\n  new (selector: Type<any>|Function|string, opts?: {descendants?: boolean, read?: any}): Query;\n}\n\n/**\n * Type of the ContentChildren metadata.\n *\n * @stable\n * @Annotation\n */\nexport type ContentChildren = Query;\n/**\n * ContentChildren decorator and metadata.\n * \n *  \\@stable\n *  \\@Annotation\n */\nexport const ContentChildren: ContentChildrenDecorator =\n    <ContentChildrenDecorator>makePropDecorator(\n        'ContentChildren',\n        (selector?: any, data: any = {}) =>\n            ({selector, first: false, isViewQuery: false, descendants: false, ...data}),\n        Query);\n\n/**\n * Type of the ContentChild decorator / constructor function.\n *\n *\n * @stable\n */\nexport interface ContentChildDecorator {\n  /**\n   * @whatItDoes Configures a content query.\n   *\n   * @howToUse\n   *\n   * {@example core/di/ts/contentChild/content_child_howto.ts region='HowTo'}\n   *\n   * @description\n   *\n   * You can use ContentChild to get the first element or the directive matching the selector from\n   * the content DOM. If the content DOM changes, and a new child matches the selector,\n   * the property will be updated.\n   *\n   * Content queries are set before the `ngAfterContentInit` callback is called.\n   *\n   * **Metadata Properties**:\n   *\n   * * **selector** - the directive type or the name used for querying.\n   * * **read** - read a different token from the queried element.\n   *\n   * Let's look at an example:\n   *\n   * {@example core/di/ts/contentChild/content_child_example.ts region='Component'}\n   *\n   * **npm package**: `@angular/core`\n   *\n   * @stable\n   * @Annotation\n   */\n  (selector: Type<any>|Function|string, opts?: {read?: any}): any;\n  new (selector: Type<any>|Function|string, opts?: {read?: any}): ContentChild;\n}\n\n/**\n * Type of the ContentChild metadata.\n *\n * See {@link ContentChild}.\n *\n * @stable\n */\nexport type ContentChild = Query;\n/**\n * ContentChild decorator and metadata.\n * \n * \\@stable\n * \\@Annotation\n */\nexport const ContentChild: ContentChildDecorator = makePropDecorator(\n    'ContentChild', (selector?: any, data: any = {}) =>\n                        ({selector, first: true, isViewQuery: false, descendants: true, ...data}),\n    Query);\n\n/**\n * Type of the ViewChildren decorator / constructor function.\n *\n * See {@link ViewChildren}.\n *\n * @stable\n */\nexport interface ViewChildrenDecorator {\n  /**\n   * @whatItDoes Configures a view query.\n   *\n   * @howToUse\n   *\n   * {@example core/di/ts/viewChildren/view_children_howto.ts region='HowTo'}\n   *\n   * @description\n   *\n   * You can use ViewChildren to get the {@link QueryList} of elements or directives from the\n   * view DOM. Any time a child element is added, removed, or moved, the query list will be updated,\n   * and the changes observable of the query list will emit a new value.\n   *\n   * View queries are set before the `ngAfterViewInit` callback is called.\n   *\n   * **Metadata Properties**:\n   *\n   * * **selector** - the directive type or the name used for querying.\n   * * **read** - read a different token from the queried elements.\n   *\n   * Let's look at an example:\n   *\n   * {@example core/di/ts/viewChildren/view_children_example.ts region='Component'}\n   *\n   * **npm package**: `@angular/core`\n   *\n   * @stable\n   * @Annotation\n   */\n  (selector: Type<any>|Function|string, opts?: {read?: any}): any;\n  new (selector: Type<any>|Function|string, opts?: {read?: any}): ViewChildren;\n}\n\n/**\n * Type of the ViewChildren metadata.\n *\n * @stable\n */\nexport type ViewChildren = Query;\n/**\n * ViewChildren decorator and metadata.\n * \n * \\@stable\n * \\@Annotation\n */\nexport const ViewChildren: ViewChildrenDecorator = makePropDecorator(\n    'ViewChildren', (selector?: any, data: any = {}) =>\n                        ({selector, first: false, isViewQuery: true, descendants: true, ...data}),\n    Query);\n\n/**\n * Type of the ViewChild decorator / constructor function.\n *\n * See {@link ViewChild}\n *\n * @stable\n */\nexport interface ViewChildDecorator {\n  /**\n   * @whatItDoes Configures a view query.\n   *\n   * @howToUse\n   *\n   * {@example core/di/ts/viewChild/view_child_howto.ts region='HowTo'}\n   *\n   * @description\n   *\n   * You can use ViewChild to get the first element or the directive matching the selector from the\n   * view DOM. If the view DOM changes, and a new child matches the selector,\n   * the property will be updated.\n   *\n   * View queries are set before the `ngAfterViewInit` callback is called.\n   *\n   * **Metadata Properties**:\n   *\n   * * **selector** - the directive type or the name used for querying.\n   * * **read** - read a different token from the queried elements.\n   *\n   * {@example core/di/ts/viewChild/view_child_example.ts region='Component'}\n   *\n   * **npm package**: `@angular/core`\n   *\n   * @stable\n   * @Annotation\n   */\n  (selector: Type<any>|Function|string, opts?: {read?: any}): any;\n  new (selector: Type<any>|Function|string, opts?: {read?: any}): ViewChild;\n}\n\n/**\n * Type of the ViewChild metadata.\n *\n * @stable\n */\nexport type ViewChild = Query;\n/**\n * ViewChild decorator and metadata.\n * \n * \\@stable\n * \\@Annotation\n */\nexport const ViewChild: ViewChildDecorator = makePropDecorator(\n    'ViewChild', (selector: any, data: any) =>\n                     ({selector, first: true, isViewQuery: true, descendants: true, ...data}),\n    Query);\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Type} from '../type';\nimport {stringify} from '../util';\n\n\n\n/**\n * An interface that a function passed into {@link forwardRef} has to implement.\n *\n * ### Example\n *\n * {@example core/di/ts/forward_ref/forward_ref_spec.ts region='forward_ref_fn'}\n * @experimental\n */\nexport interface ForwardRefFn { (): any; }\n/**\n * Allows to refer to references which are not yet defined.\n * \n * For instance, `forwardRef` is used when the `token` which we need to refer to for the purposes of\n * DI is declared,\n * but not yet defined. It is also used when the `token` which we use when creating a query is not\n * yet defined.\n * \n * ### Example\n * {\\@example core/di/ts/forward_ref/forward_ref_spec.ts region='forward_ref'}\n * \\@experimental\n * @param {?} forwardRefFn\n * @return {?}\n */\nexport function forwardRef(forwardRefFn: ForwardRefFn): Type<any> {\n  ( /** @type {?} */((<any>forwardRefFn))).__forward_ref__ = forwardRef;\n  ( /** @type {?} */((<any>forwardRefFn))).toString = function() { return stringify(this()); };\n  return ( /** @type {?} */((<Type<any>> /** @type {?} */((<any>forwardRefFn)))));\n}\n/**\n * Lazily retrieves the reference value from a forwardRef.\n * \n * Acts as the identity function when given a non-forward-ref value.\n * \n * ### Example ([live demo](http://plnkr.co/edit/GU72mJrk1fiodChcmiDR?p=preview))\n * \n * {\\@example core/di/ts/forward_ref/forward_ref_spec.ts region='resolve_forward_ref'}\n * \n * See: {\\@link forwardRef}\n * \\@experimental\n * @param {?} type\n * @return {?}\n */\nexport function resolveForwardRef(type: any): any {\n  if (typeof type === 'function' && type.hasOwnProperty('__forward_ref__') &&\n      type.__forward_ref__ === forwardRef) {\n    return ( /** @type {?} */((<ForwardRefFn>type)))();\n  } else {\n    return type;\n  }\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {wrappedError} from '../error_handler';\nimport {ERROR_ORIGINAL_ERROR, getOriginalError} from '../errors';\nimport {Type} from '../type';\nimport {stringify} from '../util';\n\nimport {ReflectiveInjector} from './reflective_injector';\nimport {ReflectiveKey} from './reflective_key';\n/**\n * @param {?} keys\n * @return {?}\n */\nfunction findFirstClosedCycle(keys: any[]): any[] {\n  const /** @type {?} */ res: any[] = [];\n  for (let /** @type {?} */ i = 0; i < keys.length; ++i) {\n    if (res.indexOf(keys[i]) > -1) {\n      res.push(keys[i]);\n      return res;\n    }\n    res.push(keys[i]);\n  }\n  return res;\n}\n/**\n * @param {?} keys\n * @return {?}\n */\nfunction constructResolvingPath(keys: any[]): string {\n  if (keys.length > 1) {\n    const /** @type {?} */ reversed = findFirstClosedCycle(keys.slice().reverse());\n    const /** @type {?} */ tokenStrs = reversed.map(k => stringify(k.token));\n    return ' (' + tokenStrs.join(' -> ') + ')';\n  }\n\n  return '';\n}\n\nexport interface InjectionError extends Error {\n  keys: ReflectiveKey[];\n  injectors: ReflectiveInjector[];\n  constructResolvingMessage: (keys: ReflectiveKey[]) => string;\n  addKey(injector: ReflectiveInjector, key: ReflectiveKey): void;\n}\n/**\n * @param {?} injector\n * @param {?} key\n * @param {?} constructResolvingMessage\n * @param {?=} originalError\n * @return {?}\n */\nfunction injectionError(\n    injector: ReflectiveInjector, key: ReflectiveKey,\n    constructResolvingMessage: (keys: ReflectiveKey[]) => string,\n    originalError?: Error): InjectionError {\n  const /** @type {?} */ keys = [key];\n  const /** @type {?} */ errMsg = constructResolvingMessage(keys);\n  const /** @type {?} */ error = /** @type {?} */((\n      (originalError ? wrappedError(errMsg, originalError) : Error(errMsg)) as InjectionError));\n  error.addKey = addKey;\n  error.keys = keys;\n  error.injectors = [injector];\n  error.constructResolvingMessage = constructResolvingMessage;\n  ( /** @type {?} */((error as any)))[ERROR_ORIGINAL_ERROR] = originalError;\n  return error;\n}\n/**\n * @this {?}\n * @param {?} injector\n * @param {?} key\n * @return {?}\n */\nfunction addKey(this: InjectionError, injector: ReflectiveInjector, key: ReflectiveKey): void {\n  this.injectors.push(injector);\n  this.keys.push(key);\n  // Note: This updated message won't be reflected in the `.stack` property\n  this.message = this.constructResolvingMessage(this.keys);\n}\n/**\n * Thrown when trying to retrieve a dependency by key from {\\@link Injector}, but the\n * {\\@link Injector} does not have a {\\@link Provider} for the given key.\n * \n * ### Example ([live demo](http://plnkr.co/edit/vq8D3FRB9aGbnWJqtEPE?p=preview))\n * \n * ```typescript\n * class A {\n *   constructor(b:B) {}\n * }\n * \n * expect(() => Injector.resolveAndCreate([A])).toThrowError();\n * ```\n * @param {?} injector\n * @param {?} key\n * @return {?}\n */\nexport function noProviderError(injector: ReflectiveInjector, key: ReflectiveKey): InjectionError {\n  return injectionError(injector, key, function(keys: ReflectiveKey[]) {\n    const /** @type {?} */ first = stringify(keys[0].token);\n    return `No provider for ${first}!${constructResolvingPath(keys)}`;\n  });\n}\n/**\n * Thrown when dependencies form a cycle.\n * \n * ### Example ([live demo](http://plnkr.co/edit/wYQdNos0Tzql3ei1EV9j?p=info))\n * \n * ```typescript\n * var injector = Injector.resolveAndCreate([\n *   {provide: \"one\", useFactory: (two) => \"two\", deps: [[new Inject(\"two\")]]},\n *   {provide: \"two\", useFactory: (one) => \"one\", deps: [[new Inject(\"one\")]]}\n * ]);\n * \n * expect(() => injector.get(\"one\")).toThrowError();\n * ```\n * \n * Retrieving `A` or `B` throws a `CyclicDependencyError` as the graph above cannot be constructed.\n * @param {?} injector\n * @param {?} key\n * @return {?}\n */\nexport function cyclicDependencyError(\n    injector: ReflectiveInjector, key: ReflectiveKey): InjectionError {\n  return injectionError(injector, key, function(keys: ReflectiveKey[]) {\n    return `Cannot instantiate cyclic dependency!${constructResolvingPath(keys)}`;\n  });\n}\n/**\n * Thrown when a constructing type returns with an Error.\n * \n * The `InstantiationError` class contains the original error plus the dependency graph which caused\n * this object to be instantiated.\n * \n * ### Example ([live demo](http://plnkr.co/edit/7aWYdcqTQsP0eNqEdUAf?p=preview))\n * \n * ```typescript\n * class A {\n *   constructor() {\n *     throw new Error('message');\n *   }\n * }\n * \n * var injector = Injector.resolveAndCreate([A]);\n * try {\n *   injector.get(A);\n * } catch (e) {\n *   expect(e instanceof InstantiationError).toBe(true);\n *   expect(e.originalException.message).toEqual(\"message\");\n *   expect(e.originalStack).toBeDefined();\n * }\n * ```\n * @param {?} injector\n * @param {?} originalException\n * @param {?} originalStack\n * @param {?} key\n * @return {?}\n */\nexport function instantiationError(\n    injector: ReflectiveInjector, originalException: any, originalStack: any,\n    key: ReflectiveKey): InjectionError {\n  return injectionError(injector, key, function(keys: ReflectiveKey[]) {\n    const /** @type {?} */ first = stringify(keys[0].token);\n    return `${originalException.message}: Error during instantiation of ${first}!${constructResolvingPath(keys)}.`;\n  }, originalException);\n}\n/**\n * Thrown when an object other then {\\@link Provider} (or `Type`) is passed to {\\@link Injector}\n * creation.\n * \n * ### Example ([live demo](http://plnkr.co/edit/YatCFbPAMCL0JSSQ4mvH?p=preview))\n * \n * ```typescript\n * expect(() => Injector.resolveAndCreate([\"not a type\"])).toThrowError();\n * ```\n * @param {?} provider\n * @return {?}\n */\nexport function invalidProviderError(provider: any) {\n  return Error(\n      `Invalid provider - only instances of Provider and Type are allowed, got: ${provider}`);\n}\n/**\n * Thrown when the class has no annotation information.\n * \n * Lack of annotation information prevents the {\\@link Injector} from determining which dependencies\n * need to be injected into the constructor.\n * \n * ### Example ([live demo](http://plnkr.co/edit/rHnZtlNS7vJOPQ6pcVkm?p=preview))\n * \n * ```typescript\n * class A {\n *   constructor(b) {}\n * }\n * \n * expect(() => Injector.resolveAndCreate([A])).toThrowError();\n * ```\n * \n * This error is also thrown when the class not marked with {\\@link Injectable} has parameter types.\n * \n * ```typescript\n * class B {}\n * \n * class A {\n *   constructor(b:B) {} // no information about the parameter types of A is available at runtime.\n * }\n * \n * expect(() => Injector.resolveAndCreate([A,B])).toThrowError();\n * ```\n * \\@stable\n * @param {?} typeOrFunc\n * @param {?} params\n * @return {?}\n */\nexport function noAnnotationError(typeOrFunc: Type<any>| Function, params: any[][]): Error {\n  const /** @type {?} */ signature: string[] = [];\n  for (let /** @type {?} */ i = 0, /** @type {?} */ ii = params.length; i < ii; i++) {\n    const /** @type {?} */ parameter = params[i];\n    if (!parameter || parameter.length == 0) {\n      signature.push('?');\n    } else {\n      signature.push(parameter.map(stringify).join(' '));\n    }\n  }\n  return Error(\n      'Cannot resolve all parameters for \\'' + stringify(typeOrFunc) + '\\'(' +\n      signature.join(', ') + '). ' +\n      'Make sure that all the parameters are decorated with Inject or have valid type annotations and that \\'' +\n      stringify(typeOrFunc) + '\\' is decorated with Injectable.');\n}\n/**\n * Thrown when getting an object by index.\n * \n * ### Example ([live demo](http://plnkr.co/edit/bRs0SX2OTQiJzqvjgl8P?p=preview))\n * \n * ```typescript\n * class A {}\n * \n * var injector = Injector.resolveAndCreate([A]);\n * \n * expect(() => injector.getAt(100)).toThrowError();\n * ```\n * \\@stable\n * @param {?} index\n * @return {?}\n */\nexport function outOfBoundsError(index: number) {\n  return Error(`Index ${index} is out-of-bounds.`);\n}\n/**\n * Thrown when a multi provider and a regular provider are bound to the same token.\n * \n * ### Example\n * \n * ```typescript\n * expect(() => Injector.resolveAndCreate([\n *   { provide: \"Strings\", useValue: \"string1\", multi: true},\n *   { provide: \"Strings\", useValue: \"string2\", multi: false}\n * ])).toThrowError();\n * ```\n * @param {?} provider1\n * @param {?} provider2\n * @return {?}\n */\nexport function mixingMultiProvidersWithRegularProvidersError(\n    provider1: any, provider2: any): Error {\n  return Error(`Cannot mix multi providers and regular providers, got: ${provider1} ${provider2}`);\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @module\n * @description\n * The `di` module provides dependency injection container services.\n */\n\nexport {InjectDecorator,Inject,OptionalDecorator,Optional,InjectableDecorator,Injectable,SelfDecorator,Self,SkipSelfDecorator,SkipSelf,HostDecorator,Host} from './di/metadata';\n\nexport {forwardRef, resolveForwardRef, ForwardRefFn} from './di/forward_ref';\n\nexport {Injector} from './di/injector';\nexport {ReflectiveInjector} from './di/reflective_injector';\nexport {Provider, TypeProvider, ValueProvider, ClassProvider, ExistingProvider, FactoryProvider} from './di/provider';\nexport {ResolvedReflectiveFactory, ResolvedReflectiveProvider} from './di/reflective_provider';\nexport {ReflectiveKey} from './di/reflective_key';\nexport {InjectionToken, OpaqueToken} from './di/injection_token';\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n// Public API for Zone\nexport {NgZone} from './zone/ng_zone';\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {RendererType2} from '../render/api';\nimport {SecurityContext} from '../security';\n\nimport {BindingDef, BindingFlags, ElementData, ElementHandleEventFn, NodeDef, NodeFlags, OutputDef, OutputType, QueryValueType, ViewData, ViewDefinitionFactory, asElementData} from './types';\nimport {NOOP, calcBindingFlags, checkAndUpdateBinding, dispatchEvent, elementEventFullName, getParentRenderElement, resolveDefinition, resolveRendererType2, splitMatchedQueriesDsl, splitNamespace} from './util';\n/**\n * @param {?} flags\n * @param {?} matchedQueriesDsl\n * @param {?} ngContentIndex\n * @param {?} childCount\n * @param {?=} handleEvent\n * @param {?=} templateFactory\n * @return {?}\n */\nexport function anchorDef(\n    flags: NodeFlags, matchedQueriesDsl: null | [string | number, QueryValueType][],\n    ngContentIndex: null | number, childCount: number, handleEvent?: null | ElementHandleEventFn,\n    templateFactory?: ViewDefinitionFactory): NodeDef {\n  flags |= NodeFlags.TypeElement;\n  const {matchedQueries, references, matchedQueryIds} = splitMatchedQueriesDsl(matchedQueriesDsl);\n  const /** @type {?} */ template = templateFactory ? resolveDefinition(templateFactory) : null;\n\n  return {\n    // will bet set by the view definition\n    nodeIndex: -1,\n    parent: null,\n    renderParent: null,\n    bindingIndex: -1,\n    outputIndex: -1,\n    // regular values\n    flags,\n    checkIndex: -1,\n    childFlags: 0,\n    directChildFlags: 0,\n    childMatchedQueries: 0, matchedQueries, matchedQueryIds, references, ngContentIndex, childCount,\n    bindings: [],\n    bindingFlags: 0,\n    outputs: [],\n    element: {\n      ns: null,\n      name: null,\n      attrs: null, template,\n      componentProvider: null,\n      componentView: null,\n      componentRendererType: null,\n      publicProviders: null,\n      allProviders: null,\n      handleEvent: handleEvent || NOOP\n    },\n    provider: null,\n    text: null,\n    query: null,\n    ngContent: null\n  };\n}\n/**\n * @param {?} checkIndex\n * @param {?} flags\n * @param {?} matchedQueriesDsl\n * @param {?} ngContentIndex\n * @param {?} childCount\n * @param {?} namespaceAndName\n * @param {?=} fixedAttrs\n * @param {?=} bindings\n * @param {?=} outputs\n * @param {?=} handleEvent\n * @param {?=} componentView\n * @param {?=} componentRendererType\n * @return {?}\n */\nexport function elementDef(\n    checkIndex: number, flags: NodeFlags,\n    matchedQueriesDsl: null | [string | number, QueryValueType][], ngContentIndex: null | number,\n    childCount: number, namespaceAndName: string | null, fixedAttrs: null | [string, string][] = [],\n    bindings?: null | [BindingFlags, string, string | SecurityContext | null][],\n    outputs?: null | ([string, string])[], handleEvent?: null | ElementHandleEventFn,\n    componentView?: null | ViewDefinitionFactory,\n    componentRendererType?: RendererType2 | null): NodeDef {\n  if (!handleEvent) {\n    handleEvent = NOOP;\n  }\n  const {matchedQueries, references, matchedQueryIds} = splitMatchedQueriesDsl(matchedQueriesDsl);\n  let /** @type {?} */ ns: string = /** @type {?} */(( null));\n  let /** @type {?} */ name: string = /** @type {?} */(( null));\n  if (namespaceAndName) {\n    [ns, name] = splitNamespace(namespaceAndName);\n  }\n  bindings = bindings || [];\n  const /** @type {?} */ bindingDefs: BindingDef[] = new Array(bindings.length);\n  for (let /** @type {?} */ i = 0; i < bindings.length; i++) {\n    const [bindingFlags, namespaceAndName, suffixOrSecurityContext] = bindings[i];\n\n    const [ns, name] = splitNamespace(namespaceAndName);\n    let /** @type {?} */ securityContext: SecurityContext = /** @type {?} */(( undefined));\n    let /** @type {?} */ suffix: string = /** @type {?} */(( undefined));\n    switch (bindingFlags & BindingFlags.Types) {\n      case BindingFlags.TypeElementStyle:\n        suffix = /** @type {?} */(( <string>suffixOrSecurityContext));\n        break;\n      case BindingFlags.TypeElementAttribute:\n      case BindingFlags.TypeProperty:\n        securityContext = /** @type {?} */(( <SecurityContext>suffixOrSecurityContext));\n        break;\n    }\n    bindingDefs[i] =\n        {flags: bindingFlags, ns, name, nonMinifiedName: name, securityContext, suffix};\n  }\n  outputs = outputs || [];\n  const /** @type {?} */ outputDefs: OutputDef[] = new Array(outputs.length);\n  for (let /** @type {?} */ i = 0; i < outputs.length; i++) {\n    const [target, eventName] = outputs[i];\n    outputDefs[i] = {\n      type: OutputType.ElementOutput,\n      target: /** @type {?} */(( <any>target)), eventName,\n      propName: null\n    };\n  }\n  fixedAttrs = fixedAttrs || [];\n  const /** @type {?} */ attrs = /** @type {?} */(( <[string, string, string][]>fixedAttrs.map(([namespaceAndName, value]) => {\n    const [ns, name] = splitNamespace(namespaceAndName);\n    return [ns, name, value];\n  })));\n  componentRendererType = resolveRendererType2(componentRendererType);\n  if (componentView) {\n    flags |= NodeFlags.ComponentView;\n  }\n  flags |= NodeFlags.TypeElement;\n  return {\n    // will bet set by the view definition\n    nodeIndex: -1,\n    parent: null,\n    renderParent: null,\n    bindingIndex: -1,\n    outputIndex: -1,\n    // regular values\n    checkIndex,\n    flags,\n    childFlags: 0,\n    directChildFlags: 0,\n    childMatchedQueries: 0, matchedQueries, matchedQueryIds, references, ngContentIndex, childCount,\n    bindings: bindingDefs,\n    bindingFlags: calcBindingFlags(bindingDefs),\n    outputs: outputDefs,\n    element: {\n      ns,\n      name,\n      attrs,\n      template: null,\n      // will bet set by the view definition\n      componentProvider: null,\n      componentView: componentView || null,\n      componentRendererType: componentRendererType,\n      publicProviders: null,\n      allProviders: null,\n      handleEvent: handleEvent || NOOP,\n    },\n    provider: null,\n    text: null,\n    query: null,\n    ngContent: null\n  };\n}\n/**\n * @param {?} view\n * @param {?} renderHost\n * @param {?} def\n * @return {?}\n */\nexport function createElement(view: ViewData, renderHost: any, def: NodeDef): ElementData {\n  const /** @type {?} */ elDef = /** @type {?} */(( def.element));\n  const /** @type {?} */ rootSelectorOrNode = view.root.selectorOrNode;\n  const /** @type {?} */ renderer = view.renderer;\n  let /** @type {?} */ el: any;\n  if (view.parent || !rootSelectorOrNode) {\n    if (elDef.name) {\n      el = renderer.createElement(elDef.name, elDef.ns);\n    } else {\n      el = renderer.createComment('');\n    }\n    const /** @type {?} */ parentEl = getParentRenderElement(view, renderHost, def);\n    if (parentEl) {\n      renderer.appendChild(parentEl, el);\n    }\n  } else {\n    el = renderer.selectRootElement(rootSelectorOrNode);\n  }\n  if (elDef.attrs) {\n    for (let /** @type {?} */ i = 0; i < elDef.attrs.length; i++) {\n      const [ns, name, value] = elDef.attrs[i];\n      renderer.setAttribute(el, name, value, ns);\n    }\n  }\n  return el;\n}\n/**\n * @param {?} view\n * @param {?} compView\n * @param {?} def\n * @param {?} el\n * @return {?}\n */\nexport function listenToElementOutputs(view: ViewData, compView: ViewData, def: NodeDef, el: any) {\n  for (let /** @type {?} */ i = 0; i < def.outputs.length; i++) {\n    const /** @type {?} */ output = def.outputs[i];\n    const /** @type {?} */ handleEventClosure = renderEventHandlerClosure(\n        view, def.nodeIndex, elementEventFullName(output.target, output.eventName));\n    let /** @type {?} */ listenTarget: 'window'|'document'|'body'|'component'|null = output.target;\n    let /** @type {?} */ listenerView = view;\n    if (output.target === 'component') {\n      listenTarget = null;\n      listenerView = compView;\n    }\n    const /** @type {?} */ disposable = /** @type {?} */((\n        <any>listenerView.renderer.listen(listenTarget || el, output.eventName, handleEventClosure))); /** @type {?} */((\n    view.disposables))[def.outputIndex + i] = disposable;\n  }\n}\n/**\n * @param {?} view\n * @param {?} index\n * @param {?} eventName\n * @return {?}\n */\nfunction renderEventHandlerClosure(view: ViewData, index: number, eventName: string) {\n  return (event: any) => {\n    try {\n      return dispatchEvent(view, index, eventName, event);\n    } catch ( /** @type {?} */e) {\n      // Attention: Don't rethrow, to keep in sync with directive events.\n      view.root.errorHandler.handleError(e);\n    }\n  };\n}\n/**\n * @param {?} view\n * @param {?} def\n * @param {?} v0\n * @param {?} v1\n * @param {?} v2\n * @param {?} v3\n * @param {?} v4\n * @param {?} v5\n * @param {?} v6\n * @param {?} v7\n * @param {?} v8\n * @param {?} v9\n * @return {?}\n */\nexport function checkAndUpdateElementInline(\n    view: ViewData, def: NodeDef, v0: any, v1: any, v2: any, v3: any, v4: any, v5: any, v6: any,\n    v7: any, v8: any, v9: any): boolean {\n  const /** @type {?} */ bindLen = def.bindings.length;\n  let /** @type {?} */ changed = false;\n  if (bindLen > 0 && checkAndUpdateElementValue(view, def, 0, v0)) changed = true;\n  if (bindLen > 1 && checkAndUpdateElementValue(view, def, 1, v1)) changed = true;\n  if (bindLen > 2 && checkAndUpdateElementValue(view, def, 2, v2)) changed = true;\n  if (bindLen > 3 && checkAndUpdateElementValue(view, def, 3, v3)) changed = true;\n  if (bindLen > 4 && checkAndUpdateElementValue(view, def, 4, v4)) changed = true;\n  if (bindLen > 5 && checkAndUpdateElementValue(view, def, 5, v5)) changed = true;\n  if (bindLen > 6 && checkAndUpdateElementValue(view, def, 6, v6)) changed = true;\n  if (bindLen > 7 && checkAndUpdateElementValue(view, def, 7, v7)) changed = true;\n  if (bindLen > 8 && checkAndUpdateElementValue(view, def, 8, v8)) changed = true;\n  if (bindLen > 9 && checkAndUpdateElementValue(view, def, 9, v9)) changed = true;\n  return changed;\n}\n/**\n * @param {?} view\n * @param {?} def\n * @param {?} values\n * @return {?}\n */\nexport function checkAndUpdateElementDynamic(view: ViewData, def: NodeDef, values: any[]): boolean {\n  let /** @type {?} */ changed = false;\n  for (let /** @type {?} */ i = 0; i < values.length; i++) {\n    if (checkAndUpdateElementValue(view, def, i, values[i])) changed = true;\n  }\n  return changed;\n}\n/**\n * @param {?} view\n * @param {?} def\n * @param {?} bindingIdx\n * @param {?} value\n * @return {?}\n */\nfunction checkAndUpdateElementValue(view: ViewData, def: NodeDef, bindingIdx: number, value: any) {\n  if (!checkAndUpdateBinding(view, def, bindingIdx, value)) {\n    return false;\n  }\n  const /** @type {?} */ binding = def.bindings[bindingIdx];\n  const /** @type {?} */ elData = asElementData(view, def.nodeIndex);\n  const /** @type {?} */ renderNode = elData.renderElement;\n  const /** @type {?} */ name = /** @type {?} */(( binding.name));\n  switch (binding.flags & BindingFlags.Types) {\n    case BindingFlags.TypeElementAttribute:\n      setElementAttribute(view, binding, renderNode, binding.ns, name, value);\n      break;\n    case BindingFlags.TypeElementClass:\n      setElementClass(view, renderNode, name, value);\n      break;\n    case BindingFlags.TypeElementStyle:\n      setElementStyle(view, binding, renderNode, name, value);\n      break;\n    case BindingFlags.TypeProperty:\n      const /** @type {?} */ bindView = (def.flags & NodeFlags.ComponentView &&\n                        binding.flags & BindingFlags.SyntheticHostProperty) ?\n          elData.componentView :\n          view;\n      setElementProperty(bindView, binding, renderNode, name, value);\n      break;\n  }\n  return true;\n}\n/**\n * @param {?} view\n * @param {?} binding\n * @param {?} renderNode\n * @param {?} ns\n * @param {?} name\n * @param {?} value\n * @return {?}\n */\nfunction setElementAttribute(\n    view: ViewData, binding: BindingDef, renderNode: any, ns: string | null, name: string,\n    value: any) {\n  const /** @type {?} */ securityContext = binding.securityContext;\n  let /** @type {?} */ renderValue = securityContext ? view.root.sanitizer.sanitize(securityContext, value) : value;\n  renderValue = renderValue != null ? renderValue.toString() : null;\n  const /** @type {?} */ renderer = view.renderer;\n  if (value != null) {\n    renderer.setAttribute(renderNode, name, renderValue, ns);\n  } else {\n    renderer.removeAttribute(renderNode, name, ns);\n  }\n}\n/**\n * @param {?} view\n * @param {?} renderNode\n * @param {?} name\n * @param {?} value\n * @return {?}\n */\nfunction setElementClass(view: ViewData, renderNode: any, name: string, value: boolean) {\n  const /** @type {?} */ renderer = view.renderer;\n  if (value) {\n    renderer.addClass(renderNode, name);\n  } else {\n    renderer.removeClass(renderNode, name);\n  }\n}\n/**\n * @param {?} view\n * @param {?} binding\n * @param {?} renderNode\n * @param {?} name\n * @param {?} value\n * @return {?}\n */\nfunction setElementStyle(\n    view: ViewData, binding: BindingDef, renderNode: any, name: string, value: any) {\n  let /** @type {?} */ renderValue: string|null =\n      view.root.sanitizer.sanitize(SecurityContext.STYLE, /** @type {?} */(( value as{} | string)));\n  if (renderValue != null) {\n    renderValue = renderValue.toString();\n    const /** @type {?} */ unit = binding.suffix;\n    if (unit != null) {\n      renderValue = renderValue + unit;\n    }\n  } else {\n    renderValue = null;\n  }\n  const /** @type {?} */ renderer = view.renderer;\n  if (renderValue != null) {\n    renderer.setStyle(renderNode, name, renderValue);\n  } else {\n    renderer.removeStyle(renderNode, name);\n  }\n}\n/**\n * @param {?} view\n * @param {?} binding\n * @param {?} renderNode\n * @param {?} name\n * @param {?} value\n * @return {?}\n */\nfunction setElementProperty(\n    view: ViewData, binding: BindingDef, renderNode: any, name: string, value: any) {\n  const /** @type {?} */ securityContext = binding.securityContext;\n  let /** @type {?} */ renderValue = securityContext ? view.root.sanitizer.sanitize(securityContext, value) : value;\n  view.renderer.setProperty(renderNode, name, renderValue);\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Injector} from '../di/injector';\nimport {NgModuleRef} from '../linker/ng_module_factory';\n\nimport {DepDef, DepFlags, NgModuleData, NgModuleDefinition, NgModuleProviderDef, NodeFlags} from './types';\nimport {splitDepsDsl, tokenKey} from './util';\n\nconst /** @type {?} */ UNDEFINED_VALUE = new Object();\n\nconst /** @type {?} */ InjectorRefTokenKey = tokenKey(Injector);\nconst /** @type {?} */ NgModuleRefTokenKey = tokenKey(NgModuleRef);\n/**\n * @param {?} flags\n * @param {?} token\n * @param {?} value\n * @param {?} deps\n * @return {?}\n */\nexport function moduleProvideDef(\n    flags: NodeFlags, token: any, value: any,\n    deps: ([DepFlags, any] | any)[]): NgModuleProviderDef {\n  const /** @type {?} */ depDefs = splitDepsDsl(deps);\n  return {\n    // will bet set by the module definition\n    index: -1,\n    deps: depDefs, flags, token, value\n  };\n}\n/**\n * @param {?} providers\n * @return {?}\n */\nexport function moduleDef(providers: NgModuleProviderDef[]): NgModuleDefinition {\n  const /** @type {?} */ providersByKey: {[key: string]: NgModuleProviderDef} = {};\n  for (let /** @type {?} */ i = 0; i < providers.length; i++) {\n    const /** @type {?} */ provider = providers[i];\n    provider.index = i;\n    providersByKey[tokenKey(provider.token)] = provider;\n  }\n  return {\n    // Will be filled later...\n    factory: null,\n    providersByKey,\n    providers\n  };\n}\n/**\n * @param {?} data\n * @return {?}\n */\nexport function initNgModule(data: NgModuleData) {\n  const /** @type {?} */ def = data._def;\n  const /** @type {?} */ providers = data._providers = new Array(def.providers.length);\n  for (let /** @type {?} */ i = 0; i < def.providers.length; i++) {\n    const /** @type {?} */ provDef = def.providers[i];\n    if (!(provDef.flags & NodeFlags.LazyProvider)) {\n      providers[i] = _createProviderInstance(data, provDef);\n    }\n  }\n}\n/**\n * @param {?} data\n * @param {?} depDef\n * @param {?=} notFoundValue\n * @return {?}\n */\nexport function resolveNgModuleDep(\n    data: NgModuleData, depDef: DepDef, notFoundValue: any = Injector.THROW_IF_NOT_FOUND): any {\n  if (depDef.flags & DepFlags.Value) {\n    return depDef.token;\n  }\n  if (depDef.flags & DepFlags.Optional) {\n    notFoundValue = null;\n  }\n  if (depDef.flags & DepFlags.SkipSelf) {\n    return data._parent.get(depDef.token, notFoundValue);\n  }\n  const /** @type {?} */ tokenKey = depDef.tokenKey;\n  switch (tokenKey) {\n    case InjectorRefTokenKey:\n    case NgModuleRefTokenKey:\n      return data;\n  }\n  const /** @type {?} */ providerDef = data._def.providersByKey[tokenKey];\n  if (providerDef) {\n    let /** @type {?} */ providerInstance = data._providers[providerDef.index];\n    if (providerInstance === undefined) {\n      providerInstance = data._providers[providerDef.index] =\n          _createProviderInstance(data, providerDef);\n    }\n    return providerInstance === UNDEFINED_VALUE ? undefined : providerInstance;\n  }\n  return data._parent.get(depDef.token, notFoundValue);\n}\n/**\n * @param {?} ngModule\n * @param {?} providerDef\n * @return {?}\n */\nfunction _createProviderInstance(ngModule: NgModuleData, providerDef: NgModuleProviderDef): any {\n  let /** @type {?} */ injectable: any;\n  switch (providerDef.flags & NodeFlags.Types) {\n    case NodeFlags.TypeClassProvider:\n      injectable = _createClass(ngModule, providerDef.value, providerDef.deps);\n      break;\n    case NodeFlags.TypeFactoryProvider:\n      injectable = _callFactory(ngModule, providerDef.value, providerDef.deps);\n      break;\n    case NodeFlags.TypeUseExistingProvider:\n      injectable = resolveNgModuleDep(ngModule, providerDef.deps[0]);\n      break;\n    case NodeFlags.TypeValueProvider:\n      injectable = providerDef.value;\n      break;\n  }\n  return injectable === undefined ? UNDEFINED_VALUE : injectable;\n}\n/**\n * @param {?} ngModule\n * @param {?} ctor\n * @param {?} deps\n * @return {?}\n */\nfunction _createClass(ngModule: NgModuleData, ctor: any, deps: DepDef[]): any {\n  const /** @type {?} */ len = deps.length;\n  switch (len) {\n    case 0:\n      return new ctor();\n    case 1:\n      return new ctor(resolveNgModuleDep(ngModule, deps[0]));\n    case 2:\n      return new ctor(resolveNgModuleDep(ngModule, deps[0]), resolveNgModuleDep(ngModule, deps[1]));\n    case 3:\n      return new ctor(\n          resolveNgModuleDep(ngModule, deps[0]), resolveNgModuleDep(ngModule, deps[1]),\n          resolveNgModuleDep(ngModule, deps[2]));\n    default:\n      const /** @type {?} */ depValues = new Array(len);\n      for (let /** @type {?} */ i = 0; i < len; i++) {\n        depValues[i] = resolveNgModuleDep(ngModule, deps[i]);\n      }\n      return new ctor(...depValues);\n  }\n}\n/**\n * @param {?} ngModule\n * @param {?} factory\n * @param {?} deps\n * @return {?}\n */\nfunction _callFactory(ngModule: NgModuleData, factory: any, deps: DepDef[]): any {\n  const /** @type {?} */ len = deps.length;\n  switch (len) {\n    case 0:\n      return factory();\n    case 1:\n      return factory(resolveNgModuleDep(ngModule, deps[0]));\n    case 2:\n      return factory(resolveNgModuleDep(ngModule, deps[0]), resolveNgModuleDep(ngModule, deps[1]));\n    case 3:\n      return factory(\n          resolveNgModuleDep(ngModule, deps[0]), resolveNgModuleDep(ngModule, deps[1]),\n          resolveNgModuleDep(ngModule, deps[2]));\n    default:\n      const /** @type {?} */ depValues = Array(len);\n      for (let /** @type {?} */ i = 0; i < len; i++) {\n        depValues[i] = resolveNgModuleDep(ngModule, deps[i]);\n      }\n      return factory(...depValues);\n  }\n}\n/**\n * @param {?} ngModule\n * @param {?} lifecycles\n * @return {?}\n */\nexport function callNgModuleLifecycle(ngModule: NgModuleData, lifecycles: NodeFlags) {\n  const /** @type {?} */ def = ngModule._def;\n  for (let /** @type {?} */ i = 0; i < def.providers.length; i++) {\n    const /** @type {?} */ provDef = def.providers[i];\n    if (provDef.flags & NodeFlags.OnDestroy) {\n      const /** @type {?} */ instance = ngModule._providers[i];\n      if (instance && instance !== UNDEFINED_VALUE) {\n        instance.ngOnDestroy();\n      }\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {ElementData, NodeDef, NodeFlags, Services, ViewData, ViewDefinition, ViewState} from './types';\nimport {RenderNodeAction, declaredViewContainer, isComponentView, renderNode, visitRootRenderNodes} from './util';\n/**\n * @param {?} parentView\n * @param {?} elementData\n * @param {?} viewIndex\n * @param {?} view\n * @return {?}\n */\nexport function attachEmbeddedView(\n    parentView: ViewData, elementData: ElementData, viewIndex: number | undefined | null,\n    view: ViewData) {\n  let /** @type {?} */ embeddedViews = /** @type {?} */(( elementData.viewContainer))._embeddedViews;\n  if (viewIndex === null || viewIndex === undefined) {\n    viewIndex = embeddedViews.length;\n  }\n  view.viewContainerParent = parentView;\n  addToArray(embeddedViews, /** @type {?} */(( viewIndex)), view);\n  attachProjectedView(elementData, view);\n\n  Services.dirtyParentQueries(view);\n\n  const /** @type {?} */ prevView = /** @type {?} */(( viewIndex)) > 0 ? embeddedViews[ /** @type {?} */((viewIndex)) - 1] : null;\n  renderAttachEmbeddedView(elementData, prevView, view);\n}\n/**\n * @param {?} vcElementData\n * @param {?} view\n * @return {?}\n */\nfunction attachProjectedView(vcElementData: ElementData, view: ViewData) {\n  const /** @type {?} */ dvcElementData = declaredViewContainer(view);\n  if (!dvcElementData || dvcElementData === vcElementData ||\n      view.state & ViewState.IsProjectedView) {\n    return;\n  }\n  // Note: For performance reasons, we\n  // - add a view to template._projectedViews only 1x throughout its lifetime,\n  //   and remove it not until the view is destroyed.\n  //   (hard, as when a parent view is attached/detached we would need to attach/detach all\n  //    nested projected views as well, even accross component boundaries).\n  // - don't track the insertion order of views in the projected views array\n  //   (hard, as when the views of the same template are inserted different view containers)\n  view.state |= ViewState.IsProjectedView;\n  let /** @type {?} */ projectedViews = dvcElementData.template._projectedViews;\n  if (!projectedViews) {\n    projectedViews = dvcElementData.template._projectedViews = [];\n  }\n  projectedViews.push(view);\n  // Note: we are changing the NodeDef here as we cannot calculate\n  // the fact whether a template is used for projection during compilation.\n  markNodeAsProjectedTemplate( /** @type {?} */((view.parent)).def, /** @type {?} */(( view.parentNodeDef)));\n}\n/**\n * @param {?} viewDef\n * @param {?} nodeDef\n * @return {?}\n */\nfunction markNodeAsProjectedTemplate(viewDef: ViewDefinition, nodeDef: NodeDef) {\n  if (nodeDef.flags & NodeFlags.ProjectedTemplate) {\n    return;\n  }\n  viewDef.nodeFlags |= NodeFlags.ProjectedTemplate;\n  nodeDef.flags |= NodeFlags.ProjectedTemplate;\n  let /** @type {?} */ parentNodeDef = nodeDef.parent;\n  while (parentNodeDef) {\n    parentNodeDef.childFlags |= NodeFlags.ProjectedTemplate;\n    parentNodeDef = parentNodeDef.parent;\n  }\n}\n/**\n * @param {?} elementData\n * @param {?=} viewIndex\n * @return {?}\n */\nexport function detachEmbeddedView(elementData: ElementData, viewIndex?: number): ViewData|null {\n  const /** @type {?} */ embeddedViews = /** @type {?} */(( elementData.viewContainer))._embeddedViews;\n  if (viewIndex == null || viewIndex >= embeddedViews.length) {\n    viewIndex = embeddedViews.length - 1;\n  }\n  if (viewIndex < 0) {\n    return null;\n  }\n  const /** @type {?} */ view = embeddedViews[viewIndex];\n  view.viewContainerParent = null;\n  removeFromArray(embeddedViews, viewIndex);\n\n  // See attachProjectedView for why we don't update projectedViews here.\n  Services.dirtyParentQueries(view);\n\n  renderDetachView(view);\n\n  return view;\n}\n/**\n * @param {?} view\n * @return {?}\n */\nexport function detachProjectedView(view: ViewData) {\n  if (!(view.state & ViewState.IsProjectedView)) {\n    return;\n  }\n  const /** @type {?} */ dvcElementData = declaredViewContainer(view);\n  if (dvcElementData) {\n    const /** @type {?} */ projectedViews = dvcElementData.template._projectedViews;\n    if (projectedViews) {\n      removeFromArray(projectedViews, projectedViews.indexOf(view));\n      Services.dirtyParentQueries(view);\n    }\n  }\n}\n/**\n * @param {?} elementData\n * @param {?} oldViewIndex\n * @param {?} newViewIndex\n * @return {?}\n */\nexport function moveEmbeddedView(\n    elementData: ElementData, oldViewIndex: number, newViewIndex: number): ViewData {\n  const /** @type {?} */ embeddedViews = /** @type {?} */(( elementData.viewContainer))._embeddedViews;\n  const /** @type {?} */ view = embeddedViews[oldViewIndex];\n  removeFromArray(embeddedViews, oldViewIndex);\n  if (newViewIndex == null) {\n    newViewIndex = embeddedViews.length;\n  }\n  addToArray(embeddedViews, newViewIndex, view);\n\n  // Note: Don't need to change projectedViews as the order in there\n  // as always invalid...\n\n  Services.dirtyParentQueries(view);\n\n  renderDetachView(view);\n  const /** @type {?} */ prevView = newViewIndex > 0 ? embeddedViews[newViewIndex - 1] : null;\n  renderAttachEmbeddedView(elementData, prevView, view);\n\n  return view;\n}\n/**\n * @param {?} elementData\n * @param {?} prevView\n * @param {?} view\n * @return {?}\n */\nfunction renderAttachEmbeddedView(\n    elementData: ElementData, prevView: ViewData | null, view: ViewData) {\n  const /** @type {?} */ prevRenderNode = prevView ? renderNode(prevView, /** @type {?} */(( prevView.def.lastRenderRootNode))) :\n                                    elementData.renderElement;\n  const /** @type {?} */ parentNode = view.renderer.parentNode(prevRenderNode);\n  const /** @type {?} */ nextSibling = view.renderer.nextSibling(prevRenderNode);\n  // Note: We can't check if `nextSibling` is present, as on WebWorkers it will always be!\n  // However, browsers automatically do `appendChild` when there is no `nextSibling`.\n  visitRootRenderNodes(view, RenderNodeAction.InsertBefore, parentNode, nextSibling, undefined);\n}\n/**\n * @param {?} view\n * @return {?}\n */\nexport function renderDetachView(view: ViewData) {\n  visitRootRenderNodes(view, RenderNodeAction.RemoveChild, null, null, undefined);\n}\n/**\n * @param {?} arr\n * @param {?} index\n * @param {?} value\n * @return {?}\n */\nfunction addToArray(arr: any[], index: number, value: any) {\n  // perf: array.push is faster than array.splice!\n  if (index >= arr.length) {\n    arr.push(value);\n  } else {\n    arr.splice(index, 0, value);\n  }\n}\n/**\n * @param {?} arr\n * @param {?} index\n * @return {?}\n */\nfunction removeFromArray(arr: any[], index: number) {\n  // perf: array.pop is faster than array.splice!\n  if (index >= arr.length - 1) {\n    arr.pop();\n  } else {\n    arr.splice(index, 1);\n  }\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {ElementRef} from '../linker/element_ref';\nimport {QueryList} from '../linker/query_list';\n\nimport {NodeDef, NodeFlags, QueryBindingDef, QueryBindingType, QueryDef, QueryValueType, ViewData, asElementData, asProviderData, asQueryList} from './types';\nimport {declaredViewContainer, filterQueryId, isEmbeddedView} from './util';\n/**\n * @param {?} flags\n * @param {?} id\n * @param {?} bindings\n * @return {?}\n */\nexport function queryDef(\n    flags: NodeFlags, id: number, bindings: {[propName: string]: QueryBindingType}): NodeDef {\n  let /** @type {?} */ bindingDefs: QueryBindingDef[] = [];\n  for (let /** @type {?} */ propName in bindings) {\n    const /** @type {?} */ bindingType = bindings[propName];\n    bindingDefs.push({propName, bindingType});\n  }\n\n  return {\n    // will bet set by the view definition\n    nodeIndex: -1,\n    parent: null,\n    renderParent: null,\n    bindingIndex: -1,\n    outputIndex: -1,\n    // regular values\n    // TODO(vicb): check\n    checkIndex: -1, flags,\n    childFlags: 0,\n    directChildFlags: 0,\n    childMatchedQueries: 0,\n    ngContentIndex: -1,\n    matchedQueries: {},\n    matchedQueryIds: 0,\n    references: {},\n    childCount: 0,\n    bindings: [],\n    bindingFlags: 0,\n    outputs: [],\n    element: null,\n    provider: null,\n    text: null,\n    query: {id, filterId: filterQueryId(id), bindings: bindingDefs},\n    ngContent: null\n  };\n}\n/**\n * @return {?}\n */\nexport function createQuery(): QueryList<any> {\n  return new QueryList();\n}\n/**\n * @param {?} view\n * @return {?}\n */\nexport function dirtyParentQueries(view: ViewData) {\n  const /** @type {?} */ queryIds = view.def.nodeMatchedQueries;\n  while (view.parent && isEmbeddedView(view)) {\n    let /** @type {?} */ tplDef = /** @type {?} */(( view.parentNodeDef));\n    view = view.parent;\n    // content queries\n    const /** @type {?} */ end = tplDef.nodeIndex + tplDef.childCount;\n    for (let /** @type {?} */ i = 0; i <= end; i++) {\n      const /** @type {?} */ nodeDef = view.def.nodes[i];\n      if ((nodeDef.flags & NodeFlags.TypeContentQuery) &&\n          (nodeDef.flags & NodeFlags.DynamicQuery) &&\n          ( /** @type {?} */((nodeDef.query)).filterId & queryIds) === /** @type {?} */(( nodeDef.query)).filterId) {\n        asQueryList(view, i).setDirty();\n      }\n      if ((nodeDef.flags & NodeFlags.TypeElement && i + nodeDef.childCount < tplDef.nodeIndex) ||\n          !(nodeDef.childFlags & NodeFlags.TypeContentQuery) ||\n          !(nodeDef.childFlags & NodeFlags.DynamicQuery)) {\n        // skip elements that don't contain the template element or no query.\n        i += nodeDef.childCount;\n      }\n    }\n  }\n\n  // view queries\n  if (view.def.nodeFlags & NodeFlags.TypeViewQuery) {\n    for (let /** @type {?} */ i = 0; i < view.def.nodes.length; i++) {\n      const /** @type {?} */ nodeDef = view.def.nodes[i];\n      if ((nodeDef.flags & NodeFlags.TypeViewQuery) && (nodeDef.flags & NodeFlags.DynamicQuery)) {\n        asQueryList(view, i).setDirty();\n      }\n      // only visit the root nodes\n      i += nodeDef.childCount;\n    }\n  }\n}\n/**\n * @param {?} view\n * @param {?} nodeDef\n * @return {?}\n */\nexport function checkAndUpdateQuery(view: ViewData, nodeDef: NodeDef) {\n  const /** @type {?} */ queryList = asQueryList(view, nodeDef.nodeIndex);\n  if (!queryList.dirty) {\n    return;\n  }\n  let /** @type {?} */ directiveInstance: any;\n  let /** @type {?} */ newValues: any[] = /** @type {?} */(( undefined));\n  if (nodeDef.flags & NodeFlags.TypeContentQuery) {\n    const /** @type {?} */ elementDef = /** @type {?} */(( /** @type {?} */(( nodeDef.parent)).parent));\n    newValues = calcQueryValues(\n        view, elementDef.nodeIndex, elementDef.nodeIndex + elementDef.childCount, /** @type {?} */(( nodeDef.query)),\n        []);\n    directiveInstance = asProviderData(view, /** @type {?} */(( nodeDef.parent)).nodeIndex).instance;\n  } else if (nodeDef.flags & NodeFlags.TypeViewQuery) {\n    newValues = calcQueryValues(view, 0, view.def.nodes.length - 1, /** @type {?} */(( nodeDef.query)), []);\n    directiveInstance = view.component;\n  }\n  queryList.reset(newValues);\n  const /** @type {?} */ bindings = /** @type {?} */(( nodeDef.query)).bindings;\n  let /** @type {?} */ notify = false;\n  for (let /** @type {?} */ i = 0; i < bindings.length; i++) {\n    const /** @type {?} */ binding = bindings[i];\n    let /** @type {?} */ boundValue: any;\n    switch (binding.bindingType) {\n      case QueryBindingType.First:\n        boundValue = queryList.first;\n        break;\n      case QueryBindingType.All:\n        boundValue = queryList;\n        notify = true;\n        break;\n    }\n    directiveInstance[binding.propName] = boundValue;\n  }\n  if (notify) {\n    queryList.notifyOnChanges();\n  }\n}\n/**\n * @param {?} view\n * @param {?} startIndex\n * @param {?} endIndex\n * @param {?} queryDef\n * @param {?} values\n * @return {?}\n */\nfunction calcQueryValues(\n    view: ViewData, startIndex: number, endIndex: number, queryDef: QueryDef,\n    values: any[]): any[] {\n  for (let /** @type {?} */ i = startIndex; i <= endIndex; i++) {\n    const /** @type {?} */ nodeDef = view.def.nodes[i];\n    const /** @type {?} */ valueType = nodeDef.matchedQueries[queryDef.id];\n    if (valueType != null) {\n      values.push(getQueryValue(view, nodeDef, valueType));\n    }\n    if (nodeDef.flags & NodeFlags.TypeElement && /** @type {?} */(( nodeDef.element)).template &&\n        ( /** @type {?} */(( /** @type {?} */((nodeDef.element)).template)).nodeMatchedQueries & queryDef.filterId) ===\n            queryDef.filterId) {\n      const /** @type {?} */ elementData = asElementData(view, i);\n      // check embedded views that were attached at the place of their template,\n      // but process child nodes first if some match the query (see issue #16568)\n      if ((nodeDef.childMatchedQueries & queryDef.filterId) === queryDef.filterId) {\n        calcQueryValues(view, i + 1, i + nodeDef.childCount, queryDef, values);\n        i += nodeDef.childCount;\n      }\n      if (nodeDef.flags & NodeFlags.EmbeddedViews) {\n        const /** @type {?} */ embeddedViews = /** @type {?} */(( elementData.viewContainer))._embeddedViews;\n        for (let /** @type {?} */ k = 0; k < embeddedViews.length; k++) {\n          const /** @type {?} */ embeddedView = embeddedViews[k];\n          const /** @type {?} */ dvc = declaredViewContainer(embeddedView);\n          if (dvc && dvc === elementData) {\n            calcQueryValues(embeddedView, 0, embeddedView.def.nodes.length - 1, queryDef, values);\n          }\n        }\n      }\n      const /** @type {?} */ projectedViews = elementData.template._projectedViews;\n      if (projectedViews) {\n        for (let /** @type {?} */ k = 0; k < projectedViews.length; k++) {\n          const /** @type {?} */ projectedView = projectedViews[k];\n          calcQueryValues(projectedView, 0, projectedView.def.nodes.length - 1, queryDef, values);\n        }\n      }\n    }\n    if ((nodeDef.childMatchedQueries & queryDef.filterId) !== queryDef.filterId) {\n      // if no child matches the query, skip the children.\n      i += nodeDef.childCount;\n    }\n  }\n  return values;\n}\n/**\n * @param {?} view\n * @param {?} nodeDef\n * @param {?} queryValueType\n * @return {?}\n */\nexport function getQueryValue(\n    view: ViewData, nodeDef: NodeDef, queryValueType: QueryValueType): any {\n  if (queryValueType != null) {\n    // a match\n    switch (queryValueType) {\n      case QueryValueType.RenderElement:\n        return asElementData(view, nodeDef.nodeIndex).renderElement;\n      case QueryValueType.ElementRef:\n        return new ElementRef(asElementData(view, nodeDef.nodeIndex).renderElement);\n      case QueryValueType.TemplateRef:\n        return asElementData(view, nodeDef.nodeIndex).template;\n      case QueryValueType.ViewContainerRef:\n        return asElementData(view, nodeDef.nodeIndex).viewContainer;\n      case QueryValueType.Provider:\n        return asProviderData(view, nodeDef.nodeIndex).instance;\n    }\n  }\n}","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {NodeDef, NodeFlags, ViewData} from './types';\nimport {RenderNodeAction, getParentRenderElement, visitProjectedRenderNodes} from './util';\n/**\n * @param {?} ngContentIndex\n * @param {?} index\n * @return {?}\n */\nexport function ngContentDef(ngContentIndex: null | number, index: number): NodeDef {\n  return {\n    // will bet set by the view definition\n    nodeIndex: -1,\n    parent: null,\n    renderParent: null,\n    bindingIndex: -1,\n    outputIndex: -1,\n    // regular values\n    checkIndex: -1,\n    flags: NodeFlags.TypeNgContent,\n    childFlags: 0,\n    directChildFlags: 0,\n    childMatchedQueries: 0,\n    matchedQueries: {},\n    matchedQueryIds: 0,\n    references: {}, ngContentIndex,\n    childCount: 0,\n    bindings: [],\n    bindingFlags: 0,\n    outputs: [],\n    element: null,\n    provider: null,\n    text: null,\n    query: null,\n    ngContent: {index}\n  };\n}\n/**\n * @param {?} view\n * @param {?} renderHost\n * @param {?} def\n * @return {?}\n */\nexport function appendNgContent(view: ViewData, renderHost: any, def: NodeDef) {\n  const /** @type {?} */ parentEl = getParentRenderElement(view, renderHost, def);\n  if (!parentEl) {\n    // Nothing to do if there is no parent element.\n    return;\n  }\n  const /** @type {?} */ ngContentIndex = /** @type {?} */(( def.ngContent)).index;\n  visitProjectedRenderNodes(\n      view, ngContentIndex, RenderNodeAction.AppendChild, parentEl, null, undefined);\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {BindingDef, BindingFlags, NodeDef, NodeFlags, PureExpressionData, ViewData, asPureExpressionData} from './types';\nimport {calcBindingFlags, checkAndUpdateBinding} from './util';\n/**\n * @param {?} checkIndex\n * @param {?} argCount\n * @return {?}\n */\nexport function purePipeDef(checkIndex: number, argCount: number): NodeDef {\n  // argCount + 1 to include the pipe as first arg\n  return _pureExpressionDef(NodeFlags.TypePurePipe, checkIndex, new Array(argCount + 1));\n}\n/**\n * @param {?} checkIndex\n * @param {?} argCount\n * @return {?}\n */\nexport function pureArrayDef(checkIndex: number, argCount: number): NodeDef {\n  return _pureExpressionDef(NodeFlags.TypePureArray, checkIndex, new Array(argCount));\n}\n/**\n * @param {?} checkIndex\n * @param {?} propToIndex\n * @return {?}\n */\nexport function pureObjectDef(checkIndex: number, propToIndex: {[p: string]: number}): NodeDef {\n  const /** @type {?} */ keys = Object.keys(propToIndex);\n  const /** @type {?} */ nbKeys = keys.length;\n  const /** @type {?} */ propertyNames = new Array(nbKeys);\n  for (let /** @type {?} */ i = 0; i < nbKeys; i++) {\n    const /** @type {?} */ key = keys[i];\n    const /** @type {?} */ index = propToIndex[key];\n    propertyNames[index] = key;\n  }\n\n  return _pureExpressionDef(NodeFlags.TypePureObject, checkIndex, propertyNames);\n}\n/**\n * @param {?} flags\n * @param {?} checkIndex\n * @param {?} propertyNames\n * @return {?}\n */\nfunction _pureExpressionDef(\n    flags: NodeFlags, checkIndex: number, propertyNames: string[]): NodeDef {\n  const /** @type {?} */ bindings: BindingDef[] = new Array(propertyNames.length);\n  for (let /** @type {?} */ i = 0; i < propertyNames.length; i++) {\n    const /** @type {?} */ prop = propertyNames[i];\n    bindings[i] = {\n      flags: BindingFlags.TypeProperty,\n      name: prop,\n      ns: null,\n      nonMinifiedName: prop,\n      securityContext: null,\n      suffix: null\n    };\n  }\n  return {\n    // will bet set by the view definition\n    nodeIndex: -1,\n    parent: null,\n    renderParent: null,\n    bindingIndex: -1,\n    outputIndex: -1,\n    // regular values\n    checkIndex,\n    flags,\n    childFlags: 0,\n    directChildFlags: 0,\n    childMatchedQueries: 0,\n    matchedQueries: {},\n    matchedQueryIds: 0,\n    references: {},\n    ngContentIndex: -1,\n    childCount: 0, bindings,\n    bindingFlags: calcBindingFlags(bindings),\n    outputs: [],\n    element: null,\n    provider: null,\n    text: null,\n    query: null,\n    ngContent: null\n  };\n}\n/**\n * @param {?} view\n * @param {?} def\n * @return {?}\n */\nexport function createPureExpression(view: ViewData, def: NodeDef): PureExpressionData {\n  return {value: undefined};\n}\n/**\n * @param {?} view\n * @param {?} def\n * @param {?} v0\n * @param {?} v1\n * @param {?} v2\n * @param {?} v3\n * @param {?} v4\n * @param {?} v5\n * @param {?} v6\n * @param {?} v7\n * @param {?} v8\n * @param {?} v9\n * @return {?}\n */\nexport function checkAndUpdatePureExpressionInline(\n    view: ViewData, def: NodeDef, v0: any, v1: any, v2: any, v3: any, v4: any, v5: any, v6: any,\n    v7: any, v8: any, v9: any): boolean {\n  const /** @type {?} */ bindings = def.bindings;\n  let /** @type {?} */ changed = false;\n  const /** @type {?} */ bindLen = bindings.length;\n  if (bindLen > 0 && checkAndUpdateBinding(view, def, 0, v0)) changed = true;\n  if (bindLen > 1 && checkAndUpdateBinding(view, def, 1, v1)) changed = true;\n  if (bindLen > 2 && checkAndUpdateBinding(view, def, 2, v2)) changed = true;\n  if (bindLen > 3 && checkAndUpdateBinding(view, def, 3, v3)) changed = true;\n  if (bindLen > 4 && checkAndUpdateBinding(view, def, 4, v4)) changed = true;\n  if (bindLen > 5 && checkAndUpdateBinding(view, def, 5, v5)) changed = true;\n  if (bindLen > 6 && checkAndUpdateBinding(view, def, 6, v6)) changed = true;\n  if (bindLen > 7 && checkAndUpdateBinding(view, def, 7, v7)) changed = true;\n  if (bindLen > 8 && checkAndUpdateBinding(view, def, 8, v8)) changed = true;\n  if (bindLen > 9 && checkAndUpdateBinding(view, def, 9, v9)) changed = true;\n\n  if (changed) {\n    const /** @type {?} */ data = asPureExpressionData(view, def.nodeIndex);\n    let /** @type {?} */ value: any;\n    switch (def.flags & NodeFlags.Types) {\n      case NodeFlags.TypePureArray:\n        value = new Array(bindings.length);\n        if (bindLen > 0) value[0] = v0;\n        if (bindLen > 1) value[1] = v1;\n        if (bindLen > 2) value[2] = v2;\n        if (bindLen > 3) value[3] = v3;\n        if (bindLen > 4) value[4] = v4;\n        if (bindLen > 5) value[5] = v5;\n        if (bindLen > 6) value[6] = v6;\n        if (bindLen > 7) value[7] = v7;\n        if (bindLen > 8) value[8] = v8;\n        if (bindLen > 9) value[9] = v9;\n        break;\n      case NodeFlags.TypePureObject:\n        value = {};\n        if (bindLen > 0) value[ /** @type {?} */((bindings[0].name))] = v0;\n        if (bindLen > 1) value[ /** @type {?} */((bindings[1].name))] = v1;\n        if (bindLen > 2) value[ /** @type {?} */((bindings[2].name))] = v2;\n        if (bindLen > 3) value[ /** @type {?} */((bindings[3].name))] = v3;\n        if (bindLen > 4) value[ /** @type {?} */((bindings[4].name))] = v4;\n        if (bindLen > 5) value[ /** @type {?} */((bindings[5].name))] = v5;\n        if (bindLen > 6) value[ /** @type {?} */((bindings[6].name))] = v6;\n        if (bindLen > 7) value[ /** @type {?} */((bindings[7].name))] = v7;\n        if (bindLen > 8) value[ /** @type {?} */((bindings[8].name))] = v8;\n        if (bindLen > 9) value[ /** @type {?} */((bindings[9].name))] = v9;\n        break;\n      case NodeFlags.TypePurePipe:\n        const /** @type {?} */ pipe = v0;\n        switch (bindLen) {\n          case 1:\n            value = pipe.transform(v0);\n            break;\n          case 2:\n            value = pipe.transform(v1);\n            break;\n          case 3:\n            value = pipe.transform(v1, v2);\n            break;\n          case 4:\n            value = pipe.transform(v1, v2, v3);\n            break;\n          case 5:\n            value = pipe.transform(v1, v2, v3, v4);\n            break;\n          case 6:\n            value = pipe.transform(v1, v2, v3, v4, v5);\n            break;\n          case 7:\n            value = pipe.transform(v1, v2, v3, v4, v5, v6);\n            break;\n          case 8:\n            value = pipe.transform(v1, v2, v3, v4, v5, v6, v7);\n            break;\n          case 9:\n            value = pipe.transform(v1, v2, v3, v4, v5, v6, v7, v8);\n            break;\n          case 10:\n            value = pipe.transform(v1, v2, v3, v4, v5, v6, v7, v8, v9);\n            break;\n        }\n        break;\n    }\n    data.value = value;\n  }\n  return changed;\n}\n/**\n * @param {?} view\n * @param {?} def\n * @param {?} values\n * @return {?}\n */\nexport function checkAndUpdatePureExpressionDynamic(\n    view: ViewData, def: NodeDef, values: any[]): boolean {\n  const /** @type {?} */ bindings = def.bindings;\n  let /** @type {?} */ changed = false;\n  for (let /** @type {?} */ i = 0; i < values.length; i++) {\n    // Note: We need to loop over all values, so that\n    // the old values are updates as well!\n    if (checkAndUpdateBinding(view, def, i, values[i])) {\n      changed = true;\n    }\n  }\n  if (changed) {\n    const /** @type {?} */ data = asPureExpressionData(view, def.nodeIndex);\n    let /** @type {?} */ value: any;\n    switch (def.flags & NodeFlags.Types) {\n      case NodeFlags.TypePureArray:\n        value = values;\n        break;\n      case NodeFlags.TypePureObject:\n        value = {};\n        for (let /** @type {?} */ i = 0; i < values.length; i++) {\n          value[ /** @type {?} */((bindings[i].name))] = values[i];\n        }\n        break;\n      case NodeFlags.TypePurePipe:\n        const /** @type {?} */ pipe = values[0];\n        const /** @type {?} */ params = values.slice(1);\n        value = ( /** @type {?} */((<any>pipe.transform)))(...params);\n        break;\n    }\n    data.value = value;\n  }\n  return changed;\n}\n"],"names":["WeUILoadmore","ctorParameters","WeUINavBarItem","navbar","this","barItemCls","_activated","prototype","activated","isActivated","selector","type","WeUINavBar","decorators","Optional","Host","Inject","args","forwardRef","propDecorators","EventEmitter","ngAfterViewInit","activateAt","activeIndex","getAt","index","items","find","item","i","emit","activate","template","terminate","WeUIProgressBar","onTerminate","WeUIRadio","_super","_this","call","renderer","elementRef","compositionMode","_cls_check_label","tslib_1.__extends","WeUIFormControl","ElementRef","WeUISearchBar","defaults","cancelText","focusing","value","searchTerms","Subject","ngOnInit","_searchTermsChangesSubscription","subscribe","term","search","unsubscribe","doFocus","searchBox","nativeElement","focus","onFocus","length","onBlur","push","next","clear","required","Input","WeUISelect","_renderer","_elementRef","_container","nativeEl","addClass","parentEl","parentElement","WeUISlider","percent","onTouchStart","event","disabled","startX","targetTouches","clientX","onTouched","onTouchMove","dist","onChange","setDisabledState","isDisabled","DefaultValueAccessor","providers","WEUI_FORM_CONTROL_VALUE_ACCESSOR$2","Renderer2","undefined","COMPOSITION_BUFFER_MODE","showValue","WeUISwitch","writeValue","checked","WEUI_FORM_CONTROL_VALUE_ACCESSOR$3","WeUITabBarItem","tabbar","WeUITabBar","WeUITips","_cls_tips","WeUITitle","_cls_title","isUploading","file","fileURL","WeUIFile","hasError","error","progress","reset","WeUIUploader","sanitizer","files","getFiles","getFileCount","filter","isUploaded","onSelect","picker","gallery","show","onDelete","indexOf","splice","WeUIActionSheet","shown","_show","Object","defineProperty","get","mode","resolve","menu","transition","animate","WeUIDialog","reject","close","hide","positiveClick","getIcon","icon","info","success","getIconClass","_a","iconCls","getWrapperClass","title","content","btnNOText","WeUIToast","ngOnChanges","changes","status","currentValue","setTimeout","WeUITopTips","Output","Layer","_injector","_ngZone","div","_createCompInstance","component","componentFactory","_componentFactoryResolver","resolveComponentFactory","componentRef","create","_createDivElement","appendChild","_getComponentRootNode","showAlert","message","dialog","_createDialog","showNOButton","key","hasOwnProperty","showConfirm","showLoading","toast","_createToast","showSuccess","showError","instance","destroy","tip","showActionsheet","menus","btnCancelText","actionsheet","Injectable","seed","WeUIPickerService","createPicker","config","_createComponent","remove","afterCreate","_appRef","attachView","hostView","rootNodes","ɵgetDOM","createElement","id","getUuid","classList","add","ComponentFactoryResolver","FormValidation","messages","formErrors","defaultValidationMessages","email","url","date","dateISO","number","digits","alphanumeric","maxlength","minlength","rangelength","range","_form","ngSubmit","onSubmit","bind","showByName","isPresent","name","validate","form","field","controls","control","errors","invalid","dirty","submitted","valid","getError","len","err","NgForm","WeUIModule","NgModule","imports","CommonModule","FormsModule","declarations","WeUIButton","WeUISubmit","WeUIInput","WeUICheckbox","WeUIGallery","WeUIItems","WeUIItem","WeUILink","WeUIBadge","WeUIFooter","WeUIFooterText","WeUIFooterLinks","WeUIFooterLink","WeUIPicker","WeUIDatePicker","WeUIPickerGroup","exports","entryComponents","window","WindowTimeSubscriber","closeWindow","complete","windows","Subscriber_1","Subscriber","WindowToggleSubscriber","destination","openings","closingSelector","contexts","openSubscription","subscribeToResult_1","subscribeToResult","__extends","_next","_error","context","subscription","_complete","_unsubscribe","notifyNext","outerValue","innerValue","outerIndex","innerIndex","innerSub","closingNotifier","tryCatch_1","tryCatch","errorObject_1","errorObject","e","window_1","Subject_1","Subscription_1","Subscription","innerSubscription","closed","notifyError","notifyComplete","inner","OuterSubscriber_1","OuterSubscriber","WindowSubscriber","openWindow","unsubscribeClosingNotification","closingNotification","prevWindow","WithLatestFromSubscriber","observables","project","toRespond","values","Array","observable","found","concat","_tryProject","result","apply","StaticIterator","ZipSubscriber","iterators","active","isArray_1","isArray","StaticArrayIterator","iterator_1","iterator","ZipBufferIterator","stillUnsubscribed","notifyInactive","checkIterators","hasValue","shouldComplete","hasCompleted","done","nextResult","array","parent","buffer","isComplete","shift","debounceTime_1","debounceTime","distinctUntilChanged_1","distinctUntilChanged","__renderer","__elementRef","__compositionMode","_cls_control","registerControl","_value","newValue","count","toString","label","getColorStyle","color","set","hidden","option","onCancel","exportAs","innerHeight","bodyHeight","duration","distance","init","forceChange","startY","changedTouches","pageY","startTime","Date","_move","endTime","endY","speed","_distance","preventDefault","_speed","Math","abs","windowY","getWindowHeight","stop","diff","inertiaTime","options","offset","rowHeight","round","max","_getMax","min","_getMin","_getDefaultIndex","current","floor","_getDefaultTranslate","HostListener","Schedule","fields","_days","_pointer","_start","_findNext","_end","getTime","Error","month","getMonth","getDate","day","getDay","_months","_dates","setDate","setMonth","hasNext","_endDate","_parseDate","end","sub","test","RegExp","$1","$2","$3","now","thisYear","getFullYear","_startDate","start","years","year","endYear","monthPicker","_groups","group","datePicker","_updateDatePickerList","_updateMonthPickerList","months","nexts","cron","dates","_cls_footer","fixedAtBottom","delete","image","shouldWarn","changed","_el","previousValue","state","touched","shouldShowWarnIcon","showWarnIcon","blur","ev","onKeyboardEvent","isNaN","maxLen","getCharCount","keyCode","WEUI_INPUT_CONTROL_VALUE_ACCESSOR","encapsulation","ViewEncapsulation","None","pattern","placeholder","readonly","autocomplete","countChars","baseCls","_cls_cells","_cls_cell","_cls_item","cls","_cls_cell_access","_href","bypassSecurityTrustUrl","noPushArrow","DomSanitizer","href","_seed","hasSeed","ScanSubscriber","_tryNext","accumulator","TakeLastSubscriber","total","ring","idx","MergeMapToSubscriber","ish","resultSelector","concurrent","Number","POSITIVE_INFINITY","_innerSub","trySelectResult","MergeScanSubscriber","acc","OnErrorResumeNextSubscriber","nextSources","subscribeToNextSource","PairwiseSubscriber","hasPrev","prev","BehaviorSubject","getValue","_subscribe","subscriber","thrownError","ObjectUnsubscribedError_1","ObjectUnsubscribedError","AsyncSubject","arguments","EMPTY","QueueAction","scheduler","work","schedule","delay","flush","execute","_execute","requestAsyncId","AsyncAction_1","AsyncAction","QueueScheduler","AsyncScheduler_1","AsyncScheduler","QueueScheduler_1","QueueAction_1","ReplayEvent","ReplaySubject","bufferSize","windowTime","_events","_bufferSize","_windowTime","_getNow","_trimBufferThenGetEvents","isStopped","observers","SubjectSubscription_1","SubjectSubscription","observeOn_1","ObserveOnSubscriber","queue_1","queue","eventsCount","spliceCount","time","RaceSubscriber","hasFirst","subscriptions","RepeatSubscriber","source","_unsubscribeAndRecycle","RepeatWhenSubscriber","notifier","sourceIsBeingSubscribedTo","retries","retriesSubscription","subscribeToRetries","notifications","RetrySubscriber","RetryWhenSubscriber","SampleSubscriber","emitValue","SampleTimeSubscriber","period","dispatchNotification","lastValue","SequenceEqualCompareToSubscriber","SequenceEqualSubscriber","compareTo","comparor","_b","_oneComplete","checkValues","_c","a","b","areEqual","nextB","SingleSubscriber","predicate","seenValue","applySingleValue","singleValue","tryNext","EmptyError_1","EmptyError","SkipSubscriber","x","SkipLastSubscriber","_skipCount","_count","_ring","skipCount","currentIndex","oldValue","SkipUntilSubscriber","isInnerStopped","SkipWhileSubscriber","skipping","tryCallPredicate","Boolean","SwitchMapSubscriber","_tryNotifyNext","SwitchMapToSubscriber","tryResultSelector","TakeSubscriber","TakeUntilSubscriber","TakeWhileSubscriber","nextOrComplete","predicateResult","DoSubscriber","nextOrObserver","safeSubscriber","syncErrorThrowable","syncErrorThrown","syncErrorValue","throttle","durationSelector","defaultThrottleConfig","lift","ThrottleOperator","leading","trailing","ThrottleSubscriber","_leading","_trailing","_hasTrailingValue","throttled","_trailingValue","tryDurationSelector","_sendTrailing","ThrottleTimeSubscriber","dispatchNext","clearThrottle","TimeInterval","interval","TimeIntervalSubscriber","lastTime","span","TimeoutError","stack","TimeoutSubscriber","absoluteTimeout","waitFor","errorInstance","action","scheduleTimeout","dispatchTimeout","TimeoutWithSubscriber","withObservable","newWindow","WindowCountSubscriber","windowSize","startWindowEvery","c","CountedSubject","_numberOfNextedValues","windowTimeSpan","windowCreationInterval","maxWindowSize","closeState","creationState","dispatchWindowClose","dispatchWindowCreation","timeSpanOnlyState","dispatchWindowTimeSpanOnly","numberOfNextedValues","window_2","BufferToggleSubscriber","trySubscribe","closeBuffer","BufferWhenSubscriber","subscribing","openBuffer","closingSubscription","CatchSubscriber","caught","err2","none","CombineLatestSubscriber","unused","oldVal","slice","IteratorObservable","getIterator","dispatch","return","Observable_1","Observable","StringIterator","str","charAt","ArrayIterator","arr","toLength","maxSafeInteger","pow","ArrayLikeObservable","arrayLike","_isScalar","EmptyObservable_1","EmptyObservable","ScalarObservable_1","ScalarObservable","Notification","kind","observe","observer","do","accept","toObservable","of","throw","empty","createNext","undefinedValueNotification","createError","createComplete","completeNotification","observeOn","ObserveOnOperator","arg","notification","scheduleMessage","ObserveOnMessage","Notification_1","FromObservable","observable_1","ArrayObservable_1","ArrayObservable","isPromise_1","isPromise","PromiseObservable_1","PromiseObservable","IteratorObservable_1","isArrayLike_1","isArrayLike","ArrayLikeObservable_1","TypeError","CountSubscriber","_tryPredicate","DebounceSubscriber","durationSubscription","DebounceTimeOperator","dueTime","DebounceTimeSubscriber","debouncedSubscription","clearDebounce","debouncedNext","DefaultIfEmptySubscriber","defaultValue","isEmpty","DelayMessage","DelaySubscriber","errored","delay_1","_schedule","scheduleNotification","SubscriptionDelaySubscriber","DelayWhenSubscriber","delayDurationSelector","completed","delayNotifierSubscriptions","removeSubscription","tryComplete","delayNotifier","tryDelay","subscriptionIdx","notifierSubscription","SubscriptionDelayObservable","subscriptionDelay","sourceSubscribed","subscribeToSource","DeMaterializeSubscriber","minimalSetImpl","root_1","root","Set","DistinctSubscriber","keySelector","flushes","Set_1","_useKeySelector","_finalizeNext","has","DistinctUntilChangedOperator","compare","DistinctUntilChangedSubscriber","hasKey","y","ArgumentOutOfRangeError","ElementAtSubscriber","ArgumentOutOfRangeError_1","EverySubscriber","thisArg","everyValueMatch","SwitchFirstSubscriber","hasSubscription","SwitchFirstMapSubscriber","ExpandSubscriber","subscribeToProjection","FilterSubscriber","FinallySubscriber","callback","FindValueSubscriber","yieldIndex","MapPolyfill","FirstSubscriber","_emitted","_emit","_tryResultSelector","_emitFinal","size","_values","_keys","forEach","cb","Map","MapPolyfill_1","FastMap","GroupDurationSubscriber","GroupBySubscriber","elementSelector","subjectSelector","groups","attemptedToUnsubscribe","_group","FastMap_1","Map_1","element","groupedObservable","GroupedObservable","removeGroup","groupSubject","refCountSubscription","InnerRefCountSubscription","IgnoreElementsSubscriber","noop_1","noop","IsEmptySubscriber","LastSubscriber","MapToSubscriber","MaterializeSubscriber","Examples","FormErrorExamples","formGroupName","ngModelGroup","TemplateDrivenErrors","missingNameException","NgModelGroup","validators","asyncValidators","_parent","modelGroupParentException","Directive","modelGroupProvider","ControlContainer","SkipSelf","Self","NG_VALIDATORS","NgModel","valueAccessors","_control","FormControl","_registered","update","_checkForErrors","_setUpControl","_updateDisabled","controlPath","composeValidators","_rawValidators","standalone","updateValueAndValidity","emitEvent","_checkName","_checkParentType","AbstractFormGroupDirective","formGroupNameException","disabledValue","resolvedPromise$1","then","disable","enable","NgControl","NG_ASYNC_VALIDATORS","NG_VALUE_ACCESSOR","model","ReactiveErrors","formControlName","missingFormException","formArrayName","FormControlDirective","disabledAttrWarning","_isControlChanged","setUpControl","composeAsyncValidators","_rawAsyncValidators","formControlBinding$1","FormGroupDirective","_validators","_asyncValidators","_checkFormPresent","addControl","dir","ctrl","path","getControl","removeControl","directives","removeFormGroup","getFormGroup","removeFormArray","onReset","resetForm","_updateDomValue","newCtrl","cleanUpControl","_updateTreeValidity","_updateRegistrations","_oldForm","_updateValidators","asyncValidator","Validators","composeAsync","FormGroupName","_hasInvalidParent","groupParentException","formGroupNameProvider","FormArrayName","addFormArray","getFormArray","arrayParentException","formArrayNameProvider","FormControlName","_added","ngModelGroupException","formDirective","controlNameBinding","REQUIRED_VALIDATOR","provide","useExisting","RequiredValidator","multi","_required","registerOnValidatorChange","fn","_onChange","CheckboxRequiredValidator","requiredTrue","EmailValidator","MinLengthValidator","_createValidator","_validator","minLength","parseInt","MaxLengthValidator","maxLength","PatternValidator","FormBuilder","controlsConfig","extra","_reduceControls","_createControl","controlConfig","FormGroup","FormArray","validator","NgNoValidate","SHARED_FORM_DIRECTIVES","NgSelectOption","NgSelectMultipleOption","NumberValueAccessor","RangeValueAccessor","CheckboxControlValueAccessor","SelectControlValueAccessor","SelectMultipleControlValueAccessor","RadioControlValueAccessor","NgControlStatus","NgControlStatusGroup","TEMPLATE_DRIVEN_DIRECTIVES","InternalFormsSharedModule","ReactiveFormsModule","AuditSubscriber","Action","pending","recycleAsyncId","setInterval","clearInterval","errorValue","actions","Action_1","Scheduler","SchedulerAction","scheduled","Scheduler_1","isNumeric","isDate","TimerObservable","isNumeric_1","isScheduler_1","isScheduler","async_1","async","isDate_1","initialDelay","BufferSubscriber","BufferCountSubscriber","BufferSkipCountSubscriber","startBufferEvery","buffers","Context","BufferTimeOperator","bufferTimeSpan","bufferCreationInterval","maxBufferSize","BufferTimeSubscriber","openContext","timespanOnly","closeAction","dispatchBufferTimeSpanOnly","dispatchBufferClose","dispatchBufferCreation","filledBufferContext","onBufferFull","closeContext","(input)","RadioControlRegistry","accessor","_accessors","select","_isSameGroup","controlPair","_registry","ngOnDestroy","registerOnChange","_fn","fireUncheck","registerOnTouched","setProperty","_throwNameError","Injector","host","(change)","_optionMap","_getOptionId","_i","from","keys","_getOptionValue","valueString","_extractId","_element","_select","optionSelectedStateSetter","ids_1","map","v","opt","o","_setSelected","_","selected","selectedOptions","val","_extractId$1","_setElementValue","_buildValueString$1","BUILTIN_ACCESSORS","addFormGroup","AbstractControlStatus","_cd","ngControlStatusHost","[class.ng-untouched]","[class.ng-touched]","[class.ng-pristine]","cd","AbstractControl","_pristine","_touched","clearValidators","markAsTouched","opts","markAsUntouched","markAsDirty","markAsPristine","markAsPending","_status","_errors","_forEachChild","onlySelf","_updateValue","_valueChanges","_updateAncestors","_setInitialStatus","enabled","_cancelExistingSubscription","_runValidator","_calculateStatus","_runAsyncValidator","_statusChanges","_allControlsDisabled","errorCode","_updateControlsErrors","_anyControlsHaveStatus","_updatePristine","_updateTouched","formState","coerceToValidator","coerceToAsyncValidator","setValue","_anyControls","condition","_applyFormState","_isBoxedValue","setControl","_registerOnCollectionChange","_checkAllValuesPresent","patchValue","getRawValue","_throwIfControlMissing","_setUpControls","res","_reduceValue","_reduceChildren","controlName","insert","removeAt","at","setParent","resolvedPromise","container","_findContainer","updateModel","pop","formDirectiveProvider","ngModelWithFormGroup","modelParentException","BrowserDomAdapter","templateAwareRoot","el","isTemplateElement","getBoundingClientRect","elementMatches","n","HTMLElement","matches","isTextNode","node","nodeType","Node","TEXT_NODE","isCommentNode","COMMENT_NODE","isElementNode","ELEMENT_NODE","isShadowRoot","DocumentFragment","importIntoDoc","document","importNode","adoptNode","getHref","keyIdentifier","String","fromCharCode","substring","location","_chromeNumKeyPadMap","getGlobalEventTarget","doc","target","getLocation","relativePath","getComputedStyle","performanceNow","supportsCookies","setCookie","GenericBrowserDomAdapter","baseElement","BrowserPlatformLocation","_history","getDOM","getHistory","getBaseHrefFromDOM","getBaseHref","_doc","addEventListener","_location","hash","pushState","supportsState","replaceState","PlatformLocation","Meta","addTags","tags","forceCreation","reduce","tag","getTags","attrSelector","updateTag","_parseSelector","meta","getTag","removeTag","removeTagElement","elem","_containsAttributes","_dom","every","getAttribute","SERVER_TRANSITION_PROVIDERS","APP_INITIALIZER","deps","TRANSITION_ID","DOCUMENT$1","BrowserGetTestability","setTestabilityGetter","addToWindow","registry","ɵglobal","findInAncestors","testability","findTestabilityInTree","global","getAllTestabilities","getAllRootElements","whenAllStable","testabilities","didWork","decrement","didWork_","whenStable","t","getTestability","Title","CORE_TOKENS","NgProbeToken$1","token","ELEMENT_PROBE_PROVIDERS","useFactory","_createNgProbe","EventManager","plugins","_zone","addGlobalEventListener","eventName","handler","_findPluginFor","plugin","_eventNameToPlugin","_plugins","plugin_1","supports","NgZone","EventManagerPlugin","SharedStylesHost","addStyles","styles","additions","style","_stylesSet","DomSharedStylesHost","_addStylesToHost","removeHost","hostNode","_hostNodes","NAMESPACE_URIS","svg","xhtml","xlink","xml","xmlns","CONTENT_ATTR","DomRendererFactory2","eventManager","sharedStylesHost","createRenderer","defaultRenderer","Emulated","rendererByCompId","EmulatedEncapsulationDomRenderer2","applyToHost","Native","ShadowDomRenderer","flattenStyles","DefaultDomRenderer2","data","namespace","createComment","selectRootElement","selectorOrNode","querySelector","parentNode","setAttribute","namespaceUri","setAttributeNS","removeAttribute","removeAttributeNS","setStyle","flags","RendererStyleFlags2","DashCase","Important","removeProperty","listen","checkNoSyntheticProp","decoratePreventDefault","hostEl","shadowRoot","createShadowRoot","addHost","DomEventsPlugin","removeEventListener","EVENT_NAMES","pan","panstart","panmove","panend","panleft","panright","panup","pandown","pinch","pinchstart","pinchend","pinchcancel","pinchout","press","pressup","rotatestart","rotatemove","rotateend","rotatecancel","swipeleft","swiperight","HAMMER_GESTURE_CONFIG","InjectionToken","HammerGestureConfig","buildHammer","mc","Hammer","overrides","HammerGesturesPlugin","toLowerCase","isCustomEvent","zone","manager","getZone","runOutsideAngular","_config","eventObj","runGuarded","MODIFIER_KEYS","MODIFIER_KEY_GETTERS","shiftKey","KeyEventsPlugin","parsedEvent","parseEventName","parts","split","domEventName","_normalizeKey","fullKey","modifierName","getEventFullKey","getEventKey","modifierGetter","eventCallback","keyName","DATA_URL_PATTERN","DOM","VOID_ELEMENTS","tagSet","OPTIONAL_END_TAG_BLOCK_ELEMENTS","OPTIONAL_END_TAG_INLINE_ELEMENTS","BLOCK_ELEMENTS","merge","INLINE_ELEMENTS","VALID_ELEMENTS","OPTIONAL_END_TAG_ELEMENTS","URI_ATTRS","SRCSET_ATTRS","VALID_ATTRS","HTML_ATTRS","SanitizingHtmlSerializer","sanitizeChildren","startElement","chars","nodeValue","sanitizedSomething","firstChild","endElement","checkClobberedElement","nextSibling","tagName","nodeName","buf","attributeMap","attrName","lower","sanitizeUrl","sanitizeSrcset","DomSanitizerImpl","sanitize","ctx","SecurityContext","NONE","HTML","SafeHtmlImpl","changingThisBreaksApplicationSecurity","checkNotSafeValue","sanitizeHtml","STYLE","SafeStyleImpl","sanitizeStyle","SCRIPT","SafeScriptImpl","URL","SafeResourceUrlImpl","SafeUrlImpl","RESOURCE_URL","expectedType","bypassSecurityTrustHtml","bypassSecurityTrustStyle","bypassSecurityTrustScript","bypassSecurityTrustResourceUrl","SafeValueImpl","getTypeName","INTERNAL_BROWSER_PLATFORM_PROVIDERS","useClass","BrowserModule","createPlatformFactory","platformCore","withServerTransition","params","ngModule","APP_ID","useValue","appId","BROWSER_SANITIZATION_PROVIDERS","ErrorHandler","errorHandler","EVENT_MANAGER_PLUGINS","RendererFactory2","Testability","AbstractControlDirective","parseFloat","isEmptyInputValue","nullValidator","regex","regexStr","compose","presentValidators","_compositionMode","_compositionEnd","_composing","(blur)","(compositionstart)","NgClass","ngDoCheck","_iterableDiffer","iterableChanges","_applyIterableChanges","_keyValueDiffer","keyValueChanges","_applyKeyValueChanges","forEachAddedItem","record","_toggleClass","forEachChangedItem","forEachRemovedItem","_applyClasses","rawClassVal","isCleanup","klass","setElementClass","_ngEl","IterableDiffers","KeyValueDiffers","Renderer","NgComponentOutlet","_viewContainerRef","_componentRef","ngComponentOutlet","elInjector","ngComponentOutletInjector","parentInjector","_moduleRef","ngComponentOutletNgModuleFactory","parentModule","NgModuleRef","injector","componentFactoryResolver","ViewContainerRef","NgForOfContext","$implicit","ngForOf","NgForOf","_viewContainer","_template","_differs","_trackByFn","isDevMode","console","warn","JSON","stringify","_differ","ngForTrackBy","_applyChanges","insertTuples","forEachOperation","adjustedPreviousIndex","previousIndex","view","createEmbeddedView","tuple","RecordViewTuple","move","_perViewChange","ilen","viewRef","TemplateRef","NgIf","templateRef","_context","NgIfContext","_thenTemplateRef","_updateView","_thenViewRef","_elseViewRef","_elseTemplateRef","ngIfElse","SwitchView","_created","_templateRef","enforceState","created","NgSwitch","_addDefault","_matchCase","matched","_ngSwitch","_lastCasesMatched","_lastCaseCheckIndex","_caseCount","_updateDefaultCases","useDefault","_defaultViews","_defaultUsed","_view","viewContainer","NgSwitchCase","NgSwitchDefault","ngSwitch","NgPlural","addCase","switchView","_caseViews","_activateView","_activeView","NgLocalization","isANumber","ngPlural","NgPluralCase","NgStyle","_ngStyle","nameAndUnit","unit","setElementStyle","NgTemplateOutlet","ngTemplateOutletContext","_viewRef","ngTemplateOutlet","COMMON_DIRECTIVES","ObservableStrategy","dispose","PromiseStrategy","AsyncPipe","_ref","_latestValue","_strategy","transform","obj","_obj","_dispose","_latestReturnedValue","_selectStrategy","ɵisPromise","_promiseStrategy","invalidPipeArgumentError","_updateLatestValue","markForCheck","Pipe","pure","LowerCasePipe","TitleCasePipe","word","titleCaseWord","join","UpperCasePipe","toUpperCase","NumberFormatStyle","Decimal","Percent","NumberFormatter","format","num","locale","minimumIntegerDigits","minimumFractionDigits","maximumFractionDigits","currency","currencyAsSymbol","Currency","currencyDisplay","DATE_FORMATS_SPLIT","PATTERN_ALIASES","yMMMdjms","datePartGetterFactory","combine","digitCondition","nameCondition","yMdjm","yMMMMEEEEd","yMMMMd","yMMMd","jms","jm","DATE_FORMATS","yyyy","yy","MMMM","MMM","MM","M","LLLL","L","dd","d","HH","digitModifier","hourExtractor","hour12Modify","H","hh","h","jj","ss","s","sss","EEEE","EEE","EE","z","timeZoneGetter","ww","w","DateFormatter","DecimalPipe","formatNumber","_locale","PercentPipe","CurrencyPipe","currencyCode","symbolDisplay","DatePipe","isBlank","trim","m","match","ISO8601_DATE_REGEX","isoStringToDate","_ALIASES","medium","short","fullDate","longDate","mediumDate","shortDate","mediumTime","I18nPluralPipe","pluralMap","getPluralCategory","_localization","replace","_INTERPOLATION_REGEXP","I18nSelectPipe","mapping","JsonPipe","SlicePipe","COMMON_PIPES","nodeContains","_DOM","DomAdapter","logGroup","_attrToPropMap","resolveAndSetHref","baseUrl","supportsDOMEvents","resetBaseElement","getData","supportsWebAnimation","getAnimationPrefix","getTransitionEnd","supportsAnimation","_animationPrefix","_transitionEnd","element_1","getStyle","domPrefixes","transEndEventNames_1","WebkitTransition","MozTransition","OTransition","class","_keyMap","\b","\t","","\u001b","Del","Esc","Left","Right","Up","Win","A","B","C","D","E","F","G","I","J","K","N","`","","urlParsingNode","invoke","methodName","logError","onAndCancel","evt","listener","dispatchEvent","getInnerHTML","innerHTML","getOuterHTML","outerHTML","hasProperty","childNodes","childNodesAsList","replaceChild","newChild","oldChild","setInnerHTML","setText","textContent","setChecked","text","getShadowRoot","getHost","elAttrs","attributes","_DuplicateItemRecordList","_head","_tail","_nextDup","trackById","atOrAfterIndex","looseIdentical","_prevDup","_DuplicateMap","put","duplicates","DefaultKeyValueDifferFactory","DefaultKeyValueDiffer","_records","_mapHead","_appendAfter","_previousMapHead","_changesHead","_changesTail","_removalsTail","forEachItem","forEachPreviousItem","check","_reset","insertBefore","_forEach","_maybeAddToChanges","_getOrCreateRecordForKey","_insertBeforeOrAppend","_prev","_removalsHead","_nextRemoved","before","record_1","KeyValueChangeRecord_","isDirty","_nextPrevious","_nextChanged","_additionsHead","_nextAdded","_addToAdditions","_additionsTail","_addToChanges","factories","copied","iterable","factory","f","kv","keyValDiff","_CORE_PLATFORM_PROVIDERS","PLATFORM_ID","PlatformRef_","ApplicationModule","appRef","ApplicationRef_","ApplicationRef","ApplicationInitStatus","Compiler","APP_ID_RANDOM_PROVIDER","_iterableDiffersFactory","_keyValueDiffersFactory","LOCALE_ID","_localeFactory","Services","setCurrentNode","createRootView","createComponentView","createNgModuleRef","overrideProvider","clearProviderOverrides","checkAndUpdateView","checkNoChangesView","destroyView","resolveDep","createDebugContext","updateDirectives","_tokenKeyCache","NS_PREFIX_RE","ComponentFactory_","componentType","viewDefFactory","_inputs","_outputs","ngContentSelectors","inputsArr","inputs","propName","outputsArr","projectableNodes","rootSelectorOrNode","viewDef","resolveDefinition","componentNodeIndex","nodes","nodeIndex","EMPTY_CONTEXT","asProviderData","asElementData","renderElement","VERSION","full","ComponentRef_","_component","_elDef","def","_data","_embeddedViews","ViewContainerRef_","Injector_","elDef","ref","ViewRef_","createComponent","ngModuleRef","contextInjector","ComponentFactoryBoundToModule","destroyed","viewRef_","detach","detectChanges","fs","rendererFactory","begin","reattach","onDestroy","disposables","detachView","attachToAppRef","attachToViewContainerRef","vcRef","TemplateRef_","_parentView","_def","notFoundValue","THROW_IF_NOT_FOUND","RendererAdapter","namespaceAndName","splitNamespace","ns","delegate","createViewRoot","hostElement","createTemplateAnchor","comment","createText","attachViewAfter","viewRootNodes","setElementAttribute","attributeValue","className","isAdd","styleName","styleValue","renderNode$$1","NgModuleRef_","_moduleType","_bootstrapComponents","resolveNgModuleDep","tokenKey","_destroyed","constructor","RendererV1TokenKey","Renderer2TokenKey","ViewAction","CreateViewNodes","CheckNoChanges","CheckNoChangesProjectedViews","CheckAndUpdate","CheckAndUpdateProjectedViews","Destroy","initialized","providerOverrides","DebugAction","checkNoChanges","handleEvent","CAMEL_CASE_REGEXP","DebugContext_","nodeDef","elView","viewParentEl","componentView","elOrCompView","tokens","childCount","childDef","references","collectReferences","elData","logViewDef","logNodeIndex","renderNodeIndex","getRenderNodeIndex","currRenderNodeIndex","nodeLogger","NOOP","DebugRendererFactory2","DebugRenderer2","renderData","whenRenderingDone","destroyNode","debugCtx","getCurrentDebugContext","debugEl","DebugElement","getDebugNode","debugChildEl","refChild","debugRefEl","removeChild","removeClass","removeStyle","NgModuleFactory_","moduleType","_ngModuleDefFactory","ForkJoinObservable","sources","ForkJoinSubscriber","haveValues","_hasValue","ForkJoinObservable_1","promise","dispatchError","MapOperator","MapSubscriber","onHashChange","pathname","forward","LocationStrategy","queryParams","onPopState","Location","platformStrategy","_subject","_platformStrategy","browserBaseHref","_baseHref","stripTrailingSlash","_stripIndexHtml","prepareExternalUrl","joinWithSlash","slashes","endsWith","startsWith","pathEndIdx","droppedSlashIdx","HashLocationStrategy","_platformLocation","includeHash","normalizeQueryParams","PathLocationStrategy","externalUrl","NgLocaleLocalization","getPluralCase","Plural","Zero","One","Two","Few","Many","Other","_iterableDiffers","_keyValueDiffers","_cleanupClasses","_rawClass","ɵisListLikeIterable","ResolvedReflectiveFactory","ResolvedReflectiveFactory$$1","dependencies","dep","_getByReflectiveDependency","addKey","provider","ReflectiveInjector_","_getByKey","visibility","INJECTOR_KEY","_getByKeySelf","_getObjByKeyId","keyId","keyIds","objs","UNDEFINED","_new","_providers","_throwOrNull","_getByKeyDefault","inj","inj_","appInits","_done","runInitializers","asyncInitPromises","initResult","Promise","all","catch","PLATFORM_INITIALIZER","APP_BOOTSTRAP_LISTENER","Console","getNgContentSelectors","_throwError","ComponentRef","ComponentFactory","ERROR_COMPONENT","_NullComponentFactoryResolver","trace","events","NgModuleFactory","wtf","generatorOrNext","schedulerFn","errorFn","completeFn","__isAsync","hasPendingMicrotasks","onStable","onError","Zone","assertZonePatched","self","_nesting","_outer","_inner","fork","forkInnerZoneWithAngularBehavior","isInAngularZone","_didWork","_watchAngularEvents","onUnstable","_isZoneStable","assertNotInAngularZone","scheduleMicroTask","_runCallbacksIfReady","_pendingCount","decreasePendingRequestCount","isStable","_callbacks","findProviders","using","exactMatch","TestabilityRegistry","_testabilityGetter","_NoopGetTestability","NgProbeToken","PlatformRef","_bootstrapModuleFactoryWithZone","moduleFactory","ngZone","enableLongStackTrace","run","ngZoneInjector","ReflectiveInjector","resolveAndCreate","moduleRef","exceptionHandler","_modules","handleError","_callAndReportToErrorHandler","initStatus","donePromise","_moduleDoBootstrap","_bootstrapModuleWithZone","compilerOptions","bootstrap","ngDoBootstrap","_console","_exceptionHandler","_initStatus","_bootstrapListeners","_rootComponents","_rootComponentTypes","_views","_runningTick","_enforceNoNewChanges","_stable","onMicrotaskEmpty","tick","isCurrentlyStable","hasPendingMacrotasks","stableSub","unstableSub","assertInAngularZone","componentOrFactory","compRef","NULL","_unloadComponent","registerApplication","_loadComponent","scope","_tickScope","_isStable","QueryList","_emitter","_results","some","_dirty","notifyOnChanges","setDirty","SystemJsNgModuleLoaderConfig","SystemJsNgModuleLoader","loadAndCompile","module","exportName","loadFactory","factoryClassSuffix","System","import","factoryPathPrefix","factoryPathSuffix","checkNotEmpty","ViewRef","EventListener","EmbeddedViewRef","DebugNode","nativeNode","_debugContext","addChild","listeners","providerTokens","properties","child","childIndex","insertChildrenAfter","newChildren","siblingIndex","refIndex","triggerEventHandler","WrappedValue","wrap","SimpleChange","DefaultIterableDifferFactory","DefaultIterableDiffer","trackByFn","_length","_collection","_linkedRecords","_unlinkedRecords","_previousItHead","_itHead","_itTail","_movesHead","_movesTail","trackByIdentity","addRemoveOffset","moveOffsets","nextIt","nextRemove","getPreviousIndex","adjPreviousIndex","localMovePreviousIndex","localCurrentIndex","forEachMovedItem","forEachIdentityChange","collection","isListLikeIterable","itemTrackBy","mayBeDirty","index_1","_verifyReinsertion","_addIdentityChange","iterateListLike","nextRecord","_mismatch","previousRecord","_moveAfter","_reinsertAfter","reinsertRecord","_truncate","_addToRemovals","_unlink","_nextMoved","prevRecord","_prevRemoved","_addAfter","_insertAfter","_addToMoves","toIndex","_identityChangesTail","_identityChangesHead","list","previous","moves","removals","identityChanges","IterableChangeRecord_","_nextIdentityChange","available","maxDate","calendar","extendStatics","setPrototypeOf","__proto__","p","__window","__self","WorkerGlobalScope","__global","_root","tryCatchTarget","isFunction","isObject","UnsubscriptionError","_parents","_subscriptions","hasErrors","isFunction_1","trial","UnsubscriptionError_1","flattenUnsubscriptionErrors","isObject_1","teardown","_addParent","tmp","subscriptionIndex","Symbol","for","rxSubscriber","destinationOrNext","Observer_1","SafeSubscriber","rxSubscriber_1","_parentSubscriber","observerOrNext","__tryOrSetError","__tryOrUnsub","wrappedComplete","toSubscriber","getSymbolObservable","$$observable","pipe","pipeFromArray","operator","sink","toSubscriber_1","_trySubscribe","PromiseCtor","Rx","operations","pipe_1","toPromise","symbolIteratorPonyfill","getOwnPropertyNames","InnerSubscriber","mergeMap","MergeMapOperator","MergeMapSubscriber","_notifyResultSelector","identity","mergeAll","mergeStatic","merge_2","merge_1","subject","subscriberIndex","SubjectSubscriber","AnonymousSubject","copy","asObservable","refCount","RefCountOperator","connectable","_refCount","refCounter","RefCountSubscriber","connection","connect","sharedConnection","_connection","ConnectableObservable","subjectFactory","_isComplete","getSubject","ConnectableSubscriber","refCount_1","connectableProto","writable","multicast","MulticastOperator","share","OpaqueToken","_desc","desc","_global","_symbolIterator","Reflect","ViewChild","makePropDecorator","assign","first","isViewQuery","descendants","Query","ChangeDetectionStrategy","OnPush","Default","makeDecorator","Version","_NullInjector","_THROW_IF_NOT_FOUND","ERROR_LOGGER","deprecatedParameter","originalError","_findOriginalError","_findContext","errorLogger","getErrorLogger","getOriginalError","ReflectiveKey","_globalKeyRegistry","resolveForwardRef","numberOfKeys","KeyRegistry","_allKeys","newKey","Type","Function","DELEGATE_CTOR","ReflectionCapabilities","_zipTypesAndAnnotations","paramTypes","paramAnnotations","exec","parameters","parentCtor","tsickleCtorParams","ctorParam","convertTsickleDecoratorIntoMetadata","_reflect","getOwnMetadata","isType","getParentCtor","_ownParameters","_ownAnnotations","typeOrFunc","annotations","_ownPropMetadata","propMetadata","propDecorators_1","propMetadata_1","prop","parentPropMetadata_1","ownPropMetadata","getter","Reflector","updateCapabilities","caps","reflectionCapabilities","setter","method","importUri","resolveEnum","identifier","ReflectiveDependency","fromKey","multiProvider","_constructionCounter","getProviderAtIndex","_instantiateProvider","_getMaxNumberOfObjects","resolvedFactories","_instantiate","getParentRenderElement","renderHost","checkAndUpdateTextInline","v0","v1","v2","v3","v4","v5","v6","v7","v8","v9","bindings","bindLen","checkAndUpdateBinding","prefix","_addInterpolationPart","binding","anchorDef$$1","parentView","compRenderer","rendererType","componentRendererType","createView","parentNodeDef","outputCount","viewContainerParent","createViewNodes","isComponentView","hostDef","nodeData","compViewDef","listenToElementOutputs","createTemplateData","createViewContainerData","createProviderInstance","createPipeInstance","createDirectiveInstance","initView","createPureExpression","createQuery","appendNgContent","execEmbeddedViewsAction","updateRenderer","markProjectedViewsForCheck","execQueriesAction","callLifecycleHooksChildrenFirst","execComponentViewsAction","checkAndUpdateNode","argStyle","checkAndUpdateNodeInline","nodeFlags","projectedViews","_projectedViews","i_1","projectedView","childFlags","checkAndUpdateElementInline","checkAndUpdateDirectiveInline","checkAndUpdateNodeDynamic","checkAndUpdateElementDynamic","checkAndUpdateTextDynamic","checkAndUpdateDirectiveDynamic","checkNoChangesNode","checkNoChangesNodeInline","checkBindingNoChanges","checkNoChangesQuery","detachProjectedView","destroyViewNodes","asTextData","renderText","asQueryList","embeddedViews","callViewAction","viewState","execProjectedViewsAction","queryFlags","staticDynamicQueryFlag","checkType","nodeCount","checkAndUpdateQuery","initServicesIfNeeded","services","createDebugServices","createProdServices","dirtyParentQueries","createProdRootView","prodCheckAndUpdateNode","prodCheckNoChangesNode","debugSetCurrentNode","debugCreateRootView","debugCreateEmbeddedView","debugCreateComponentView","debugCreateNgModuleRef","debugOverrideProvider","debugClearProviderOverrides","debugCheckAndUpdateView","debugCheckNoChangesView","debugDestroyView","createRootData","Sanitizer","override","applyProviderOverridesToView","elIndicesWithOverwrittenProviders","lastElementDef","elementIndicesWithOverwrittenProviders","viewDef$$1","elIndex","splitDepsDsl","hasOverrides","hasDeprecatedOverrides","checkIndex","callWithDebugContext","debugUpdateDirectives","debugCheckDirectivesFn","debugCheckAndUpdateNode","debugCheckNoChangesNode","nextDirectiveWithBinding","debugUpdateRenderer","debugCheckRenderNodeFn","nextRenderNodeWithBinding","givenValues","bindingValues","normalizeDebugBindingName","normalizeDebugBindingValue","attr","findHostElement","oldAction","_currentAction","oldView","_currentView","oldNodeIndex","_currentNodeIndex","isViewDebugError","map_1","cases","ngLocalization","nLike","nDecimal","parseCookieValue","cookieStr","encodeURIComponent","cookie","eqIndex","cookieName","cookieValue","hour","hour12","timeZoneName","timezone","dateFormatter","cacheKey","DATE_FORMATTER_CACHE","_format","minInt","minFraction","maxFraction","_NUMBER_FORMAT_REGEXP","parseIntAutoRadix","tzHour","tzMin","dateSetter","setUTCFullYear","setFullYear","timeSetter","setUTCHours","setHours","toInt","getBaseElementHref","appInitializerFactory","transitionId","dom","querySelectorAll","exportNgVar","ng","extraTokens","coreTokens","compId","COMPONENT_REGEX","eventHandler","nameKind","SAFE_URL_PATTERN","srcset","getInertElement","inertElement","templateEl","createHtmlDocument","html","sets","sets_1","nextNode","encodeEntities","SURROGATE_PAIR_REGEXP","charCodeAt","stripCustomNsAttrs","containerEl","unsafeHtml","unsafeHtmlInput","mXSSAttempts","parsedHtml","defaultDoc","documentMode","safeHtml","getTemplateContent","hasBalancedQuotes","outsideSingle","outsideDouble","urlMatch","URL_RE","SAFE_STYLE_VALUE","log","r","obs","fromPromise","_mergeErrors","arrayOfErrors","normalizeValidator","normalizeAsyncValidator","_buildValueString","valueAccessor","emitModelToViewChange","emitModelEvent","registerOnDisabledChange","_noControlError","setUpFormContainer","messageEnd","isPropertyUpdated","viewModel","change","isFirstChange","ɵlooseIdentical","selectValueAccessor","defaultAccessor","builtinAccessor","customAccessor","isBuiltInAccessor","_find","delimiter","prevContext","numberIsFinite","sign","isFinite","valueAsNumber","MinimalSet","timeSpanState","parseField","_constraints","low","high","step","_step","_lower","upper","_upper","pointer","parse","expr","atoms","atom","today","_year","getActualMaximumDate","startDt","endDt","__","tryCatcher","errs","fns","input","outerSubscriber","InnerSubscriber_1","msg","mergeMap_1","identity_1","last","mergeAll_1","subjectOrSubjectFactory","ConnectableObservable_1","connectableObservableDescriptor","shareSubjectFactory","multicast_1","share_1","getSymbolIterator","overriddenName","extractAnnotation","annotation","applyParams","fnOrArray","annoLength","paramsAnnotations","ii","j","Class","clsDef","proto","extends","defineMetadata","constructorName","DecoratorFactory","objOrType","metaCtor","annotationInstance","chainAnnotation","TypeDecorator","chainFn","makeMetadataCtor","props","parentClass","ParamDecoratorFactory","ParamDecorator","unusedKey","PropDecoratorFactory","decoratorInstance","unshift","__forward_ref__","wrappedError","findFirstClosedCycle","constructResolvingPath","reverse","injectionError","constructResolvingMessage","errMsg","noProviderError","instantiationError","originalException","originalStack","noAnnotationError","signature","parameter","decoratorInvocations","decoratorInvocation","decoratorType","ctor","parentProto","getPrototypeOf","resolveReflectiveFactory","factoryFn","resolvedDeps","reflector","_dependenciesFor","aliasInstance","constructDependencies","resolveReflectiveProviders","mergeResolvedReflectiveProviders","normalizedProvidersMap","existing","mixingMultiProvidersWithRegularProvidersError","resolvedProvider","ResolvedReflectiveProvider_","_normalizeProviders","_extractToken","metadata","optional","_createDependency","paramMetadata","_mapProviders","isObservable","noComponentFactoryError","checkStable","isAngularZone","onInvokeTask","task","applyThis","applyArgs","onEnter","invokeTask","onLeave","onInvoke","onHasTask","hasTaskState","hasTask","microTask","macroTask","onHandleError","createPlatform","_platform","ALLOW_MULTIPLE_PLATFORMS","parentPlatformFactory","marker","extraProviders","platform","getPlatform","assertPlatform","requiredToken","flatten","flatItem","modulePath","_queryElementChildren","_queryNodeChildren","_nativeNodeToDebugNode","devModeEqual","isListLikeIterableA","isListLikeIterableB","areIterablesEqual","isAObject","isBObject","isJsObject","comparator","iterator1","iterator2","item1","item2","moveOffset","_reflector","defaultIterableDiffers","expressionChangedAfterItHasBeenCheckedError","currValue","isFirstCheck","viewWrappedDebugError","checkBinding","bindingIdx","oldValues","markParentViewsForCheck","currView","markParentViewsForCheckProjectedViews","endView","declaredViewContainer","renderNode","renderParent","DEFINITION_CACHE","visitRootRenderNodes","visitSiblingRenderNodes","startIndex","endIndex","visitRenderNode","visitProjectedRenderNodes","ngContentIndex","compView","hostElDef","projectedNodes","rn","bindingFlags","execRenderNodeAction","k","attrs","outputs","output","handleEventClosure","renderEventHandlerClosure","elementEventFullName","listenTarget","listenerView","checkAndUpdateElementValue","securityContext","renderValue","suffix","initNgModule","_createProviderInstance","provDef","depDef","tokenKey$$1","InjectorRefTokenKey$1","NgModuleRefTokenKey","providerDef","providerInstance","_createProviderInstance$1","injectable","_createClass","_callFactory","depValues","callNgModuleLifecycle","lifecycles","UNDEFINED_VALUE","attachEmbeddedView","elementData","viewIndex","addToArray","attachProjectedView","vcElementData","dvcElementData","markNodeAsProjectedTemplate","detachEmbeddedView","removeFromArray","moveEmbeddedView","oldViewIndex","newViewIndex","prevRenderNode","allowPrivateServices","createClass","eventHandlerClosure","providerData","directive","updateProp","callFactory","startView","ChangeDetectorRefTokenKey","findCompView","createRendererV1","ElementRefTokenKey","ViewContainerRefTokenKey","TemplateRefTokenKey","createChangeDetectorRef","InjectorRefTokenKey","createInjector","providerDef_1","allProviders","publicProviders","bindingIndex","wrapped","callProviderLifecycles","directChildFlags","callElementProvidersLifecycles","ngAfterContentInit","ngAfterContentChecked","ngAfterViewChecked","queryIds","nodeMatchedQueries","isEmbeddedView","tplDef","filterId","queryList","directiveInstance","newValues","elementDef_1","calcQueryValues","notify","boundValue","bindingType","queryDef","valueType","matchedQueries","getQueryValue","childMatchedQueries","embeddedView","dvc","queryValueType","checkAndUpdatePureExpressionInline","asPureExpressionData"],"mappings":"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"}