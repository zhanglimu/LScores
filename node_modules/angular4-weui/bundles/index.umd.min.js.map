{"version":3,"file":"index.umd.min.js","sources":["../../../../src/app/weui/src/navbar/weui.navbar.item.ts","../../../../src/app/weui/src/navbar/weui.navbar.ts","../../../../src/app/weui/src/progress/weui.progress.ts","../../../../src/app/weui/src/input/weui.radio.ts","../../../../src/app/weui/src/searchbar/weui.searchbar.ts","../../../../src/app/weui/src/input/weui.select.ts","../../../../src/app/weui/src/slider/weui.slider.ts","../../../../src/app/weui/src/input/weui.switch.ts","../../../../src/app/weui/src/tabbar/weui.tabbar.item.ts","../../../../src/app/weui/src/tabbar/weui.tabbar.ts","../../../../src/app/weui/src/list/weui.tips.ts","../../../../src/app/weui/src/list/weui.title.ts","../../../../src/app/weui/src/uploader/weui.uploader.ts","../../../../src/app/weui/src/actionsheet/weui.actionsheet.ts","../../../../src/app/weui/src/dialog/weui.dialog.ts","../../../../src/app/weui/src/toast/weui.toast.ts","../../../../src/app/weui/src/toptips/weui.toptip.ts","../../../../src/app/weui/src/overlay/layer.ts","../../../../src/app/weui/src/picker/weui.picker.service.ts","../../../../src/app/weui/src/validation/form.validation.ts","../../../../src/app/weui/src/weui.module.ts","../../../../node_modules/src/operators/windowTime.ts","../../../../node_modules/src/operators/windowToggle.ts","../../../../node_modules/src/operators/windowWhen.ts","../../../../node_modules/src/operators/withLatestFrom.ts","../../../../node_modules/src/operators/zip.ts","../../../../src/app/weui/src/input/weui.form.control.ts","../../../../src/app/weui/src/badge/weui.badge.ts","../../../../src/app/weui/src/button/weui.button.ts","../../../../src/app/weui/src/button/weui.submit.ts","../../../../src/app/weui/src/input/weui.checkbox.ts","../../../../src/app/weui/src/picker/weui.picker.ts","../../../../src/app/weui/src/picker/weui-picker-group.ts","../../../../src/app/weui/src/picker/cron.ts","../../../../src/app/weui/src/picker/weui.date.picker.ts","../../../../src/app/weui/src/footer/weui.footer.ts","../../../../src/app/weui/src/gallery/weui.gallery.ts","../../../../src/app/weui/src/input/weui.input.ts","../../../../src/app/weui/src/list/weui.items.ts","../../../../src/app/weui/src/list/weui.item.ts","../../../../src/app/weui/src/list/weui.link.ts","../../../../src/app/weui/src/loadmore/weui.loadmore.ts","../../../../node_modules/src/operators/scan.ts","../../../../node_modules/src/operators/takeLast.ts","../../../../node_modules/src/operators/mergeMapTo.ts","../../../../node_modules/src/operators/mergeScan.ts","../../../../node_modules/src/operators/onErrorResumeNext.ts","../../../../node_modules/src/operators/pairwise.ts","../../../../node_modules/src/BehaviorSubject.ts","../../../../node_modules/src/AsyncSubject.ts","../../../../node_modules/src/scheduler/QueueAction.ts","../../../../node_modules/src/scheduler/QueueScheduler.ts","../../../../node_modules/src/ReplaySubject.ts","../../../../node_modules/src/observable/race.ts","../../../../node_modules/src/operators/repeat.ts","../../../../node_modules/src/operators/repeatWhen.ts","../../../../node_modules/src/operators/retry.ts","../../../../node_modules/src/operators/retryWhen.ts","../../../../node_modules/src/operators/sample.ts","../../../../node_modules/src/operators/sampleTime.ts","../../../../node_modules/src/operators/sequenceEqual.ts","../../../../node_modules/src/operators/single.ts","../../../../node_modules/src/operators/skip.ts","../../../../node_modules/src/operators/skipLast.ts","../../../../node_modules/src/operators/skipUntil.ts","../../../../node_modules/src/operators/skipWhile.ts","../../../../node_modules/src/operators/switchMap.ts","../../../../node_modules/src/operators/switchMapTo.ts","../../../../node_modules/src/operators/take.ts","../../../../node_modules/src/operators/takeUntil.ts","../../../../node_modules/src/operators/takeWhile.ts","../../../../node_modules/src/operators/tap.ts","../../../../node_modules/src/operators/throttle.ts","../../../../node_modules/src/operators/throttleTime.ts","../../../../node_modules/src/operators/timeInterval.ts","../../../../node_modules/src/util/TimeoutError.ts","../../../../node_modules/src/operators/timeout.ts","../../../../node_modules/src/operators/timeoutWith.ts","../../../../node_modules/src/operators/window.ts","../../../../node_modules/src/operators/windowCount.ts","../../../../node_modules/src/operators/bufferToggle.ts","../../../../node_modules/src/operators/bufferWhen.ts","../../../../node_modules/src/operators/catchError.ts","../../../../node_modules/src/operators/combineLatest.ts","../../../../node_modules/src/observable/IteratorObservable.ts","../../../../node_modules/src/observable/ArrayLikeObservable.ts","../../../../node_modules/src/Notification.ts","../../../../node_modules/src/operators/observeOn.ts","../../../../node_modules/src/observable/FromObservable.ts","../../../../node_modules/src/operators/count.ts","../../../../node_modules/src/operators/debounce.ts","../../../../node_modules/src/operators/debounceTime.ts","../../../../node_modules/src/operators/defaultIfEmpty.ts","../../../../node_modules/src/operators/delay.ts","../../../../node_modules/src/operators/delayWhen.ts","../../../../node_modules/src/operators/dematerialize.ts","../../../../node_modules/src/util/Set.ts","../../../../node_modules/src/operators/distinct.ts","../../../../node_modules/src/operators/distinctUntilChanged.ts","../../../../node_modules/src/util/ArgumentOutOfRangeError.ts","../../../../node_modules/src/operators/elementAt.ts","../../../../node_modules/src/operators/every.ts","../../../../node_modules/src/operators/exhaust.ts","../../../../node_modules/src/operators/exhaustMap.ts","../../../../node_modules/src/operators/expand.ts","../../../../node_modules/src/operators/filter.ts","../../../../node_modules/src/operators/finalize.ts","../../../../node_modules/src/operators/find.ts","../../../../node_modules/src/util/EmptyError.ts","../../../../node_modules/src/operators/first.ts","../../../../node_modules/src/util/MapPolyfill.ts","../../../../node_modules/src/util/Map.ts","../../../../node_modules/src/util/FastMap.ts","../../../../node_modules/src/operators/groupBy.ts","../../../../node_modules/src/operators/ignoreElements.ts","../../../../node_modules/src/operators/isEmpty.ts","../../../../node_modules/src/operators/last.ts","../../../../node_modules/src/operators/mapTo.ts","../../../../node_modules/src/operators/materialize.ts","../../../../packages/forms/src/directives/template_driven_errors.ts","../../../../packages/forms/src/directives/ng_model_group.ts","../../../../packages/forms/src/directives/ng_model.ts","../../../../packages/forms/src/directives/reactive_errors.ts","../../../../packages/forms/src/directives/reactive_directives/form_control_directive.ts","../../../../packages/forms/src/directives/reactive_directives/form_group_directive.ts","../../../../packages/forms/src/directives/reactive_directives/form_group_name.ts","../../../../packages/forms/src/directives/reactive_directives/form_control_name.ts","../../../../packages/forms/src/directives/validators.ts","../../../../packages/forms/src/form_builder.ts","../../../../packages/forms/src/directives/ng_no_validate_directive.ts","../../../../packages/forms/src/directives.ts","../../../../packages/forms/src/form_providers.ts","../../../../node_modules/src/operators/audit.ts","../../../../node_modules/src/scheduler/Action.ts","../../../../node_modules/src/scheduler/AsyncAction.ts","../../../../node_modules/src/Scheduler.ts","../../../../node_modules/src/scheduler/AsyncScheduler.ts","../../../../node_modules/src/scheduler/async.ts","../../../../node_modules/src/observable/TimerObservable.ts","../../../../node_modules/src/operators/buffer.ts","../../../../node_modules/src/operators/bufferCount.ts","../../../../node_modules/src/operators/bufferTime.ts","../../../../packages/forms/src/directives/number_value_accessor.ts","../../../../packages/forms/src/directives/ng_control.ts","../../../../packages/forms/src/directives/radio_control_value_accessor.ts","../../../../packages/forms/src/directives/range_value_accessor.ts","../../../../packages/forms/src/directives/select_control_value_accessor.ts","../../../../packages/forms/src/directives/select_multiple_control_value_accessor.ts","../../../../packages/forms/src/directives/shared.ts","../../../../packages/forms/src/directives/abstract_form_group_directive.ts","../../../../packages/forms/src/directives/ng_control_status.ts","../../../../packages/forms/src/model.ts","../../../../packages/forms/src/directives/ng_form.ts","../../../../packages/forms/src/directives/error_examples.ts"],"sourcesContent":["/**\n * @license\n * Copyright 厦门乾元盛世科技有限公司 All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file.\n */\n\n\nimport { Directive, Host, Input, HostBinding, HostListener, Optional } from '@angular/core';\nimport { Inject, forwardRef } from '@angular/core';\n\nimport { WeUINavBar } from './weui.navbar';\nexport class WeUINavBarItem {\n/**\n * 任意值，当激活时传递给父级控件\n */\nvalue: any;\n/**\n * 设置基本样式\n */\nbarItemCls = true;\n/**\n * 设置激活样式\n * @return {?}\n */\nget activatedCls(): boolean {\n        return this._activated;\n    }\nprivate _activated = false;\n/**\n * 点击触发激活\n * \n * @param {?} event 点击事件\n * @return {?}\n */\nonClick(event: Event): void {\n        if (this.navbar) {\n            this.navbar.activate(this);\n        }\n    }\n/**\n * @param {?} navbar\n */\nconstructor(\nprivate navbar: WeUINavBar) {\n\n    }\n/**\n * 由父级控件传入\n * \n * @param {?} activated 激活状态\n * @return {?}\n */\nactivated(activated: boolean): void {\n        this._activated = activated;\n    }\n/**\n * @return {?}\n */\nisActivated(): boolean {\n        return this._activated;\n    }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n    // tslint:disable-next-line:directive-selector\n    selector: 'weui-navbar-item,[weui-navbar-item]'\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: WeUINavBar, decorators: [{ type: Optional }, { type: Host }, { type: Inject, args: [forwardRef(() => WeUINavBar), ] }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'value': [{ type: Input },],\n'barItemCls': [{ type: HostBinding, args: ['class.weui-navbar__item', ] },],\n'activatedCls': [{ type: HostBinding, args: ['class.weui-bar__item_on', ] },],\n'onClick': [{ type: HostListener, args: ['click', ['$event'], ] },],\n};\n}\n\nfunction WeUINavBarItem_tsickle_Closure_declarations() {\n/** @type {?} */\nWeUINavBarItem.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nWeUINavBarItem.ctorParameters;\n/** @type {?} */\nWeUINavBarItem.propDecorators;\n/**\n * 任意值，当激活时传递给父级控件\n * @type {?}\n */\nWeUINavBarItem.prototype.value;\n/**\n * 设置基本样式\n * @type {?}\n */\nWeUINavBarItem.prototype.barItemCls;\n/** @type {?} */\nWeUINavBarItem.prototype._activated;\n/** @type {?} */\nWeUINavBarItem.prototype.navbar;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright 厦门乾元盛世科技有限公司 All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file.\n */\n\n\nimport { Component, Input, Output, EventEmitter, HostBinding, AfterViewInit, ContentChildren, QueryList } from '@angular/core';\nimport { WeUINavBarItem } from './weui.navbar.item';\nexport class WeUINavBar implements AfterViewInit {\n/**\n * 初始激活的子对象\n */\nactiveIndex = 0;\n/**\n * 设置基本样式\n */\nbarCls = true;\n/**\n * 内部子对象\n */\nitems: QueryList<WeUINavBarItem>;\n/**\n * 激活事件\n */\nactivated = new EventEmitter<WeUINavBarItem>();\nprivate _activated: any;\nconstructor() {\n\n    }\n/**\n * @return {?}\n */\nngAfterViewInit(): void {\n        this.activateAt(this.activeIndex);\n    }\n/**\n * @param {?} index\n * @return {?}\n */\ngetAt(index: number): WeUINavBarItem {\n        return /** @type {?} */(( this.items.find((item: WeUINavBarItem, i: number) => i === index) as WeUINavBarItem));\n    }\n/**\n * @param {?} item\n * @return {?}\n */\nactivate(item: any): void {\n        this._activated = item;\n        this.items.forEach(child => {\n            child.activated(child === item);\n        });\n\n        this.activated.emit(item);\n    }\n/**\n * @param {?} index\n * @return {?}\n */\nactivateAt(index: number): void {\n        const /** @type {?} */ item = this.getAt(index);\n        if (item) {\n            this.activate(item);\n        }\n    }\n/**\n * @param {?} item\n * @return {?}\n */\nisActivated(item: WeUINavBarItem): boolean {\n        return item.isActivated();\n    }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n    selector: 'weui-navbar',\n    template: `<ng-content></ng-content>`\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'activeIndex': [{ type: Input },],\n'barCls': [{ type: HostBinding, args: ['class.weui-navbar', ] },],\n'items': [{ type: ContentChildren, args: [WeUINavBarItem, ] },],\n'activated': [{ type: Output },],\n};\n}\n\nfunction WeUINavBar_tsickle_Closure_declarations() {\n/** @type {?} */\nWeUINavBar.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nWeUINavBar.ctorParameters;\n/** @type {?} */\nWeUINavBar.propDecorators;\n/**\n * 初始激活的子对象\n * @type {?}\n */\nWeUINavBar.prototype.activeIndex;\n/**\n * 设置基本样式\n * @type {?}\n */\nWeUINavBar.prototype.barCls;\n/**\n * 内部子对象\n * @type {?}\n */\nWeUINavBar.prototype.items;\n/**\n * 激活事件\n * @type {?}\n */\nWeUINavBar.prototype.activated;\n/** @type {?} */\nWeUINavBar.prototype._activated;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright 厦门乾元盛世科技有限公司 All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file.\n */\n\n\nimport { Component, Input, Output, EventEmitter } from '@angular/core';\nexport class WeUIProgressBar {\n/**\n * 颜色，取值：default、primary、warn等。默认为default。<br>\n * 自定义的颜色名称与色值，可以定义在 工程根目录/src/theme/variables.scss 文件中的 $colors 对象。\n */\ncolor = 'default';\n/**\n * Value of the progressbar. Defaults to zero.\n */\nvalue = 0;\n/**\n * 是否可终止 (若为true，则显示关闭按钮)\n */\ncanTerminate = true;\n/**\n * 终止事件\n */\nterminate = new EventEmitter<WeUIProgressBar>();\nconstructor() {\n\n    }\n/**\n * @return {?}\n */\nonTerminate(): void {\n        this.terminate.emit(this);\n    }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n    selector: 'weui-progress-bar',\n    template: `\n        <div class=\"weui-progress weui-progress_{{color}}\">\n            <div class=\"weui-progress__bar\">\n                <div class=\"weui-progress__inner-bar\" [style.width]=\"value + '%'\"></div>\n            </div>\n            <a href=\"javascript:;\" class=\"weui-progress__opr\" *ngIf=\"canTerminate\" (click)=\"onTerminate()\">\n                <i class=\"weui-icon-cancel\"></i>\n            </a>\n        </div>\n    `\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'color': [{ type: Input },],\n'value': [{ type: Input },],\n'canTerminate': [{ type: Input },],\n'terminate': [{ type: Output },],\n};\n}\n\nfunction WeUIProgressBar_tsickle_Closure_declarations() {\n/** @type {?} */\nWeUIProgressBar.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nWeUIProgressBar.ctorParameters;\n/** @type {?} */\nWeUIProgressBar.propDecorators;\n/**\n * 颜色，取值：default、primary、warn等。默认为default。<br>\n * 自定义的颜色名称与色值，可以定义在 工程根目录/src/theme/variables.scss 文件中的 $colors 对象。\n * @type {?}\n */\nWeUIProgressBar.prototype.color;\n/**\n * Value of the progressbar. Defaults to zero.\n * @type {?}\n */\nWeUIProgressBar.prototype.value;\n/**\n * 是否可终止 (若为true，则显示关闭按钮)\n * @type {?}\n */\nWeUIProgressBar.prototype.canTerminate;\n/**\n * 终止事件\n * @type {?}\n */\nWeUIProgressBar.prototype.terminate;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright 厦门乾元盛世科技有限公司 All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file.\n */\n\n\nimport { Component, HostBinding, Renderer2, ElementRef, forwardRef, Optional, Inject } from '@angular/core';\nimport { NG_VALUE_ACCESSOR, COMPOSITION_BUFFER_MODE } from '@angular/forms';\n\nimport { WeUIFormControl } from './weui.form.control';\n\n\nconst /** @type {?} */ WEUI_FORM_CONTROL_VALUE_ACCESSOR: any = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => WeUIRadio),\n    multi: true\n};\nexport class WeUIRadio extends WeUIFormControl {\n/**\n * 基本样式\n */\n_cls_check_label = true;\n/**\n * @param {?} renderer\n * @param {?} elementRef\n * @param {?} compositionMode\n */\nconstructor(\nprivate renderer: Renderer2,\nprivate elementRef: ElementRef,\nprivate compositionMode: boolean) {\n        super(renderer, elementRef, compositionMode);\n    }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n    selector: 'weui-radio',\n    providers: [WEUI_FORM_CONTROL_VALUE_ACCESSOR],\n    template: `\n        <label class=\"weui-check__label\" [for]=\"id\" (click)=\"onTouched()\">\n            <div class=\"weui-cell__bd\">\n                {{label}}<ng-content></ng-content>\n            </div>\n            <div class=\"weui-cell__ft\">\n                <input type=\"radio\" class=\"weui-check\"\n                    [attr.id]=\"id\" [attr.name]=\"name\" [value]=\"value\"\n                    [disabled]=\"disabled\" [(ngModel)]=\"innerValue\">\n                <span class=\"weui-icon-checked\"></span>\n            </div>\n        </label>\n    `\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Renderer2, },\n{type: ElementRef, },\n{type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [COMPOSITION_BUFFER_MODE, ] }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'_cls_check_label': [{ type: HostBinding, args: ['class.weui-check__label', ] },],\n};\n}\n\nfunction WeUIRadio_tsickle_Closure_declarations() {\n/** @type {?} */\nWeUIRadio.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nWeUIRadio.ctorParameters;\n/** @type {?} */\nWeUIRadio.propDecorators;\n/**\n * 基本样式\n * @type {?}\n */\nWeUIRadio.prototype._cls_check_label;\n/** @type {?} */\nWeUIRadio.prototype.renderer;\n/** @type {?} */\nWeUIRadio.prototype.elementRef;\n/** @type {?} */\nWeUIRadio.prototype.compositionMode;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright 厦门乾元盛世科技有限公司 All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file.\n */\n\n\nimport { Component, Input, Output, EventEmitter, OnInit, OnDestroy, ElementRef, ViewChild } from '@angular/core';\nimport { Subject } from 'rxjs/Subject';\nimport { Subscription } from 'rxjs/Subscription';\nimport { debounceTime, distinctUntilChanged } from 'rxjs/operators';\nexport class WeUISearchBar implements OnInit, OnDestroy {\n/**\n * \\@i18n\n */\ndefaults: any = {\n        cancelText: '取消',\n        searchText: '搜索'\n    };\n/**\n * 是否必填\n */\nrequired = true;\n/**\n * \\@i18n \n * placeholder 规定帮助用户填写输入字段的提示。\n */\nplaceholder: string = this.defaults.searchText;\n/**\n * \\@i18n 取消\n */\ncancelText: string = this.defaults.cancelText;\n/**\n * 输入事件\n */\nsearch = new EventEmitter<string>();\n\n    // 输入控件\n     searchBox: ElementRef;\npublic focusing = false;\npublic value = '';\nprivate searchTerms = new Subject<string>();\nprivate _searchTermsChangesSubscription: Subscription;\nconstructor() {\n\n    }\n/**\n * @return {?}\n */\nngOnInit(): void {\n        this._searchTermsChangesSubscription = this.searchTerms\n            .pipe(\n                debounceTime(300),     // wait for 300ms pause in events\n                distinctUntilChanged() // ignore if next search term is same as previous\n            )\n            .subscribe((term: string) => {\n                this.search.emit(term);\n            });\n    }\n/**\n * @return {?}\n */\nngOnDestroy(): void {\n        if (this._searchTermsChangesSubscription) {\n            this._searchTermsChangesSubscription.unsubscribe();\n        }\n    }\n/**\n * @return {?}\n */\ndoFocus(): void {\n        this.searchBox.nativeElement.focus();\n    }\n/**\n * @return {?}\n */\nonFocus(): void {\n        this.focusing = true;\n    }\n/**\n * @return {?}\n */\nonBlur(): void {\n        if (!this.value.length) {\n            this.focusing = false;\n        }\n    }\n/**\n * @return {?}\n */\nonCancel(): void {\n        this.value = '';\n        this.onBlur();\n        this.search.emit('');\n    }\n/**\n * @param {?} term\n * @return {?}\n */\npush(term: string): void {\n        this.searchTerms.next(term);\n    }\n/**\n * @return {?}\n */\nclear(): void {\n        this.value = '';\n        this.doFocus();\n    }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n    selector: 'weui-searchbar',\n    template: `\n        <div class=\"weui-search-bar\" [ngClass]=\"{'weui-search-bar_focusing': focusing}\">\n            <form class=\"weui-search-bar__form\">\n                <div class=\"weui-search-bar__box\">\n                    <i class=\"weui-icon-search\"></i>\n                    <input #searchBox type=\"search\" name=\"search\" class=\"weui-search-bar__input\"\n                        [placeholder]=\"placeholder\" [required]=\"required\"\n                        (focus)=\"onFocus()\" (blur)=\"onBlur()\" [(ngModel)]=\"value\" (keyup)=\"push(searchBox.value)\" />\n                    <a href=\"javascript:\" class=\"weui-icon-clear\" (click)=\"clear()\"></a>\n                </div>\n                <label class=\"weui-search-bar__label\" (click)=\"doFocus()\">\n                    <i class=\"weui-icon-search\"></i>\n                    <span>{{placeholder}}</span>\n                </label>\n            </form>\n            <a href=\"javascript:\" class=\"weui-search-bar__cancel-btn\" (click)=\"onCancel()\">{{cancelText}}</a>\n        </div>\n    `\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'required': [{ type: Input },],\n'placeholder': [{ type: Input },],\n'cancelText': [{ type: Input },],\n'search': [{ type: Output },],\n'searchBox': [{ type: ViewChild, args: ['searchBox', ] },],\n};\n}\n\nfunction WeUISearchBar_tsickle_Closure_declarations() {\n/** @type {?} */\nWeUISearchBar.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nWeUISearchBar.ctorParameters;\n/** @type {?} */\nWeUISearchBar.propDecorators;\n/**\n * \\@i18n\n * @type {?}\n */\nWeUISearchBar.prototype.defaults;\n/**\n * 是否必填\n * @type {?}\n */\nWeUISearchBar.prototype.required;\n/**\n * \\@i18n \n * placeholder 规定帮助用户填写输入字段的提示。\n * @type {?}\n */\nWeUISearchBar.prototype.placeholder;\n/**\n * \\@i18n 取消\n * @type {?}\n */\nWeUISearchBar.prototype.cancelText;\n/**\n * 输入事件\n * @type {?}\n */\nWeUISearchBar.prototype.search;\n/** @type {?} */\nWeUISearchBar.prototype.searchBox;\n/** @type {?} */\nWeUISearchBar.prototype.focusing;\n/** @type {?} */\nWeUISearchBar.prototype.value;\n/** @type {?} */\nWeUISearchBar.prototype.searchTerms;\n/** @type {?} */\nWeUISearchBar.prototype._searchTermsChangesSubscription;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright 厦门乾元盛世科技有限公司 All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file.\n */\n\n\nimport { Directive, Host, Renderer2, ElementRef, Optional, AfterViewInit } from '@angular/core';\nimport { WeUIItem } from '../list/weui.item';\nexport class WeUISelect implements AfterViewInit {\n/**\n * @param {?} _renderer\n * @param {?} _elementRef\n * @param {?} _container\n */\nconstructor(\nprivate _renderer: Renderer2,\nprivate _elementRef: ElementRef,\nprivate _container: WeUIItem) {\n\n    }\n/**\n * @return {?}\n */\nngAfterViewInit(): void {\n        if (!this._container) {\n            return;\n        }\n\n        const /** @type {?} */ nativeEl = /** @type {?} */(( this._elementRef.nativeElement as HTMLElement));\n        this._renderer.addClass(nativeEl, 'weui-select');\n        this._container.addClass('weui-cell_select');\n\n        const /** @type {?} */ parentEl = nativeEl.parentElement;\n        if (parentEl && parentEl.classList.contains('weui-cell__hd')) {\n            this._container.addClass('weui-cell_select-before');\n        }\n        if (parentEl && parentEl.classList.contains('weui-cell__bd')) {\n            this._container.addClass('weui-cell_select-after');\n        }\n    }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n    // tslint:disable-next-line:directive-selector\n    selector: 'select'\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Renderer2, },\n{type: ElementRef, },\n{type: WeUIItem, decorators: [{ type: Optional }, { type: Host }, ]},\n];\n}\n\nfunction WeUISelect_tsickle_Closure_declarations() {\n/** @type {?} */\nWeUISelect.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nWeUISelect.ctorParameters;\n/** @type {?} */\nWeUISelect.prototype._renderer;\n/** @type {?} */\nWeUISelect.prototype._elementRef;\n/** @type {?} */\nWeUISelect.prototype._container;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright 厦门乾元盛世科技有限公司 All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file.\n */\n\n\nimport { Component, Input, Renderer2, ElementRef, ViewChild, forwardRef, Optional, Inject } from '@angular/core';\nimport { DefaultValueAccessor, NG_VALUE_ACCESSOR, COMPOSITION_BUFFER_MODE } from '@angular/forms';\n\n\nconst /** @type {?} */ WEUI_FORM_CONTROL_VALUE_ACCESSOR: any = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => WeUISlider),\n    multi: true\n};\nexport class WeUISlider extends DefaultValueAccessor {\n/**\n * 颜色，取值：default、primary、warn等。默认为default。<br>\n * 自定义的颜色名称与色值，可以定义在 工程根目录/src/theme/variables.scss 文件中的 $colors 对象。\n */\ncolor = 'default';\n/**\n * 显示值（在最后）\n */\nshowValue = true;\n/**\n * 禁用样式\n */\ndisabled = false;\n/**\n * 最小值\n */\nmin = 0;\n/**\n * 最大值\n */\nmax = 100;\n\n    // 内部组件\n     sliderInner: ElementRef;\n/**\n * 取值\n */\npublic value = 0;\n/**\n * 滑动比例（取值：0-100）\n */\npublic percent = 0;\nprivate totalLen: number;\nprivate start: number;\nprivate startX: number;\n/**\n * @param {?} renderer\n * @param {?} elementRef\n * @param {?} compositionMode\n */\nconstructor(\nprivate renderer: Renderer2,\nprivate elementRef: ElementRef,\nprivate compositionMode: boolean) {\n        super(renderer, elementRef, compositionMode);\n    }\n/**\n * @param {?} event\n * @return {?}\n */\nonTouchStart(event: TouchEvent): void {\n        if (this.disabled) {\n            return;\n        }\n\n        this.totalLen = this.sliderInner.nativeElement.clientWidth;\n        this.start = this.percent * this.totalLen / 100;\n        this.startX = event.targetTouches[0].clientX;\n        this.onTouched();\n    }\n/**\n * @param {?} event\n * @return {?}\n */\nonTouchMove(event: TouchEvent): void {\n        if (this.disabled) {\n            return;\n        }\n\n        const /** @type {?} */ dist = event.targetTouches[0].clientX - this.startX;\n        let /** @type {?} */ end = this.start + dist;\n        end = end < 0 ? 0 : end > this.totalLen ? this.totalLen : end;\n        this.percent = end * 100 / this.totalLen;\n        this.value = Math.round(this.min + (this.max - this.min) * this.percent / 100);\n\n        event.preventDefault();\n        this.onChange(this.value);\n    }\n/**\n * Write a new value to the element. (From ControlValueAccessor interface)\n * @param {?} value\n * @return {?}\n */\nwriteValue(value: number): void {\n        if (value !== undefined && value !== null) {\n            value = Math.min(Math.max(value, this.min), this.max);\n            this.value = value;\n            this.percent = (value + this.min) * 100 / this.max;\n        }\n    }\n/**\n * 设置禁用状态 (From ControlValueAccessor interface)\n * @param {?} isDisabled\n * @return {?}\n */\nsetDisabledState(isDisabled: boolean): void {\n        this.disabled = isDisabled;\n    }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n    selector: 'weui-slider',\n    template: `\n        <div class=\"weui-slider-box weui-slider_{{color}}\">\n            <ng-content select=\"[weui-start]\"></ng-content>\n            <div class=\"weui-slider\">\n                <div #sliderInner class=\"weui-slider__inner\">\n                    <div [style.width]=\"percent + '%'\" class=\"weui-slider__track\"></div>\n                    <div [style.left]=\"percent + '%'\" class=\"weui-slider__handler\"\n                        (touchstart)=\"onTouchStart($event)\" (touchmove)=\"onTouchMove($event)\"></div>\n                </div>\n            </div>\n            <ng-content select=\"[weui-last]\"></ng-content>\n            <div class=\"weui-slider-box__value\" *ngIf=\"showValue\">{{value}}</div>\n        </div>\n    `,\n    providers: [WEUI_FORM_CONTROL_VALUE_ACCESSOR]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Renderer2, },\n{type: ElementRef, },\n{type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [COMPOSITION_BUFFER_MODE, ] }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'color': [{ type: Input },],\n'showValue': [{ type: Input },],\n'disabled': [{ type: Input },],\n'min': [{ type: Input },],\n'max': [{ type: Input },],\n'sliderInner': [{ type: ViewChild, args: ['sliderInner', ] },],\n};\n}\n\nfunction WeUISlider_tsickle_Closure_declarations() {\n/** @type {?} */\nWeUISlider.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nWeUISlider.ctorParameters;\n/** @type {?} */\nWeUISlider.propDecorators;\n/**\n * 颜色，取值：default、primary、warn等。默认为default。<br>\n * 自定义的颜色名称与色值，可以定义在 工程根目录/src/theme/variables.scss 文件中的 $colors 对象。\n * @type {?}\n */\nWeUISlider.prototype.color;\n/**\n * 显示值（在最后）\n * @type {?}\n */\nWeUISlider.prototype.showValue;\n/**\n * 禁用样式\n * @type {?}\n */\nWeUISlider.prototype.disabled;\n/**\n * 最小值\n * @type {?}\n */\nWeUISlider.prototype.min;\n/**\n * 最大值\n * @type {?}\n */\nWeUISlider.prototype.max;\n/** @type {?} */\nWeUISlider.prototype.sliderInner;\n/**\n * 取值\n * @type {?}\n */\nWeUISlider.prototype.value;\n/**\n * 滑动比例（取值：0-100）\n * @type {?}\n */\nWeUISlider.prototype.percent;\n/** @type {?} */\nWeUISlider.prototype.totalLen;\n/** @type {?} */\nWeUISlider.prototype.start;\n/** @type {?} */\nWeUISlider.prototype.startX;\n/** @type {?} */\nWeUISlider.prototype.renderer;\n/** @type {?} */\nWeUISlider.prototype.elementRef;\n/** @type {?} */\nWeUISlider.prototype.compositionMode;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright 厦门乾元盛世科技有限公司 All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file.\n */\n\n\nimport { Component, HostBinding, Renderer2, ElementRef, forwardRef, Optional, Inject } from '@angular/core';\nimport { NG_VALUE_ACCESSOR, COMPOSITION_BUFFER_MODE } from '@angular/forms';\n\nimport { WeUIFormControl } from './weui.form.control';\n\n\nconst /** @type {?} */ WEUI_FORM_CONTROL_VALUE_ACCESSOR: any = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => WeUISwitch),\n    multi: true\n};\nexport class WeUISwitch extends WeUIFormControl {\n/**\n * 是否已选中\n */\npublic checked = false;\n/**\n * The value of the input ngModel。 (view -> model)\n * @param {?} checked\n * @return {?}\n */\nset innerValue(checked: boolean) {\n        if (this._value !== checked) {\n            this._value = checked || false;\n            // view -> model -> outside world (ie. NgModel on this control)\n            this.onChange(this._value ? this.value : '');\n        }\n    }\n/**\n * Write a new value to the element. (From ControlValueAccessor interface)\n * @param {?} value\n * @return {?}\n */\nwriteValue(value: any): void {\n        this.checked = this.value === value;\n        super.writeValue(this.checked);\n    }\n/**\n * 基本样式\n */\n_cls_cell_switch = true;\n/**\n * @param {?} renderer\n * @param {?} elementRef\n * @param {?} compositionMode\n */\nconstructor(\nprivate renderer: Renderer2,\nprivate elementRef: ElementRef,\nprivate compositionMode: boolean) {\n        super(renderer, elementRef, compositionMode);\n        this.value = 'on'; // default value\n    }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n    selector: 'weui-switch',\n    template: `\n        <div class=\"weui-cell__bd\">\n            {{label}}<ng-content select=\"label\"></ng-content>\n        </div>\n        <div class=\"weui-cell__ft\">\n            <label [for]=\"id\" class=\"weui-switch-cp\">\n                <input type=\"checkbox\" class=\"weui-switch-cp__input\"\n                    [attr.id]=\"id\" [attr.name]=\"name\" [value]=\"value\" [checked]=\"checked\" [(ngModel)]=\"innerValue\" />\n                <div class=\"weui-switch-cp__box\"></div>\n            </label>\n        </div>\n    `,\n    providers: [WEUI_FORM_CONTROL_VALUE_ACCESSOR]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Renderer2, },\n{type: ElementRef, },\n{type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [COMPOSITION_BUFFER_MODE, ] }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'_cls_cell_switch': [{ type: HostBinding, args: ['class.weui-cell_switch', ] },],\n};\n}\n\nfunction WeUISwitch_tsickle_Closure_declarations() {\n/** @type {?} */\nWeUISwitch.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nWeUISwitch.ctorParameters;\n/** @type {?} */\nWeUISwitch.propDecorators;\n/**\n * 是否已选中\n * @type {?}\n */\nWeUISwitch.prototype.checked;\n/**\n * 基本样式\n * @type {?}\n */\nWeUISwitch.prototype._cls_cell_switch;\n/** @type {?} */\nWeUISwitch.prototype.renderer;\n/** @type {?} */\nWeUISwitch.prototype.elementRef;\n/** @type {?} */\nWeUISwitch.prototype.compositionMode;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright 厦门乾元盛世科技有限公司 All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file.\n */\n\n\nimport { Directive, Input, Host, HostBinding, HostListener, Optional } from '@angular/core';\nimport { Inject, forwardRef } from '@angular/core';\n\nimport { WeUITabBar } from './weui.tabbar';\nexport class WeUITabBarItem {\n/**\n * 任意值，当激活时传递给父级控件\n */\nvalue: any;\n/**\n * 设置基本样式\n */\nbarItemCls = true;\n/**\n * 设置激活样式\n * @return {?}\n */\nget activatedCls(): boolean {\n        return this._activated;\n    }\nprivate _activated = false;\n/**\n * 点击触发激活\n * \n * @param {?} event 点击事件\n * @return {?}\n */\nonClick(event: Event): void {\n        if (this.tabbar) {\n            this.tabbar.activate(this);\n        }\n    }\n/**\n * @param {?} tabbar\n */\nconstructor(\nprivate tabbar: WeUITabBar) {\n\n    }\n/**\n * 由父级控件传入\n * \n * @param {?} activated 激活状态\n * @return {?}\n */\nactivated(activated: boolean): void {\n        this._activated = activated;\n    }\n/**\n * @return {?}\n */\nisActivated(): boolean {\n        return this._activated;\n    }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n    // tslint:disable-next-line:directive-selector\n    selector: 'weui-tabbar-item,[weui-tabbar-item]'\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: WeUITabBar, decorators: [{ type: Optional }, { type: Host }, { type: Inject, args: [forwardRef(() => WeUITabBar), ] }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'value': [{ type: Input },],\n'barItemCls': [{ type: HostBinding, args: ['class.weui-tabbar__item', ] },],\n'activatedCls': [{ type: HostBinding, args: ['class.weui-bar__item_on', ] },],\n'onClick': [{ type: HostListener, args: ['click', ['$event'], ] },],\n};\n}\n\nfunction WeUITabBarItem_tsickle_Closure_declarations() {\n/** @type {?} */\nWeUITabBarItem.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nWeUITabBarItem.ctorParameters;\n/** @type {?} */\nWeUITabBarItem.propDecorators;\n/**\n * 任意值，当激活时传递给父级控件\n * @type {?}\n */\nWeUITabBarItem.prototype.value;\n/**\n * 设置基本样式\n * @type {?}\n */\nWeUITabBarItem.prototype.barItemCls;\n/** @type {?} */\nWeUITabBarItem.prototype._activated;\n/** @type {?} */\nWeUITabBarItem.prototype.tabbar;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright 厦门乾元盛世科技有限公司 All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file.\n */\n\n\nimport { Component, Input, Output, EventEmitter, HostBinding, AfterViewInit, ContentChildren, QueryList } from '@angular/core';\n\nimport { WeUITabBarItem } from './weui.tabbar.item';\nexport class WeUITabBar implements AfterViewInit {\n/**\n * 初始激活的子对象\n */\nactiveIndex = 0;\n/**\n * 设置基本样式\n */\nbarCls = true;\n/**\n * 内部子对象\n */\nitems: QueryList<WeUITabBarItem>;\n/**\n * 激活事件\n */\nactivated = new EventEmitter<WeUITabBarItem>();\nprivate _activated: any;\nconstructor() {\n\n    }\n/**\n * @return {?}\n */\nngAfterViewInit(): void {\n        setTimeout(() => {\n            this.activateAt(this.activeIndex);\n        }, 1);\n    }\n/**\n * @param {?} index\n * @return {?}\n */\ngetAt(index: number): WeUITabBarItem {\n        return /** @type {?} */(( this.items.find((item: WeUITabBarItem, i: number) => i === index) as WeUITabBarItem));\n    }\n/**\n * @param {?} item\n * @return {?}\n */\nactivate(item: any): void {\n        this._activated = item;\n        this.items.forEach(child => {\n            child.activated(child === item);\n        });\n\n        this.activated.emit(item);\n    }\n/**\n * @param {?} index\n * @return {?}\n */\nactivateAt(index: number): void {\n        const /** @type {?} */ item = this.getAt(index);\n        if (item) {\n            this.activate(item);\n        }\n    }\n/**\n * @param {?} item\n * @return {?}\n */\nisActivated(item: WeUITabBarItem): boolean {\n        return item.isActivated();\n    }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n    selector: 'weui-tabbar',\n    template: `<ng-content></ng-content>`\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'activeIndex': [{ type: Input },],\n'barCls': [{ type: HostBinding, args: ['class.weui-tabbar', ] },],\n'items': [{ type: ContentChildren, args: [WeUITabBarItem, ] },],\n'activated': [{ type: Output },],\n};\n}\n\nfunction WeUITabBar_tsickle_Closure_declarations() {\n/** @type {?} */\nWeUITabBar.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nWeUITabBar.ctorParameters;\n/** @type {?} */\nWeUITabBar.propDecorators;\n/**\n * 初始激活的子对象\n * @type {?}\n */\nWeUITabBar.prototype.activeIndex;\n/**\n * 设置基本样式\n * @type {?}\n */\nWeUITabBar.prototype.barCls;\n/**\n * 内部子对象\n * @type {?}\n */\nWeUITabBar.prototype.items;\n/**\n * 激活事件\n * @type {?}\n */\nWeUITabBar.prototype.activated;\n/** @type {?} */\nWeUITabBar.prototype._activated;\n}\n\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright 厦门乾元盛世科技有限公司 All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file.\n */\n\n\nimport { Component, HostBinding } from '@angular/core';\nexport class WeUITips {\n/**\n * 设置基本样式\n */\n_cls_tips = true;\nconstructor() {\n\n    }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n    selector: 'weui-tips',\n    template: `<ng-content></ng-content>`\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'_cls_tips': [{ type: HostBinding, args: ['class.weui-cells__tips', ] },],\n};\n}\n\nfunction WeUITips_tsickle_Closure_declarations() {\n/** @type {?} */\nWeUITips.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nWeUITips.ctorParameters;\n/** @type {?} */\nWeUITips.propDecorators;\n/**\n * 设置基本样式\n * @type {?}\n */\nWeUITips.prototype._cls_tips;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright 厦门乾元盛世科技有限公司 All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file.\n */\n\n\nimport { Component, HostBinding } from '@angular/core';\nexport class WeUITitle {\n/**\n * 设置基本样式\n */\n_cls_title = true;\nconstructor() {\n\n    }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n    selector: 'weui-title',\n    template: `<ng-content></ng-content>`\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'_cls_title': [{ type: HostBinding, args: ['class.weui-cells__title', ] },],\n};\n}\n\nfunction WeUITitle_tsickle_Closure_declarations() {\n/** @type {?} */\nWeUITitle.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nWeUITitle.ctorParameters;\n/** @type {?} */\nWeUITitle.propDecorators;\n/**\n * 设置基本样式\n * @type {?}\n */\nWeUITitle.prototype._cls_title;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright 厦门乾元盛世科技有限公司 All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file.\n */\n\n\nimport { Component, Renderer2, ElementRef, ViewChild, forwardRef } from '@angular/core';\nimport { DomSanitizer } from '@angular/platform-browser';\n\nimport { WeUIGallery } from '../gallery/weui.gallery';\n/**\n * 文件信息\n */\nexport class WeUIFile {\n/**\n * 所选文件\n */\nfile?: File;\n/**\n * 文件URL\n */\nfileURL?: any;\n/**\n * 此文件的上传进度\n */\nprogress = 0;\n/**\n * 错误消息\n */\nerror: string | Error | null;\n/**\n * 是否正在上传\n */\nisUploading = false;\n/**\n * 是否已经上传\n */\nisUploaded = false;\n/**\n * 是否存在错误\n * @return {?}\n */\nhasError(): boolean {\n        return !!this.error;\n    }\n/**\n * @return {?}\n */\nhasMessage(): boolean {\n        return this.hasError() || (this.progress > 0 && this.progress < 100);\n    }\n/**\n * 重置状态<br>\n * 上传进度设置为0，错误消息为null，isUploading和isUploaded均设置为false。\n * @return {?}\n */\nreset(): void {\n        this.progress = 0;\n        this.error = null;\n        this.isUploading = false;\n        this.isUploaded = false;\n    }\n/**\n * @param {?} file\n * @param {?=} fileURL\n */\nconstructor(file: File, fileURL?: any) {\n        this.file = file;\n        this.fileURL = fileURL;\n    }\n}\n\nfunction WeUIFile_tsickle_Closure_declarations() {\n/**\n * 所选文件\n * @type {?}\n */\nWeUIFile.prototype.file;\n/**\n * 文件URL\n * @type {?}\n */\nWeUIFile.prototype.fileURL;\n/**\n * 此文件的上传进度\n * @type {?}\n */\nWeUIFile.prototype.progress;\n/**\n * 错误消息\n * @type {?}\n */\nWeUIFile.prototype.error;\n/**\n * 是否正在上传\n * @type {?}\n */\nWeUIFile.prototype.isUploading;\n/**\n * 是否已经上传\n * @type {?}\n */\nWeUIFile.prototype.isUploaded;\n}\n\nexport class WeUIUploader {\n/**\n * 图片预览控件\n */\ngallery: WeUIGallery;\npublic files: WeUIFile[] = [];\n/**\n * 预览时用\n */\npublic image: WeUIFile;\n/**\n * @param {?} renderer\n * @param {?} elementRef\n * @param {?} sanitizer\n */\nconstructor(\nprivate renderer: Renderer2,\nprivate elementRef: ElementRef,\nprivate sanitizer: DomSanitizer) {\n\n    }\n/**\n * 获取列表中的文件\n * @return {?}\n */\ngetFiles(): WeUIFile[] {\n        return this.files;\n    }\n/**\n * 文件总数\n * @return {?}\n */\ngetFileCount(): number {\n        return this.files.length;\n    }\n/**\n * 已上传文件数\n * @return {?}\n */\ngetUploadedFileCount(): number {\n        return this.files.filter((file: WeUIFile) => file.isUploaded).length;\n    }\n/**\n * 选择图片文件\n * @param {?} event\n * @return {?}\n */\nonSelect(event: Event): void {\n        const /** @type {?} */ picker = /** @type {?} */(( event.target as HTMLInputElement));\n        const /** @type {?} */ files = picker && picker.files;\n        if (!files) {\n            return;\n        }\n\n        const /** @type {?} */ length = files.length;\n        for (let /** @type {?} */ i = 0; i < length; i++) {\n            const /** @type {?} */ file: File = files.item(i);\n            const /** @type {?} */ url: string = 'url(' + window.URL.createObjectURL(file) + ')';\n            const /** @type {?} */ safeUrl = this.sanitizer.bypassSecurityTrustStyle(url);\n            this.files.push(new WeUIFile(file, safeUrl));\n        }\n    }\n/**\n * 预览图片\n * @param {?} file\n * @return {?}\n */\npreview(file: WeUIFile): void {\n        this.image = file;\n        if (this.gallery) {\n            this.gallery.show();\n        }\n    }\n/**\n * 退出预览\n * @return {?}\n */\nfadeOut(): void {\n        if (this.gallery) {\n            this.gallery.hide();\n        }\n    }\n/**\n * 删除文件\n * @param {?} file\n * @return {?}\n */\nonDelete(file: WeUIFile): void {\n        const /** @type {?} */ index = this.files.indexOf(file);\n        if (index >= 0) {\n            this.files.splice(index, 1);\n        }\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n    selector: 'weui-uploader',\n    template: `\n        <div class=\"weui-uploader\">\n            <div class=\"weui-uploader__hd\">\n                <p class=\"weui-uploader__title\">图片上传</p>\n                <div class=\"weui-uploader__info\">{{getUploadedFileCount()}}/{{getFileCount()}}</div>\n            </div>\n            <div class=\"weui-uploader__bd\">\n                <ul class=\"weui-uploader__files\">\n                    <li class=\"weui-uploader__file\" *ngFor=\"let file of files\"\n                        [style.background-image]=\"file.fileURL\"\n                        [ngClass]=\"{'weui-uploader__file_status': file.hasMessage()}\"\n                        (click)=\"preview(file)\">\n                        <div class=\"weui-uploader__file-content\" *ngIf=\"file.hasMessage()\">\n                            <div class=\"weui-uploader__file-progress\"\n                                *ngIf=\"file.isUploading && file.progress && !file.hasError()\">{{file.progress}}%</div>\n                            <i class=\"weui-icon-warn\" *ngIf=\"file.hasError()\"></i>\n                        </div>\n                    </li>\n                </ul>\n                <div class=\"weui-uploader__input-box\">\n                    <input class=\"weui-uploader__input\" type=\"file\" accept=\"image/*\" multiple (change)=\"onSelect($event)\" />\n                </div>\n            </div>\n        </div>\n        <weui-gallery [image]=\"image\" [canDelete]=\"true\" (delete)=\"onDelete($event)\" (click)=\"fadeOut()\"></weui-gallery>\n    `\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Renderer2, },\n{type: ElementRef, },\n{type: DomSanitizer, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'gallery': [{ type: ViewChild, args: [forwardRef(() => WeUIGallery), ] },],\n};\n}\n\nfunction WeUIUploader_tsickle_Closure_declarations() {\n/** @type {?} */\nWeUIUploader.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nWeUIUploader.ctorParameters;\n/** @type {?} */\nWeUIUploader.propDecorators;\n/**\n * 图片预览控件\n * @type {?}\n */\nWeUIUploader.prototype.gallery;\n/** @type {?} */\nWeUIUploader.prototype.files;\n/**\n * 预览时用\n * @type {?}\n */\nWeUIUploader.prototype.image;\n/** @type {?} */\nWeUIUploader.prototype.renderer;\n/** @type {?} */\nWeUIUploader.prototype.elementRef;\n/** @type {?} */\nWeUIUploader.prototype.sanitizer;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright 厦门乾元盛世科技有限公司 All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file.\n */\n\n\nimport { Component, Input, Output, HostBinding, EventEmitter } from '@angular/core';\nimport { animate, state, style, transition, trigger } from '@angular/core';\nexport class WeUIActionSheet {\n/**\n * \\@i18n\n */\ndefaults: any = {\n        cancelText: '取消'\n    };\n/**\n * ActionSheet菜单，列表，内容任意，其中<code>text</code>用于显示\n */\nmenu: { text?: string, [key: string]: any }[] = [];\n/**\n * ActionSheet弹出模式，取值：ios(Ios模式) - 从底部上弹，md(Android模式) - 弹出在窗口中间。默认为ios。\n */\nmode = 'ios';\n/**\n * \\@i18n 取消\n */\ncancelText: string = this.defaults.cancelText;\n/**\n * 隐藏对象\n */\nclose = new EventEmitter<any>();\n/**\n * 安卓模式下的特殊样式\n * @return {?}\n */\nget androidCls(): boolean {\n        return this.mode === 'md';\n    }\n/**\n * 用于控制控件的可视化\n * @return {?}\n */\nget hideCls(): boolean {\n        return !this._show;\n    }\n/**\n * 用于控制动画的触发(trigger)\n * @return {?}\n */\nget visibility(): string {\n        return this.shown ? 'show' : 'hide';\n    }\n/**\n * 已显示否\n */\npublic shown = false;\npublic _show = false;\n/**\n * 用户操作反馈\n */\nprivate resolve: (value?: any) => void;\nconstructor() {\n\n    }\n/**\n * 显示菜单\n * @return {?}\n */\nshow(): Promise<any> {\n        this._show = true;\n        setTimeout(() => { // 解决transition动画与display冲突的问题\n            this.shown = true;\n        }, 10);\n\n        return new Promise<any>((resolve, reject) => {\n            this.resolve = resolve;\n        });\n    }\n/**\n * 隐藏菜单\n * @return {?}\n */\nhide(): void {\n        this.shown = false;\n        setTimeout(() => {\n            this._show = false;\n            this.close.emit();\n        }, 200);\n    }\n/**\n * 选择某个菜单，执行Promise.resolve()方法，并将选中的menu作为参数；最后，关闭ActionSheet\n * \n * @param {?} menu 被选择的菜单\n * @return {?}\n */\nonSelect(menu: { text?: string, [key: string]: any }): void {\n        this.resolve(menu);\n        this.hide();\n    }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n    selector: 'weui-actionsheet',\n    template: `\n        <div class=\"weui-mask\" [@visibility]=\"visibility\" (click)=\"hide()\"></div>\n        <div class=\"weui-actionsheet\"\n            [ngClass]=\"{'weui-actionsheet_toggle': shown && mode == 'ios'}\">\n            <div class=\"weui-actionsheet__menu\">\n                <div class=\"weui-actionsheet__cell\" *ngFor=\"let m of menu\" (click)=\"onSelect(m)\">{{m.text}}</div>\n            </div>\n            <div class=\"weui-actionsheet__action\" *ngIf=\"mode == 'ios'\">\n                <div class=\"weui-actionsheet__cell\" (click)=\"hide()\">{{cancelText}}</div>\n            </div>\n        </div>\n    `,\n    animations: [trigger('visibility', [\n        state('show', style({ opacity: 1 })),\n        state('hide', style({ opacity: 0 })),\n        transition('hide <=> show', [animate(200)])\n    ])]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'menu': [{ type: Input },],\n'mode': [{ type: Input },],\n'cancelText': [{ type: Input },],\n'close': [{ type: Output },],\n'androidCls': [{ type: HostBinding, args: ['class.weui-skin_android', ] },],\n'hideCls': [{ type: HostBinding, args: ['class.weui-hide', ] },],\n};\n}\n\nfunction WeUIActionSheet_tsickle_Closure_declarations() {\n/** @type {?} */\nWeUIActionSheet.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nWeUIActionSheet.ctorParameters;\n/** @type {?} */\nWeUIActionSheet.propDecorators;\n/**\n * \\@i18n\n * @type {?}\n */\nWeUIActionSheet.prototype.defaults;\n/**\n * ActionSheet菜单，列表，内容任意，其中<code>text</code>用于显示\n * @type {?}\n */\nWeUIActionSheet.prototype.menu;\n/**\n * ActionSheet弹出模式，取值：ios(Ios模式) - 从底部上弹，md(Android模式) - 弹出在窗口中间。默认为ios。\n * @type {?}\n */\nWeUIActionSheet.prototype.mode;\n/**\n * \\@i18n 取消\n * @type {?}\n */\nWeUIActionSheet.prototype.cancelText;\n/**\n * 隐藏对象\n * @type {?}\n */\nWeUIActionSheet.prototype.close;\n/**\n * 已显示否\n * @type {?}\n */\nWeUIActionSheet.prototype.shown;\n/** @type {?} */\nWeUIActionSheet.prototype._show;\n/**\n * 用户操作反馈\n * @type {?}\n */\nWeUIActionSheet.prototype.resolve;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright 厦门乾元盛世科技有限公司 All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file.\n */\n\n\nimport { Component, Input, Output, HostBinding, EventEmitter } from '@angular/core';\nimport { animate, state, style, transition, trigger } from '@angular/core';\nexport class WeUIDialog {\n/**\n * \\@i18n\n */\ndefaults: any = {\n       btnNOText: '取消',\n       btnOKText: '确定'\n    };\n/**\n * ActionSheet弹出模式，取值：ios(Ios模式) - 从底部上弹，md(Android模式) - 弹出在窗口中间。默认为ios。\n */\nmode = 'ios';\n/**\n * 标题\n */\ntitle: string;\n/**\n * 内容\n */\ncontent: string;\n/**\n * 类型，可选：info, success, error, warning, default\n */\ntype: string | null;\n/**\n * 自定义图标\n */\nicon: string;\n/**\n * 自定义图标样式\n */\niconCls: string;\n/**\n * \\@i18n 取消\n */\nbtnNOText: string = this.defaults.btnNOText;\n/**\n * \\@i18n 确定\n */\nbtnOKText: string = this.defaults.btnOKText;\n/**\n * 是否显示“取消”按钮\n */\nshowNOButton = true;\n/**\n * 隐藏对象\n */\nclose = new EventEmitter<any>();\n/**\n * 用于控制动画的触发(trigger)\n * @return {?}\n */\nget visibility(): string {\n        return this.shown ? 'show' : 'hide';\n    }\n/**\n * 已显示否\n */\nprivate shown = false;\n/**\n * 用户操作反馈\n */\nprivate resolve: (value?: any) => void;\n/**\n * 用户操作反馈\n */\nprivate reject: (value?: any) => void;\nconstructor() {\n\n    }\n/**\n * 显示对话框\n * @return {?}\n */\nshow(): Promise<any> {\n        this.shown = true;\n\n        return new Promise<any>((resolve, reject) => {\n            this.resolve = resolve;\n            this.reject = reject;\n        });\n    }\n/**\n * 隐藏对话框\n * @return {?}\n */\nhide(): void {\n        this.shown = false;\n        this.close.emit();\n    }\n/**\n * 点击【取消】，执行Promise.reject()方法；然后，关闭对话框\n * @param {?} event\n * @return {?}\n */\nnegativeClick(event: MouseEvent): void {\n        this.reject();\n        this.hide();\n    }\n/**\n * 点击【确定】，执行Promise.resolve()方法；然后，关闭对话框\n * @param {?} event\n * @return {?}\n */\npositiveClick(event: MouseEvent): void {\n        this.resolve();\n        this.hide();\n    }\n/**\n * @return {?}\n */\ngetIcon(): string | null {\n        if (this.icon) {\n            return this.icon;\n        }\n        if (this.type) {\n            return ({\n                info: 'weui-icon-info',\n                success: 'weui-icon-success',\n                error: 'weui-icon-cancel',\n                warning: 'weui-icon-warn',\n                confirm: 'weui-icon-waiting',\n                'default': 'weui-icon-info-circle',\n            })[this.type];\n        }\n        return null;\n    }\n/**\n * @return {?}\n */\ngetIconClass(): any {\n        const /** @type {?} */ icon = this.getIcon();\n        return {\n            [`weui-dialog-icon`]: 1,\n            [`weui-dialog-icon-${this.type}`]: this.type,\n            [`${icon}`]: icon,\n            [`${this.iconCls}`]: this.iconCls\n        };\n    }\n/**\n * @return {?}\n */\ngetWrapperClass(): any {\n        return {\n            [`weui-dialog__wrapper`]: 1,\n            [`weui-dialog__wrapper_with_icon`]: this.getIcon(),\n        };\n    }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n    selector: 'weui-dialog',\n    template: `\n        <div class=\"weui-mask\"></div>\n        <div class=\"weui-dialog\" [ngClass]=\"{'weui-skin_android': mode == 'md'}\">\n            <div [ngClass]=\"getWrapperClass()\">\n                <i [ngClass]=\"getIconClass()\" *ngIf=\"getIcon()\"></i>\n                <div class=\"weui-dialog__wrapper_inner\">\n                    <div class=\"weui-dialog__hd\"><strong class=\"weui-dialog__title\">{{title}}</strong></div>\n                    <div class=\"weui-dialog__bd\">\n                        {{content}}\n                    </div>\n                </div>\n            </div>\n            <div class=\"weui-dialog__ft\">\n                <a href=\"javascript:;\" (click)=\"negativeClick($event)\" *ngIf=\"showNOButton\"\n                    class=\"weui-dialog__btn weui-dialog__btn_default\">{{btnNOText || defaults.btnNOText}}</a>\n                <a href=\"javascript:;\" (click)=\"positiveClick($event)\"\n                    class=\"weui-dialog__btn weui-dialog__btn_primary\">{{btnOKText || defaults.btnOKText}}</a>\n            </div>\n        </div>\n    `,\n    animations: [trigger('visibility', [\n        state('show', style({ opacity: 1, display: 'block' })),\n        state('hide', style({ opacity: 0, display: 'none' })),\n        transition('hide <=> show', [animate(200)])\n    ])]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'mode': [{ type: Input },],\n'title': [{ type: Input },],\n'content': [{ type: Input },],\n'type': [{ type: Input },],\n'icon': [{ type: Input },],\n'iconCls': [{ type: Input },],\n'btnNOText': [{ type: Input },],\n'btnOKText': [{ type: Input },],\n'showNOButton': [{ type: Input },],\n'close': [{ type: Output },],\n'visibility': [{ type: HostBinding, args: ['@visibility', ] },],\n};\n}\n\nfunction WeUIDialog_tsickle_Closure_declarations() {\n/** @type {?} */\nWeUIDialog.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nWeUIDialog.ctorParameters;\n/** @type {?} */\nWeUIDialog.propDecorators;\n/**\n * \\@i18n\n * @type {?}\n */\nWeUIDialog.prototype.defaults;\n/**\n * ActionSheet弹出模式，取值：ios(Ios模式) - 从底部上弹，md(Android模式) - 弹出在窗口中间。默认为ios。\n * @type {?}\n */\nWeUIDialog.prototype.mode;\n/**\n * 标题\n * @type {?}\n */\nWeUIDialog.prototype.title;\n/**\n * 内容\n * @type {?}\n */\nWeUIDialog.prototype.content;\n/**\n * 类型，可选：info, success, error, warning, default\n * @type {?}\n */\nWeUIDialog.prototype.type;\n/**\n * 自定义图标\n * @type {?}\n */\nWeUIDialog.prototype.icon;\n/**\n * 自定义图标样式\n * @type {?}\n */\nWeUIDialog.prototype.iconCls;\n/**\n * \\@i18n 取消\n * @type {?}\n */\nWeUIDialog.prototype.btnNOText;\n/**\n * \\@i18n 确定\n * @type {?}\n */\nWeUIDialog.prototype.btnOKText;\n/**\n * 是否显示“取消”按钮\n * @type {?}\n */\nWeUIDialog.prototype.showNOButton;\n/**\n * 隐藏对象\n * @type {?}\n */\nWeUIDialog.prototype.close;\n/**\n * 已显示否\n * @type {?}\n */\nWeUIDialog.prototype.shown;\n/**\n * 用户操作反馈\n * @type {?}\n */\nWeUIDialog.prototype.resolve;\n/**\n * 用户操作反馈\n * @type {?}\n */\nWeUIDialog.prototype.reject;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright 厦门乾元盛世科技有限公司 All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file.\n */\n\n\nimport { Component, Input, Output, EventEmitter, HostBinding, OnChanges } from '@angular/core';\nimport { SimpleChange, SimpleChanges, Renderer2, ElementRef } from '@angular/core';\n/**\n * Toast - 弹出式提示\n */\nexport class WeUIToast implements OnChanges {\n/**\n * \\@i18n\n */\ndefaults: any = {\n        loadingText: '数据加载中',\n        successText: '操作成功'\n    };\n/**\n * 内容\n */\ncontent: string;\n/**\n * 状态，取值：loading, success\n */\nstatus: string;\n/**\n * 状态：正在加载\n */\nloading = false;\n/**\n * 状态：操作成功\n */\nsuccess = true;\n/**\n * 隐藏对象\n */\nclose = new EventEmitter<any>();\n/**\n * 样式控制\n * @return {?}\n */\nget hideCls(): boolean {\n        return !this.shown;\n    }\n/**\n * 已显示否\n */\nprivate shown = false;\n/**\n * @param {?} renderer\n * @param {?} elementRef\n */\nconstructor(\nprivate renderer: Renderer2,\nprivate elementRef: ElementRef) {\n\n    }\n/**\n * @param {?} changes\n * @return {?}\n */\nngOnChanges(changes: SimpleChanges): void {\n        const /** @type {?} */ status: SimpleChange = changes['status'];\n        if (status) {\n            if (status.currentValue === 'loading') {\n                this.success = !(this.loading = true);\n            }\n            if (status.currentValue === 'success') {\n                this.loading = !(this.success = true);\n            }\n        }\n    }\n/**\n * 显示\n * @return {?}\n */\nshow(): void {\n        this.shown = true;\n        if (this.success) {\n            setTimeout(() => { this.hide(); }, 2000);\n        }\n    }\n/**\n * 隐藏\n * @return {?}\n */\nhide(): void {\n        this.shown = false;\n        this.close.emit();\n    }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n    selector: 'weui-toast',\n    template: `\n        <div class=\"weui-mask_transparent\"></div>\n        <div class=\"weui-toast\">\n            <i class=\"weui-icon-success-no-circle weui-icon_toast\" *ngIf=\"success\"></i>\n            <p class=\"weui-toast__content\" *ngIf=\"success\">{{ content || defaults.successText}}</p>\n            <i class=\"weui-loading weui-icon_toast\" *ngIf=\"loading\"></i>\n            <p class=\"weui-toast__content\" *ngIf=\"loading\">{{ content || defaults.loadingText}}</p>\n        </div>\n    `\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Renderer2, },\n{type: ElementRef, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'content': [{ type: Input },],\n'status': [{ type: Input },],\n'loading': [{ type: Input },],\n'success': [{ type: Input },],\n'close': [{ type: Output },],\n'hideCls': [{ type: HostBinding, args: ['class.weui-hide', ] },],\n};\n}\n\nfunction WeUIToast_tsickle_Closure_declarations() {\n/** @type {?} */\nWeUIToast.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nWeUIToast.ctorParameters;\n/** @type {?} */\nWeUIToast.propDecorators;\n/**\n * \\@i18n\n * @type {?}\n */\nWeUIToast.prototype.defaults;\n/**\n * 内容\n * @type {?}\n */\nWeUIToast.prototype.content;\n/**\n * 状态，取值：loading, success\n * @type {?}\n */\nWeUIToast.prototype.status;\n/**\n * 状态：正在加载\n * @type {?}\n */\nWeUIToast.prototype.loading;\n/**\n * 状态：操作成功\n * @type {?}\n */\nWeUIToast.prototype.success;\n/**\n * 隐藏对象\n * @type {?}\n */\nWeUIToast.prototype.close;\n/**\n * 已显示否\n * @type {?}\n */\nWeUIToast.prototype.shown;\n/** @type {?} */\nWeUIToast.prototype.renderer;\n/** @type {?} */\nWeUIToast.prototype.elementRef;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright 厦门乾元盛世科技有限公司 All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file.\n */\n\n\nimport { Component, Input, Output, EventEmitter } from '@angular/core';\n/**\n * TopTips - 顶部提示\n */\nexport class WeUITopTips {\n/**\n * 内容\n */\ncontent: string;\n/**\n * 隐藏对象\n */\nclose = new EventEmitter<any>();\n/**\n * 样式控制\n * @return {?}\n */\nget display(): string {\n        return this.shown ? 'block' : 'none';\n    }\n/**\n * 已显示否\n */\nprivate shown = false;\nconstructor() {\n\n    }\n/**\n * 显示\n * @return {?}\n */\nshow(): void {\n        this.shown = true;\n        setTimeout(() => { this.hide(); }, 2000);\n    }\n/**\n * 隐藏\n * @return {?}\n */\nhide(): void {\n        this.shown = false;\n        this.close.emit();\n    }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n    selector: 'weui-toptips',\n    template: '<div class=\"weui-toptips weui-toptips_warn\" [ngStyle]=\"{display: display}\">{{content}}</div>'\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'content': [{ type: Input },],\n'close': [{ type: Output },],\n};\n}\n\nfunction WeUITopTips_tsickle_Closure_declarations() {\n/** @type {?} */\nWeUITopTips.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nWeUITopTips.ctorParameters;\n/** @type {?} */\nWeUITopTips.propDecorators;\n/**\n * 内容\n * @type {?}\n */\nWeUITopTips.prototype.content;\n/**\n * 隐藏对象\n * @type {?}\n */\nWeUITopTips.prototype.close;\n/**\n * 已显示否\n * @type {?}\n */\nWeUITopTips.prototype.shown;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { ComponentFactoryResolver, ComponentRef, EmbeddedViewRef, Injectable, ApplicationRef, Injector, NgZone, Type } from '@angular/core';\n\nimport { WeUIDialog } from '../dialog/weui.dialog';\nimport { WeUIToast } from '../toast/weui.toast';\nimport { WeUITopTips } from '../toptips/weui.toptip';\nimport { WeUIActionSheet } from '../actionsheet/weui.actionsheet';\n/**\n * Next overlay unique ID.\n */\nlet nextUniqueId = 0;\n\nexport interface DialogProps {\n    mode?: string;\n    title?: string;\n    content?: string;\n    btnNOText?: string;\n    btnOKText?: string;\n    showNOButton?: boolean;\n    type?: string | null;\n    icon?: string;\n    iconCls?: string;\n};\n/**\n * 浮层通用接口\n */\nexport class Layer {\n/**\n * @param {?} _componentFactoryResolver\n * @param {?} _appRef\n * @param {?} _injector\n * @param {?} _ngZone\n */\nconstructor(\nprivate _componentFactoryResolver: ComponentFactoryResolver,\nprivate _appRef: ApplicationRef,\nprivate _injector: Injector,\nprivate _ngZone: NgZone) {\n\n    }\n/**\n * Creates the DOM element for an overlay and appends it to the document.\n * @return {?} Newly-created pane element\n */\nprivate _createDivElement(): HTMLElement {\n        const /** @type {?} */ div: HTMLDivElement = document.createElement('div');\n        div.id = `weui-overlay-${nextUniqueId++}`;\n        div.classList.add('weui-overlay-pane');\n        document.body.appendChild(div);\n\n        return div;\n    }\n/**\n * @template T\n * @param {?} component\n * @return {?}\n */\nprivate _createCompInstance<T>(component: Type<T>): ComponentRef<T> {\n        const /** @type {?} */ componentFactory = this._componentFactoryResolver.resolveComponentFactory(component);\n        const /** @type {?} */ componentRef: ComponentRef<T> = componentFactory.create(this._injector);\n        this._appRef.attachView(componentRef.hostView);\n\n        // At this point the component has been instantiated, so we move it to the location in the DOM\n        // where we want it to be rendered.\n        const /** @type {?} */ _hostDomElement = this._createDivElement();\n        _hostDomElement.appendChild(this._getComponentRootNode(componentRef));\n\n        return componentRef;\n    }\n/**\n * @return {?}\n */\nprivate _createDialog(): WeUIDialog {\n        const /** @type {?} */ componentRef = this._createCompInstance(WeUIDialog);\n        componentRef.instance.close.subscribe(() => {\n            componentRef.destroy();\n        });\n        return componentRef.instance;\n    }\n/**\n * 显示Success\n * \n * @param {?} message  消息\n * @param {?=} title    标题(可选)\n * @return {?}\n */\npublic success(message: string, title?: string): Promise<any> {\n        return this.showAlert(message, title, 'success');\n    }\n/**\n * 显示Info\n * \n * @param {?} message  消息\n * @param {?=} title    标题(可选)\n * @return {?}\n */\npublic info(message: string, title?: string): Promise<any> {\n        return this.showAlert(message, title, 'info');\n    }\n/**\n * 显示Error\n * \n * @param {?} message  消息\n * @param {?=} title    标题(可选)\n * @return {?}\n */\npublic error(message: string, title?: string): Promise<any> {\n        return this.showAlert(message, title, 'error');\n    }\n/**\n * 显示Warning\n * \n * @param {?} message  消息\n * @param {?=} title    标题(可选)\n * @return {?}\n */\npublic warning(message: string, title?: string): Promise<any> {\n        return this.showAlert(message, title, 'warning');\n    }\n/**\n * 显示Alert\n * \n * @param {?} message  消息\n * @param {?=} title    标题(可选)\n * @param {?=} type     告警等级\n * @return {?}\n */\npublic showAlert(message: string | DialogProps, title?: string, type?: string): Promise<any> {\n        const /** @type {?} */ dialog: WeUIDialog = this._createDialog();\n        dialog.showNOButton = false;\n        if (typeof message === 'object') {\n            for (const /** @type {?} */ key in message) {\n                if (message.hasOwnProperty(key) && typeof message[key] !== 'undefined') {\n                    dialog[key] = message[key];\n                }\n            }\n        } else {\n            dialog.content = message;\n            dialog.title = title || '';\n            dialog.type = type || null;\n        }\n        return dialog.show();\n    }\n/**\n * 显示Confirm，默认带两个按钮（取消、确定）\n * \n * @param {?} message  消息，或者自定义对话框属性对象\n * @param {?=} title    标题\n * @return {?}\n */\npublic showConfirm(message: string | DialogProps, title?: string): Promise<any> {\n        const /** @type {?} */ dialog: WeUIDialog = this._createDialog();\n\n        if (typeof message === 'object') {\n            for (const /** @type {?} */ key in message) {\n                if (message.hasOwnProperty(key) && typeof message[key] !== 'undefined') {\n                    dialog[key] = message[key];\n                }\n            }\n        } else {\n            dialog.content = message;\n            dialog.title = title || '';\n        }\n\n        return dialog.show();\n    }\n/**\n * @return {?}\n */\nprivate _createToast(): WeUIToast {\n        const /** @type {?} */ componentRef = this._createCompInstance(WeUIToast);\n        componentRef.instance.close.subscribe(() => {\n            componentRef.destroy();\n        });\n        return componentRef.instance;\n    }\n/**\n * 显示Loading Toast\n * \n * @param {?=} message  消息，默认为“数据加载中”\n * @return {?}\n */\npublic showLoading(message?: string): WeUIToast {\n        const /** @type {?} */ toast: WeUIToast = this._createToast();\n        if (message) {\n            toast.content = message;\n        }\n        toast.success = !(toast.loading = true);\n        toast.show();\n        return toast;\n    }\n/**\n * 显示成功Success Toast\n * \n * @param {?=} message  消息，默认为“操作成功”\n * @return {?}\n */\npublic showSuccess(message?: string): WeUIToast {\n        const /** @type {?} */ toast: WeUIToast = this._createToast();\n        if (message) {\n            toast.content = message;\n        }\n        toast.loading = !(toast.success = true);\n        toast.show();\n        return toast;\n    }\n/**\n * 在顶部显示错误消息\n * \n * @param {?} message  错误消息\n * @return {?}\n */\npublic showError(message: string): void {\n        const /** @type {?} */ componentRef = this._createCompInstance(WeUITopTips);\n        componentRef.instance.close.subscribe(() => {\n            componentRef.destroy();\n        });\n\n        const /** @type {?} */ tip: WeUITopTips = componentRef.instance;\n        if (message) {\n            tip.content = message;\n        }\n        tip.show();\n    }\n/**\n * @return {?}\n */\nprivate _createActionSheet(): WeUIActionSheet {\n        const /** @type {?} */ componentRef = this._createCompInstance(WeUIActionSheet);\n        componentRef.instance.close.subscribe(() => {\n            componentRef.destroy();\n        });\n        return componentRef.instance;\n    }\n/**\n * 显示ActionSheet菜单\n * \n * @param {?} menus\n * @param {?=} btnCancelText 取消按钮文本，默认为“取消”\n * @return {?}\n */\npublic showActionsheet(menus: { text?: string, [key: string]: any }[], btnCancelText?: string): Promise<any> {\n        const /** @type {?} */ actionsheet: WeUIActionSheet = this._createActionSheet();\n        actionsheet.menu = menus;\n        if (btnCancelText) {\n            actionsheet.cancelText = btnCancelText;\n        }\n        return actionsheet.show();\n    }\n/**\n * Gets the root HTMLElement for an instantiated component.\n * @param {?} componentRef\n * @return {?}\n */\nprivate _getComponentRootNode(componentRef: ComponentRef<any>): HTMLElement {\n        return /** @type {?} */(( ( /** @type {?} */((componentRef.hostView as EmbeddedViewRef<any>))).rootNodes[0] as HTMLElement));\n    }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ComponentFactoryResolver, },\n{type: ApplicationRef, },\n{type: Injector, },\n{type: NgZone, },\n];\n}\n\nfunction Layer_tsickle_Closure_declarations() {\n/** @type {?} */\nLayer.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nLayer.ctorParameters;\n/** @type {?} */\nLayer.prototype._componentFactoryResolver;\n/** @type {?} */\nLayer.prototype._appRef;\n/** @type {?} */\nLayer.prototype._injector;\n/** @type {?} */\nLayer.prototype._ngZone;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright 厦门乾元盛世科技有限公司 All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file.\n */\n\n\nimport { Injectable, Inject } from '@angular/core';\nimport { ComponentFactoryResolver, ComponentRef, EmbeddedViewRef, ApplicationRef, Injector, NgZone, Type } from '@angular/core';\nimport { ɵgetDOM as getDOM, DOCUMENT } from '@angular/platform-browser';\n\nimport { WeUIPicker, PickerOption } from './weui.picker';\nimport { WeUIDatePicker } from './weui.date.picker';\n\nlet /** @type {?} */ seed = 0;\nconst /** @type {?} */ now = Date.now();\n/**\n * @return {?}\n */\nfunction getUuid() {\n    return `_picker_${now}_${seed++}`;\n}\n/**\n * Picker服务\n */\nexport class WeUIPickerService {\n/**\n * @param {?} _componentFactoryResolver\n * @param {?} _appRef\n * @param {?} _injector\n * @param {?} _ngZone\n * @param {?} doc\n */\nconstructor(\nprivate _componentFactoryResolver: ComponentFactoryResolver,\nprivate _appRef: ApplicationRef,\nprivate _injector: Injector,\nprivate _ngZone: NgZone,\nprivate doc: Document) {\n\n    }\n/**\n * 显示单列Picker\n * \n * @param {?} menu  菜单选项\n * @return {?}\n */\npublic showPicker(menu: PickerOption[]): Promise<any> {\n        const /** @type {?} */ picker = this.createPicker(WeUIPicker, { menu });\n        return picker.show();\n    }\n/**\n * 显示多列Picker\n * \n * @param {?} menus  菜单选项（多列）\n * @return {?}\n */\npublic showMultiPicker(menus: PickerOption[][]): Promise<any> {\n        const /** @type {?} */ picker = this.createPicker(WeUIPicker, { menus });\n        return picker.show();\n    }\n/**\n * 显示日期Picker\n * \n * @param {?=} config  配置项\n * @return {?}\n */\npublic showDatePicker(config?: any): Promise<any> {\n        const /** @type {?} */ picker = this.createPicker(WeUIDatePicker, config);\n        return picker.show();\n    }\n/**\n * @param {?} component\n * @param {?} config\n * @return {?}\n */\nprivate createPicker(component: Type<WeUIPicker>, config: any): WeUIPicker {\n        const /** @type {?} */ componentRef = this._createComponent(component);\n        const /** @type {?} */ instance: WeUIPicker = componentRef.instance;\n        instance.close.subscribe(() => {\n            componentRef.destroy();\n            componentRef['_container'].remove();\n        });\n        if (config) {\n            Object.assign(instance, config);\n        }\n        this.afterCreate(instance);\n        return instance;\n    }\n/**\n * this method is called before thild component's ngAfterViewInit\n * @param {?} instance\n * @return {?}\n */\nprotected afterCreate(instance: any): void {\n\n    }\n/**\n * @template T\n * @param {?} component\n * @return {?}\n */\nprivate _createComponent<T>(component: Type<T>): ComponentRef<T> {\n        const /** @type {?} */ componentFactory = this._componentFactoryResolver.resolveComponentFactory(component);\n        const /** @type {?} */ componentRef: ComponentRef<T> = componentFactory.create(this._injector);\n        this._appRef.attachView(componentRef.hostView);\n\n        // At this point the component has been instantiated, so we move it to the location in the DOM\n        // where we want it to be rendered.\n        const /** @type {?} */ _hostDomElement = this._getContainer();\n        _hostDomElement.appendChild(this._getComponentRootNode(componentRef));\n        componentRef['_container'] = _hostDomElement;\n        return componentRef;\n    }\n/**\n * Gets the root HTMLElement for an instantiated component.\n * @param {?} componentRef\n * @return {?}\n */\nprivate _getComponentRootNode(componentRef: ComponentRef<any>): HTMLElement {\n        return /** @type {?} */(( ( /** @type {?} */((componentRef.hostView as EmbeddedViewRef<any>))).rootNodes[0] as HTMLElement));\n    }\n/**\n * @return {?}\n */\nprivate _getContainer(): HTMLElement {\n        const /** @type {?} */ div: HTMLElement = getDOM().createElement('div');\n        div.id = getUuid();\n        div.classList.add('weui-overlay');\n        getDOM().appendChild(this.doc.body, div);\n        return div;\n    }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ComponentFactoryResolver, },\n{type: ApplicationRef, },\n{type: Injector, },\n{type: NgZone, },\n{type: Document, decorators: [{ type: Inject, args: [DOCUMENT, ] }, ]},\n];\n}\n\nfunction WeUIPickerService_tsickle_Closure_declarations() {\n/** @type {?} */\nWeUIPickerService.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nWeUIPickerService.ctorParameters;\n/** @type {?} */\nWeUIPickerService.prototype._componentFactoryResolver;\n/** @type {?} */\nWeUIPickerService.prototype._appRef;\n/** @type {?} */\nWeUIPickerService.prototype._injector;\n/** @type {?} */\nWeUIPickerService.prototype._ngZone;\n/** @type {?} */\nWeUIPickerService.prototype.doc;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Let'say COFFEE © 2017-2018\n * Copyright 厦门美乐味餐饮管理有限公司 All Rights Reserved.\n */\n\n\n\nimport { Component, Input, ElementRef } from '@angular/core';\nimport { NgForm } from '@angular/forms';\n/**\n * @param {?} obj\n * @return {?}\n */\nfunction isPresent(obj: any): boolean {\n    return obj !== undefined && obj !== null;\n}\n\n/**\n * 控件与提示信息，例如：<code>\n * {\n *     username: {\n *         required: '用户名不能为空',\n *         maxlength: '请输入小于10位长度的字符',\n *         ......\n *     }\n * }\n * </code>\n */\nexport interface FieldMessages {\n    [key: string]: {\n        [key: string]: string\n    };\n}\nexport class FormValidation {\n/**\n * 自定义错误消息\n */\nmessages: FieldMessages = {};\n/**\n * 控件名称\n */\nname: string;\n/**\n * 验证结果，例如: [{username: '必须填写'}, {password: '输入非法'}]\n */\nprotected formErrors: { name: string, message: string }[] = [];\n\n    protected defaultValidationMessages = {\n        required: '该项为必填项',\n        email: '请输入有效的电子邮件',\n        url: '请输入有效的网址',\n        date: '请输入有效的日期',\n        dateISO: '请输入有效的日期 (YYYY-MM-DD)',\n        number: '请输入正确的数字',\n        digits: '只可输入数字',\n        alphanumeric: '只可输入字母、数字及下划线',\n        maxlength: '最多 {0} 个字符',\n        minlength: '最少 {0} 个字符',\n        rangelength: '请输入长度为 {0} 至 {1} 之间的字符',\n        range: '请输入 {0} 至 {1} 之间的数值',\n        max: '请输入不大于 {0} 的数值',\n        min: '请输入不小于 {0} 的数值'\n    };\n/**\n * @param {?} _element\n * @param {?} _form\n */\nconstructor(\nprivate _element: ElementRef,\nprivate _form: NgForm) {\n        if (_form && _form.ngSubmit) {\n            _form.ngSubmit.subscribe(this.onSubmit.bind(this));\n        }\n    }\n/**\n * @return {?}\n */\nshowByName(): boolean {\n        return isPresent(this.name) && this.name.length > 0;\n    }\n/**\n * Form验证后，自动执行消息提示匹配\n * @return {?}\n */\nonSubmit(): void {\n        this.validate();\n    }\n/**\n * 验证表单，结果存入formErrors\n * \n * @return {?} 验证结果: true-success, false-fail\n */\npublic validate(): boolean {\n        const /** @type {?} */ formErrors = [];\n        const /** @type {?} */ form = this._form;\n        if (!form) {\n            return false;\n        }\n\n        for (const /** @type {?} */ field in form.controls) {\n            if (form.controls.hasOwnProperty(field)) {\n                const /** @type {?} */ control = form.controls[field];\n                const /** @type {?} */ errors = control && control.errors || {};\n\n                if (control && control.invalid && (control.dirty || form.submitted)) {\n                    const /** @type {?} */ messages = (this.messages && this.messages[field]) || {};\n                    if (errors['required']) {\n                        formErrors.push({\n                            name: field,\n                            message: messages['required'] || this.defaultValidationMessages['required']\n                        });\n                        continue; // 默认先验证必填消息\n                    }\n\n                    for (const /** @type {?} */ key in errors) {\n                        if (errors.hasOwnProperty(key)) {\n                            formErrors.push({\n                                name: field,\n                                message: messages[key] || this.defaultValidationMessages[key]\n                            });\n                            continue; // 若一个输入框存在多个验证器，即使存在多个错误消息，也仅取一条错误消息\n                        }\n                    }\n                }\n            }\n        }\n        this.formErrors = formErrors;\n        return form.valid === true;\n    }\n/**\n * 是否已submitted\n * @return {?}\n */\npublic get submitted(): boolean {\n        return this._form && this._form.submitted;\n    }\n/**\n * 是否验证通过\n * @return {?}\n */\npublic get valid(): boolean {\n        return this._form && this._form.valid === true;\n    }\n/**\n * 是否验证不通过\n * @return {?}\n */\npublic get invalid(): boolean {\n        return this._form && this._form.invalid === true;\n    }\n/**\n * 是否存在错误\n * @param {?=} name\n * @return {?}\n */\npublic hasError(name?: string): boolean {\n        if (name) {\n            return this.getError(name) !== null;\n        }\n\n        return this.formErrors.length > 0;\n    }\n/**\n * 当存在多个错误消息时，用此方法获取其中的第一个非空错误显示\n * @return {?}\n */\npublic firstError(): string | null {\n        const /** @type {?} */ err = this.formErrors[0];\n        return (err && err.message) || null;\n    }\n/**\n * 获取控件的一个错误\n * \n * @param {?} name 控件name\n * @return {?} 控件错误消息，或者空(没有错误)\n */\npublic getError(name: string): string | null {\n        const /** @type {?} */ len = this.formErrors.length;\n        for (let /** @type {?} */ i = 0; i < len; i++) {\n            const /** @type {?} */ err = this.formErrors[i];\n            if (err.hasOwnProperty(name)) {\n                return err[name];\n            }\n        }\n\n        return null;\n    }\n\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n    selector: 'form-validation',\n    template: `\n        <div class=\"error\" *ngIf=\"showByName() && hasError(name)\">\n            {{getError(name)}}\n        </div>\n        <div class=\"error\" *ngIf=\"!showByName() && hasError()\">\n            {{firstError()}}\n        </div>\n    `\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: NgForm, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'messages': [{ type: Input },],\n'name': [{ type: Input },],\n};\n}\n\nfunction FormValidation_tsickle_Closure_declarations() {\n/** @type {?} */\nFormValidation.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nFormValidation.ctorParameters;\n/** @type {?} */\nFormValidation.propDecorators;\n/**\n * 自定义错误消息\n * @type {?}\n */\nFormValidation.prototype.messages;\n/**\n * 控件名称\n * @type {?}\n */\nFormValidation.prototype.name;\n/**\n * 验证结果，例如: [{username: '必须填写'}, {password: '输入非法'}]\n * @type {?}\n */\nFormValidation.prototype.formErrors;\n/** @type {?} */\nFormValidation.prototype.defaultValidationMessages;\n/** @type {?} */\nFormValidation.prototype._element;\n/** @type {?} */\nFormValidation.prototype._form;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright 厦门乾元盛世科技有限公司 All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file.\n */\n\n/**\n * Import Angular\n */\n\nimport { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\n\n/** Import WeUI Components */\n\nimport { WeUIFormControl } from './input/weui.form.control';\nimport { WeUIBadge } from './badge/weui.badge';\nimport { WeUIButton } from './button/weui.button';\nimport { WeUISubmit } from './button/weui.submit';\nimport { WeUICheckbox } from './input/weui.checkbox';\nimport { WeUIDatePicker } from './picker/weui.date.picker';\nimport { WeUIFooter, WeUIFooterText, WeUIFooterLinks, WeUIFooterLink } from './footer/weui.footer';\nimport { WeUIGallery } from './gallery/weui.gallery';\nimport { WeUIInput } from './input/weui.input';\nimport { WeUIItems } from './list/weui.items';\nimport { WeUIItem } from './list/weui.item';\nimport { WeUILink } from './list/weui.link';\nimport { WeUILoadmore } from './loadmore/weui.loadmore';\nimport { WeUINavBar } from './navbar/weui.navbar';\nimport { WeUINavBarItem } from './navbar/weui.navbar.item';\nimport { WeUIPicker } from './picker/weui.picker';\nimport { WeUIPickerGroup } from './picker/weui-picker-group';\nimport { WeUIProgressBar } from './progress/weui.progress';\nimport { WeUIRadio } from './input/weui.radio';\nimport { WeUISearchBar } from './searchbar/weui.searchbar';\nimport { WeUISelect } from './input/weui.select';\nimport { WeUISlider } from './slider/weui.slider';\nimport { WeUISwitch } from './input/weui.switch';\nimport { WeUITabBar } from './tabbar/weui.tabbar';\nimport { WeUITabBarItem } from './tabbar/weui.tabbar.item';\nimport { WeUITips } from './list/weui.tips';\nimport { WeUITitle } from './list/weui.title';\nimport { WeUIUploader } from './uploader/weui.uploader';\nimport { FormValidation } from './validation/form.validation';\n\n/**\n * Import WeUI Overlay Entry Components\n */\n\nimport { WeUIActionSheet } from './actionsheet/weui.actionsheet';\nimport { WeUIDialog } from './dialog/weui.dialog';\nimport { WeUIToast } from './toast/weui.toast';\nimport { WeUITopTips } from './toptips/weui.toptip';\nimport { Layer } from './overlay/layer';\nimport { WeUIPickerService } from './picker/weui.picker.service';\n/**\n * \\@name WeUIModule\n * \\@description \n * WeUIModule is an NgModule that provides weui-style TypeScript/JavaScript components.\n * @author fbchen 2017-03-08\n */\nexport class WeUIModule {\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n    imports: [\n        CommonModule,\n        FormsModule\n    ],\n    declarations: [\n        WeUIFormControl,\n        WeUIButton,\n        WeUISubmit,\n        WeUIInput,\n        WeUIRadio,\n        WeUICheckbox,\n        WeUISwitch,\n        WeUISelect,\n        WeUISlider,\n        WeUIGallery,\n        WeUIUploader,\n        WeUIItems,\n        WeUIItem,\n        WeUILink,\n        WeUITitle,\n        WeUITips,\n        WeUIBadge,\n        WeUIFooter,\n        WeUIFooterText,\n        WeUIFooterLinks,\n        WeUIFooterLink,\n        WeUILoadmore,\n        WeUIProgressBar,\n        WeUIActionSheet,\n        WeUIDialog,\n        WeUIToast,\n        WeUITopTips,\n        WeUIPicker,\n        WeUIDatePicker,\n        WeUIPickerGroup,\n        WeUISearchBar,\n        WeUINavBar,\n        WeUINavBarItem,\n        WeUITabBar,\n        WeUITabBarItem,\n        FormValidation\n    ],\n    exports: [\n        WeUIFormControl,\n        WeUIButton,\n        WeUISubmit,\n        WeUIInput,\n        WeUIRadio,\n        WeUICheckbox,\n        WeUISwitch,\n        WeUISelect,\n        WeUISlider,\n        WeUIGallery,\n        WeUIUploader,\n        WeUIItems,\n        WeUIItem,\n        WeUILink,\n        WeUITitle,\n        WeUITips,\n        WeUIBadge,\n        WeUIFooter,\n        WeUIFooterText,\n        WeUIFooterLinks,\n        WeUIFooterLink,\n        WeUILoadmore,\n        WeUIProgressBar,\n        WeUIActionSheet,\n        WeUIDialog,\n        WeUIToast,\n        WeUITopTips,\n        WeUIPicker,\n        WeUIDatePicker,\n        WeUISearchBar,\n        WeUINavBar,\n        WeUINavBarItem,\n        WeUITabBar,\n        WeUITabBarItem,\n        FormValidation\n    ],\n    entryComponents: [\n        WeUIActionSheet,\n        WeUIDialog,\n        WeUIToast,\n        WeUITopTips,\n        WeUIPicker,\n        WeUIDatePicker\n    ],\n    providers: [\n        Layer,\n        WeUIPickerService\n    ]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction WeUIModule_tsickle_Closure_declarations() {\n/** @type {?} */\nWeUIModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nWeUIModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { IScheduler } from '../Scheduler';\nimport { Action } from '../scheduler/Action';\nimport { Subject } from '../Subject';\nimport { Operator } from '../Operator';\nimport { async } from '../scheduler/async';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { Subscription } from '../Subscription';\nimport { isNumeric } from '../util/isNumeric';\nimport { isScheduler } from '../util/isScheduler';\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Branch out the source Observable values as a nested Observable periodically\n * in time.\n *\n * <span class=\"informal\">It's like {@link bufferTime}, but emits a nested\n * Observable instead of an array.</span>\n *\n * <img src=\"./img/windowTime.png\" width=\"100%\">\n *\n * Returns an Observable that emits windows of items it collects from the source\n * Observable. The output Observable starts a new window periodically, as\n * determined by the `windowCreationInterval` argument. It emits each window\n * after a fixed timespan, specified by the `windowTimeSpan` argument. When the\n * source Observable completes or encounters an error, the output Observable\n * emits the current window and propagates the notification from the source\n * Observable. If `windowCreationInterval` is not provided, the output\n * Observable starts a new window when the previous window of duration\n * `windowTimeSpan` completes. If `maxWindowCount` is provided, each window\n * will emit at most fixed number of values. Window will complete immediately\n * after emitting last value and next one still will open as specified by\n * `windowTimeSpan` and `windowCreationInterval` arguments.\n *\n * @example <caption>In every window of 1 second each, emit at most 2 click events</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.windowTime(1000)\n *   .map(win => win.take(2)) // each window has at most 2 emissions\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @example <caption>Every 5 seconds start a window 1 second long, and emit at most 2 click events per window</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.windowTime(1000, 5000)\n *   .map(win => win.take(2)) // each window has at most 2 emissions\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @example <caption>Same as example above but with maxWindowCount instead of take</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.windowTime(1000, 5000, 2) // each window has still at most 2 emissions\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n\n * @see {@link window}\n * @see {@link windowCount}\n * @see {@link windowToggle}\n * @see {@link windowWhen}\n * @see {@link bufferTime}\n *\n * @param {number} windowTimeSpan The amount of time to fill each window.\n * @param {number} [windowCreationInterval] The interval at which to start new\n * windows.\n * @param {number} [maxWindowSize=Number.POSITIVE_INFINITY] Max number of\n * values each window can emit before completion.\n * @param {Scheduler} [scheduler=async] The scheduler on which to schedule the\n * intervals that determine window boundaries.\n * @return {Observable<Observable<T>>} An observable of windows, which in turn\n * are Observables.\n * @method windowTime\n * @owner Observable\n */\nexport function windowTime<T>(windowTimeSpan: number,\n                              scheduler?: IScheduler): OperatorFunction<T, Observable<T>>;\nexport function windowTime<T>(windowTimeSpan: number,\n                              windowCreationInterval: number,\n                              scheduler?: IScheduler): OperatorFunction<T, Observable<T>>;\nexport function windowTime<T>(windowTimeSpan: number,\n                              windowCreationInterval: number,\n                              maxWindowSize: number,\n                              scheduler?: IScheduler): OperatorFunction<T, Observable<T>>;\n\nexport function windowTime<T>(windowTimeSpan: number): OperatorFunction<T, Observable<T>> {\n  let scheduler: IScheduler = async;\n  let windowCreationInterval: number = null;\n  let maxWindowSize: number = Number.POSITIVE_INFINITY;\n\n  if (isScheduler(arguments[3])) {\n    scheduler = arguments[3];\n  }\n\n  if (isScheduler(arguments[2])) {\n    scheduler = arguments[2];\n  } else if (isNumeric(arguments[2])) {\n    maxWindowSize = arguments[2];\n  }\n\n  if (isScheduler(arguments[1])) {\n    scheduler = arguments[1];\n  } else if (isNumeric(arguments[1])) {\n    windowCreationInterval = arguments[1];\n  }\n\n  return function windowTimeOperatorFunction(source: Observable<T>) {\n    return source.lift(new WindowTimeOperator<T>(windowTimeSpan, windowCreationInterval, maxWindowSize, scheduler));\n  };\n}\n\nclass WindowTimeOperator<T> implements Operator<T, Observable<T>> {\n\n  constructor(private windowTimeSpan: number,\n              private windowCreationInterval: number | null,\n              private maxWindowSize: number,\n              private scheduler: IScheduler) {\n  }\n\n  call(subscriber: Subscriber<Observable<T>>, source: any): any {\n    return source.subscribe(new WindowTimeSubscriber(\n      subscriber, this.windowTimeSpan, this.windowCreationInterval, this.maxWindowSize, this.scheduler\n    ));\n  }\n}\n\ninterface CreationState<T> {\n  windowTimeSpan: number;\n  windowCreationInterval: number;\n  subscriber: WindowTimeSubscriber<T>;\n  scheduler: IScheduler;\n}\n\ninterface TimeSpanOnlyState<T> {\n    window: CountedSubject<T>;\n    windowTimeSpan: number;\n    subscriber: WindowTimeSubscriber<T>;\n  }\n\ninterface CloseWindowContext<T> {\n  action: Action<CreationState<T>>;\n  subscription: Subscription;\n}\n\ninterface CloseState<T> {\n  subscriber: WindowTimeSubscriber<T>;\n  window: CountedSubject<T>;\n  context: CloseWindowContext<T>;\n}\n\nclass CountedSubject<T> extends Subject<T> {\n  private _numberOfNextedValues: number = 0;\n\n  next(value?: T): void {\n    this._numberOfNextedValues++;\n    super.next(value);\n  }\n\n  get numberOfNextedValues(): number {\n    return this._numberOfNextedValues;\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass WindowTimeSubscriber<T> extends Subscriber<T> {\n  private windows: CountedSubject<T>[] = [];\n\n  constructor(protected destination: Subscriber<Observable<T>>,\n              private windowTimeSpan: number,\n              private windowCreationInterval: number | null,\n              private maxWindowSize: number,\n              private scheduler: IScheduler) {\n    super(destination);\n\n    const window = this.openWindow();\n    if (windowCreationInterval !== null && windowCreationInterval >= 0) {\n      const closeState: CloseState<T> = { subscriber: this, window, context: <any>null };\n      const creationState: CreationState<T> = { windowTimeSpan, windowCreationInterval, subscriber: this, scheduler };\n      this.add(scheduler.schedule(dispatchWindowClose, windowTimeSpan, closeState));\n      this.add(scheduler.schedule(dispatchWindowCreation, windowCreationInterval, creationState));\n    } else {\n      const timeSpanOnlyState: TimeSpanOnlyState<T> = { subscriber: this, window, windowTimeSpan };\n      this.add(scheduler.schedule(dispatchWindowTimeSpanOnly, windowTimeSpan, timeSpanOnlyState));\n    }\n  }\n\n  protected _next(value: T): void {\n    const windows = this.windows;\n    const len = windows.length;\n    for (let i = 0; i < len; i++) {\n      const window = windows[i];\n      if (!window.closed) {\n        window.next(value);\n        if (window.numberOfNextedValues >= this.maxWindowSize) {\n          this.closeWindow(window);\n        }\n      }\n    }\n  }\n\n  protected _error(err: any): void {\n    const windows = this.windows;\n    while (windows.length > 0) {\n      windows.shift().error(err);\n    }\n    this.destination.error(err);\n  }\n\n  protected _complete(): void {\n    const windows = this.windows;\n    while (windows.length > 0) {\n      const window = windows.shift();\n      if (!window.closed) {\n        window.complete();\n      }\n    }\n    this.destination.complete();\n  }\n\n  public openWindow(): CountedSubject<T> {\n    const window = new CountedSubject<T>();\n    this.windows.push(window);\n    const destination = this.destination;\n    destination.next(window);\n    return window;\n  }\n\n  public closeWindow(window: CountedSubject<T>): void {\n    window.complete();\n    const windows = this.windows;\n    windows.splice(windows.indexOf(window), 1);\n  }\n}\n\nfunction dispatchWindowTimeSpanOnly<T>(this: Action<TimeSpanOnlyState<T>>, state: TimeSpanOnlyState<T>): void {\n  const { subscriber, windowTimeSpan, window } = state;\n  if (window) {\n    subscriber.closeWindow(window);\n  }\n  state.window = subscriber.openWindow();\n  this.schedule(state, windowTimeSpan);\n}\n\nfunction dispatchWindowCreation<T>(this: Action<CreationState<T>>, state: CreationState<T>): void {\n  const { windowTimeSpan, subscriber, scheduler, windowCreationInterval } = state;\n  const window = subscriber.openWindow();\n  const action = this;\n  let context: CloseWindowContext<T> = { action, subscription: <any>null };\n  const timeSpanState: CloseState<T> = { subscriber, window, context };\n  context.subscription = scheduler.schedule(dispatchWindowClose, windowTimeSpan, timeSpanState);\n  action.add(context.subscription);\n  action.schedule(state, windowCreationInterval);\n}\n\nfunction dispatchWindowClose<T>(state: CloseState<T>): void {\n  const { subscriber, window, context } = state;\n  if (context && context.action && context.subscription) {\n    context.action.remove(context.subscription);\n  }\n  subscriber.closeWindow(window);\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { Subject } from '../Subject';\nimport { Subscription } from '../Subscription';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Branch out the source Observable values as a nested Observable starting from\n * an emission from `openings` and ending when the output of `closingSelector`\n * emits.\n *\n * <span class=\"informal\">It's like {@link bufferToggle}, but emits a nested\n * Observable instead of an array.</span>\n *\n * <img src=\"./img/windowToggle.png\" width=\"100%\">\n *\n * Returns an Observable that emits windows of items it collects from the source\n * Observable. The output Observable emits windows that contain those items\n * emitted by the source Observable between the time when the `openings`\n * Observable emits an item and when the Observable returned by\n * `closingSelector` emits an item.\n *\n * @example <caption>Every other second, emit the click events from the next 500ms</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var openings = Rx.Observable.interval(1000);\n * var result = clicks.windowToggle(openings, i =>\n *   i % 2 ? Rx.Observable.interval(500) : Rx.Observable.empty()\n * ).mergeAll();\n * result.subscribe(x => console.log(x));\n *\n * @see {@link window}\n * @see {@link windowCount}\n * @see {@link windowTime}\n * @see {@link windowWhen}\n * @see {@link bufferToggle}\n *\n * @param {Observable<O>} openings An observable of notifications to start new\n * windows.\n * @param {function(value: O): Observable} closingSelector A function that takes\n * the value emitted by the `openings` observable and returns an Observable,\n * which, when it emits (either `next` or `complete`), signals that the\n * associated window should complete.\n * @return {Observable<Observable<T>>} An observable of windows, which in turn\n * are Observables.\n * @method windowToggle\n * @owner Observable\n */\nexport function windowToggle<T, O>(openings: Observable<O>,\n                                   closingSelector: (openValue: O) => Observable<any>): OperatorFunction<T, Observable<T>> {\n  return (source: Observable<T>) => source.lift(new WindowToggleOperator<T, O>(openings, closingSelector));\n}\n\nclass WindowToggleOperator<T, O> implements Operator<T, Observable<T>> {\n\n  constructor(private openings: Observable<O>,\n              private closingSelector: (openValue: O) => Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<Observable<T>>, source: any): any {\n    return source.subscribe(new WindowToggleSubscriber(\n      subscriber, this.openings, this.closingSelector\n    ));\n  }\n}\n\ninterface WindowContext<T> {\n  window: Subject<T>;\n  subscription: Subscription;\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass WindowToggleSubscriber<T, O> extends OuterSubscriber<T, any> {\n  private contexts: WindowContext<T>[] = [];\n  private openSubscription: Subscription;\n\n  constructor(destination: Subscriber<Observable<T>>,\n              private openings: Observable<O>,\n              private closingSelector: (openValue: O) => Observable<any>) {\n    super(destination);\n    this.add(this.openSubscription = subscribeToResult(this, openings, openings));\n  }\n\n  protected _next(value: T) {\n    const { contexts } = this;\n    if (contexts) {\n      const len = contexts.length;\n      for (let i = 0; i < len; i++) {\n        contexts[i].window.next(value);\n      }\n    }\n  }\n\n  protected _error(err: any) {\n\n    const { contexts } = this;\n    this.contexts = null;\n\n    if (contexts) {\n      const len = contexts.length;\n      let index = -1;\n\n      while (++index < len) {\n        const context = contexts[index];\n        context.window.error(err);\n        context.subscription.unsubscribe();\n      }\n    }\n\n    super._error(err);\n  }\n\n  protected _complete() {\n    const { contexts } = this;\n    this.contexts = null;\n    if (contexts) {\n      const len = contexts.length;\n      let index = -1;\n      while (++index < len) {\n        const context = contexts[index];\n        context.window.complete();\n        context.subscription.unsubscribe();\n      }\n    }\n    super._complete();\n  }\n\n  protected _unsubscribe() {\n    const { contexts } = this;\n    this.contexts = null;\n    if (contexts) {\n      const len = contexts.length;\n      let index = -1;\n      while (++index < len) {\n        const context = contexts[index];\n        context.window.unsubscribe();\n        context.subscription.unsubscribe();\n      }\n    }\n  }\n\n  notifyNext(outerValue: any, innerValue: any,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, any>): void {\n\n    if (outerValue === this.openings) {\n\n      const { closingSelector } = this;\n      const closingNotifier = tryCatch(closingSelector)(innerValue);\n\n      if (closingNotifier === errorObject) {\n        return this.error(errorObject.e);\n      } else {\n        const window = new Subject<T>();\n        const subscription = new Subscription();\n        const context = { window, subscription };\n        this.contexts.push(context);\n        const innerSubscription = subscribeToResult(this, closingNotifier, context);\n\n        if (innerSubscription.closed) {\n          this.closeWindow(this.contexts.length - 1);\n        } else {\n          (<any> innerSubscription).context = context;\n          subscription.add(innerSubscription);\n        }\n\n        this.destination.next(window);\n\n      }\n    } else {\n      this.closeWindow(this.contexts.indexOf(outerValue));\n    }\n  }\n\n  notifyError(err: any): void {\n    this.error(err);\n  }\n\n  notifyComplete(inner: Subscription): void {\n    if (inner !== this.openSubscription) {\n      this.closeWindow(this.contexts.indexOf((<any> inner).context));\n    }\n  }\n\n  private closeWindow(index: number): void {\n    if (index === -1) {\n      return;\n    }\n\n    const { contexts } = this;\n    const context = contexts[index];\n    const { window, subscription } = context;\n    contexts.splice(index, 1);\n    window.complete();\n    subscription.unsubscribe();\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { Subject } from '../Subject';\nimport { Subscription } from '../Subscription';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Branch out the source Observable values as a nested Observable using a\n * factory function of closing Observables to determine when to start a new\n * window.\n *\n * <span class=\"informal\">It's like {@link bufferWhen}, but emits a nested\n * Observable instead of an array.</span>\n *\n * <img src=\"./img/windowWhen.png\" width=\"100%\">\n *\n * Returns an Observable that emits windows of items it collects from the source\n * Observable. The output Observable emits connected, non-overlapping windows.\n * It emits the current window and opens a new one whenever the Observable\n * produced by the specified `closingSelector` function emits an item. The first\n * window is opened immediately when subscribing to the output Observable.\n *\n * @example <caption>Emit only the first two clicks events in every window of [1-5] random seconds</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks\n *   .windowWhen(() => Rx.Observable.interval(1000 + Math.random() * 4000))\n *   .map(win => win.take(2)) // each window has at most 2 emissions\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @see {@link window}\n * @see {@link windowCount}\n * @see {@link windowTime}\n * @see {@link windowToggle}\n * @see {@link bufferWhen}\n *\n * @param {function(): Observable} closingSelector A function that takes no\n * arguments and returns an Observable that signals (on either `next` or\n * `complete`) when to close the previous window and start a new one.\n * @return {Observable<Observable<T>>} An observable of windows, which in turn\n * are Observables.\n * @method windowWhen\n * @owner Observable\n */\nexport function windowWhen<T>(closingSelector: () => Observable<any>): OperatorFunction<T, Observable<T>> {\n  return function windowWhenOperatorFunction(source: Observable<T>) {\n    return source.lift(new WindowOperator<T>(closingSelector));\n  };\n}\n\nclass WindowOperator<T> implements Operator<T, Observable<T>> {\n  constructor(private closingSelector: () => Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<Observable<T>>, source: any): any {\n    return source.subscribe(new WindowSubscriber(subscriber, this.closingSelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass WindowSubscriber<T> extends OuterSubscriber<T, any> {\n  private window: Subject<T>;\n  private closingNotification: Subscription;\n\n  constructor(protected destination: Subscriber<Observable<T>>,\n              private closingSelector: () => Observable<any>) {\n    super(destination);\n    this.openWindow();\n  }\n\n  notifyNext(outerValue: T, innerValue: any,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, any>): void {\n    this.openWindow(innerSub);\n  }\n\n  notifyError(error: any, innerSub: InnerSubscriber<T, any>): void {\n    this._error(error);\n  }\n\n  notifyComplete(innerSub: InnerSubscriber<T, any>): void {\n    this.openWindow(innerSub);\n  }\n\n  protected _next(value: T): void {\n    this.window.next(value);\n  }\n\n  protected _error(err: any): void {\n    this.window.error(err);\n    this.destination.error(err);\n    this.unsubscribeClosingNotification();\n  }\n\n  protected _complete(): void {\n    this.window.complete();\n    this.destination.complete();\n    this.unsubscribeClosingNotification();\n  }\n\n  private unsubscribeClosingNotification(): void {\n    if (this.closingNotification) {\n      this.closingNotification.unsubscribe();\n    }\n  }\n\n  private openWindow(innerSub: InnerSubscriber<T, any> = null): void {\n    if (innerSub) {\n      this.remove(innerSub);\n      innerSub.unsubscribe();\n    }\n\n    const prevWindow = this.window;\n    if (prevWindow) {\n      prevWindow.complete();\n    }\n\n    const window = this.window = new Subject<T>();\n    this.destination.next(window);\n\n    const closingNotifier = tryCatch(this.closingSelector)();\n    if (closingNotifier === errorObject) {\n      const err = errorObject.e;\n      this.destination.error(err);\n      this.window.error(err);\n    } else {\n      this.add(this.closingNotification = subscribeToResult(this, closingNotifier));\n    }\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable, ObservableInput } from '../Observable';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function withLatestFrom<T, R>(project: (v1: T) => R): OperatorFunction<T, R>;\nexport function withLatestFrom<T, T2, R>(v2: ObservableInput<T2>, project: (v1: T, v2: T2) => R): OperatorFunction<T, R>;\nexport function withLatestFrom<T, T2, T3, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, project: (v1: T, v2: T2, v3: T3) => R): OperatorFunction<T, R>;\nexport function withLatestFrom<T, T2, T3, T4, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, project: (v1: T, v2: T2, v3: T3, v4: T4) => R): OperatorFunction<T, R>;\nexport function withLatestFrom<T, T2, T3, T4, T5, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5) => R): OperatorFunction<T, R>;\nexport function withLatestFrom<T, T2, T3, T4, T5, T6, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6) => R): OperatorFunction<T, R> ;\nexport function withLatestFrom<T, T2>(v2: ObservableInput<T2>): OperatorFunction<T, [T, T2]>;\nexport function withLatestFrom<T, T2, T3>(v2: ObservableInput<T2>, v3: ObservableInput<T3>): OperatorFunction<T, [T, T2, T3]>;\nexport function withLatestFrom<T, T2, T3, T4>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>): OperatorFunction<T, [T, T2, T3, T4]>;\nexport function withLatestFrom<T, T2, T3, T4, T5>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>): OperatorFunction<T, [T, T2, T3, T4, T5]>;\nexport function withLatestFrom<T, T2, T3, T4, T5, T6>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>): OperatorFunction<T, [T, T2, T3, T4, T5, T6]> ;\nexport function withLatestFrom<T, R>(...observables: Array<ObservableInput<any> | ((...values: Array<any>) => R)>): OperatorFunction<T, R>;\nexport function withLatestFrom<T, R>(array: ObservableInput<any>[]): OperatorFunction<T, R>;\nexport function withLatestFrom<T, R>(array: ObservableInput<any>[], project: (...values: Array<any>) => R): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Combines the source Observable with other Observables to create an Observable\n * whose values are calculated from the latest values of each, only when the\n * source emits.\n *\n * <span class=\"informal\">Whenever the source Observable emits a value, it\n * computes a formula using that value plus the latest values from other input\n * Observables, then emits the output of that formula.</span>\n *\n * <img src=\"./img/withLatestFrom.png\" width=\"100%\">\n *\n * `withLatestFrom` combines each value from the source Observable (the\n * instance) with the latest values from the other input Observables only when\n * the source emits a value, optionally using a `project` function to determine\n * the value to be emitted on the output Observable. All input Observables must\n * emit at least one value before the output Observable will emit a value.\n *\n * @example <caption>On every click event, emit an array with the latest timer event plus the click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var timer = Rx.Observable.interval(1000);\n * var result = clicks.withLatestFrom(timer);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link combineLatest}\n *\n * @param {ObservableInput} other An input Observable to combine with the source\n * Observable. More than one input Observables may be given as argument.\n * @param {Function} [project] Projection function for combining values\n * together. Receives all values in order of the Observables passed, where the\n * first parameter is a value from the source Observable. (e.g.\n * `a.withLatestFrom(b, c, (a1, b1, c1) => a1 + b1 + c1)`). If this is not\n * passed, arrays will be emitted on the output Observable.\n * @return {Observable} An Observable of projected values from the most recent\n * values from each input Observable, or an array of the most recent values from\n * each input Observable.\n * @method withLatestFrom\n * @owner Observable\n */\nexport function withLatestFrom<T, R>(...args: Array<ObservableInput<any> | ((...values: Array<any>) => R)>): OperatorFunction<T, R> {\n  return (source: Observable<T>) => {\n    let project: any;\n    if (typeof args[args.length - 1] === 'function') {\n      project = args.pop();\n    }\n    const observables = <Observable<any>[]>args;\n    return source.lift(new WithLatestFromOperator(observables, project));\n  };\n}\n\nclass WithLatestFromOperator<T, R> implements Operator<T, R> {\n  constructor(private observables: Observable<any>[],\n              private project?: (...values: any[]) => Observable<R>) {\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new WithLatestFromSubscriber(subscriber, this.observables, this.project));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass WithLatestFromSubscriber<T, R> extends OuterSubscriber<T, R> {\n  private values: any[];\n  private toRespond: number[] = [];\n\n  constructor(destination: Subscriber<R>,\n              private observables: Observable<any>[],\n              private project?: (...values: any[]) => Observable<R>) {\n    super(destination);\n    const len = observables.length;\n    this.values = new Array(len);\n\n    for (let i = 0; i < len; i++) {\n      this.toRespond.push(i);\n    }\n\n    for (let i = 0; i < len; i++) {\n      let observable = observables[i];\n      this.add(subscribeToResult<T, R>(this, observable, <any>observable, i));\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.values[outerIndex] = innerValue;\n    const toRespond = this.toRespond;\n    if (toRespond.length > 0) {\n      const found = toRespond.indexOf(outerIndex);\n      if (found !== -1) {\n        toRespond.splice(found, 1);\n      }\n    }\n  }\n\n  notifyComplete() {\n    // noop\n  }\n\n  protected _next(value: T) {\n    if (this.toRespond.length === 0) {\n      const args = [value, ...this.values];\n      if (this.project) {\n        this._tryProject(args);\n      } else {\n        this.destination.next(args);\n      }\n    }\n  }\n\n  private _tryProject(args: any[]) {\n    let result: any;\n    try {\n      result = this.project.apply(this, args);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.destination.next(result);\n  }\n}\n","import { Observable, ObservableInput } from '../Observable';\nimport { ArrayObservable } from '../observable/ArrayObservable';\nimport { isArray } from '../util/isArray';\nimport { Operator } from '../Operator';\nimport { PartialObserver } from '../Observer';\nimport { Subscriber } from '../Subscriber';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { iterator as Symbol_iterator } from '../symbol/iterator';\nimport { OperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function zip<T, R>(project: (v1: T) => R): OperatorFunction<T, R>;\nexport function zip<T, T2, R>(v2: ObservableInput<T2>, project: (v1: T, v2: T2) => R): OperatorFunction<T, R>;\nexport function zip<T, T2, T3, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, project: (v1: T, v2: T2, v3: T3) => R): OperatorFunction<T, R>;\nexport function zip<T, T2, T3, T4, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, project: (v1: T, v2: T2, v3: T3, v4: T4) => R): OperatorFunction<T, R>;\nexport function zip<T, T2, T3, T4, T5, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5) => R): OperatorFunction<T, R>;\nexport function zip<T, T2, T3, T4, T5, T6, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6) => R): OperatorFunction<T, R> ;\nexport function zip<T, T2>(v2: ObservableInput<T2>): OperatorFunction<T, [T, T2]>;\nexport function zip<T, T2, T3>(v2: ObservableInput<T2>, v3: ObservableInput<T3>): OperatorFunction<T, [T, T2, T3]>;\nexport function zip<T, T2, T3, T4>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>): OperatorFunction<T, [T, T2, T3, T4]>;\nexport function zip<T, T2, T3, T4, T5>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>): OperatorFunction<T, [T, T2, T3, T4, T5]>;\nexport function zip<T, T2, T3, T4, T5, T6>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>): OperatorFunction<T, [T, T2, T3, T4, T5, T6]> ;\nexport function zip<T, R>(...observables: Array<ObservableInput<T> | ((...values: Array<T>) => R)>): OperatorFunction<T, R>;\nexport function zip<T, R>(array: Array<ObservableInput<T>>): OperatorFunction<T, R>;\nexport function zip<T, TOther, R>(array: Array<ObservableInput<TOther>>, project: (v1: T, ...values: Array<TOther>) => R): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * @param observables\n * @return {Observable<R>}\n * @method zip\n * @owner Observable\n */\nexport function zip<T, R>(...observables: Array<ObservableInput<any> | ((...values: Array<any>) => R)>): OperatorFunction<T, R> {\n  return function zipOperatorFunction(source: Observable<T>) {\n    return source.lift.call(zipStatic<R>(source, ...observables));\n  };\n}\n\n/* tslint:disable:max-line-length */\nexport function zipStatic<T, T2>(v1: ObservableInput<T>, v2: ObservableInput<T2>): Observable<[T, T2]>;\nexport function zipStatic<T, T2, T3>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>): Observable<[T, T2, T3]>;\nexport function zipStatic<T, T2, T3, T4>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>): Observable<[T, T2, T3, T4]>;\nexport function zipStatic<T, T2, T3, T4, T5>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>): Observable<[T, T2, T3, T4, T5]>;\nexport function zipStatic<T, T2, T3, T4, T5, T6>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>): Observable<[T, T2, T3, T4, T5, T6]>;\n\nexport function zipStatic<T, R>(v1: ObservableInput<T>, project: (v1: T) => R): Observable<R>;\nexport function zipStatic<T, T2, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, project: (v1: T, v2: T2) => R): Observable<R>;\nexport function zipStatic<T, T2, T3, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, project: (v1: T, v2: T2, v3: T3) => R): Observable<R>;\nexport function zipStatic<T, T2, T3, T4, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, project: (v1: T, v2: T2, v3: T3, v4: T4) => R): Observable<R>;\nexport function zipStatic<T, T2, T3, T4, T5, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5) => R): Observable<R>;\nexport function zipStatic<T, T2, T3, T4, T5, T6, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6) => R): Observable<R>;\n\nexport function zipStatic<T>(array: ObservableInput<T>[]): Observable<T[]>;\nexport function zipStatic<R>(array: ObservableInput<any>[]): Observable<R>;\nexport function zipStatic<T, R>(array: ObservableInput<T>[], project: (...values: Array<T>) => R): Observable<R>;\nexport function zipStatic<R>(array: ObservableInput<any>[], project: (...values: Array<any>) => R): Observable<R>;\n\nexport function zipStatic<T>(...observables: Array<ObservableInput<T>>): Observable<T[]>;\nexport function zipStatic<T, R>(...observables: Array<ObservableInput<T> | ((...values: Array<T>) => R)>): Observable<R>;\nexport function zipStatic<R>(...observables: Array<ObservableInput<any> | ((...values: Array<any>) => R)>): Observable<R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Combines multiple Observables to create an Observable whose values are calculated from the values, in order, of each\n * of its input Observables.\n *\n * If the latest parameter is a function, this function is used to compute the created value from the input values.\n * Otherwise, an array of the input values is returned.\n *\n * @example <caption>Combine age and name from different sources</caption>\n *\n * let age$ = Observable.of<number>(27, 25, 29);\n * let name$ = Observable.of<string>('Foo', 'Bar', 'Beer');\n * let isDev$ = Observable.of<boolean>(true, true, false);\n *\n * Observable\n *     .zip(age$,\n *          name$,\n *          isDev$,\n *          (age: number, name: string, isDev: boolean) => ({ age, name, isDev }))\n *     .subscribe(x => console.log(x));\n *\n * // outputs\n * // { age: 27, name: 'Foo', isDev: true }\n * // { age: 25, name: 'Bar', isDev: true }\n * // { age: 29, name: 'Beer', isDev: false }\n *\n * @param observables\n * @return {Observable<R>}\n * @static true\n * @name zip\n * @owner Observable\n */\nexport function zipStatic<T, R>(...observables: Array<ObservableInput<any> | ((...values: Array<any>) => R)>): Observable<R> {\n  const project = <((...ys: Array<any>) => R)> observables[observables.length - 1];\n  if (typeof project === 'function') {\n    observables.pop();\n  }\n  return new ArrayObservable(observables).lift(new ZipOperator(project));\n}\n\nexport class ZipOperator<T, R> implements Operator<T, R> {\n\n  project: (...values: Array<any>) => R;\n\n  constructor(project?: (...values: Array<any>) => R) {\n    this.project = project;\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new ZipSubscriber(subscriber, this.project));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class ZipSubscriber<T, R> extends Subscriber<T> {\n  private values: any;\n  private project: (...values: Array<any>) => R;\n  private iterators: LookAheadIterator<any>[] = [];\n  private active = 0;\n\n  constructor(destination: Subscriber<R>,\n              project?: (...values: Array<any>) => R,\n              values: any = Object.create(null)) {\n    super(destination);\n    this.project = (typeof project === 'function') ? project : null;\n    this.values = values;\n  }\n\n  protected _next(value: any) {\n    const iterators = this.iterators;\n    if (isArray(value)) {\n      iterators.push(new StaticArrayIterator(value));\n    } else if (typeof value[Symbol_iterator] === 'function') {\n      iterators.push(new StaticIterator(value[Symbol_iterator]()));\n    } else {\n      iterators.push(new ZipBufferIterator(this.destination, this, value));\n    }\n  }\n\n  protected _complete() {\n    const iterators = this.iterators;\n    const len = iterators.length;\n\n    if (len === 0) {\n      this.destination.complete();\n      return;\n    }\n\n    this.active = len;\n    for (let i = 0; i < len; i++) {\n      let iterator: ZipBufferIterator<any, any> = <any>iterators[i];\n      if (iterator.stillUnsubscribed) {\n        this.add(iterator.subscribe(iterator, i));\n      } else {\n        this.active--; // not an observable\n      }\n    }\n  }\n\n  notifyInactive() {\n    this.active--;\n    if (this.active === 0) {\n      this.destination.complete();\n    }\n  }\n\n  checkIterators() {\n    const iterators = this.iterators;\n    const len = iterators.length;\n    const destination = this.destination;\n\n    // abort if not all of them have values\n    for (let i = 0; i < len; i++) {\n      let iterator = iterators[i];\n      if (typeof iterator.hasValue === 'function' && !iterator.hasValue()) {\n        return;\n      }\n    }\n\n    let shouldComplete = false;\n    const args: any[] = [];\n    for (let i = 0; i < len; i++) {\n      let iterator = iterators[i];\n      let result = iterator.next();\n\n      // check to see if it's completed now that you've gotten\n      // the next value.\n      if (iterator.hasCompleted()) {\n        shouldComplete = true;\n      }\n\n      if (result.done) {\n        destination.complete();\n        return;\n      }\n\n      args.push(result.value);\n    }\n\n    if (this.project) {\n      this._tryProject(args);\n    } else {\n      destination.next(args);\n    }\n\n    if (shouldComplete) {\n      destination.complete();\n    }\n  }\n\n  protected _tryProject(args: any[]) {\n    let result: any;\n    try {\n      result = this.project.apply(this, args);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.destination.next(result);\n  }\n}\n\ninterface LookAheadIterator<T> extends Iterator<T> {\n  hasValue(): boolean;\n  hasCompleted(): boolean;\n}\n\nclass StaticIterator<T> implements LookAheadIterator<T> {\n  private nextResult: IteratorResult<T>;\n\n  constructor(private iterator: Iterator<T>) {\n    this.nextResult = iterator.next();\n  }\n\n  hasValue() {\n    return true;\n  }\n\n  next(): IteratorResult<T> {\n    const result = this.nextResult;\n    this.nextResult = this.iterator.next();\n    return result;\n  }\n\n  hasCompleted() {\n    const nextResult = this.nextResult;\n    return nextResult && nextResult.done;\n  }\n}\n\nclass StaticArrayIterator<T> implements LookAheadIterator<T> {\n  private index = 0;\n  private length = 0;\n\n  constructor(private array: T[]) {\n    this.length = array.length;\n  }\n\n  [Symbol_iterator]() {\n    return this;\n  }\n\n  next(value?: any): IteratorResult<T> {\n    const i = this.index++;\n    const array = this.array;\n    return i < this.length ? { value: array[i], done: false } : { value: null, done: true };\n  }\n\n  hasValue() {\n    return this.array.length > this.index;\n  }\n\n  hasCompleted() {\n    return this.array.length === this.index;\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass ZipBufferIterator<T, R> extends OuterSubscriber<T, R> implements LookAheadIterator<T> {\n  stillUnsubscribed = true;\n  buffer: T[] = [];\n  isComplete = false;\n\n  constructor(destination: PartialObserver<T>,\n              private parent: ZipSubscriber<T, R>,\n              private observable: Observable<T>) {\n    super(destination);\n  }\n\n  [Symbol_iterator]() {\n    return this;\n  }\n\n  // NOTE: there is actually a name collision here with Subscriber.next and Iterator.next\n  //    this is legit because `next()` will never be called by a subscription in this case.\n  next(): IteratorResult<T> {\n    const buffer = this.buffer;\n    if (buffer.length === 0 && this.isComplete) {\n      return { value: null, done: true };\n    } else {\n      return { value: buffer.shift(), done: false };\n    }\n  }\n\n  hasValue() {\n    return this.buffer.length > 0;\n  }\n\n  hasCompleted() {\n    return this.buffer.length === 0 && this.isComplete;\n  }\n\n  notifyComplete() {\n    if (this.buffer.length > 0) {\n      this.isComplete = true;\n      this.parent.notifyInactive();\n    } else {\n      this.destination.complete();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: any,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.buffer.push(innerValue);\n    this.parent.checkIterators();\n  }\n\n  subscribe(value: any, index: number) {\n    return subscribeToResult<any, any>(this, this.observable, this, index);\n  }\n}\n","/**\n * @license\n * Copyright 厦门乾元盛世科技有限公司 All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file.\n */\n\n\nimport { Component, Input, Renderer2, ElementRef, Inject, Optional, HostBinding } from '@angular/core';\nimport { DefaultValueAccessor } from '@angular/forms';\nimport { COMPOSITION_BUFFER_MODE } from '@angular/forms';\nexport /*abstract*/ class WeUIFormControl extends DefaultValueAccessor {\n/**\n * 计数器\n */\npublic static count = 0;\n/**\n * 控件ID\n */\nid: string;\n/**\n * 控件name\n */\nname: string;\n/**\n * 控件 label\n */\nlabel: string;\n/**\n * 是否禁用\n */\ndisabled = false;\n/**\n * value 属性为 input 元素设定值。<br>\n * \n * 对于不同的输入类型，value 属性的用法也不同：<ul>\n * <li> type=\"button\", \"reset\", \"submit\" - 定义按钮上的显示的文本 </li>\n * <li> type=\"text\", \"password\", \"hidden\" - 定义输入字段的初始值 </li>\n * <li> type=\"checkbox\", \"radio\", \"image\" - 定义与输入相关联的值 </li>\n * </ul>\n * \n * <p>注释：&lt;input type=\"checkbox\"&gt; 和 &lt;input type=\"radio\"&gt; 中必须设置 <code>value</code> 属性。</p>\n * <p>注释：value 属性无法与 <input type=\"file\"> 一同使用。</p>\n */\nvalue: any;\n/**\n * The internal data model\n */\nprotected _value: any = '';\n/**\n * The value of the input ngModel (model -> view)\n * @return {?}\n */\npublic get innerValue() {\n        return this._value;\n    }\n/**\n * The value of the input ngModel (view -> model)\n * @param {?} newValue\n * @return {?}\n */\npublic set innerValue(newValue: any) {\n        if (this._value !== newValue) {\n            this._value = newValue;\n            // view -> model -> outside world (ie. NgModel on this control)\n            this.onChange(newValue);\n        }\n    }\n/**\n * 注册控件\n * @return {?}\n */\npublic static registerControl(): string {\n        return 'weui-control-' + (++WeUIFormControl.count).toString();\n    }\n\n     _cls_cell = true;\n     _cls_control = true;\n/**\n * @param {?} __renderer\n * @param {?} __elementRef\n * @param {?} __compositionMode\n */\nconstructor(\nprivate __renderer: Renderer2,\nprivate __elementRef: ElementRef,\nprivate __compositionMode: boolean) {\n        super(__renderer, __elementRef, __compositionMode);\n        this.id = WeUIFormControl.registerControl();\n    }\n/**\n * Write a new value to the element. (From ControlValueAccessor interface)\n * @param {?} value\n * @return {?}\n */\nwriteValue(value: any): void {\n        this._value = value;\n    }\n/**\n * 设置禁用状态 (From ControlValueAccessor interface)\n * @param {?} isDisabled\n * @return {?}\n */\nsetDisabledState(isDisabled: boolean): void {\n        this.disabled = isDisabled;\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n    selector: 'WeUIFormControl',\n    template: ``\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Renderer2, decorators: [{ type: Inject, args: [Renderer2, ] }, ]},\n{type: ElementRef, decorators: [{ type: Inject, args: [ElementRef, ] }, ]},\n{type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [COMPOSITION_BUFFER_MODE, ] }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'id': [{ type: Input },],\n'name': [{ type: Input },],\n'label': [{ type: Input },],\n'disabled': [{ type: Input },],\n'value': [{ type: Input },],\n'_cls_cell': [{ type: HostBinding, args: ['class.weui-cell', ] },],\n'_cls_control': [{ type: HostBinding, args: ['class.weui-control', ] },],\n};\n}\n\nfunction WeUIFormControl_tsickle_Closure_declarations() {\n/**\n * 计数器\n * @type {?}\n */\nWeUIFormControl.count;\n/** @type {?} */\nWeUIFormControl.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nWeUIFormControl.ctorParameters;\n/** @type {?} */\nWeUIFormControl.propDecorators;\n/**\n * 控件ID\n * @type {?}\n */\nWeUIFormControl.prototype.id;\n/**\n * 控件name\n * @type {?}\n */\nWeUIFormControl.prototype.name;\n/**\n * 控件 label\n * @type {?}\n */\nWeUIFormControl.prototype.label;\n/**\n * 是否禁用\n * @type {?}\n */\nWeUIFormControl.prototype.disabled;\n/**\n * value 属性为 input 元素设定值。<br>\n * \n * 对于不同的输入类型，value 属性的用法也不同：<ul>\n * <li> type=\"button\", \"reset\", \"submit\" - 定义按钮上的显示的文本 </li>\n * <li> type=\"text\", \"password\", \"hidden\" - 定义输入字段的初始值 </li>\n * <li> type=\"checkbox\", \"radio\", \"image\" - 定义与输入相关联的值 </li>\n * </ul>\n * \n * <p>注释：&lt;input type=\"checkbox\"&gt; 和 &lt;input type=\"radio\"&gt; 中必须设置 <code>value</code> 属性。</p>\n * <p>注释：value 属性无法与 <input type=\"file\"> 一同使用。</p>\n * @type {?}\n */\nWeUIFormControl.prototype.value;\n/**\n * The internal data model\n * @type {?}\n */\nWeUIFormControl.prototype._value;\n/** @type {?} */\nWeUIFormControl.prototype._cls_cell;\n/** @type {?} */\nWeUIFormControl.prototype._cls_control;\n/** @type {?} */\nWeUIFormControl.prototype.__renderer;\n/** @type {?} */\nWeUIFormControl.prototype.__elementRef;\n/** @type {?} */\nWeUIFormControl.prototype.__compositionMode;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright 厦门乾元盛世科技有限公司 All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file.\n */\n\n\nimport { Component, Input } from '@angular/core';\n/**\n * 徽章\n */\nexport class WeUIBadge {\n/**\n * 颜色，取值：default、primary、warn等。默认为default。<br>\n * 自定义的颜色名称与色值，可以定义在 工程根目录/src/theme/variables.scss 文件中的 $colors 对象。\n */\ncolor = 'default';\n/**\n * 点\n */\ndot: any;\nconstructor() {\n\n    }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n    selector: 'weui-badge',\n    template: `\n        <span class=\"weui-badge weui-badge_{{color}}\"\n             [ngClass]=\"{'weui-badge_dot': dot !== undefined && dot !== null}\"><ng-content></ng-content></span>`\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'color': [{ type: Input },],\n'dot': [{ type: Input },],\n};\n}\n\nfunction WeUIBadge_tsickle_Closure_declarations() {\n/** @type {?} */\nWeUIBadge.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nWeUIBadge.ctorParameters;\n/** @type {?} */\nWeUIBadge.propDecorators;\n/**\n * 颜色，取值：default、primary、warn等。默认为default。<br>\n * 自定义的颜色名称与色值，可以定义在 工程根目录/src/theme/variables.scss 文件中的 $colors 对象。\n * @type {?}\n */\nWeUIBadge.prototype.color;\n/**\n * 点\n * @type {?}\n */\nWeUIBadge.prototype.dot;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright 厦门乾元盛世科技有限公司 All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file.\n */\n\n\nimport { Component, Input } from '@angular/core';\nexport class WeUIButton {\n/**\n * 颜色，取值：default、primary、warn等。默认为default。<br>\n * 自定义的颜色名称与色值，可以定义在 工程根目录/src/theme/variables.scss 文件中的 $colors 对象。\n */\ncolor = 'default';\n/**\n * 简朴样式 (主要出现此属性)\n */\nplain: string;\n/**\n * 按钮大小 (主要出现此属性)\n */\nmini: string;\n/**\n * 正在加载\n */\nloading = false;\n/**\n * 禁用样式\n */\ndisabled = false;\nconstructor() {\n\n    }\n/**\n * @return {?}\n */\ngetColorStyle(): string {\n        return 'weui-btn_' + (this.plain !== undefined ? 'plain-' : '') + this.color;\n    }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n    selector: 'weui-button',\n    template: `\n        <a href=\"javascript:;\" class=\"weui-btn {{getColorStyle()}}\"\n            [ngClass]=\"{\n                'weui-btn_disabled': disabled && plain == undefined,\n                'weui-btn_plain-disabled': disabled && plain !== undefined,\n                'weui-btn_loading': loading,\n                'weui-btn_mini': mini !== undefined\n            }\">\n            <i class=\"weui-loading\" *ngIf=\"loading\"></i>\n            <ng-content></ng-content>\n        </a>\n    `\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'color': [{ type: Input },],\n'plain': [{ type: Input },],\n'mini': [{ type: Input },],\n'loading': [{ type: Input },],\n'disabled': [{ type: Input },],\n};\n}\n\nfunction WeUIButton_tsickle_Closure_declarations() {\n/** @type {?} */\nWeUIButton.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nWeUIButton.ctorParameters;\n/** @type {?} */\nWeUIButton.propDecorators;\n/**\n * 颜色，取值：default、primary、warn等。默认为default。<br>\n * 自定义的颜色名称与色值，可以定义在 工程根目录/src/theme/variables.scss 文件中的 $colors 对象。\n * @type {?}\n */\nWeUIButton.prototype.color;\n/**\n * 简朴样式 (主要出现此属性)\n * @type {?}\n */\nWeUIButton.prototype.plain;\n/**\n * 按钮大小 (主要出现此属性)\n * @type {?}\n */\nWeUIButton.prototype.mini;\n/**\n * 正在加载\n * @type {?}\n */\nWeUIButton.prototype.loading;\n/**\n * 禁用样式\n * @type {?}\n */\nWeUIButton.prototype.disabled;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright 厦门乾元盛世科技有限公司 All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file.\n */\n\n\nimport { Component, Input } from '@angular/core';\nexport class WeUISubmit {\n/**\n * 颜色，取值：default、primary、warn等。默认为default。<br>\n * 自定义的颜色名称与色值，可以定义在 工程根目录/src/theme/variables.scss 文件中的 $colors 对象。\n */\ncolor = 'default';\n/**\n * 按钮类型\n */\ntype = 'submit';\n/**\n * 简朴样式 (主要出现此属性)\n */\nplain: string;\n/**\n * 按钮大小 (主要出现此属性)\n */\nmini: string;\n/**\n * 正在加载\n */\nloading = false;\n/**\n * 禁用样式\n */\ndisabled = false;\nconstructor() {\n\n    }\n/**\n * @return {?}\n */\ngetColorStyle(): string {\n        return 'weui-btn_' + (this.plain !== undefined ? 'plain-' : '') + this.color;\n    }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n    selector: 'weui-submit',\n    template: `\n        <button [attr.type]=\"type\" class=\"weui-btn {{getColorStyle()}}\"\n            [ngClass]=\"{\n                'weui-btn_disabled': disabled && plain == undefined,\n                'weui-btn_plain-disabled': disabled && plain !== undefined,\n                'weui-btn_loading': loading,\n                'weui-btn_mini': mini !== undefined\n            }\">\n            <i class=\"weui-loading\" *ngIf=\"loading\"></i>\n            <ng-content></ng-content>\n        </button>\n    `\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'color': [{ type: Input },],\n'type': [{ type: Input },],\n'plain': [{ type: Input },],\n'mini': [{ type: Input },],\n'loading': [{ type: Input },],\n'disabled': [{ type: Input },],\n};\n}\n\nfunction WeUISubmit_tsickle_Closure_declarations() {\n/** @type {?} */\nWeUISubmit.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nWeUISubmit.ctorParameters;\n/** @type {?} */\nWeUISubmit.propDecorators;\n/**\n * 颜色，取值：default、primary、warn等。默认为default。<br>\n * 自定义的颜色名称与色值，可以定义在 工程根目录/src/theme/variables.scss 文件中的 $colors 对象。\n * @type {?}\n */\nWeUISubmit.prototype.color;\n/**\n * 按钮类型\n * @type {?}\n */\nWeUISubmit.prototype.type;\n/**\n * 简朴样式 (主要出现此属性)\n * @type {?}\n */\nWeUISubmit.prototype.plain;\n/**\n * 按钮大小 (主要出现此属性)\n * @type {?}\n */\nWeUISubmit.prototype.mini;\n/**\n * 正在加载\n * @type {?}\n */\nWeUISubmit.prototype.loading;\n/**\n * 禁用样式\n * @type {?}\n */\nWeUISubmit.prototype.disabled;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright 厦门乾元盛世科技有限公司 All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file.\n */\n\n\nimport { Component, HostBinding, Renderer2, ElementRef, forwardRef, Optional, Inject } from '@angular/core';\nimport { NG_VALUE_ACCESSOR, COMPOSITION_BUFFER_MODE } from '@angular/forms';\n\n\nimport { WeUIFormControl } from './weui.form.control';\n\n\nconst /** @type {?} */ WEUI_FORM_CONTROL_VALUE_ACCESSOR: any = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => WeUICheckbox),\n    multi: true\n};\nexport class WeUICheckbox extends WeUIFormControl {\n/**\n * 是否已选中\n */\npublic checked = false;\n/**\n * 选中的值\n */\npublic values: any[] = [];\n/**\n * The value of the input ngModel。 (view -> model)\n * @param {?} checked\n * @return {?}\n */\nset innerValue(checked: boolean) {\n        this._value = checked || false;\n\n        const /** @type {?} */ index = this.values.indexOf(this.value);\n        if (checked) {\n            if (index === -1) {\n                this.values.push(this.value);\n            }\n        } else {\n            if (index >= 0) {\n                this.values.splice(index, 1);\n            }\n        }\n\n        // view -> model -> outside world (ie. NgModel on this control)\n        this.onChange(this.values);\n\n        // console.log('innerValue: id=' + this.id + ', name=' + this.name\n        //  + ', values=' + JSON.stringify(this.values) + ', checked=' + this._value);\n    }\n/**\n * Write a new value to the element. (From ControlValueAccessor interface)\n * @param {?} value\n * @return {?}\n */\nwriteValue(value: any): void {\n        if (value !== null) {\n            this.values = value;\n        }\n\n        this.checked = this.values.indexOf(this.value) >= 0;\n        super.writeValue(this.checked);\n\n        // console.log('writeValue: id=' + this.id + ', name=' + this.name\n        //  + ', values=' + JSON.stringify(this.values) + ', checked=' + this._value);\n    }\n/**\n * 扩展样式\n */\n_cls_check_label = true;\n/**\n * @param {?} renderer\n * @param {?} elementRef\n * @param {?} compositionMode\n */\nconstructor(\nprivate renderer: Renderer2,\nprivate elementRef: ElementRef,\nprivate compositionMode: boolean) {\n        super(renderer, elementRef, compositionMode);\n        this.value = 'on'; // default value\n    }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n    selector: 'weui-checkbox',\n    providers: [WEUI_FORM_CONTROL_VALUE_ACCESSOR],\n    template: `\n        <label class=\"weui-check__label\" [for]=\"id\" (click)=\"onTouched()\">\n            <div class=\"weui-cell__hd\">\n                <input type=\"checkbox\" class=\"weui-check\"\n                    [attr.id]=\"id\" [attr.name]=\"name\" [value]=\"value\"\n                    [checked]=\"checked\" [(ngModel)]=\"innerValue\">\n                <i class=\"weui-icon-checked\"></i>\n            </div>\n            <div class=\"weui-cell__bd\">\n                {{label}}<ng-content></ng-content>\n            </div>\n        </label>\n    `\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Renderer2, },\n{type: ElementRef, },\n{type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [COMPOSITION_BUFFER_MODE, ] }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'_cls_check_label': [{ type: HostBinding, args: ['class.weui-check__label', ] },],\n};\n}\n\nfunction WeUICheckbox_tsickle_Closure_declarations() {\n/** @type {?} */\nWeUICheckbox.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nWeUICheckbox.ctorParameters;\n/** @type {?} */\nWeUICheckbox.propDecorators;\n/**\n * 是否已选中\n * @type {?}\n */\nWeUICheckbox.prototype.checked;\n/**\n * 选中的值\n * @type {?}\n */\nWeUICheckbox.prototype.values;\n/**\n * 扩展样式\n * @type {?}\n */\nWeUICheckbox.prototype._cls_check_label;\n/** @type {?} */\nWeUICheckbox.prototype.renderer;\n/** @type {?} */\nWeUICheckbox.prototype.elementRef;\n/** @type {?} */\nWeUICheckbox.prototype.compositionMode;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright 厦门乾元盛世科技有限公司 All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file.\n */\n\n\nimport { Component, Input, HostBinding, Output, EventEmitter } from '@angular/core';\n/**\n * 菜单选项\n */\nexport class PickerOption {\n/**\n * 显示文本\n */\nlabel: string;\n/**\n * 取值\n */\nvalue: any;\n/**\n * 是否已禁用\n */\ndisabled?: boolean;\n\n    /**\n     * 其它属性\n     */\n    [key: string]: any;\n}\n\nfunction PickerOption_tsickle_Closure_declarations() {\n/**\n * 显示文本\n * @type {?}\n */\nPickerOption.prototype.label;\n/**\n * 取值\n * @type {?}\n */\nPickerOption.prototype.value;\n/**\n * 是否已禁用\n * @type {?}\n */\nPickerOption.prototype.disabled;\n}\n\n/**\n * 多列选择器\n * 参考了 {\\@link https://github.com/weui/weui.js/blob/master/src/picker/picker.js}的实现\n */\nexport class WeUIPicker {\n/**\n * \\@i18n\n */\ndefaults: any = {\n        cancelText: '取消',\n        confirmText: '确定'\n    };\n/**\n * 单列菜单列表，内容任意，其中<code>label</code>用于显示，<code>value</code>表示值，<code>disabled</code>表示不可选择项。\n * @param {?} menu\n * @return {?}\n */\nset menu(menu: PickerOption[]) {\n        if (menu !== undefined && menu !== null && menu.length) {\n            this.menus = [menu];\n        }\n    };\n/**\n * 多列菜单列表，内容任意，其中<code>label</code>用于显示，<code>value</code>表示值，<code>disabled</code>表示不可选择项。<br>\n * 注意：列的个数不宜超过3个。\n */\nmenus: PickerOption[][] = [];\n/**\n * 当前选择的值（每列对应一个值）\n */\nvalue: any[] = [];\n/**\n * \\@i18n 取消\n */\ncancelText: string = this.defaults.cancelText;\n/**\n * \\@i18n 确定\n */\nconfirmText: string = this.defaults.confirmText;\n/**\n * 用于控制控件的可视化\n * @return {?}\n */\nget hideCls(): boolean {\n        return this.hidden;\n    }\n/**\n * 关闭事件\n */\nclose = new EventEmitter<any>();\n/**\n * 点击【确定】按钮时，通过Promise.resolve()输出最终值\n */\nprivate resolve: (value: any[]) => void;\n/**\n * 已显示否\n */\npublic shown = false;\n/**\n * 已显示否\n */\nprivate hidden = true;\nconstructor() {\n\n    }\n/**\n * @param {?} event\n * @return {?}\n */\nonAnimationEnd(event: AnimationEvent): void {\n        if (event.animationName === 'slideDown') {\n            this.hidden = true;\n            this.close.emit();\n        }\n    }\n/**\n * 显示菜单\n * @return {?}\n */\nshow(): Promise<any> {\n        this.hidden = false;\n        this.shown = true;\n\n        return new Promise<any>((resolve, reject) => {\n            this.resolve = resolve;\n        });\n    }\n/**\n * 隐藏菜单\n * @return {?}\n */\nhide(): void {\n        this.shown = false;\n    }\n/**\n * 某列数据修改时触发\n * \n * @param {?} option 该列数据的选择项\n * @param {?} index  该列在组内的索引\n * @return {?}\n */\nonChange(option: PickerOption, index: number): void {\n        if (option) {\n            this.value[index] = option;\n        }\n    }\n/**\n * 点击【确定】按钮时，通过Promise.resolve()输出最终值\n * @return {?}\n */\nonConfirm(): void {\n        this.resolve(this.value);\n        this.hide();\n    }\n/**\n * 点击【取消】按钮时，关闭Picker\n * @return {?}\n */\nonCancel(): void {\n        this.hide();\n    }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n    selector: 'weui-picker',\n    template: `\n        <div class=\"weui-mask\" (click)=\"onCancel()\"\n            [ngClass]=\"{'weui-animate-fade-in': shown, 'weui-animate-fade-out': !shown}\"></div>\n        <div class=\"weui-picker\"\n            [ngClass]=\"{'weui-animate-slide-up': shown, 'weui-animate-slide-down': !shown}\"\n            (animationend)=\"onAnimationEnd($event)\">\n            <div class=\"weui-picker__hd\">\n                <a href=\"javascript:;\" class=\"weui-picker__action\" (click)=\"onCancel()\">{{cancelText}}  </a>\n                <a href=\"javascript:;\" class=\"weui-picker__action\" (click)=\"onConfirm()\">{{confirmText}}</a>\n            </div>\n            <div class=\"weui-picker__bd\">\n                <weui-picker-group tappable class=\"weui-picker__group\"\n                    *ngFor=\"let options of menus; let i = index;\"\n                    [options]=\"options\" [value]=\"value[i]\" (change)=\"onChange($event, i)\"></weui-picker-group>\n            </div>\n        </div>\n    `,\n    exportAs: 'weuiPicker'\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'menu': [{ type: Input },],\n'menus': [{ type: Input },],\n'value': [{ type: Input },],\n'cancelText': [{ type: Input },],\n'confirmText': [{ type: Input },],\n'hideCls': [{ type: HostBinding, args: ['class.weui-hide', ] },],\n'close': [{ type: Output },],\n};\n}\n\nfunction WeUIPicker_tsickle_Closure_declarations() {\n/** @type {?} */\nWeUIPicker.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nWeUIPicker.ctorParameters;\n/** @type {?} */\nWeUIPicker.propDecorators;\n/**\n * \\@i18n\n * @type {?}\n */\nWeUIPicker.prototype.defaults;\n/**\n * 多列菜单列表，内容任意，其中<code>label</code>用于显示，<code>value</code>表示值，<code>disabled</code>表示不可选择项。<br>\n * 注意：列的个数不宜超过3个。\n * @type {?}\n */\nWeUIPicker.prototype.menus;\n/**\n * 当前选择的值（每列对应一个值）\n * @type {?}\n */\nWeUIPicker.prototype.value;\n/**\n * \\@i18n 取消\n * @type {?}\n */\nWeUIPicker.prototype.cancelText;\n/**\n * \\@i18n 确定\n * @type {?}\n */\nWeUIPicker.prototype.confirmText;\n/**\n * 关闭事件\n * @type {?}\n */\nWeUIPicker.prototype.close;\n/**\n * 点击【确定】按钮时，通过Promise.resolve()输出最终值\n * @type {?}\n */\nWeUIPicker.prototype.resolve;\n/**\n * 已显示否\n * @type {?}\n */\nWeUIPicker.prototype.shown;\n/**\n * 已显示否\n * @type {?}\n */\nWeUIPicker.prototype.hidden;\n}\n\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright 厦门乾元盛世科技有限公司 All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file.\n */\n\n\nimport { Component, Input, Output, EventEmitter, HostListener, AfterViewInit } from '@angular/core';\nimport { PickerOption } from './weui.picker';\n/**\n * 获取Window窗口的高度\n */\nconst getWindowHeight = (): number => {\n    return window.innerHeight;\n};\nexport class WeUIPickerGroup implements AfterViewInit {\n/**\n * 默认参数\n */\ndefaults: any = {\n        offset: 3,           // 列表初始化时的偏移量（列表初始化时，选项是聚焦在中间的，通过offset强制往上挪3项，以达到初始选项是为顶部的那项）\n        rowHeight: 34,       // 列表每一行的高度\n        bodyHeight: 7 * 34,  // picker的高度，用于辅助点击滚动的计算\n        inertiaTime: 150,    // 惯性滑动的保持时间，此值直接影响“灵敏度” (单位：ms)\n        slideDuration: 300   // 惯性滑动的动画时间，表现为最终可视化的效果\n    };\n/**\n * 当前列表组的选项\n */\noptions: PickerOption[] = [];\n/**\n * 初始值\n */\nvalue: any;\n/**\n * 修改事件\n */\nchange = new EventEmitter<any>();\nprivate startTime: number;\nprivate startY: number | null;\nprivate endY: number;\nprivate speed: number;\n/**\n * 选项滚动的距离，用于设置translate3d的Y值\n */\nprivate distance = 0;\n/**\n * @return {?}\n */\npublic get translate3d(): string {\n        return `translate3d(0, ${this.distance}px, 0)`;\n    }\n/**\n * 选项惯性滚动的时间\n */\nprivate duration = 0;\n/**\n * @return {?}\n */\npublic get transition(): string {\n        return `all ${this.duration}ms`;\n    }\nconstructor() {\n\n    }\n/**\n * @return {?}\n */\nngAfterViewInit(): void {\n        setTimeout(() => {\n            this.init();\n        }, 1);\n    }\n/**\n * @return {?}\n */\nforceChange(): void {\n        this.init();\n    }\n/**\n * @param {?} event\n * @return {?}\n */\n_start(event: TouchEvent): void {\n        this.startY = event.changedTouches[0].pageY;\n        this.startTime = +new Date();\n    }\n/**\n * @param {?} event\n * @return {?}\n */\n_move(event: TouchEvent): void {\n        const /** @type {?} */ endTime = +new Date();\n        this.endY = event.changedTouches[0].pageY;\n\n        // 计算滑动的速度: 距离 / 时间\n        const /** @type {?} */ _distance: number = this.endY - (this.startY || 0);\n        this.speed = _distance / (endTime - this.startTime);\n\n        // 重新设置开始时间、开始位置\n        this.startTime = endTime;\n        this.startY = this.endY;\n        this.duration = 0;          // ms\n        this.distance += _distance; // 内容移动的距离\n        // console.log(`速度=${this.speed} px/ms`);\n\n        event.preventDefault();\n    }\n/**\n * @param {?} event\n * @return {?}\n */\n_end(event: TouchEvent): void {\n        if (!this.startY) {\n            return;\n        }\n        this.endY = event.changedTouches[0].pageY;\n/**\n * 思路:\n * 根据最后一次touchmove事件的速度(speed)，判断是否执行惯性滑动；\n * 如果speed大于1、小于5，则根据速度乘以惯性滑动的时间(如150ms)，计算出应该滑动的距离；\n * 如果speed大于5，则按照屏幕的高度(减去列表高度的一半)，作为该滑动的距离。\n */\nconst _speed = Math.abs(this.speed);\n        if (_speed >= 5) {\n            const /** @type {?} */ windowY = getWindowHeight() - (this.defaults.bodyHeight / 2);\n            this.stop(windowY - this.endY);\n        } else if (_speed >= 1) {\n            const /** @type {?} */ diff = this.speed * this.defaults.inertiaTime; // 滑行 150ms,这里直接影响“灵敏度”\n            this.stop(diff);\n        } else {\n            this.stop(0);\n        }\n        this.startY = null;\n    }\n/**\n * @return {?}\n */\ninit(): void {\n        let /** @type {?} */ index = 0;\n        if (this.value) { // 有传入value，则按value找可匹配的选项\n            const /** @type {?} */ len = this.options && this.options.length || 0;\n            for (; index < len; index++) {\n                const /** @type {?} */ option = this.options[index];\n                if (this.value === option.value || this.value['value'] === option.value) {\n                    this.onChange(option, index);\n                    this.distance = (this.defaults.offset - index) * this.defaults.rowHeight;\n                    return; // 已找到匹配选项，直接返回\n                }\n            }\n            console.warn('Picker has not match defaultValue:', this.value);\n        }\n\n        // 没有传入value，或者 有value但是没有匹配的选项\n        index = this._getDefaultIndex(this.options);\n        this.onChange(this.options[index], index);\n        this.distance = this._getDefaultTranslate(this.defaults.offset, this.defaults.rowHeight, this.options);\n    }\n/**\n * 当touch事件结束时，根据惯性滑动计算当前在哪个选项，以及列表滚动的最终距离\n * \n * @param {?} diff 惯性滑动的距离\n * @return {?}\n */\nstop(diff: number): void {\n        let /** @type {?} */ dist = this.distance + diff;\n\n        // 移动到最接近的那一行\n        dist = Math.round(dist / this.defaults.rowHeight) * this.defaults.rowHeight;\n        const /** @type {?} */ max = this._getMax(this.defaults.offset, this.defaults.rowHeight);\n        const /** @type {?} */ min = this._getMin(this.defaults.offset, this.defaults.rowHeight, this.options.length);\n        // console.log(`移动距离: dist=${dist}px`);\n\n        // 不要超过最大值或者最小值\n        dist = Math.max(Math.min(dist, max), min);\n\n        // 如果是 disabled 的就跳过\n        let /** @type {?} */ index = this.defaults.offset - dist / this.defaults.rowHeight;\n        while (!!this.options[index] && this.options[index].disabled) {\n            diff > 0 ? ++index : --index;\n        }\n        dist = (this.defaults.offset - index) * this.defaults.rowHeight;\n\n        this.duration = this.defaults.slideDuration;  // ms\n        this.distance = dist; // px\n\n        // 触发选择事件\n        this.onChange(this.options[index], index);\n    }\n/**\n * 选择某个选项时触发\n * \n * @param {?} option 选中的选项\n * @param {?=} index  该选项在列表中的索引\n * @return {?}\n */\nonChange(option: PickerOption, index?: number): void {\n        this.change.emit(option);\n    }\n/**\n * get max translate\n * \n * @param {?} offset\n * @param {?} rowHeight\n * @return {?}\n */\n_getMax(offset: number, rowHeight: number): number {\n        return offset * rowHeight;\n    }\n/**\n * get min translate\n * \n * @param {?} offset\n * @param {?} rowHeight\n * @param {?} length\n * @return {?}\n */\n_getMin(offset: number, rowHeight: number, length: number): number {\n        return -(rowHeight * (length - offset - 1));\n    }\n/**\n * get index of middle item\n * \n * @param {?} options\n * @return {?}\n */\n_getDefaultIndex(options: any[]): number {\n        let /** @type {?} */ current = Math.floor(options.length / 2);\n        let /** @type {?} */ count = 0;\n        while (!!options[current] && options[current].disabled) {\n            current = ++current % options.length;\n            count++;\n\n            if (count > options.length) {\n                throw new Error('No selectable item.');\n            }\n        }\n\n        return current;\n    }\n/**\n * @param {?} offset\n * @param {?} rowHeight\n * @param {?} options\n * @return {?}\n */\n_getDefaultTranslate(offset: number, rowHeight: number, options: any[]): number {\n        const /** @type {?} */ currentIndex = this._getDefaultIndex(options);\n\n        return (offset - currentIndex) * rowHeight;\n    }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n    selector: 'weui-picker-group',\n    template: `\n        <div class=\"weui-picker__mask\"></div>\n        <div class=\"weui-picker__indicator\"></div>\n        <div class=\"weui-picker__content\" [ngStyle]=\"{\n                '-webkit-transform': translate3d, 'transform': translate3d,\n                '-webkit-transition': transition, 'transition': transition\n            }\">\n            <div class=\"weui-picker__item\" *ngFor=\"let option of options\"\n                [ngClass]=\"{'weui-picker__item_disabled': option.disabled}\">{{option.label}}</div>\n        </div>\n    `\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'options': [{ type: Input },],\n'value': [{ type: Input },],\n'change': [{ type: Output },],\n'_start': [{ type: HostListener, args: ['touchstart', ['$event'], ] },],\n'_move': [{ type: HostListener, args: ['touchmove', ['$event'], ] },],\n'_end': [{ type: HostListener, args: ['touchend', ['$event'], ] },],\n};\n}\n\nfunction WeUIPickerGroup_tsickle_Closure_declarations() {\n/** @type {?} */\nWeUIPickerGroup.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nWeUIPickerGroup.ctorParameters;\n/** @type {?} */\nWeUIPickerGroup.propDecorators;\n/**\n * 默认参数\n * @type {?}\n */\nWeUIPickerGroup.prototype.defaults;\n/**\n * 当前列表组的选项\n * @type {?}\n */\nWeUIPickerGroup.prototype.options;\n/**\n * 初始值\n * @type {?}\n */\nWeUIPickerGroup.prototype.value;\n/**\n * 修改事件\n * @type {?}\n */\nWeUIPickerGroup.prototype.change;\n/** @type {?} */\nWeUIPickerGroup.prototype.startTime;\n/** @type {?} */\nWeUIPickerGroup.prototype.startY;\n/** @type {?} */\nWeUIPickerGroup.prototype.endY;\n/** @type {?} */\nWeUIPickerGroup.prototype.speed;\n/**\n * 选项滚动的距离，用于设置translate3d的Y值\n * @type {?}\n */\nWeUIPickerGroup.prototype.distance;\n/**\n * 选项惯性滚动的时间\n * @type {?}\n */\nWeUIPickerGroup.prototype.duration;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","\n/**\n * 支持的格式：(1) 纯数字；(2)范围: min-max；(3)叠加：mum/step\n */\nconst regex = /^(\\d+)(?:-(\\d+))?(?:\\/(\\d+))?$/g;\n/**\n * 日[1-31]、月[1-12]、周[0-6]（周日-周六）的取值范围\n */\nconst constraints = [[1, 31], [1, 12], [0, 6]];\n/**\n * Schedule\n */\nexport class Schedule {\n/**\n * days of the month\n */\nprivate _dates: number[];\n/**\n * months\n */\nprivate _months: number[];\n/**\n * days of the week\n */\nprivate _days: number[];\n/**\n * current cursor\n */\nprivate _pointer: Date;\n/**\n * 构造\n * @param {?} fields [[日..], [月..], [周..]]\n * @param {?} _start 起始日期\n * @param {?} _end   终止日期\n */\nconstructor(private fields: number[][],\nprivate _start: Date,\nprivate _end: Date) {\n        /**\n         * dayOfMonth\n         * @type {Array}\n         */\n        this._dates = fields[0];\n\n        /**\n         * month\n         * @type {Array}\n         */\n        this._months = fields[1];\n\n        /**\n         * dayOfWeek\n         * @type {Array}\n         */\n        this._days = fields[2];\n\n        /**\n         * cursor\n         * @type {Date}\n         * @private\n         */\n        this._pointer = _start;\n    }\n/**\n * @return {?}\n */\n_findNext(): Date {\n        let /** @type {?} */ next: Date;\n        while (true) {\n            if (this._end.getTime() - this._pointer.getTime() < 0) {\n                throw new Error(`out of range, end is ${this._end}, current is ${this._pointer}`);\n            }\n\n            const /** @type {?} */ month: number = this._pointer.getMonth();\n            const /** @type {?} */ date: number = this._pointer.getDate();\n            const /** @type {?} */ day: number = this._pointer.getDay();\n\n            if (this._months.indexOf(month + 1) === -1) {\n                this._pointer.setMonth(month + 1);\n                this._pointer.setDate(1);\n                continue;\n            }\n\n            if (this._dates.indexOf(date) === -1) {\n                this._pointer.setDate(date + 1);\n                continue;\n            }\n\n            if (this._days.indexOf(day) === -1) {\n                this._pointer.setDate(date + 1);\n                continue;\n            }\n\n            next = new Date(this._pointer.getTime());\n\n            break;\n        }\n        return next;\n    }\n/**\n * fetch next data\n * @return {?}\n */\nnext(): {value: Date, done: boolean} {\n        const /** @type {?} */ value: Date = this._findNext();\n        // move next date\n        this._pointer.setDate(this._pointer.getDate() + 1);\n        return {\n            value: value,\n            done: !this.hasNext()\n        };\n    }\n/**\n * has next\n * @return {?}\n */\nhasNext(): boolean {\n        try {\n            this._findNext();\n            return true;\n        } catch ( /** @type {?} */e) {\n            return false;\n        }\n    }\n}\n\nfunction Schedule_tsickle_Closure_declarations() {\n/**\n * days of the month\n * @type {?}\n */\nSchedule.prototype._dates;\n/**\n * months\n * @type {?}\n */\nSchedule.prototype._months;\n/**\n * days of the week\n * @type {?}\n */\nSchedule.prototype._days;\n/**\n * current cursor\n * @type {?}\n */\nSchedule.prototype._pointer;\n/** @type {?} */\nSchedule.prototype.fields;\n/** @type {?} */\nSchedule.prototype._start;\n/** @type {?} */\nSchedule.prototype._end;\n}\n\n/**\n * 解析表达式，并获得合法的数字的列表，如合法的月份数\n * \n * @param {?} field 日期cron表达式中通过空格分割后的某一部分(日、月、周)的内容\n * @param {?} _constraints 取值约束，如日期为[1,31]\n * @return {?} number[]\n */\nexport function parseField(field: string, _constraints: number[]): number[] {\n    const /** @type {?} */ low: number = _constraints[0];\n    const /** @type {?} */ high: number = _constraints[1];\n    const /** @type {?} */ result: number[] = [];\n\n    // * 号等于最低到最高\n    field = field.replace(/\\*/g, low + '-' + high);\n\n    // 处理 1,2,5-9 这种情况\n    const /** @type {?} */ fields: string[] = field.split(',');\n    const /** @type {?} */ len = fields.length;\n    for (let /** @type {?} */ i = 0; i < len; i++) {\n        const /** @type {?} */ f: string = fields[i];\n        if (f.match(regex)) {\n            f.replace(regex, ($0: string, _lower: string, _upper: string, _step: string): string => {\n                // ref to `cron-parser`\n                const /** @type {?} */ step: number = parseInt(_step, 10) || 1;\n                // Positive integer higher than constraints[0]\n                const /** @type {?} */ lower: number = Math.min(Math.max(low, Math.abs(+_lower)), high);\n\n                // Positive integer lower than constraints[1]\n                const /** @type {?} */ upper: number = _upper ? Math.min(high, Math.abs(+_upper)) : high;\n\n                // Count from the lower barrier to the upper\n                let /** @type {?} */ pointer: number = lower;\n\n                do {\n                    result.push(pointer);\n                    pointer += step;\n                } while (pointer <= upper);\n                return '';\n            });\n        }\n    }\n    return result;\n}\n/**\n * 解析表达式，并返回Schedule对象\n * \n * @param {?} expr  cron表达式，形如: 日期 月份 周。例如：* * * 或 1,2,5-9 1-6 0-6 或 1/2 * * 等\n * @param {?} start 开始日期\n * @param {?} end   介绍日期\n * @return {?}\n */\nexport function parse(expr: string, start: Date, end: Date): Schedule {\n    const /** @type {?} */ atoms: string[] = expr.replace(/^\\s\\s*|\\s\\s*$/g, '').split(/\\s+/);\n    const /** @type {?} */ fields: number[][] = [];\n    atoms.forEach((atom: string, index: number) => {\n        const /** @type {?} */ constraint: number[] = constraints[index];\n        fields.push(parseField(atom, constraint));\n    });\n    return new Schedule(fields, start, end);\n}\n","/**\n * @license\n * Copyright 厦门乾元盛世科技有限公司 All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file.\n */\n\n\nimport { Component, Input, OnInit, AfterViewInit, ViewChildren, QueryList } from '@angular/core';\n\nimport { WeUIPicker, PickerOption } from './weui.picker';\nimport { WeUIPickerGroup } from './weui-picker-group';\nimport { Schedule, parse as parseCron, parseField } from './cron';\n/**\n * 求下一轮的数值\n * \n * @param {?} expr cron 表达式\n * @param {?=} year 年份\n * @param {?=} month 月份，取值范围为：1-12\n * @return {?}\n */\nfunction nexts(expr: string, year?: number, month?: number): PickerOption[] {\n    const /** @type {?} */ result: PickerOption[] = [];\n    const /** @type {?} */ atoms: string[] = expr.replace(/^\\s\\s*|\\s\\s*$/g, '').split(/\\s+/);\n\n    // (1) 根据“年” 求可用的“月”\n    if (!month) {\n        const /** @type {?} */ months: number[] = parseField(atoms[1], [1, 12]);\n        for (let /** @type {?} */ m = 1; m <= 12; m++) {\n            result.push({\n                label: m + '月',\n                value: m,\n                disabled: months.indexOf(m) === -1\n            });\n        }\n        return result;\n    }\n\n    // (2) 根据“年、月” 求可用的“日”\n    const /** @type {?} */ today = new Date();\n    const /** @type {?} */ _year = year || today.getFullYear();\n    const /** @type {?} */ maxDate = getActualMaximumDate(_year, month);\n    const /** @type {?} */ startDt = new Date(_year, month - 1, 1);\n    const /** @type {?} */ endDt = new Date(_year, month - 1, maxDate);\n    const /** @type {?} */ interval: Schedule = parseCron(expr, startDt, endDt);\n\n    const /** @type {?} */ available: number[] = [];\n    let /** @type {?} */ obj: { value: Date, done: boolean };\n    do {\n        obj = interval.next();\n        available.push(obj.value.getDate());\n    } while (!obj.done);\n\n    for (let /** @type {?} */ i = 1; i <= maxDate; i++) {\n        result.push({\n            label: i + '日',\n            value: i,\n            disabled: available.indexOf(i) === -1\n        });\n    }\n    return result;\n}\n/**\n * 根据年、月求当月的最大日期\n * \n * @param {?} year 年份\n * @param {?} month 月份，取值：1-12（1月-12月）\n * @return {?}\n */\nfunction getActualMaximumDate(year: number, month: number): number {\n    const /** @type {?} */ calendar = new Date(year, month - 1, 31);\n    while (calendar.getMonth() !== month - 1) {\n        calendar.setDate(calendar.getDate() - 1);\n    }\n    return calendar.getDate();\n}\n/**\n * 日期选择器\n */\nexport class WeUIDatePicker extends WeUIPicker implements OnInit, AfterViewInit {\n/**\n * cron 表达式，三位，分别是 dayOfMonth[1-31]，month[1-12] 和 dayOfWeek[0-6]（周日-周六）。<br>\n * 格式: 日期 月份 周。例如：* * * 或 1,2,5-9 1-6 0-6 或 1/2 * * 等。默认：* * *。\n */\ncron = '* * *';\n/**\n * 开始日期/年份。取值：<ul>\n * <li>(1)字符串：符合ISO 8601日期格式的字符串，如：2013-01-18 或者 20130118；</li>\n * <li>(2)数值：表示年份，如：2011，则默认加\"-01-01\"在年份之后 </li>\n * <li>(3)Date：JavaScript Date对象 </li>\n * </ul>\n * @param {?} start\n * @return {?}\n */\nset start(start: any) {\n        this._startDate = this._parseDate(start, '-01-01');\n    }\n/**\n * 结束日期/年份。取值：<ul>\n * <li>(1)字符串：符合ISO 8601日期格式的字符串，如：2013-01-18 或者 20130118；</li>\n * <li>(2)数值：表示年份，如：2011，则默认加\"-12-31\"在年份之后 </li>\n * <li>(3)Date：JavaScript Date对象 </li>\n * </ul>\n * @param {?} end\n * @return {?}\n */\nset end(end: any) {\n        this._endDate = this._parseDate(end, '-12-31');\n    }\nprivate _startDate: Date;\nprivate _endDate: Date;\n/**\n * 显示列表\n */\n_groups: QueryList<WeUIPickerGroup>;\n/**\n * 月份选择控件\n */\nprivate monthPicker: WeUIPickerGroup;\n/**\n * 日期选择控件\n */\nprivate datePicker: WeUIPickerGroup;\n/**\n * @param {?} value\n * @param {?} sub\n * @return {?}\n */\nprivate _parseDate(value: any, sub: string): Date {\n        if (typeof value === 'string') {\n            if (value.length === 4) {\n                value = value + sub;\n            }\n            if (/^(\\d{4})-(\\d{2})-(\\d{2})$/.test(value) || /^(\\d{4})(\\d{2})(\\d{2})$/.test(value)) {\n                return new Date(+RegExp.$1, +RegExp.$2 - 1, +RegExp.$3);\n            }\n        }\n        if (typeof value === 'number') {\n            return new Date(value + sub);\n        }\n        return value; // 默认为Date对象\n    }\nconstructor() {\n        super();\n    }\n/**\n * @return {?}\n */\nngOnInit(): void {\n        // 设置初始值\n        const /** @type {?} */ now = new Date();\n        const /** @type {?} */ thisYear = now.getFullYear();\n        if (!this._startDate) {\n            this.start = thisYear - 10;\n        }\n        if (!this._endDate) {\n            this.end = thisYear + 10;\n        }\n        if (this._startDate.getTime() > this._endDate.getTime()) {\n            [this._startDate, this._endDate] = [this._endDate, this._startDate];\n        }\n\n        // 年份列表\n        const /** @type {?} */ years: PickerOption[] = [];\n        const /** @type {?} */ endYear = this._endDate.getFullYear();\n        for (let /** @type {?} */ year = this._startDate.getFullYear(); year <= endYear; year++) {\n            years.push({\n                label: year + '年',\n                value: year\n            });\n        }\n\n        // 渲染数据列表\n        this.menus = [years, [], []];\n    }\n/**\n * @return {?}\n */\nngAfterViewInit(): void {\n        const /** @type {?} */ monthPicker = this._groups.find((group: WeUIPickerGroup, index: number): boolean => {\n            return index === 1;\n        });\n        const /** @type {?} */ datePicker = this._groups.find((group: WeUIPickerGroup, index: number): boolean => {\n            return index === 2;\n        });\n\n        if (monthPicker) {\n            this.monthPicker = monthPicker;\n        }\n        if (datePicker) {\n            this.datePicker = datePicker;\n        }\n\n        // 更新月份、日期列表\n        this._updateMonthPickerList();\n    }\n/**\n * 选择年或月，触发子列表的变更\n * \n * @param {?} option 被选择的选项\n * @param {?} index 哪个列（索引）\n * @return {?}\n */\nonChange(option: PickerOption, index: number): void {\n        if (!option) {\n            return; // 未选择任何值，不触发子列表的变更\n        }\n        super.onChange(option, index);\n\n        // 变更“年份”时，修改月份列表；如果月份的值为2月，则也修改日期列表\n        if (index === 0) {\n            this._updateMonthPickerList();\n        }\n\n        // 变更“月份”时，修改日期列表\n        if (index === 1) {\n            this._updateDatePickerList();\n        }\n    }\n/**\n * @return {?}\n */\nprivate _updateMonthPickerList(): void {\n        if (!this.monthPicker) {\n            return;\n        }\n        if (!this.value || !this.value.length || !this.value[0]) {\n            return;\n        }\n\n        const /** @type {?} */ year: number = this.value[0].value;\n        const /** @type {?} */ months = nexts(this.cron, year);\n\n        const /** @type {?} */ options = this.monthPicker.options;\n        if (months.length !== options.length) {\n            this.monthPicker.options = months;\n            this.monthPicker.forceChange();\n        }\n\n        // 强制日期列表更新\n        this._updateDatePickerList();\n    }\n/**\n * @return {?}\n */\nprivate _updateDatePickerList(): void {\n        if (!this.datePicker) {\n            return;\n        }\n\n        const /** @type {?} */ year: number = this.value[0].value;\n        const /** @type {?} */ month: number = this.value[1].value;\n        const /** @type {?} */ dates = nexts(this.cron, year, month);\n\n        this.value[2] = null; // 清空值\n        this.datePicker.options = dates;\n        this.datePicker.forceChange();\n    }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n    selector: 'weui-date-picker',\n    template: `\n        <div class=\"weui-mask\" (click)=\"onCancel()\"\n            [ngClass]=\"{'weui-animate-fade-in': shown, 'weui-animate-fade-out': !shown}\"></div>\n        <div class=\"weui-picker\"\n            [ngClass]=\"{'weui-animate-slide-up': shown, 'weui-animate-slide-down': !shown}\"\n            (animationend)=\"onAnimationEnd($event)\">\n            <div class=\"weui-picker__hd\">\n                <a href=\"javascript:;\" class=\"weui-picker__action\" (click)=\"onCancel()\">{{cancelText}}  </a>\n                <a href=\"javascript:;\" class=\"weui-picker__action\" (click)=\"onConfirm()\">{{confirmText}}</a>\n            </div>\n            <div class=\"weui-picker__bd\">\n                <weui-picker-group tappable class=\"weui-picker__group\"\n                    *ngFor=\"let options of menus; let i = index;\"\n                    [options]=\"options\" [value]=\"value[i]\" (change)=\"onChange($event, i)\"></weui-picker-group>\n            </div>\n        </div>\n    `,\n    exportAs: 'weuiDatePicker'\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'cron': [{ type: Input },],\n'start': [{ type: Input },],\n'end': [{ type: Input },],\n'_groups': [{ type: ViewChildren, args: [WeUIPickerGroup, ] },],\n};\n}\n\nfunction WeUIDatePicker_tsickle_Closure_declarations() {\n/** @type {?} */\nWeUIDatePicker.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nWeUIDatePicker.ctorParameters;\n/** @type {?} */\nWeUIDatePicker.propDecorators;\n/**\n * cron 表达式，三位，分别是 dayOfMonth[1-31]，month[1-12] 和 dayOfWeek[0-6]（周日-周六）。<br>\n * 格式: 日期 月份 周。例如：* * * 或 1,2,5-9 1-6 0-6 或 1/2 * * 等。默认：* * *。\n * @type {?}\n */\nWeUIDatePicker.prototype.cron;\n/** @type {?} */\nWeUIDatePicker.prototype._startDate;\n/** @type {?} */\nWeUIDatePicker.prototype._endDate;\n/**\n * 显示列表\n * @type {?}\n */\nWeUIDatePicker.prototype._groups;\n/**\n * 月份选择控件\n * @type {?}\n */\nWeUIDatePicker.prototype.monthPicker;\n/**\n * 日期选择控件\n * @type {?}\n */\nWeUIDatePicker.prototype.datePicker;\n}\n\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright 厦门乾元盛世科技有限公司 All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file.\n */\n\n\nimport { Component, Input, HostBinding, Renderer2, ElementRef } from '@angular/core';\nimport { Directive, Host, Optional } from '@angular/core';\n/**\n * 页脚\n */\nexport class WeUIFooter {\n/**\n * 固定在底部\n */\nfixedAtBottom = false;\n/**\n * 基本样式\n */\n_cls_footer = true;\n/**\n * 固定在底部样式\n * @return {?}\n */\nget fixedBottomCls(): boolean {\n        return this.fixedAtBottom;\n    }\nconstructor() {\n\n    }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n    selector: 'weui-footer',\n    template: '<ng-content></ng-content>'\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'fixedAtBottom': [{ type: Input },],\n'_cls_footer': [{ type: HostBinding, args: ['class.weui-footer', ] },],\n'fixedBottomCls': [{ type: HostBinding, args: ['class.weui-footer_fixed-bottom', ] },],\n};\n}\n\nfunction WeUIFooter_tsickle_Closure_declarations() {\n/** @type {?} */\nWeUIFooter.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nWeUIFooter.ctorParameters;\n/** @type {?} */\nWeUIFooter.propDecorators;\n/**\n * 固定在底部\n * @type {?}\n */\nWeUIFooter.prototype.fixedAtBottom;\n/**\n * 基本样式\n * @type {?}\n */\nWeUIFooter.prototype._cls_footer;\n}\n\nexport class WeUIFooterText {\n/**\n * @param {?} _renderer\n * @param {?} _elementRef\n * @param {?} _container\n */\nconstructor(\nprivate _renderer: Renderer2,\nprivate _elementRef: ElementRef,\nprivate _container: WeUIFooter) {\n        if (_container !== null) {\n            _renderer.addClass(_elementRef.nativeElement, 'weui-footer__text');\n        }\n    }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n    // tslint:disable-next-line:directive-selector\n    selector: 'weui-footer-text,[weui-footer-text]'\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Renderer2, },\n{type: ElementRef, },\n{type: WeUIFooter, decorators: [{ type: Optional }, { type: Host }, ]},\n];\n}\n\nfunction WeUIFooterText_tsickle_Closure_declarations() {\n/** @type {?} */\nWeUIFooterText.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nWeUIFooterText.ctorParameters;\n/** @type {?} */\nWeUIFooterText.prototype._renderer;\n/** @type {?} */\nWeUIFooterText.prototype._elementRef;\n/** @type {?} */\nWeUIFooterText.prototype._container;\n}\n\nexport class WeUIFooterLinks {\n/**\n * @param {?} _renderer\n * @param {?} _elementRef\n * @param {?} _container\n */\nconstructor(\nprivate _renderer: Renderer2,\nprivate _elementRef: ElementRef,\nprivate _container: WeUIFooter) {\n        if (_container !== null) {\n            _renderer.addClass(_elementRef.nativeElement, 'weui-footer__links');\n        }\n    }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n    // tslint:disable-next-line:directive-selector\n    selector: 'weui-footer-links,[weui-footer-links]'\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Renderer2, },\n{type: ElementRef, },\n{type: WeUIFooter, decorators: [{ type: Optional }, { type: Host }, ]},\n];\n}\n\nfunction WeUIFooterLinks_tsickle_Closure_declarations() {\n/** @type {?} */\nWeUIFooterLinks.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nWeUIFooterLinks.ctorParameters;\n/** @type {?} */\nWeUIFooterLinks.prototype._renderer;\n/** @type {?} */\nWeUIFooterLinks.prototype._elementRef;\n/** @type {?} */\nWeUIFooterLinks.prototype._container;\n}\n\nexport class WeUIFooterLink {\n/**\n * @param {?} _renderer\n * @param {?} _elementRef\n * @param {?} _container\n */\nconstructor(\nprivate _renderer: Renderer2,\nprivate _elementRef: ElementRef,\nprivate _container: WeUIFooterLinks) {\n        if (_container !== null) {\n            _renderer.addClass(_elementRef.nativeElement, 'weui-footer__link');\n        }\n    }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n    // tslint:disable-next-line:directive-selector\n    selector: 'a'\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Renderer2, },\n{type: ElementRef, },\n{type: WeUIFooterLinks, decorators: [{ type: Optional }, { type: Host }, ]},\n];\n}\n\nfunction WeUIFooterLink_tsickle_Closure_declarations() {\n/** @type {?} */\nWeUIFooterLink.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nWeUIFooterLink.ctorParameters;\n/** @type {?} */\nWeUIFooterLink.prototype._renderer;\n/** @type {?} */\nWeUIFooterLink.prototype._elementRef;\n/** @type {?} */\nWeUIFooterLink.prototype._container;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright 厦门乾元盛世科技有限公司 All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file.\n */\n\n\nimport { Component, Input, Output, EventEmitter } from '@angular/core';\nimport { WeUIFile } from '../uploader/weui.uploader';\nexport class WeUIGallery {\n/**\n * 背景图片，如：url(./images/pic_160.png)\n */\nimage: WeUIFile;\n/**\n * 是否显示删除按钮\n */\ncanDelete = true;\n/**\n * 删除事件\n */\ndelete = new EventEmitter<WeUIFile>();\n/**\n * 已显示否\n */\npublic shown = false;\npublic _show = false;\nconstructor() {\n\n    }\n/**\n * 删除照片\n * @param {?} event\n * @return {?}\n */\ndeleteImage(event: Event): void {\n        this.delete.emit(this.image);\n        event.preventDefault();\n    }\n/**\n * 显示图片\n * @return {?}\n */\nshow(): void {\n        this._show = true;\n        setTimeout(() => { // 解决transition动画与display冲突的问题\n            this.shown = true;\n        }, 10);\n    }\n/**\n * 隐藏图片\n * @return {?}\n */\nhide(): void {\n        this.shown = false;\n        setTimeout(() => {\n            this._show = false;\n        }, 200);\n    }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n    selector: 'weui-gallery',\n    template: `\n        <div class=\"weui-gallery weui-transition-opacity\" [ngClass]=\"{'weui-block': _show, 'weui-fadeIn': shown}\">\n            <span class=\"weui-gallery__img\" [style.background-image]=\"image?.fileURL\"></span>\n            <div class=\"weui-gallery__opr\" *ngIf=\"canDelete\">\n                <a href=\"javascript:;\" class=\"weui-gallery__del\" (click)=\"deleteImage($event)\">\n                    <i class=\"weui-icon-delete weui-icon_gallery-delete\"></i>\n                </a>\n            </div>\n        </div>\n    `\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'image': [{ type: Input },],\n'canDelete': [{ type: Input },],\n'delete': [{ type: Output },],\n};\n}\n\nfunction WeUIGallery_tsickle_Closure_declarations() {\n/** @type {?} */\nWeUIGallery.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nWeUIGallery.ctorParameters;\n/** @type {?} */\nWeUIGallery.propDecorators;\n/**\n * 背景图片，如：url(./images/pic_160.png)\n * @type {?}\n */\nWeUIGallery.prototype.image;\n/**\n * 是否显示删除按钮\n * @type {?}\n */\nWeUIGallery.prototype.canDelete;\n/**\n * 删除事件\n * @type {?}\n */\nWeUIGallery.prototype.delete;\n/**\n * 已显示否\n * @type {?}\n */\nWeUIGallery.prototype.shown;\n/** @type {?} */\nWeUIGallery.prototype._show;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright 厦门乾元盛世科技有限公司 All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file.\n */\n\n\nimport { Component, Input, Output, EventEmitter, Renderer2, ElementRef, HostBinding, ContentChild } from '@angular/core';\nimport { OnChanges, SimpleChanges, forwardRef, ViewEncapsulation, Optional, Inject } from '@angular/core';\nimport { NgControl, NG_VALUE_ACCESSOR, COMPOSITION_BUFFER_MODE } from '@angular/forms';\nimport { WeUIFormControl } from './weui.form.control';\n\nconst /** @type {?} */ WEUI_INPUT_CONTROL_VALUE_ACCESSOR: any = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => WeUIInput),\n    multi: true\n};\nexport class WeUIInput extends WeUIFormControl implements OnChanges {\n/**\n * 控件类型：text, number, tel, email, password, date, datetime-local等\n */\ntype = 'text';\n/**\n * pattern 属性规定用于验证输入字段的模式（正则表达式）。<br>\n * 注释：pattern 属性适用于以下 <input> 类型：text, search, url, telephone, email 以及 password 。\n */\npattern: string;\n/**\n * placeholder 规定帮助用户填写输入字段的提示。<br>\n * 注释：placeholder 属性适用于以下的 <input> 类型：text, search, url, telephone, email 以及 password。\n */\nplaceholder: string;\n/**\n * maxlength 属性规定输入字段的最大长度，以字符个数计。<br>\n * 注释：maxlength 属性与 <input type=\"text\"> 或 <input type=\"password\"> 配合使用。\n */\nmaxlength: string;\n/**\n * minlength 属性规定输入字段的最小长度，以字符个数计。<br>\n * 注释：minlength 属性与 <input type=\"text\"> 或 <input type=\"password\"> 配合使用。\n */\nminlength: string;\n/**\n * max 属性规定输入字段所允许的最大值。<br>\n * 注释：max 和 min 属性适用于以下 <input> 类型：number, range, date, datetime, datetime-local, month, time 以及 week。\n */\nmax: number | Date;\n/**\n * min 属性规定输入字段所允许的最小值。<br>\n * 注释：max 和 min 属性适用于以下 <input> 类型：number, range, date, datetime, datetime-local, month, time 以及 week。\n */\nmin: number | Date;\n/**\n * 是否必填\n */\nrequired = false;\n/**\n * 是否只读\n */\nreadonly = false;\n/**\n * autocomplete 属性规定输入字段是否应该启用自动完成功能。默认为on。<br>\n * 自动完成允许浏览器预测对字段的输入。当用户在字段开始键入时，浏览器基于之前键入过的值，应该显示出在字段中填写的选项。\n */\nautocomplete = true;\n/**\n * 是否监听输入长度\n */\ncountChars = false;\n/**\n * 样式\n */\nbaseCls: string;\n/**\n * 输入域无效时显示告警图标，默认为true\n */\nshowWarnIcon = true;\n/**\n * 行数，当类型是textarea时\n */\nrows = 3;\n/**\n * \\@output {event} Expression to call when the input no longer has focus\n */\nblur: EventEmitter<Event> = new EventEmitter<Event>();\n/**\n * \\@output {event} Expression to call when the input has focus\n */\nfocus: EventEmitter<Event> = new EventEmitter<Event>();\n\n    // 实际输入控件(<input>)\n     state: NgControl;\n/**\n * @param {?} renderer\n * @param {?} elementRef\n * @param {?} compositionMode\n */\nconstructor(\nprivate renderer: Renderer2,\nprivate elementRef: ElementRef,\nprivate compositionMode: boolean) {\n        super(renderer, elementRef, compositionMode);\n    }\n/**\n * 扩展样式，如：weui-cell_example\n */\n_cls_check_label = true;\n/**\n * 扩展样式，如：weui-cell_example\n * @return {?}\n */\nget warnCls(): boolean {\n        return this.shouldWarn();\n    }\n/**\n * @param {?} changes\n * @return {?}\n */\nngOnChanges(changes: SimpleChanges): void {\n        const /** @type {?} */ changed = changes['baseCls'];\n        if (changed) {\n            const /** @type {?} */ _el = /** @type {?} */(( this.elementRef.nativeElement as HTMLElement));\n            if (changed.previousValue) {\n                _el.classList.remove(`weui-cell_${changed.previousValue}`);\n            }\n            if (changed.currentValue) {\n                _el.classList.add(`weui-cell_${changed.currentValue}`);\n            }\n        }\n    }\n/**\n * @return {?}\n */\nshouldWarn(): boolean {\n        return this.state.invalid === true &&\n            (this.state.touched === true || this.state.dirty === true);\n    }\n/**\n * @return {?}\n */\nshouldShowWarnIcon(): boolean {\n        return this.showWarnIcon && this.shouldWarn();\n    }\n/**\n * @param {?} ev\n * @return {?}\n */\nonBlur(ev: UIEvent) {\n        this.onTouched(); // set your control to 'touched'\n        this.blur.emit(ev);\n    }\n/**\n * @param {?} ev\n * @return {?}\n */\nonFocus(ev: UIEvent) {\n        this.focus.emit(ev);\n    }\n/**\n * 统计字符总长度\n * @return {?}\n */\ngetCharCount(): number {\n        return (this._value && this._value.length) || 0;\n    }\n/**\n * 当事件keyup、change时，当字数大于等于maxLength后，禁止输入\n * @param {?} event\n * @return {?}\n */\nonKeyboardEvent(event: KeyboardEvent): void {\n        const /** @type {?} */ maxLen = parseInt(this.maxlength, 10);\n        if (!isNaN(maxLen) && this.getCharCount() >= maxLen) {\n            if (event.keyCode !== 46 && event.keyCode !== 8) {\n                event.preventDefault(); // 禁止输入\n            }\n        }\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n    selector: 'weui-input',\n    template: `\n        <div class=\"weui-cell__hd\">\n            {{label}}<ng-content select=\"label\"></ng-content>\n        </div>\n        <div class=\"weui-cell__bd\">\n            <div class=\"weui-input-area\" *ngIf=\"type !== 'textarea'\">\n                <input #input class=\"weui-input\" [type]=\"type\"\n                    [attr.id]=\"id\" [attr.name]=\"name\" [placeholder]=\"placeholder\"\n                    [attr.maxlength]=\"maxlength\" [attr.minlength]=\"minlength\" [pattern]=\"pattern\"\n                    [attr.max]=\"max\" [attr.min]=\"min\" [required]=\"required\" [readonly]=\"readonly\"\n                    [disabled]=\"disabled\" [autocomplete]=\"autocomplete ? 'on' : 'off'\"\n                    [(ngModel)]=\"innerValue\"\n                    (blur)=\"onBlur($event)\" (focus)=\"onFocus($event)\"\n                    (keydown)=\"onKeyboardEvent($event)\" (keyup)=\"onKeyboardEvent($event)\" />\n                <div *ngIf=\"maxlength && countChars\" class=\"weui-text-counter\">\n                    <span>{{getCharCount()}}</span>/{{maxlength}}\n                </div>\n            </div>\n\n            <div class=\"weui-input-area\" *ngIf=\"type == 'textarea'\">\n                <textarea #textarea class=\"weui-textarea\"\n                    [placeholder]=\"placeholder\" [rows]=\"rows\"\n                    [required]=\"required\" [readonly]=\"readonly\"\n                    [attr.minlength]=\"minlength\" [attr.maxlength]=\"maxlength\"\n                    [(ngModel)]=\"innerValue\"\n                    (keydown)=\"onKeyboardEvent($event)\" (keyup)=\"onKeyboardEvent($event)\"></textarea>\n                <div *ngIf=\"maxlength && countChars\" class=\"weui-textarea-counter\">\n                    <span>{{getCharCount()}}</span>/{{maxlength}}\n                </div>\n            </div>\n        </div>\n        <div class=\"weui-cell__ft\">\n            <ng-content select=\"[weui-last]\"></ng-content>\n            <i class=\"weui-icon-warn\" *ngIf=\"shouldShowWarnIcon()\"></i>\n        </div>\n    `,\n    providers: [WEUI_INPUT_CONTROL_VALUE_ACCESSOR],\n    encapsulation: ViewEncapsulation.None\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Renderer2, },\n{type: ElementRef, },\n{type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [COMPOSITION_BUFFER_MODE, ] }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'type': [{ type: Input },],\n'pattern': [{ type: Input },],\n'placeholder': [{ type: Input },],\n'maxlength': [{ type: Input },],\n'minlength': [{ type: Input },],\n'max': [{ type: Input },],\n'min': [{ type: Input },],\n'required': [{ type: Input },],\n'readonly': [{ type: Input },],\n'autocomplete': [{ type: Input },],\n'countChars': [{ type: Input },],\n'baseCls': [{ type: Input },],\n'showWarnIcon': [{ type: Input },],\n'rows': [{ type: Input },],\n'blur': [{ type: Output },],\n'focus': [{ type: Output },],\n'state': [{ type: ContentChild, args: [NgControl, ] },],\n'_cls_check_label': [{ type: HostBinding, args: ['class.weui-check__label', ] },],\n'warnCls': [{ type: HostBinding, args: ['class.weui-cell_warn', ] },],\n};\n}\n\nfunction WeUIInput_tsickle_Closure_declarations() {\n/** @type {?} */\nWeUIInput.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nWeUIInput.ctorParameters;\n/** @type {?} */\nWeUIInput.propDecorators;\n/**\n * 控件类型：text, number, tel, email, password, date, datetime-local等\n * @type {?}\n */\nWeUIInput.prototype.type;\n/**\n * pattern 属性规定用于验证输入字段的模式（正则表达式）。<br>\n * 注释：pattern 属性适用于以下 <input> 类型：text, search, url, telephone, email 以及 password 。\n * @type {?}\n */\nWeUIInput.prototype.pattern;\n/**\n * placeholder 规定帮助用户填写输入字段的提示。<br>\n * 注释：placeholder 属性适用于以下的 <input> 类型：text, search, url, telephone, email 以及 password。\n * @type {?}\n */\nWeUIInput.prototype.placeholder;\n/**\n * maxlength 属性规定输入字段的最大长度，以字符个数计。<br>\n * 注释：maxlength 属性与 <input type=\"text\"> 或 <input type=\"password\"> 配合使用。\n * @type {?}\n */\nWeUIInput.prototype.maxlength;\n/**\n * minlength 属性规定输入字段的最小长度，以字符个数计。<br>\n * 注释：minlength 属性与 <input type=\"text\"> 或 <input type=\"password\"> 配合使用。\n * @type {?}\n */\nWeUIInput.prototype.minlength;\n/**\n * max 属性规定输入字段所允许的最大值。<br>\n * 注释：max 和 min 属性适用于以下 <input> 类型：number, range, date, datetime, datetime-local, month, time 以及 week。\n * @type {?}\n */\nWeUIInput.prototype.max;\n/**\n * min 属性规定输入字段所允许的最小值。<br>\n * 注释：max 和 min 属性适用于以下 <input> 类型：number, range, date, datetime, datetime-local, month, time 以及 week。\n * @type {?}\n */\nWeUIInput.prototype.min;\n/**\n * 是否必填\n * @type {?}\n */\nWeUIInput.prototype.required;\n/**\n * 是否只读\n * @type {?}\n */\nWeUIInput.prototype.readonly;\n/**\n * autocomplete 属性规定输入字段是否应该启用自动完成功能。默认为on。<br>\n * 自动完成允许浏览器预测对字段的输入。当用户在字段开始键入时，浏览器基于之前键入过的值，应该显示出在字段中填写的选项。\n * @type {?}\n */\nWeUIInput.prototype.autocomplete;\n/**\n * 是否监听输入长度\n * @type {?}\n */\nWeUIInput.prototype.countChars;\n/**\n * 样式\n * @type {?}\n */\nWeUIInput.prototype.baseCls;\n/**\n * 输入域无效时显示告警图标，默认为true\n * @type {?}\n */\nWeUIInput.prototype.showWarnIcon;\n/**\n * 行数，当类型是textarea时\n * @type {?}\n */\nWeUIInput.prototype.rows;\n/**\n * \\@output {event} Expression to call when the input no longer has focus\n * @type {?}\n */\nWeUIInput.prototype.blur;\n/**\n * \\@output {event} Expression to call when the input has focus\n * @type {?}\n */\nWeUIInput.prototype.focus;\n/** @type {?} */\nWeUIInput.prototype.state;\n/**\n * 扩展样式，如：weui-cell_example\n * @type {?}\n */\nWeUIInput.prototype._cls_check_label;\n/** @type {?} */\nWeUIInput.prototype.renderer;\n/** @type {?} */\nWeUIInput.prototype.elementRef;\n/** @type {?} */\nWeUIInput.prototype.compositionMode;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright 厦门乾元盛世科技有限公司 All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file.\n */\n\n\nimport { Component, Renderer2, ElementRef, Input, HostBinding, OnChanges, SimpleChanges } from '@angular/core';\nexport class WeUIItems implements OnChanges {\n/**\n * 控件样式，如：<code>'form'</code>对应的样式类为<code>'weui-cells_form'</code>\n */\nbaseCls: string;\n\n     _cls_cells = true;\n/**\n * @param {?} changes\n * @return {?}\n */\nngOnChanges(changes: SimpleChanges): void {\n        const /** @type {?} */ changed = changes['baseCls'];\n        if (changed) {\n            const /** @type {?} */ _el = /** @type {?} */(( this._elementRef.nativeElement as HTMLElement));\n            if (changed.previousValue) {\n                _el.classList.remove(`weui-cells_${changed.previousValue}`);\n            }\n            if (changed.currentValue) {\n                _el.classList.add(`weui-cells_${changed.currentValue}`);\n            }\n        }\n    }\n/**\n * @param {?} _renderer\n * @param {?} _elementRef\n */\nconstructor(private _renderer: Renderer2,\nprivate _elementRef: ElementRef) {\n\n    }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n    selector: 'weui-items',\n    template: `<ng-content></ng-content>`\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Renderer2, },\n{type: ElementRef, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'baseCls': [{ type: Input },],\n'_cls_cells': [{ type: HostBinding, args: ['class.weui-cells', ] },],\n};\n}\n\nfunction WeUIItems_tsickle_Closure_declarations() {\n/** @type {?} */\nWeUIItems.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nWeUIItems.ctorParameters;\n/** @type {?} */\nWeUIItems.propDecorators;\n/**\n * 控件样式，如：<code>'form'</code>对应的样式类为<code>'weui-cells_form'</code>\n * @type {?}\n */\nWeUIItems.prototype.baseCls;\n/** @type {?} */\nWeUIItems.prototype._cls_cells;\n/** @type {?} */\nWeUIItems.prototype._renderer;\n/** @type {?} */\nWeUIItems.prototype._elementRef;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright 厦门乾元盛世科技有限公司 All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file.\n */\n\n\nimport { Component, Input, Renderer2, ElementRef, HostBinding, OnChanges, SimpleChanges } from '@angular/core';\nexport class WeUIItem implements OnChanges {\n/**\n * 样式\n */\nbaseCls: string;\n\n\n     _cls_cell = true;\n     _cls_item = true;\n/**\n * @param {?} changes\n * @return {?}\n */\nngOnChanges(changes: SimpleChanges): void {\n        const /** @type {?} */ changed = changes['baseCls'];\n        if (changed) {\n            const /** @type {?} */ _el = /** @type {?} */(( this._elementRef.nativeElement as HTMLElement));\n            if (changed.previousValue) {\n                _el.classList.remove(`weui-cell_${changed.previousValue}`);\n            }\n            if (changed.currentValue) {\n                _el.classList.add(`weui-cell_${changed.currentValue}`);\n            }\n        }\n    }\n/**\n * @param {?} _renderer\n * @param {?} _elementRef\n */\nconstructor(private _renderer: Renderer2,\nprivate _elementRef: ElementRef) {\n\n    }\n/**\n * @param {?} cls\n * @return {?}\n */\naddClass(cls: string): void {\n        this._renderer.addClass(this._elementRef.nativeElement, cls);\n    }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n    selector: 'weui-item',\n    template: `\n        <div class=\"weui-cell__hd\">\n            <ng-content select=\"[weui-start]\"></ng-content>\n        </div>\n        <div class=\"weui-cell__bd\">\n            <ng-content select=\"[weui-content]\"></ng-content>\n            <ng-content></ng-content>\n        </div>\n        <div class=\"weui-cell__ft\">\n            <ng-content select=\"[weui-last]\"></ng-content>\n        </div>\n    `\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Renderer2, },\n{type: ElementRef, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'baseCls': [{ type: Input },],\n'_cls_cell': [{ type: HostBinding, args: ['class.weui-cell', ] },],\n'_cls_item': [{ type: HostBinding, args: ['class.weui-item', ] },],\n};\n}\n\nfunction WeUIItem_tsickle_Closure_declarations() {\n/** @type {?} */\nWeUIItem.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nWeUIItem.ctorParameters;\n/** @type {?} */\nWeUIItem.propDecorators;\n/**\n * 样式\n * @type {?}\n */\nWeUIItem.prototype.baseCls;\n/** @type {?} */\nWeUIItem.prototype._cls_cell;\n/** @type {?} */\nWeUIItem.prototype._cls_item;\n/** @type {?} */\nWeUIItem.prototype._renderer;\n/** @type {?} */\nWeUIItem.prototype._elementRef;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright 厦门乾元盛世科技有限公司 All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file.\n */\n\n\nimport { Component, Renderer2, ElementRef, Input, HostBinding, OnChanges, SimpleChanges } from '@angular/core';\nimport { DomSanitizer, SafeUrl } from '@angular/platform-browser';\nexport class WeUILink implements OnChanges {\n/**\n * 不显示最右边的箭头。默认为false，即：显示箭头。\n */\nnoPushArrow = false;\n/**\n * 样式\n */\nbaseCls: string;\n/**\n * 链接\n * @param {?} _href\n * @return {?}\n */\nset href(_href: string) {\n        this._href = this.sanitizer.bypassSecurityTrustUrl(_href);\n    }\n\n    _href: SafeUrl;\n\n     _cls_cell = true;\n     _cls_item = true;\n     _cls_cell_access = true;\n/**\n * @return {?}\n */\nget _cls_cell_access_noarrow() {\n        return this.noPushArrow;\n    }\n/**\n * @param {?} changes\n * @return {?}\n */\nngOnChanges(changes: SimpleChanges): void {\n        const /** @type {?} */ changed = changes['baseCls'];\n        if (changed) {\n            const /** @type {?} */ _el = /** @type {?} */(( this._elementRef.nativeElement as HTMLElement));\n            if (changed.previousValue) {\n                _el.classList.remove(`weui-cell_${changed.previousValue}`);\n            }\n            if (changed.currentValue) {\n                _el.classList.add(`weui-cell_${changed.currentValue}`);\n            }\n        }\n    }\n/**\n * @param {?} _renderer\n * @param {?} _elementRef\n * @param {?} sanitizer\n */\nconstructor(\nprivate _renderer: Renderer2,\nprivate _elementRef: ElementRef,\nprivate sanitizer: DomSanitizer) {\n\n    }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n    selector: 'weui-link',\n    template: `\n        <a class=\"weui-cell_access\" [href]=\"_href\">\n            <div class=\"weui-cell__hd\">\n                <ng-content select=\"[weui-start]\"></ng-content>\n            </div>\n            <div class=\"weui-cell__bd\">\n                <ng-content select=\"[weui-content]\"></ng-content>\n                <ng-content></ng-content>\n            </div>\n            <div class=\"weui-cell__ft\">\n                <ng-content select=\"[weui-last]\"></ng-content>\n            </div>\n        </a>\n    `\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Renderer2, },\n{type: ElementRef, },\n{type: DomSanitizer, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'noPushArrow': [{ type: Input },],\n'baseCls': [{ type: Input },],\n'href': [{ type: Input },],\n'_cls_cell': [{ type: HostBinding, args: ['class.weui-cell', ] },],\n'_cls_item': [{ type: HostBinding, args: ['class.weui-item', ] },],\n'_cls_cell_access': [{ type: HostBinding, args: ['class.weui-cell_access', ] },],\n'_cls_cell_access_noarrow': [{ type: HostBinding, args: ['class.weui-cell_access-noarrow', ] },],\n};\n}\n\nfunction WeUILink_tsickle_Closure_declarations() {\n/** @type {?} */\nWeUILink.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nWeUILink.ctorParameters;\n/** @type {?} */\nWeUILink.propDecorators;\n/**\n * 不显示最右边的箭头。默认为false，即：显示箭头。\n * @type {?}\n */\nWeUILink.prototype.noPushArrow;\n/**\n * 样式\n * @type {?}\n */\nWeUILink.prototype.baseCls;\n/** @type {?} */\nWeUILink.prototype._href;\n/** @type {?} */\nWeUILink.prototype._cls_cell;\n/** @type {?} */\nWeUILink.prototype._cls_item;\n/** @type {?} */\nWeUILink.prototype._cls_cell_access;\n/** @type {?} */\nWeUILink.prototype._renderer;\n/** @type {?} */\nWeUILink.prototype._elementRef;\n/** @type {?} */\nWeUILink.prototype.sanitizer;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright 厦门乾元盛世科技有限公司 All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file.\n */\n\n\nimport { Component, Input } from '@angular/core';\n/**\n * 加载更多\n */\nexport class WeUILoadmore {\n/**\n * 分割线\n */\nline: any;\n/**\n * 点\n */\ndot: any;\n/**\n * 正在加载\n */\nloading = false;\nconstructor() {\n\n    }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n    selector: 'weui-loadmore',\n    template: `\n        <div class=\"weui-loadmore\" [ngClass]=\"{\n                'weui-loadmore_line': line !== undefined && line !== null,\n                'weui-loadmore_dot': dot !== undefined && dot !== null }\">\n            <i class=\"weui-loading\" *ngIf=\"loading\"></i>\n            <span class=\"weui-loadmore__tips\"><ng-content></ng-content></span>\n        </div>\n    `\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'line': [{ type: Input },],\n'dot': [{ type: Input },],\n'loading': [{ type: Input },],\n};\n}\n\nfunction WeUILoadmore_tsickle_Closure_declarations() {\n/** @type {?} */\nWeUILoadmore.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nWeUILoadmore.ctorParameters;\n/** @type {?} */\nWeUILoadmore.propDecorators;\n/**\n * 分割线\n * @type {?}\n */\nWeUILoadmore.prototype.line;\n/**\n * 点\n * @type {?}\n */\nWeUILoadmore.prototype.dot;\n/**\n * 正在加载\n * @type {?}\n */\nWeUILoadmore.prototype.loading;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { OperatorFunction, MonoTypeOperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function scan<T>(accumulator: (acc: T, value: T, index: number) => T, seed?: T): MonoTypeOperatorFunction<T>;\nexport function scan<T>(accumulator: (acc: T[], value: T, index: number) => T[], seed?: T[]): OperatorFunction<T, T[]>;\nexport function scan<T, R>(accumulator: (acc: R, value: T, index: number) => R, seed?: R): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Applies an accumulator function over the source Observable, and returns each\n * intermediate result, with an optional seed value.\n *\n * <span class=\"informal\">It's like {@link reduce}, but emits the current\n * accumulation whenever the source emits a value.</span>\n *\n * <img src=\"./img/scan.png\" width=\"100%\">\n *\n * Combines together all values emitted on the source, using an accumulator\n * function that knows how to join a new source value into the accumulation from\n * the past. Is similar to {@link reduce}, but emits the intermediate\n * accumulations.\n *\n * Returns an Observable that applies a specified `accumulator` function to each\n * item emitted by the source Observable. If a `seed` value is specified, then\n * that value will be used as the initial value for the accumulator. If no seed\n * value is specified, the first item of the source is used as the seed.\n *\n * @example <caption>Count the number of click events</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var ones = clicks.mapTo(1);\n * var seed = 0;\n * var count = ones.scan((acc, one) => acc + one, seed);\n * count.subscribe(x => console.log(x));\n *\n * @see {@link expand}\n * @see {@link mergeScan}\n * @see {@link reduce}\n *\n * @param {function(acc: R, value: T, index: number): R} accumulator\n * The accumulator function called on each source value.\n * @param {T|R} [seed] The initial accumulation value.\n * @return {Observable<R>} An observable of the accumulated values.\n * @method scan\n * @owner Observable\n */\nexport function scan<T, R>(accumulator: (acc: R, value: T, index: number) => R, seed?: T | R): OperatorFunction<T, R> {\n  let hasSeed = false;\n  // providing a seed of `undefined` *should* be valid and trigger\n  // hasSeed! so don't use `seed !== undefined` checks!\n  // For this reason, we have to check it here at the original call site\n  // otherwise inside Operator/Subscriber we won't know if `undefined`\n  // means they didn't provide anything or if they literally provided `undefined`\n  if (arguments.length >= 2) {\n    hasSeed = true;\n  }\n\n  return function scanOperatorFunction(source: Observable<T>): Observable<R> {\n    return source.lift(new ScanOperator(accumulator, seed, hasSeed));\n  };\n}\n\nclass ScanOperator<T, R> implements Operator<T, R> {\n  constructor(private accumulator: (acc: R, value: T, index: number) => R, private seed?: T | R, private hasSeed: boolean = false) {}\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new ScanSubscriber(subscriber, this.accumulator, this.seed, this.hasSeed));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass ScanSubscriber<T, R> extends Subscriber<T> {\n  private index: number = 0;\n\n  get seed(): T | R {\n    return this._seed;\n  }\n\n  set seed(value: T | R) {\n    this.hasSeed = true;\n    this._seed = value;\n  }\n\n  constructor(destination: Subscriber<R>, private accumulator: (acc: R, value: T, index: number) => R, private _seed: T | R,\n              private hasSeed: boolean) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    if (!this.hasSeed) {\n      this.seed = value;\n      this.destination.next(value);\n    } else {\n      return this._tryNext(value);\n    }\n  }\n\n  private _tryNext(value: T): void {\n    const index = this.index++;\n    let result: any;\n    try {\n      result = this.accumulator(<R>this.seed, value, index);\n    } catch (err) {\n      this.destination.error(err);\n    }\n    this.seed = result;\n    this.destination.next(result);\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { ArgumentOutOfRangeError } from '../util/ArgumentOutOfRangeError';\nimport { EmptyObservable } from '../observable/EmptyObservable';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Emits only the last `count` values emitted by the source Observable.\n *\n * <span class=\"informal\">Remembers the latest `count` values, then emits those\n * only when the source completes.</span>\n *\n * <img src=\"./img/takeLast.png\" width=\"100%\">\n *\n * `takeLast` returns an Observable that emits at most the last `count` values\n * emitted by the source Observable. If the source emits fewer than `count`\n * values then all of its values are emitted. This operator must wait until the\n * `complete` notification emission from the source in order to emit the `next`\n * values on the output Observable, because otherwise it is impossible to know\n * whether or not more values will be emitted on the source. For this reason,\n * all values are emitted synchronously, followed by the complete notification.\n *\n * @example <caption>Take the last 3 values of an Observable with many values</caption>\n * var many = Rx.Observable.range(1, 100);\n * var lastThree = many.takeLast(3);\n * lastThree.subscribe(x => console.log(x));\n *\n * @see {@link take}\n * @see {@link takeUntil}\n * @see {@link takeWhile}\n * @see {@link skip}\n *\n * @throws {ArgumentOutOfRangeError} When using `takeLast(i)`, it delivers an\n * ArgumentOutOrRangeError to the Observer's `error` callback if `i < 0`.\n *\n * @param {number} count The maximum number of values to emit from the end of\n * the sequence of values emitted by the source Observable.\n * @return {Observable<T>} An Observable that emits at most the last count\n * values emitted by the source Observable.\n * @method takeLast\n * @owner Observable\n */\nexport function takeLast<T>(count: number): MonoTypeOperatorFunction<T> {\n  return function takeLastOperatorFunction(source: Observable<T>): Observable<T> {\n    if (count === 0) {\n      return new EmptyObservable<T>();\n    } else {\n      return source.lift(new TakeLastOperator(count));\n    }\n  };\n}\n\nclass TakeLastOperator<T> implements Operator<T, T> {\n  constructor(private total: number) {\n    if (this.total < 0) {\n      throw new ArgumentOutOfRangeError;\n    }\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new TakeLastSubscriber(subscriber, this.total));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass TakeLastSubscriber<T> extends Subscriber<T> {\n  private ring: Array<T> = new Array();\n  private count: number = 0;\n\n  constructor(destination: Subscriber<T>, private total: number) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    const ring = this.ring;\n    const total = this.total;\n    const count = this.count++;\n\n    if (ring.length < total) {\n      ring.push(value);\n    } else {\n      const index = count % total;\n      ring[index] = value;\n    }\n  }\n\n  protected _complete(): void {\n    const destination = this.destination;\n    let count = this.count;\n\n    if (count > 0) {\n      const total = this.count >= this.total ? this.total : this.count;\n      const ring  = this.ring;\n\n      for (let i = 0; i < total; i++) {\n        const idx = (count++) % total;\n        destination.next(ring[idx]);\n      }\n    }\n\n    destination.complete();\n  }\n}\n","import { Observable, ObservableInput } from '../Observable';\nimport { Operator } from '../Operator';\nimport { PartialObserver } from '../Observer';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function mergeMapTo<T, R>(observable: ObservableInput<R>, concurrent?: number): OperatorFunction<T, R>;\nexport function mergeMapTo<T, I, R>(observable: ObservableInput<I>, resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R, concurrent?: number): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Projects each source value to the same Observable which is merged multiple\n * times in the output Observable.\n *\n * <span class=\"informal\">It's like {@link mergeMap}, but maps each value always\n * to the same inner Observable.</span>\n *\n * <img src=\"./img/mergeMapTo.png\" width=\"100%\">\n *\n * Maps each source value to the given Observable `innerObservable` regardless\n * of the source value, and then merges those resulting Observables into one\n * single Observable, which is the output Observable.\n *\n * @example <caption>For each click event, start an interval Observable ticking every 1 second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.mergeMapTo(Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link concatMapTo}\n * @see {@link merge}\n * @see {@link mergeAll}\n * @see {@link mergeMap}\n * @see {@link mergeScan}\n * @see {@link switchMapTo}\n *\n * @param {ObservableInput} innerObservable An Observable to replace each value from\n * the source Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n * Observables being subscribed to concurrently.\n * @return {Observable} An Observable that emits items from the given\n * `innerObservable` (and optionally transformed through `resultSelector`) every\n * time a value is emitted on the source Observable.\n * @method mergeMapTo\n * @owner Observable\n */\nexport function mergeMapTo<T, I, R>(innerObservable: Observable<I>,\n                                    resultSelector?: ((outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R) | number,\n                                    concurrent: number = Number.POSITIVE_INFINITY): OperatorFunction<T, R> {\n  if (typeof resultSelector === 'number') {\n    concurrent = <number>resultSelector;\n    resultSelector = null;\n  }\n  return (source: Observable<T>) => source.lift(new MergeMapToOperator(innerObservable, <any>resultSelector, concurrent));\n}\n\n// TODO: Figure out correct signature here: an Operator<Observable<T>, R>\n//       needs to implement call(observer: Subscriber<R>): Subscriber<Observable<T>>\nexport class MergeMapToOperator<T, I, R> implements Operator<Observable<T>, R> {\n  constructor(private ish: ObservableInput<I>,\n              private resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R,\n              private concurrent: number = Number.POSITIVE_INFINITY) {\n  }\n\n  call(observer: Subscriber<R>, source: any): any {\n    return source.subscribe(new MergeMapToSubscriber(observer, this.ish, this.resultSelector, this.concurrent));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class MergeMapToSubscriber<T, I, R> extends OuterSubscriber<T, I> {\n  private hasCompleted: boolean = false;\n  private buffer: T[] = [];\n  private active: number = 0;\n  protected index: number = 0;\n\n  constructor(destination: Subscriber<R>,\n              private ish: ObservableInput<I>,\n              private resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R,\n              private concurrent: number = Number.POSITIVE_INFINITY) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    if (this.active < this.concurrent) {\n      const resultSelector = this.resultSelector;\n      const index = this.index++;\n      const ish = this.ish;\n      const destination = this.destination;\n\n      this.active++;\n      this._innerSub(ish, destination, resultSelector, value, index);\n    } else {\n      this.buffer.push(value);\n    }\n  }\n\n  private _innerSub(ish: ObservableInput<I>,\n                    destination: PartialObserver<I>,\n                    resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R,\n                    value: T,\n                    index: number): void {\n    this.add(subscribeToResult<T, I>(this, ish, value, index));\n  }\n\n  protected _complete(): void {\n    this.hasCompleted = true;\n    if (this.active === 0 && this.buffer.length === 0) {\n      this.destination.complete();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: I,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, I>): void {\n    const { resultSelector, destination } = this;\n    if (resultSelector) {\n      this.trySelectResult(outerValue, innerValue, outerIndex, innerIndex);\n    } else {\n      destination.next(innerValue);\n    }\n  }\n\n  private trySelectResult(outerValue: T, innerValue: I,\n                          outerIndex: number, innerIndex: number): void {\n    const { resultSelector, destination } = this;\n    let result: R;\n    try {\n      result = resultSelector(outerValue, innerValue, outerIndex, innerIndex);\n    } catch (err) {\n      destination.error(err);\n      return;\n    }\n\n    destination.next(result);\n  }\n\n  notifyError(err: any): void {\n    this.destination.error(err);\n  }\n\n  notifyComplete(innerSub: Subscription): void {\n    const buffer = this.buffer;\n    this.remove(innerSub);\n    this.active--;\n    if (buffer.length > 0) {\n      this._next(buffer.shift());\n    } else if (this.active === 0 && this.hasCompleted) {\n      this.destination.complete();\n    }\n  }\n}\n","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Applies an accumulator function over the source Observable where the\n * accumulator function itself returns an Observable, then each intermediate\n * Observable returned is merged into the output Observable.\n *\n * <span class=\"informal\">It's like {@link scan}, but the Observables returned\n * by the accumulator are merged into the outer Observable.</span>\n *\n * @example <caption>Count the number of click events</caption>\n * const click$ = Rx.Observable.fromEvent(document, 'click');\n * const one$ = click$.mapTo(1);\n * const seed = 0;\n * const count$ = one$.mergeScan((acc, one) => Rx.Observable.of(acc + one), seed);\n * count$.subscribe(x => console.log(x));\n *\n * // Results:\n * 1\n * 2\n * 3\n * 4\n * // ...and so on for each click\n *\n * @param {function(acc: R, value: T): Observable<R>} accumulator\n * The accumulator function called on each source value.\n * @param seed The initial accumulation value.\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of\n * input Observables being subscribed to concurrently.\n * @return {Observable<R>} An observable of the accumulated values.\n * @method mergeScan\n * @owner Observable\n */\nexport function mergeScan<T, R>(accumulator: (acc: R, value: T) => Observable<R>,\n                                seed: R,\n                                concurrent: number = Number.POSITIVE_INFINITY): OperatorFunction<T, R> {\n  return (source: Observable<T>) => source.lift(new MergeScanOperator(accumulator, seed, concurrent));\n}\n\nexport class MergeScanOperator<T, R> implements Operator<T, R> {\n  constructor(private accumulator: (acc: R, value: T) => Observable<R>,\n              private seed: R,\n              private concurrent: number) {\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new MergeScanSubscriber(\n      subscriber, this.accumulator, this.seed, this.concurrent\n    ));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class MergeScanSubscriber<T, R> extends OuterSubscriber<T, R> {\n  private hasValue: boolean = false;\n  private hasCompleted: boolean = false;\n  private buffer: Observable<any>[] = [];\n  private active: number = 0;\n  protected index: number = 0;\n\n  constructor(destination: Subscriber<R>,\n              private accumulator: (acc: R, value: T) => Observable<R>,\n              private acc: R,\n              private concurrent: number) {\n    super(destination);\n  }\n\n  protected _next(value: any): void {\n    if (this.active < this.concurrent) {\n      const index = this.index++;\n      const ish = tryCatch(this.accumulator)(this.acc, value);\n      const destination = this.destination;\n      if (ish === errorObject) {\n        destination.error(errorObject.e);\n      } else {\n        this.active++;\n        this._innerSub(ish, value, index);\n      }\n    } else {\n      this.buffer.push(value);\n    }\n  }\n\n  private _innerSub(ish: any, value: T, index: number): void {\n    this.add(subscribeToResult<T, R>(this, ish, value, index));\n  }\n\n  protected _complete(): void {\n    this.hasCompleted = true;\n    if (this.active === 0 && this.buffer.length === 0) {\n      if (this.hasValue === false) {\n        this.destination.next(this.acc);\n      }\n      this.destination.complete();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    const { destination } = this;\n    this.acc = innerValue;\n    this.hasValue = true;\n    destination.next(innerValue);\n  }\n\n  notifyComplete(innerSub: Subscription): void {\n    const buffer = this.buffer;\n    this.remove(innerSub);\n    this.active--;\n    if (buffer.length > 0) {\n      this._next(buffer.shift());\n    } else if (this.active === 0 && this.hasCompleted) {\n      if (this.hasValue === false) {\n        this.destination.next(this.acc);\n      }\n      this.destination.complete();\n    }\n  }\n}\n","import { Observable, ObservableInput } from '../Observable';\nimport { FromObservable } from '../observable/FromObservable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { isArray } from '../util/isArray';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function onErrorResumeNext<T, R>(v: ObservableInput<R>): OperatorFunction<T, R>;\nexport function onErrorResumeNext<T, T2, T3, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>): OperatorFunction<T, R>;\nexport function onErrorResumeNext<T, T2, T3, T4, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>): OperatorFunction<T, R>;\nexport function onErrorResumeNext<T, T2, T3, T4, T5, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>): OperatorFunction<T, R>;\nexport function onErrorResumeNext<T, T2, T3, T4, T5, T6, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>): OperatorFunction<T, R> ;\nexport function onErrorResumeNext<T, R>(...observables: Array<ObservableInput<any> | ((...values: Array<any>) => R)>): OperatorFunction<T, R>;\nexport function onErrorResumeNext<T, R>(array: ObservableInput<any>[]): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * When any of the provided Observable emits an complete or error notification, it immediately subscribes to the next one\n * that was passed.\n *\n * <span class=\"informal\">Execute series of Observables no matter what, even if it means swallowing errors.</span>\n *\n * <img src=\"./img/onErrorResumeNext.png\" width=\"100%\">\n *\n * `onErrorResumeNext` is an operator that accepts a series of Observables, provided either directly as\n * arguments or as an array. If no single Observable is provided, returned Observable will simply behave the same\n * as the source.\n *\n * `onErrorResumeNext` returns an Observable that starts by subscribing and re-emitting values from the source Observable.\n * When its stream of values ends - no matter if Observable completed or emitted an error - `onErrorResumeNext`\n * will subscribe to the first Observable that was passed as an argument to the method. It will start re-emitting\n * its values as well and - again - when that stream ends, `onErrorResumeNext` will proceed to subscribing yet another\n * Observable in provided series, no matter if previous Observable completed or ended with an error. This will\n * be happening until there is no more Observables left in the series, at which point returned Observable will\n * complete - even if the last subscribed stream ended with an error.\n *\n * `onErrorResumeNext` can be therefore thought of as version of {@link concat} operator, which is more permissive\n * when it comes to the errors emitted by its input Observables. While `concat` subscribes to the next Observable\n * in series only if previous one successfully completed, `onErrorResumeNext` subscribes even if it ended with\n * an error.\n *\n * Note that you do not get any access to errors emitted by the Observables. In particular do not\n * expect these errors to appear in error callback passed to {@link subscribe}. If you want to take\n * specific actions based on what error was emitted by an Observable, you should try out {@link catch} instead.\n *\n *\n * @example <caption>Subscribe to the next Observable after map fails</caption>\n * Rx.Observable.of(1, 2, 3, 0)\n *   .map(x => {\n *       if (x === 0) { throw Error(); }\n         return 10 / x;\n *   })\n *   .onErrorResumeNext(Rx.Observable.of(1, 2, 3))\n *   .subscribe(\n *     val => console.log(val),\n *     err => console.log(err),          // Will never be called.\n *     () => console.log('that\\'s it!')\n *   );\n *\n * // Logs:\n * // 10\n * // 5\n * // 3.3333333333333335\n * // 1\n * // 2\n * // 3\n * // \"that's it!\"\n *\n * @see {@link concat}\n * @see {@link catch}\n *\n * @param {...ObservableInput} observables Observables passed either directly or as an array.\n * @return {Observable} An Observable that emits values from source Observable, but - if it errors - subscribes\n * to the next passed Observable and so on, until it completes or runs out of Observables.\n * @method onErrorResumeNext\n * @owner Observable\n */\n\nexport function onErrorResumeNext<T, R>(...nextSources: Array<ObservableInput<any> |\n                                                       Array<ObservableInput<any>> |\n                                                       ((...values: Array<any>) => R)>): OperatorFunction<T, R> {\n  if (nextSources.length === 1 && isArray(nextSources[0])) {\n    nextSources = <Array<Observable<any>>>nextSources[0];\n  }\n\n  return (source: Observable<T>) => source.lift(new OnErrorResumeNextOperator<T, R>(nextSources));\n}\n\n/* tslint:disable:max-line-length */\nexport function onErrorResumeNextStatic<R>(v: ObservableInput<R>): Observable<R>;\nexport function onErrorResumeNextStatic<T2, T3, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>): Observable<R>;\nexport function onErrorResumeNextStatic<T2, T3, T4, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>): Observable<R>;\nexport function onErrorResumeNextStatic<T2, T3, T4, T5, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>): Observable<R>;\nexport function onErrorResumeNextStatic<T2, T3, T4, T5, T6, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>): Observable<R>;\n\nexport function onErrorResumeNextStatic<R>(...observables: Array<ObservableInput<any> | ((...values: Array<any>) => R)>): Observable<R>;\nexport function onErrorResumeNextStatic<R>(array: ObservableInput<any>[]): Observable<R>;\n/* tslint:enable:max-line-length */\n\nexport function onErrorResumeNextStatic<T, R>(...nextSources: Array<ObservableInput<any> |\n                                                              Array<ObservableInput<any>> |\n                                                              ((...values: Array<any>) => R)>): Observable<R> {\n  let source: ObservableInput<any> = null;\n\n  if (nextSources.length === 1 && isArray(nextSources[0])) {\n    nextSources = <Array<ObservableInput<any>>>nextSources[0];\n  }\n  source = nextSources.shift();\n\n  return new FromObservable(source, null).lift(new OnErrorResumeNextOperator<T, R>(nextSources));\n}\n\nclass OnErrorResumeNextOperator<T, R> implements Operator<T, R> {\n  constructor(private nextSources: Array<ObservableInput<any>>) {\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new OnErrorResumeNextSubscriber(subscriber, this.nextSources));\n  }\n}\n\nclass OnErrorResumeNextSubscriber<T, R> extends OuterSubscriber<T, R> {\n  constructor(protected destination: Subscriber<T>,\n              private nextSources: Array<ObservableInput<any>>) {\n    super(destination);\n  }\n\n  notifyError(error: any, innerSub: InnerSubscriber<T, any>): void {\n    this.subscribeToNextSource();\n  }\n\n  notifyComplete(innerSub: InnerSubscriber<T, any>): void {\n    this.subscribeToNextSource();\n  }\n\n  protected _error(err: any): void {\n    this.subscribeToNextSource();\n  }\n\n  protected _complete(): void {\n    this.subscribeToNextSource();\n  }\n\n  private subscribeToNextSource(): void {\n    const next = this.nextSources.shift();\n    if (next) {\n      this.add(subscribeToResult(this, next));\n    } else {\n      this.destination.complete();\n    }\n  }\n}\n","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Groups pairs of consecutive emissions together and emits them as an array of\n * two values.\n *\n * <span class=\"informal\">Puts the current value and previous value together as\n * an array, and emits that.</span>\n *\n * <img src=\"./img/pairwise.png\" width=\"100%\">\n *\n * The Nth emission from the source Observable will cause the output Observable\n * to emit an array [(N-1)th, Nth] of the previous and the current value, as a\n * pair. For this reason, `pairwise` emits on the second and subsequent\n * emissions from the source Observable, but not on the first emission, because\n * there is no previous value in that case.\n *\n * @example <caption>On every click (starting from the second), emit the relative distance to the previous click</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var pairs = clicks.pairwise();\n * var distance = pairs.map(pair => {\n *   var x0 = pair[0].clientX;\n *   var y0 = pair[0].clientY;\n *   var x1 = pair[1].clientX;\n *   var y1 = pair[1].clientY;\n *   return Math.sqrt(Math.pow(x0 - x1, 2) + Math.pow(y0 - y1, 2));\n * });\n * distance.subscribe(x => console.log(x));\n *\n * @see {@link buffer}\n * @see {@link bufferCount}\n *\n * @return {Observable<Array<T>>} An Observable of pairs (as arrays) of\n * consecutive values from the source Observable.\n * @method pairwise\n * @owner Observable\n */\nexport function pairwise<T>(): OperatorFunction<T, [T, T]> {\n  return (source: Observable<T>) => source.lift(new PairwiseOperator());\n}\n\nclass PairwiseOperator<T> implements Operator<T, [T, T]> {\n  call(subscriber: Subscriber<[T, T]>, source: any): any {\n    return source.subscribe(new PairwiseSubscriber(subscriber));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass PairwiseSubscriber<T> extends Subscriber<T> {\n  private prev: T;\n  private hasPrev: boolean = false;\n\n  constructor(destination: Subscriber<[T, T]>) {\n    super(destination);\n  }\n\n  _next(value: T): void {\n    if (this.hasPrev) {\n      this.destination.next([this.prev, value]);\n    } else {\n      this.hasPrev = true;\n    }\n\n    this.prev = value;\n  }\n}\n","import { Subject } from './Subject';\nimport { Subscriber } from './Subscriber';\nimport { Subscription, ISubscription } from './Subscription';\nimport { ObjectUnsubscribedError } from './util/ObjectUnsubscribedError';\n\n/**\n * @class BehaviorSubject<T>\n */\nexport class BehaviorSubject<T> extends Subject<T> {\n\n  constructor(private _value: T) {\n    super();\n  }\n\n  get value(): T {\n    return this.getValue();\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): Subscription {\n    const subscription = super._subscribe(subscriber);\n    if (subscription && !(<ISubscription>subscription).closed) {\n      subscriber.next(this._value);\n    }\n    return subscription;\n  }\n\n  getValue(): T {\n    if (this.hasError) {\n      throw this.thrownError;\n    } else if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    } else {\n      return this._value;\n    }\n  }\n\n  next(value: T): void {\n    super.next(this._value = value);\n  }\n}\n","import { Subject } from './Subject';\nimport { Subscriber } from './Subscriber';\nimport { Subscription } from './Subscription';\n\n/**\n * @class AsyncSubject<T>\n */\nexport class AsyncSubject<T> extends Subject<T> {\n  private value: T = null;\n  private hasNext: boolean = false;\n  private hasCompleted: boolean = false;\n\n  protected _subscribe(subscriber: Subscriber<any>): Subscription {\n    if (this.hasError) {\n      subscriber.error(this.thrownError);\n      return Subscription.EMPTY;\n    } else if (this.hasCompleted && this.hasNext) {\n      subscriber.next(this.value);\n      subscriber.complete();\n      return Subscription.EMPTY;\n    }\n    return super._subscribe(subscriber);\n  }\n\n  next(value: T): void {\n    if (!this.hasCompleted) {\n      this.value = value;\n      this.hasNext = true;\n    }\n  }\n\n  error(error: any): void {\n    if (!this.hasCompleted) {\n      super.error(error);\n    }\n  }\n\n  complete(): void {\n    this.hasCompleted = true;\n    if (this.hasNext) {\n      super.next(this.value);\n    }\n    super.complete();\n  }\n}\n","import { AsyncAction } from './AsyncAction';\nimport { Subscription } from '../Subscription';\nimport { QueueScheduler } from './QueueScheduler';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class QueueAction<T> extends AsyncAction<T> {\n\n  constructor(protected scheduler: QueueScheduler,\n              protected work: (this: QueueAction<T>, state?: T) => void) {\n    super(scheduler, work);\n  }\n\n  public schedule(state?: T, delay: number = 0): Subscription {\n    if (delay > 0) {\n      return super.schedule(state, delay);\n    }\n    this.delay = delay;\n    this.state = state;\n    this.scheduler.flush(this);\n    return this;\n  }\n\n  public execute(state: T, delay: number): any {\n    return (delay > 0 || this.closed) ?\n      super.execute(state, delay) :\n      this._execute(state, delay) ;\n  }\n\n  protected requestAsyncId(scheduler: QueueScheduler, id?: any, delay: number = 0): any {\n    // If delay exists and is greater than 0, or if the delay is null (the\n    // action wasn't rescheduled) but was originally scheduled as an async\n    // action, then recycle as an async action.\n    if ((delay !== null && delay > 0) || (delay === null && this.delay > 0)) {\n      return super.requestAsyncId(scheduler, id, delay);\n    }\n    // Otherwise flush the scheduler starting with this action.\n    return scheduler.flush(this);\n  }\n}\n","import { AsyncScheduler } from './AsyncScheduler';\n\nexport class QueueScheduler extends AsyncScheduler {\n}\n","import { Subject } from './Subject';\nimport { IScheduler } from './Scheduler';\nimport { queue } from './scheduler/queue';\nimport { Subscriber } from './Subscriber';\nimport { Subscription } from './Subscription';\nimport { ObserveOnSubscriber } from './operators/observeOn';\nimport { ObjectUnsubscribedError } from './util/ObjectUnsubscribedError';\nimport { SubjectSubscription } from './SubjectSubscription';\n/**\n * @class ReplaySubject<T>\n */\nexport class ReplaySubject<T> extends Subject<T> {\n  private _events: ReplayEvent<T>[] = [];\n  private _bufferSize: number;\n  private _windowTime: number;\n\n  constructor(bufferSize: number = Number.POSITIVE_INFINITY,\n              windowTime: number = Number.POSITIVE_INFINITY,\n              private scheduler?: IScheduler) {\n    super();\n    this._bufferSize = bufferSize < 1 ? 1 : bufferSize;\n    this._windowTime = windowTime < 1 ? 1 : windowTime;\n  }\n\n  next(value: T): void {\n    const now = this._getNow();\n    this._events.push(new ReplayEvent(now, value));\n    this._trimBufferThenGetEvents();\n    super.next(value);\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): Subscription {\n    const _events = this._trimBufferThenGetEvents();\n    const scheduler = this.scheduler;\n    let subscription: Subscription;\n\n    if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    } else if (this.hasError) {\n      subscription = Subscription.EMPTY;\n    } else if (this.isStopped) {\n      subscription = Subscription.EMPTY;\n    } else {\n      this.observers.push(subscriber);\n      subscription = new SubjectSubscription(this, subscriber);\n    }\n\n    if (scheduler) {\n      subscriber.add(subscriber = new ObserveOnSubscriber<T>(subscriber, scheduler));\n    }\n\n    const len = _events.length;\n    for (let i = 0; i < len && !subscriber.closed; i++) {\n      subscriber.next(_events[i].value);\n    }\n\n    if (this.hasError) {\n      subscriber.error(this.thrownError);\n    } else if (this.isStopped) {\n      subscriber.complete();\n    }\n\n    return subscription;\n  }\n\n  _getNow(): number {\n    return (this.scheduler || queue).now();\n  }\n\n  private _trimBufferThenGetEvents(): ReplayEvent<T>[] {\n    const now = this._getNow();\n    const _bufferSize = this._bufferSize;\n    const _windowTime = this._windowTime;\n    const _events = this._events;\n\n    let eventsCount = _events.length;\n    let spliceCount = 0;\n\n    // Trim events that fall out of the time window.\n    // Start at the front of the list. Break early once\n    // we encounter an event that falls within the window.\n    while (spliceCount < eventsCount) {\n      if ((now - _events[spliceCount].time) < _windowTime) {\n        break;\n      }\n      spliceCount++;\n    }\n\n    if (eventsCount > _bufferSize) {\n      spliceCount = Math.max(spliceCount, eventsCount - _bufferSize);\n    }\n\n    if (spliceCount > 0) {\n      _events.splice(0, spliceCount);\n    }\n\n    return _events;\n  }\n}\n\nclass ReplayEvent<T> {\n  constructor(public time: number, public value: T) {\n  }\n}\n","import { Observable } from '../Observable';\nimport { isArray } from '../util/isArray';\nimport { ArrayObservable } from '../observable/ArrayObservable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription, TeardownLogic } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\n/**\n * Returns an Observable that mirrors the first source Observable to emit an item.\n * @param {...Observables} ...observables sources used to race for which Observable emits first.\n * @return {Observable} an Observable that mirrors the output of the first Observable to emit an item.\n * @static true\n * @name race\n * @owner Observable\n */\nexport function race<T>(observables: Array<Observable<T>>): Observable<T>;\nexport function race<T>(observables: Array<Observable<any>>): Observable<T>;\nexport function race<T>(...observables: Array<Observable<T> | Array<Observable<T>>>): Observable<T>;\nexport function race<T>(...observables: Array<Observable<any> | Array<Observable<any>>>): Observable<T> {\n  // if the only argument is an array, it was most likely called with\n  // `race([obs1, obs2, ...])`\n  if (observables.length === 1) {\n    if (isArray(observables[0])) {\n      observables = <Array<Observable<any>>>observables[0];\n    } else {\n      return <Observable<any>>observables[0];\n    }\n  }\n\n  return new ArrayObservable<T>(<any>observables).lift(new RaceOperator<T>());\n}\n\nexport class RaceOperator<T> implements Operator<T, T> {\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new RaceSubscriber(subscriber));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class RaceSubscriber<T> extends OuterSubscriber<T, T> {\n  private hasFirst: boolean = false;\n  private observables: Observable<any>[] = [];\n  private subscriptions: Subscription[] = [];\n\n  constructor(destination: Subscriber<T>) {\n    super(destination);\n  }\n\n  protected _next(observable: any): void {\n    this.observables.push(observable);\n  }\n\n  protected _complete() {\n    const observables = this.observables;\n    const len = observables.length;\n\n    if (len === 0) {\n      this.destination.complete();\n    } else {\n      for (let i = 0; i < len && !this.hasFirst; i++) {\n        let observable = observables[i];\n        let subscription = subscribeToResult(this, observable, observable, i);\n\n        if (this.subscriptions) {\n          this.subscriptions.push(subscription);\n        }\n        this.add(subscription);\n      }\n      this.observables = null;\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: T,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, T>): void {\n    if (!this.hasFirst) {\n      this.hasFirst = true;\n\n      for (let i = 0; i < this.subscriptions.length; i++) {\n        if (i !== outerIndex) {\n          let subscription = this.subscriptions[i];\n\n          subscription.unsubscribe();\n          this.remove(subscription);\n        }\n      }\n\n      this.subscriptions = null;\n    }\n\n    this.destination.next(innerValue);\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { EmptyObservable } from '../observable/EmptyObservable';\nimport { TeardownLogic } from '../Subscription';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Returns an Observable that repeats the stream of items emitted by the source Observable at most count times.\n *\n * <img src=\"./img/repeat.png\" width=\"100%\">\n *\n * @param {number} [count] The number of times the source Observable items are repeated, a count of 0 will yield\n * an empty Observable.\n * @return {Observable} An Observable that repeats the stream of items emitted by the source Observable at most\n * count times.\n * @method repeat\n * @owner Observable\n */\nexport function repeat<T>(count: number = -1): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => {\n    if (count === 0) {\n      return new EmptyObservable<T>();\n    } else if (count < 0) {\n      return source.lift(new RepeatOperator(-1, source));\n    } else {\n      return source.lift(new RepeatOperator(count - 1, source));\n    }\n  };\n}\n\nclass RepeatOperator<T> implements Operator<T, T> {\n  constructor(private count: number,\n              private source: Observable<T>) {\n  }\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new RepeatSubscriber(subscriber, this.count, this.source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass RepeatSubscriber<T> extends Subscriber<T> {\n  constructor(destination: Subscriber<any>,\n              private count: number,\n              private source: Observable<T>) {\n    super(destination);\n  }\n  complete() {\n    if (!this.isStopped) {\n      const { source, count } = this;\n      if (count === 0) {\n        return super.complete();\n      } else if (count > -1) {\n        this.count = count - 1;\n      }\n      source.subscribe(this._unsubscribeAndRecycle());\n    }\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { Subject } from '../Subject';\nimport { Subscription, TeardownLogic } from '../Subscription';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\n\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Returns an Observable that mirrors the source Observable with the exception of a `complete`. If the source\n * Observable calls `complete`, this method will emit to the Observable returned from `notifier`. If that Observable\n * calls `complete` or `error`, then this method will call `complete` or `error` on the child subscription. Otherwise\n * this method will resubscribe to the source Observable.\n *\n * <img src=\"./img/repeatWhen.png\" width=\"100%\">\n *\n * @param {function(notifications: Observable): Observable} notifier - Receives an Observable of notifications with\n * which a user can `complete` or `error`, aborting the repetition.\n * @return {Observable} The source Observable modified with repeat logic.\n * @method repeatWhen\n * @owner Observable\n */\nexport function repeatWhen<T>(notifier: (notifications: Observable<any>) => Observable<any>): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new RepeatWhenOperator(notifier));\n}\n\nclass RepeatWhenOperator<T> implements Operator<T, T> {\n  constructor(protected notifier: (notifications: Observable<any>) => Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new RepeatWhenSubscriber(subscriber, this.notifier, source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass RepeatWhenSubscriber<T, R> extends OuterSubscriber<T, R> {\n\n  private notifications: Subject<any>;\n  private retries: Observable<any>;\n  private retriesSubscription: Subscription;\n  private sourceIsBeingSubscribedTo: boolean = true;\n\n  constructor(destination: Subscriber<R>,\n              private notifier: (notifications: Observable<any>) => Observable<any>,\n              private source: Observable<T>) {\n    super(destination);\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.sourceIsBeingSubscribedTo = true;\n    this.source.subscribe(this);\n  }\n\n  notifyComplete(innerSub: InnerSubscriber<T, R>): void {\n    if (this.sourceIsBeingSubscribedTo === false) {\n      return super.complete();\n    }\n  }\n\n  complete() {\n    this.sourceIsBeingSubscribedTo = false;\n\n    if (!this.isStopped) {\n      if (!this.retries) {\n        this.subscribeToRetries();\n      } else if (this.retriesSubscription.closed) {\n        return super.complete();\n      }\n\n      this._unsubscribeAndRecycle();\n      this.notifications.next();\n    }\n  }\n\n  protected _unsubscribe() {\n    const { notifications, retriesSubscription } = this;\n    if (notifications) {\n      notifications.unsubscribe();\n      this.notifications = null;\n    }\n    if (retriesSubscription) {\n      retriesSubscription.unsubscribe();\n      this.retriesSubscription = null;\n    }\n    this.retries = null;\n  }\n\n  protected _unsubscribeAndRecycle(): Subscriber<T> {\n    const { notifications, retries, retriesSubscription } = this;\n    this.notifications = null;\n    this.retries = null;\n    this.retriesSubscription = null;\n    super._unsubscribeAndRecycle();\n    this.notifications = notifications;\n    this.retries = retries;\n    this.retriesSubscription = retriesSubscription;\n    return this;\n  }\n\n  private subscribeToRetries() {\n    this.notifications = new Subject();\n    const retries = tryCatch(this.notifier)(this.notifications);\n    if (retries === errorObject) {\n      return super.complete();\n    }\n    this.retries = retries;\n    this.retriesSubscription = subscribeToResult(this, retries);\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\n\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Returns an Observable that mirrors the source Observable with the exception of an `error`. If the source Observable\n * calls `error`, this method will resubscribe to the source Observable for a maximum of `count` resubscriptions (given\n * as a number parameter) rather than propagating the `error` call.\n *\n * <img src=\"./img/retry.png\" width=\"100%\">\n *\n * Any and all items emitted by the source Observable will be emitted by the resulting Observable, even those emitted\n * during failed subscriptions. For example, if an Observable fails at first but emits [1, 2] then succeeds the second\n * time and emits: [1, 2, 3, 4, 5] then the complete stream of emissions and notifications\n * would be: [1, 2, 1, 2, 3, 4, 5, `complete`].\n * @param {number} count - Number of retry attempts before failing.\n * @return {Observable} The source Observable modified with the retry logic.\n * @method retry\n * @owner Observable\n */\nexport function retry<T>(count: number = -1): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new RetryOperator(count, source));\n}\n\nclass RetryOperator<T> implements Operator<T, T> {\n  constructor(private count: number,\n              private source: Observable<T>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new RetrySubscriber(subscriber, this.count, this.source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass RetrySubscriber<T> extends Subscriber<T> {\n  constructor(destination: Subscriber<any>,\n              private count: number,\n              private source: Observable<T>) {\n    super(destination);\n  }\n  error(err: any) {\n    if (!this.isStopped) {\n      const { source, count } = this;\n      if (count === 0) {\n        return super.error(err);\n      } else if (count > -1) {\n        this.count = count - 1;\n      }\n      source.subscribe(this._unsubscribeAndRecycle());\n    }\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { Subject } from '../Subject';\nimport { Subscription, TeardownLogic } from '../Subscription';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\n\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Returns an Observable that mirrors the source Observable with the exception of an `error`. If the source Observable\n * calls `error`, this method will emit the Throwable that caused the error to the Observable returned from `notifier`.\n * If that Observable calls `complete` or `error` then this method will call `complete` or `error` on the child\n * subscription. Otherwise this method will resubscribe to the source Observable.\n *\n * <img src=\"./img/retryWhen.png\" width=\"100%\">\n *\n * @param {function(errors: Observable): Observable} notifier - Receives an Observable of notifications with which a\n * user can `complete` or `error`, aborting the retry.\n * @return {Observable} The source Observable modified with retry logic.\n * @method retryWhen\n * @owner Observable\n */\nexport function retryWhen<T>(notifier: (errors: Observable<any>) => Observable<any>): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new RetryWhenOperator(notifier, source));\n}\n\nclass RetryWhenOperator<T> implements Operator<T, T> {\n  constructor(protected notifier: (errors: Observable<any>) => Observable<any>,\n              protected source: Observable<T>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new RetryWhenSubscriber(subscriber, this.notifier, this.source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass RetryWhenSubscriber<T, R> extends OuterSubscriber<T, R> {\n\n  private errors: Subject<any>;\n  private retries: Observable<any>;\n  private retriesSubscription: Subscription;\n\n  constructor(destination: Subscriber<R>,\n              private notifier: (errors: Observable<any>) => Observable<any>,\n              private source: Observable<T>) {\n    super(destination);\n  }\n\n  error(err: any) {\n    if (!this.isStopped) {\n\n      let errors = this.errors;\n      let retries: any = this.retries;\n      let retriesSubscription = this.retriesSubscription;\n\n      if (!retries) {\n        errors = new Subject();\n        retries = tryCatch(this.notifier)(errors);\n        if (retries === errorObject) {\n          return super.error(errorObject.e);\n        }\n        retriesSubscription = subscribeToResult(this, retries);\n      } else {\n        this.errors = null;\n        this.retriesSubscription = null;\n      }\n\n      this._unsubscribeAndRecycle();\n\n      this.errors = errors;\n      this.retries = retries;\n      this.retriesSubscription = retriesSubscription;\n\n      errors.next(err);\n    }\n  }\n\n  protected _unsubscribe() {\n    const { errors, retriesSubscription } = this;\n    if (errors) {\n      errors.unsubscribe();\n      this.errors = null;\n    }\n    if (retriesSubscription) {\n      retriesSubscription.unsubscribe();\n      this.retriesSubscription = null;\n    }\n    this.retries = null;\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    const { errors, retries, retriesSubscription } = this;\n    this.errors = null;\n    this.retries = null;\n    this.retriesSubscription = null;\n\n    this._unsubscribeAndRecycle();\n\n    this.errors = errors;\n    this.retries = retries;\n    this.retriesSubscription = retriesSubscription;\n\n    this.source.subscribe(this);\n  }\n}\n","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { TeardownLogic } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Emits the most recently emitted value from the source Observable whenever\n * another Observable, the `notifier`, emits.\n *\n * <span class=\"informal\">It's like {@link sampleTime}, but samples whenever\n * the `notifier` Observable emits something.</span>\n *\n * <img src=\"./img/sample.png\" width=\"100%\">\n *\n * Whenever the `notifier` Observable emits a value or completes, `sample`\n * looks at the source Observable and emits whichever value it has most recently\n * emitted since the previous sampling, unless the source has not emitted\n * anything since the previous sampling. The `notifier` is subscribed to as soon\n * as the output Observable is subscribed.\n *\n * @example <caption>On every click, sample the most recent \"seconds\" timer</caption>\n * var seconds = Rx.Observable.interval(1000);\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = seconds.sample(clicks);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link audit}\n * @see {@link debounce}\n * @see {@link sampleTime}\n * @see {@link throttle}\n *\n * @param {Observable<any>} notifier The Observable to use for sampling the\n * source Observable.\n * @return {Observable<T>} An Observable that emits the results of sampling the\n * values emitted by the source Observable whenever the notifier Observable\n * emits value or completes.\n * @method sample\n * @owner Observable\n */\nexport function sample<T>(notifier: Observable<any>): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new SampleOperator(notifier));\n}\n\nclass SampleOperator<T> implements Operator<T, T> {\n  constructor(private notifier: Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    const sampleSubscriber = new SampleSubscriber(subscriber);\n    const subscription = source.subscribe(sampleSubscriber);\n    subscription.add(subscribeToResult(sampleSubscriber, this.notifier));\n    return subscription;\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SampleSubscriber<T, R> extends OuterSubscriber<T, R> {\n  private value: T;\n  private hasValue: boolean = false;\n\n  protected _next(value: T) {\n    this.value = value;\n    this.hasValue = true;\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.emitValue();\n  }\n\n  notifyComplete(): void {\n    this.emitValue();\n  }\n\n  emitValue() {\n    if (this.hasValue) {\n      this.hasValue = false;\n      this.destination.next(this.value);\n    }\n  }\n}\n","import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { IScheduler } from '../Scheduler';\nimport { Action } from '../scheduler/Action';\nimport { async } from '../scheduler/async';\nimport { TeardownLogic } from '../Subscription';\n\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Emits the most recently emitted value from the source Observable within\n * periodic time intervals.\n *\n * <span class=\"informal\">Samples the source Observable at periodic time\n * intervals, emitting what it samples.</span>\n *\n * <img src=\"./img/sampleTime.png\" width=\"100%\">\n *\n * `sampleTime` periodically looks at the source Observable and emits whichever\n * value it has most recently emitted since the previous sampling, unless the\n * source has not emitted anything since the previous sampling. The sampling\n * happens periodically in time every `period` milliseconds (or the time unit\n * defined by the optional `scheduler` argument). The sampling starts as soon as\n * the output Observable is subscribed.\n *\n * @example <caption>Every second, emit the most recent click at most once</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.sampleTime(1000);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link auditTime}\n * @see {@link debounceTime}\n * @see {@link delay}\n * @see {@link sample}\n * @see {@link throttleTime}\n *\n * @param {number} period The sampling period expressed in milliseconds or the\n * time unit determined internally by the optional `scheduler`.\n * @param {Scheduler} [scheduler=async] The {@link IScheduler} to use for\n * managing the timers that handle the sampling.\n * @return {Observable<T>} An Observable that emits the results of sampling the\n * values emitted by the source Observable at the specified time interval.\n * @method sampleTime\n * @owner Observable\n */\nexport function sampleTime<T>(period: number, scheduler: IScheduler = async): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new SampleTimeOperator(period, scheduler));\n}\n\nclass SampleTimeOperator<T> implements Operator<T, T> {\n  constructor(private period: number,\n              private scheduler: IScheduler) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new SampleTimeSubscriber(subscriber, this.period, this.scheduler));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SampleTimeSubscriber<T> extends Subscriber<T> {\n  lastValue: T;\n  hasValue: boolean = false;\n\n  constructor(destination: Subscriber<T>,\n              private period: number,\n              private scheduler: IScheduler) {\n    super(destination);\n    this.add(scheduler.schedule(dispatchNotification, period, { subscriber: this, period }));\n  }\n\n  protected _next(value: T) {\n    this.lastValue = value;\n    this.hasValue = true;\n  }\n\n  notifyNext() {\n    if (this.hasValue) {\n      this.hasValue = false;\n      this.destination.next(this.lastValue);\n    }\n  }\n}\n\nfunction dispatchNotification<T>(this: Action<any>, state: any) {\n  let { subscriber, period } = state;\n  subscriber.notifyNext();\n  this.schedule(state, period);\n}\n","import { Operator } from '../Operator';\nimport { Observer } from '../Observer';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\n\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Compares all values of two observables in sequence using an optional comparor function\n * and returns an observable of a single boolean value representing whether or not the two sequences\n * are equal.\n *\n * <span class=\"informal\">Checks to see of all values emitted by both observables are equal, in order.</span>\n *\n * <img src=\"./img/sequenceEqual.png\" width=\"100%\">\n *\n * `sequenceEqual` subscribes to two observables and buffers incoming values from each observable. Whenever either\n * observable emits a value, the value is buffered and the buffers are shifted and compared from the bottom\n * up; If any value pair doesn't match, the returned observable will emit `false` and complete. If one of the\n * observables completes, the operator will wait for the other observable to complete; If the other\n * observable emits before completing, the returned observable will emit `false` and complete. If one observable never\n * completes or emits after the other complets, the returned observable will never complete.\n *\n * @example <caption>figure out if the Konami code matches</caption>\n * var code = Rx.Observable.from([\n *  \"ArrowUp\",\n *  \"ArrowUp\",\n *  \"ArrowDown\",\n *  \"ArrowDown\",\n *  \"ArrowLeft\",\n *  \"ArrowRight\",\n *  \"ArrowLeft\",\n *  \"ArrowRight\",\n *  \"KeyB\",\n *  \"KeyA\",\n *  \"Enter\" // no start key, clearly.\n * ]);\n *\n * var keys = Rx.Observable.fromEvent(document, 'keyup')\n *  .map(e => e.code);\n * var matches = keys.bufferCount(11, 1)\n *  .mergeMap(\n *    last11 =>\n *      Rx.Observable.from(last11)\n *        .sequenceEqual(code)\n *   );\n * matches.subscribe(matched => console.log('Successful cheat at Contra? ', matched));\n *\n * @see {@link combineLatest}\n * @see {@link zip}\n * @see {@link withLatestFrom}\n *\n * @param {Observable} compareTo The observable sequence to compare the source sequence to.\n * @param {function} [comparor] An optional function to compare each value pair\n * @return {Observable} An Observable of a single boolean value representing whether or not\n * the values emitted by both observables were equal in sequence.\n * @method sequenceEqual\n * @owner Observable\n */\nexport function sequenceEqual<T>(compareTo: Observable<T>,\n                                 comparor?: (a: T, b: T) => boolean): OperatorFunction<T, boolean> {\n  return (source: Observable<T>) => source.lift(new SequenceEqualOperator(compareTo, comparor));\n}\n\nexport class SequenceEqualOperator<T> implements Operator<T, boolean> {\n  constructor(private compareTo: Observable<T>,\n              private comparor: (a: T, b: T) => boolean) {\n  }\n\n  call(subscriber: Subscriber<boolean>, source: any): any {\n    return source.subscribe(new SequenceEqualSubscriber(subscriber, this.compareTo, this.comparor));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class SequenceEqualSubscriber<T, R> extends Subscriber<T> {\n  private _a: T[] = [];\n  private _b: T[] = [];\n  private _oneComplete = false;\n\n  constructor(destination: Observer<R>,\n              private compareTo: Observable<T>,\n              private comparor: (a: T, b: T) => boolean) {\n    super(destination);\n    this.add(compareTo.subscribe(new SequenceEqualCompareToSubscriber(destination, this)));\n  }\n\n  protected _next(value: T): void {\n    if (this._oneComplete && this._b.length === 0) {\n      this.emit(false);\n    } else {\n      this._a.push(value);\n      this.checkValues();\n    }\n  }\n\n  public _complete(): void {\n    if (this._oneComplete) {\n      this.emit(this._a.length === 0 && this._b.length === 0);\n    } else {\n      this._oneComplete = true;\n    }\n  }\n\n  checkValues() {\n    const { _a, _b, comparor } = this;\n    while (_a.length > 0 && _b.length > 0) {\n      let a = _a.shift();\n      let b = _b.shift();\n      let areEqual = false;\n      if (comparor) {\n        areEqual = tryCatch(comparor)(a, b);\n        if (areEqual === errorObject) {\n          this.destination.error(errorObject.e);\n        }\n      } else {\n        areEqual = a === b;\n      }\n      if (!areEqual) {\n        this.emit(false);\n      }\n    }\n  }\n\n  emit(value: boolean) {\n    const { destination } = this;\n    destination.next(value);\n    destination.complete();\n  }\n\n  nextB(value: T) {\n    if (this._oneComplete && this._a.length === 0) {\n      this.emit(false);\n    } else {\n      this._b.push(value);\n      this.checkValues();\n    }\n  }\n}\n\nclass SequenceEqualCompareToSubscriber<T, R> extends Subscriber<T> {\n  constructor(destination: Observer<R>, private parent: SequenceEqualSubscriber<T, R>) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    this.parent.nextB(value);\n  }\n\n  protected _error(err: any): void {\n    this.parent.error(err);\n  }\n\n  protected _complete(): void {\n    this.parent._complete();\n  }\n}\n","import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observer } from '../Observer';\nimport { EmptyError } from '../util/EmptyError';\nimport { TeardownLogic } from '../Subscription';\n\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Returns an Observable that emits the single item emitted by the source Observable that matches a specified\n * predicate, if that Observable emits one such item. If the source Observable emits more than one such item or no\n * such items, notify of an IllegalArgumentException or NoSuchElementException respectively.\n *\n * <img src=\"./img/single.png\" width=\"100%\">\n *\n * @throws {EmptyError} Delivers an EmptyError to the Observer's `error`\n * callback if the Observable completes before any `next` notification was sent.\n * @param {Function} predicate - A predicate function to evaluate items emitted by the source Observable.\n * @return {Observable<T>} An Observable that emits the single item emitted by the source Observable that matches\n * the predicate.\n .\n * @method single\n * @owner Observable\n */\nexport function single<T>(predicate?: (value: T, index: number, source: Observable<T>) => boolean): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new SingleOperator(predicate, source));\n}\n\nclass SingleOperator<T> implements Operator<T, T> {\n  constructor(private predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n              private source?: Observable<T>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new SingleSubscriber(subscriber, this.predicate, this.source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SingleSubscriber<T> extends Subscriber<T> {\n  private seenValue: boolean = false;\n  private singleValue: T;\n  private index: number = 0;\n\n  constructor(destination: Observer<T>,\n              private predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n              private source?: Observable<T>) {\n    super(destination);\n  }\n\n  private applySingleValue(value: T): void {\n    if (this.seenValue) {\n      this.destination.error('Sequence contains more than one element');\n    } else {\n      this.seenValue = true;\n      this.singleValue = value;\n    }\n  }\n\n  protected _next(value: T): void {\n    const index = this.index++;\n\n    if (this.predicate) {\n      this.tryNext(value, index);\n    } else {\n      this.applySingleValue(value);\n    }\n  }\n\n  private tryNext(value: T, index: number): void {\n    try {\n      if (this.predicate(value, index, this.source)) {\n        this.applySingleValue(value);\n      }\n    } catch (err) {\n      this.destination.error(err);\n    }\n  }\n\n  protected _complete(): void {\n    const destination = this.destination;\n\n    if (this.index > 0) {\n      destination.next(this.seenValue ? this.singleValue : undefined);\n      destination.complete();\n    } else {\n      destination.error(new EmptyError);\n    }\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Returns an Observable that skips the first `count` items emitted by the source Observable.\n *\n * <img src=\"./img/skip.png\" width=\"100%\">\n *\n * @param {Number} count - The number of times, items emitted by source Observable should be skipped.\n * @return {Observable} An Observable that skips values emitted by the source Observable.\n *\n * @method skip\n * @owner Observable\n */\nexport function skip<T>(count: number): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new SkipOperator(count));\n}\n\nclass SkipOperator<T> implements Operator<T, T> {\n  constructor(private total: number) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new SkipSubscriber(subscriber, this.total));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SkipSubscriber<T> extends Subscriber<T> {\n  count: number = 0;\n\n  constructor(destination: Subscriber<T>, private total: number) {\n    super(destination);\n  }\n\n  protected _next(x: T) {\n    if (++this.count > this.total) {\n      this.destination.next(x);\n    }\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { ArgumentOutOfRangeError } from '../util/ArgumentOutOfRangeError';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Skip the last `count` values emitted by the source Observable.\n *\n * <img src=\"./img/skipLast.png\" width=\"100%\">\n *\n * `skipLast` returns an Observable that accumulates a queue with a length\n * enough to store the first `count` values. As more values are received,\n * values are taken from the front of the queue and produced on the result\n * sequence. This causes values to be delayed.\n *\n * @example <caption>Skip the last 2 values of an Observable with many values</caption>\n * var many = Rx.Observable.range(1, 5);\n * var skipLastTwo = many.skipLast(2);\n * skipLastTwo.subscribe(x => console.log(x));\n *\n * // Results in:\n * // 1 2 3\n *\n * @see {@link skip}\n * @see {@link skipUntil}\n * @see {@link skipWhile}\n * @see {@link take}\n *\n * @throws {ArgumentOutOfRangeError} When using `skipLast(i)`, it throws\n * ArgumentOutOrRangeError if `i < 0`.\n *\n * @param {number} count Number of elements to skip from the end of the source Observable.\n * @returns {Observable<T>} An Observable that skips the last count values\n * emitted by the source Observable.\n * @method skipLast\n * @owner Observable\n */\nexport function skipLast<T>(count: number): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new SkipLastOperator(count));\n}\n\nclass SkipLastOperator<T> implements Operator<T, T> {\n  constructor(private _skipCount: number) {\n    if (this._skipCount < 0) {\n      throw new ArgumentOutOfRangeError;\n    }\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    if (this._skipCount === 0) {\n      // If we don't want to skip any values then just subscribe\n      // to Subscriber without any further logic.\n      return source.subscribe(new Subscriber(subscriber));\n    } else {\n      return source.subscribe(new SkipLastSubscriber(subscriber, this._skipCount));\n    }\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SkipLastSubscriber<T> extends Subscriber<T> {\n  private _ring: T[];\n  private _count: number = 0;\n\n  constructor(destination: Subscriber<T>, private _skipCount: number) {\n    super(destination);\n    this._ring = new Array<T>(_skipCount);\n  }\n\n  protected _next(value: T): void {\n    const skipCount = this._skipCount;\n    const count = this._count++;\n\n    if (count < skipCount) {\n      this._ring[count] = value;\n    } else {\n      const currentIndex = count % skipCount;\n      const ring = this._ring;\n      const oldValue = ring[currentIndex];\n\n      ring[currentIndex] = value;\n      this.destination.next(oldValue);\n    }\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Returns an Observable that skips items emitted by the source Observable until a second Observable emits an item.\n *\n * <img src=\"./img/skipUntil.png\" width=\"100%\">\n *\n * @param {Observable} notifier - The second Observable that has to emit an item before the source Observable's elements begin to\n * be mirrored by the resulting Observable.\n * @return {Observable<T>} An Observable that skips items from the source Observable until the second Observable emits\n * an item, then emits the remaining items.\n * @method skipUntil\n * @owner Observable\n */\nexport function skipUntil<T>(notifier: Observable<any>): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new SkipUntilOperator(notifier));\n}\n\nclass SkipUntilOperator<T> implements Operator<T, T> {\n  constructor(private notifier: Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new SkipUntilSubscriber(subscriber, this.notifier));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SkipUntilSubscriber<T, R> extends OuterSubscriber<T, R> {\n\n  private hasValue: boolean = false;\n  private isInnerStopped: boolean = false;\n\n  constructor(destination: Subscriber<any>,\n              notifier: Observable<any>) {\n    super(destination);\n    this.add(subscribeToResult(this, notifier));\n  }\n\n  protected _next(value: T) {\n    if (this.hasValue) {\n      super._next(value);\n    }\n  }\n\n  protected _complete() {\n    if (this.isInnerStopped) {\n      super._complete();\n    } else {\n      this.unsubscribe();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.hasValue = true;\n  }\n\n  notifyComplete(): void {\n    this.isInnerStopped = true;\n    if (this.isStopped) {\n      super._complete();\n    }\n  }\n}\n","import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { TeardownLogic } from '../Subscription';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Returns an Observable that skips all items emitted by the source Observable as long as a specified condition holds\n * true, but emits all further source items as soon as the condition becomes false.\n *\n * <img src=\"./img/skipWhile.png\" width=\"100%\">\n *\n * @param {Function} predicate - A function to test each item emitted from the source Observable.\n * @return {Observable<T>} An Observable that begins emitting items emitted by the source Observable when the\n * specified predicate becomes false.\n * @method skipWhile\n * @owner Observable\n */\nexport function skipWhile<T>(predicate: (value: T, index: number) => boolean): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new SkipWhileOperator(predicate));\n}\n\nclass SkipWhileOperator<T> implements Operator<T, T> {\n  constructor(private predicate: (value: T, index: number) => boolean) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new SkipWhileSubscriber(subscriber, this.predicate));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SkipWhileSubscriber<T> extends Subscriber<T> {\n  private skipping: boolean = true;\n  private index: number = 0;\n\n  constructor(destination: Subscriber<T>,\n              private predicate: (value: T, index: number) => boolean) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    const destination = this.destination;\n    if (this.skipping) {\n      this.tryCallPredicate(value);\n    }\n\n    if (!this.skipping) {\n      destination.next(value);\n    }\n  }\n\n  private tryCallPredicate(value: T): void {\n    try {\n      const result = this.predicate(value, this.index++);\n      this.skipping = Boolean(result);\n    } catch (err) {\n      this.destination.error(err);\n    }\n  }\n}\n","import { Operator } from '../Operator';\nimport { Observable, ObservableInput } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function switchMap<T, R>(project: (value: T, index: number) => ObservableInput<R>): OperatorFunction<T, R>;\nexport function switchMap<T, I, R>(project: (value: T, index: number) => ObservableInput<I>, resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Projects each source value to an Observable which is merged in the output\n * Observable, emitting values only from the most recently projected Observable.\n *\n * <span class=\"informal\">Maps each value to an Observable, then flattens all of\n * these inner Observables using {@link switch}.</span>\n *\n * <img src=\"./img/switchMap.png\" width=\"100%\">\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an (so-called \"inner\") Observable. Each time it observes one of these\n * inner Observables, the output Observable begins emitting the items emitted by\n * that inner Observable. When a new inner Observable is emitted, `switchMap`\n * stops emitting items from the earlier-emitted inner Observable and begins\n * emitting items from the new one. It continues to behave like this for\n * subsequent inner Observables.\n *\n * @example <caption>Rerun an interval Observable on every click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.switchMap((ev) => Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link concatMap}\n * @see {@link exhaustMap}\n * @see {@link mergeMap}\n * @see {@link switch}\n * @see {@link switchMapTo}\n *\n * @param {function(value: T, ?index: number): ObservableInput} project A function\n * that, when applied to an item emitted by the source Observable, returns an\n * Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @return {Observable} An Observable that emits the result of applying the\n * projection function (and the optional `resultSelector`) to each item emitted\n * by the source Observable and taking only the values from the most recently\n * projected inner Observable.\n * @method switchMap\n * @owner Observable\n */\nexport function switchMap<T, I, R>(\n  project: (value: T, index: number) => ObservableInput<I>,\n  resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R\n): OperatorFunction<T, I | R> {\n  return function switchMapOperatorFunction(source: Observable<T>): Observable<I | R> {\n    return source.lift(new SwitchMapOperator(project, resultSelector));\n  };\n}\n\nclass SwitchMapOperator<T, I, R> implements Operator<T, I> {\n  constructor(private project: (value: T, index: number) => ObservableInput<I>,\n              private resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R) {\n  }\n\n  call(subscriber: Subscriber<I>, source: any): any {\n    return source.subscribe(new SwitchMapSubscriber(subscriber, this.project, this.resultSelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SwitchMapSubscriber<T, I, R> extends OuterSubscriber<T, I> {\n  private index: number = 0;\n  private innerSubscription: Subscription;\n\n  constructor(destination: Subscriber<I>,\n              private project: (value: T, index: number) => ObservableInput<I>,\n              private resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R) {\n    super(destination);\n  }\n\n  protected _next(value: T) {\n    let result: ObservableInput<I>;\n    const index = this.index++;\n    try {\n      result = this.project(value, index);\n    } catch (error) {\n      this.destination.error(error);\n      return;\n    }\n    this._innerSub(result, value, index);\n  }\n\n  private _innerSub(result: ObservableInput<I>, value: T, index: number) {\n    const innerSubscription = this.innerSubscription;\n    if (innerSubscription) {\n      innerSubscription.unsubscribe();\n    }\n    this.add(this.innerSubscription = subscribeToResult(this, result, value, index));\n  }\n\n  protected _complete(): void {\n    const {innerSubscription} = this;\n    if (!innerSubscription || innerSubscription.closed) {\n      super._complete();\n    }\n  }\n\n  protected _unsubscribe() {\n    this.innerSubscription = null;\n  }\n\n  notifyComplete(innerSub: Subscription): void {\n    this.remove(innerSub);\n    this.innerSubscription = null;\n    if (this.isStopped) {\n      super._complete();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: I,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, I>): void {\n    if (this.resultSelector) {\n      this._tryNotifyNext(outerValue, innerValue, outerIndex, innerIndex);\n    } else {\n      this.destination.next(innerValue);\n    }\n  }\n\n  private _tryNotifyNext(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): void {\n    let result: R;\n    try {\n      result = this.resultSelector(outerValue, innerValue, outerIndex, innerIndex);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.destination.next(result);\n  }\n}\n","import { Operator } from '../Operator';\nimport { Observable, ObservableInput } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function switchMapTo<T, R>(observable: ObservableInput<R>): OperatorFunction<T, R>;\nexport function switchMapTo<T, I, R>(observable: ObservableInput<I>, resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Projects each source value to the same Observable which is flattened multiple\n * times with {@link switch} in the output Observable.\n *\n * <span class=\"informal\">It's like {@link switchMap}, but maps each value\n * always to the same inner Observable.</span>\n *\n * <img src=\"./img/switchMapTo.png\" width=\"100%\">\n *\n * Maps each source value to the given Observable `innerObservable` regardless\n * of the source value, and then flattens those resulting Observables into one\n * single Observable, which is the output Observable. The output Observables\n * emits values only from the most recently emitted instance of\n * `innerObservable`.\n *\n * @example <caption>Rerun an interval Observable on every click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.switchMapTo(Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link concatMapTo}\n * @see {@link switch}\n * @see {@link switchMap}\n * @see {@link mergeMapTo}\n *\n * @param {ObservableInput} innerObservable An Observable to replace each value from\n * the source Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @return {Observable} An Observable that emits items from the given\n * `innerObservable` (and optionally transformed through `resultSelector`) every\n * time a value is emitted on the source Observable, and taking only the values\n * from the most recently projected inner Observable.\n * @method switchMapTo\n * @owner Observable\n */\nexport function switchMapTo<T, I, R>(innerObservable: Observable<I>,\n                                     resultSelector?: (outerValue: T,\n                                                       innerValue: I,\n                                                       outerIndex: number,\n                                                       innerIndex: number) => R): OperatorFunction<T, I | R> {\n  return (source: Observable<T>) => source.lift(new SwitchMapToOperator(innerObservable, resultSelector));\n}\n\nclass SwitchMapToOperator<T, I, R> implements Operator<T, I> {\n  constructor(private observable: Observable<I>,\n              private resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R) {\n  }\n\n  call(subscriber: Subscriber<I>, source: any): any {\n    return source.subscribe(new SwitchMapToSubscriber(subscriber, this.observable, this.resultSelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SwitchMapToSubscriber<T, I, R> extends OuterSubscriber<T, I> {\n  private index: number = 0;\n  private innerSubscription: Subscription;\n\n  constructor(destination: Subscriber<I>,\n              private inner: Observable<I>,\n              private resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R) {\n    super(destination);\n  }\n\n  protected _next(value: any) {\n    const innerSubscription = this.innerSubscription;\n    if (innerSubscription) {\n      innerSubscription.unsubscribe();\n    }\n    this.add(this.innerSubscription = subscribeToResult(this, this.inner, value, this.index++));\n  }\n\n  protected _complete() {\n    const {innerSubscription} = this;\n    if (!innerSubscription || innerSubscription.closed) {\n      super._complete();\n    }\n  }\n\n  protected _unsubscribe() {\n    this.innerSubscription = null;\n  }\n\n  notifyComplete(innerSub: Subscription) {\n    this.remove(innerSub);\n    this.innerSubscription = null;\n    if (this.isStopped) {\n      super._complete();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: I,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, I>): void {\n    const { resultSelector, destination } = this;\n    if (resultSelector) {\n      this.tryResultSelector(outerValue, innerValue, outerIndex, innerIndex);\n    } else {\n      destination.next(innerValue);\n    }\n  }\n\n  private tryResultSelector(outerValue: T, innerValue: I,\n                            outerIndex: number, innerIndex: number): void {\n    const { resultSelector, destination } = this;\n    let result: R;\n    try {\n      result = resultSelector(outerValue, innerValue, outerIndex, innerIndex);\n    } catch (err) {\n      destination.error(err);\n      return;\n    }\n\n    destination.next(result);\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { ArgumentOutOfRangeError } from '../util/ArgumentOutOfRangeError';\nimport { EmptyObservable } from '../observable/EmptyObservable';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Emits only the first `count` values emitted by the source Observable.\n *\n * <span class=\"informal\">Takes the first `count` values from the source, then\n * completes.</span>\n *\n * <img src=\"./img/take.png\" width=\"100%\">\n *\n * `take` returns an Observable that emits only the first `count` values emitted\n * by the source Observable. If the source emits fewer than `count` values then\n * all of its values are emitted. After that, it completes, regardless if the\n * source completes.\n *\n * @example <caption>Take the first 5 seconds of an infinite 1-second interval Observable</caption>\n * var interval = Rx.Observable.interval(1000);\n * var five = interval.take(5);\n * five.subscribe(x => console.log(x));\n *\n * @see {@link takeLast}\n * @see {@link takeUntil}\n * @see {@link takeWhile}\n * @see {@link skip}\n *\n * @throws {ArgumentOutOfRangeError} When using `take(i)`, it delivers an\n * ArgumentOutOrRangeError to the Observer's `error` callback if `i < 0`.\n *\n * @param {number} count The maximum number of `next` values to emit.\n * @return {Observable<T>} An Observable that emits only the first `count`\n * values emitted by the source Observable, or all of the values from the source\n * if the source emits fewer than `count` values.\n * @method take\n * @owner Observable\n */\nexport function take<T>(count: number): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => {\n    if (count === 0) {\n      return new EmptyObservable<T>();\n    } else {\n      return source.lift(new TakeOperator(count));\n    }\n  };\n}\n\nclass TakeOperator<T> implements Operator<T, T> {\n  constructor(private total: number) {\n    if (this.total < 0) {\n      throw new ArgumentOutOfRangeError;\n    }\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new TakeSubscriber(subscriber, this.total));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass TakeSubscriber<T> extends Subscriber<T> {\n  private count: number = 0;\n\n  constructor(destination: Subscriber<T>, private total: number) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    const total = this.total;\n    const count = ++this.count;\n    if (count <= total) {\n      this.destination.next(value);\n      if (count === total) {\n        this.destination.complete();\n        this.unsubscribe();\n      }\n    }\n  }\n}\n","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { TeardownLogic } from '../Subscription';\n\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Emits the values emitted by the source Observable until a `notifier`\n * Observable emits a value.\n *\n * <span class=\"informal\">Lets values pass until a second Observable,\n * `notifier`, emits something. Then, it completes.</span>\n *\n * <img src=\"./img/takeUntil.png\" width=\"100%\">\n *\n * `takeUntil` subscribes and begins mirroring the source Observable. It also\n * monitors a second Observable, `notifier` that you provide. If the `notifier`\n * emits a value or a complete notification, the output Observable stops\n * mirroring the source Observable and completes.\n *\n * @example <caption>Tick every second until the first click happens</caption>\n * var interval = Rx.Observable.interval(1000);\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = interval.takeUntil(clicks);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link take}\n * @see {@link takeLast}\n * @see {@link takeWhile}\n * @see {@link skip}\n *\n * @param {Observable} notifier The Observable whose first emitted value will\n * cause the output Observable of `takeUntil` to stop emitting values from the\n * source Observable.\n * @return {Observable<T>} An Observable that emits the values from the source\n * Observable until such time as `notifier` emits its first value.\n * @method takeUntil\n * @owner Observable\n */\nexport function takeUntil<T>(notifier: Observable<any>): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new TakeUntilOperator(notifier));\n}\n\nclass TakeUntilOperator<T> implements Operator<T, T> {\n  constructor(private notifier: Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new TakeUntilSubscriber(subscriber, this.notifier));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass TakeUntilSubscriber<T, R> extends OuterSubscriber<T, R> {\n\n  constructor(destination: Subscriber<any>,\n              private notifier: Observable<any>) {\n    super(destination);\n    this.add(subscribeToResult(this, notifier));\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.complete();\n  }\n\n  notifyComplete(): void {\n    // noop\n  }\n}\n","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { TeardownLogic } from '../Subscription';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Emits values emitted by the source Observable so long as each value satisfies\n * the given `predicate`, and then completes as soon as this `predicate` is not\n * satisfied.\n *\n * <span class=\"informal\">Takes values from the source only while they pass the\n * condition given. When the first value does not satisfy, it completes.</span>\n *\n * <img src=\"./img/takeWhile.png\" width=\"100%\">\n *\n * `takeWhile` subscribes and begins mirroring the source Observable. Each value\n * emitted on the source is given to the `predicate` function which returns a\n * boolean, representing a condition to be satisfied by the source values. The\n * output Observable emits the source values until such time as the `predicate`\n * returns false, at which point `takeWhile` stops mirroring the source\n * Observable and completes the output Observable.\n *\n * @example <caption>Emit click events only while the clientX property is greater than 200</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.takeWhile(ev => ev.clientX > 200);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link take}\n * @see {@link takeLast}\n * @see {@link takeUntil}\n * @see {@link skip}\n *\n * @param {function(value: T, index: number): boolean} predicate A function that\n * evaluates a value emitted by the source Observable and returns a boolean.\n * Also takes the (zero-based) index as the second argument.\n * @return {Observable<T>} An Observable that emits the values from the source\n * Observable so long as each value satisfies the condition defined by the\n * `predicate`, then completes.\n * @method takeWhile\n * @owner Observable\n */\nexport function takeWhile<T>(predicate: (value: T, index: number) => boolean): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new TakeWhileOperator(predicate));\n}\n\nclass TakeWhileOperator<T> implements Operator<T, T> {\n  constructor(private predicate: (value: T, index: number) => boolean) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new TakeWhileSubscriber(subscriber, this.predicate));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass TakeWhileSubscriber<T> extends Subscriber<T> {\n  private index: number = 0;\n\n  constructor(destination: Subscriber<T>,\n              private predicate: (value: T, index: number) => boolean) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    const destination = this.destination;\n    let result: boolean;\n    try {\n      result = this.predicate(value, this.index++);\n    } catch (err) {\n      destination.error(err);\n      return;\n    }\n    this.nextOrComplete(value, result);\n  }\n\n  private nextOrComplete(value: T, predicateResult: boolean): void {\n    const destination = this.destination;\n    if (Boolean(predicateResult)) {\n      destination.next(value);\n    } else {\n      destination.complete();\n    }\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { PartialObserver } from '../Observer';\nimport { TeardownLogic } from '../Subscription';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function tap<T>(next: (x: T) => void, error?: (e: any) => void, complete?: () => void): MonoTypeOperatorFunction<T>;\nexport function tap<T>(observer: PartialObserver<T>): MonoTypeOperatorFunction<T>;\n/* tslint:enable:max-line-length */\n\n/**\n * Perform a side effect for every emission on the source Observable, but return\n * an Observable that is identical to the source.\n *\n * <span class=\"informal\">Intercepts each emission on the source and runs a\n * function, but returns an output which is identical to the source as long as errors don't occur.</span>\n *\n * <img src=\"./img/do.png\" width=\"100%\">\n *\n * Returns a mirrored Observable of the source Observable, but modified so that\n * the provided Observer is called to perform a side effect for every value,\n * error, and completion emitted by the source. Any errors that are thrown in\n * the aforementioned Observer or handlers are safely sent down the error path\n * of the output Observable.\n *\n * This operator is useful for debugging your Observables for the correct values\n * or performing other side effects.\n *\n * Note: this is different to a `subscribe` on the Observable. If the Observable\n * returned by `do` is not subscribed, the side effects specified by the\n * Observer will never happen. `do` therefore simply spies on existing\n * execution, it does not trigger an execution to happen like `subscribe` does.\n *\n * @example <caption>Map every click to the clientX position of that click, while also logging the click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var positions = clicks\n *   .do(ev => console.log(ev))\n *   .map(ev => ev.clientX);\n * positions.subscribe(x => console.log(x));\n *\n * @see {@link map}\n * @see {@link subscribe}\n *\n * @param {Observer|function} [nextOrObserver] A normal Observer object or a\n * callback for `next`.\n * @param {function} [error] Callback for errors in the source.\n * @param {function} [complete] Callback for the completion of the source.\n * @return {Observable} An Observable identical to the source, but runs the\n * specified Observer or callback(s) for each item.\n * @name tap\n */\nexport function tap<T>(nextOrObserver?: PartialObserver<T> | ((x: T) => void),\n                       error?: (e: any) => void,\n                       complete?: () => void): MonoTypeOperatorFunction<T> {\n  return function tapOperatorFunction(source: Observable<T>): Observable<T> {\n    return source.lift(new DoOperator(nextOrObserver, error, complete));\n  };\n}\n\nclass DoOperator<T> implements Operator<T, T> {\n  constructor(private nextOrObserver?: PartialObserver<T> | ((x: T) => void),\n              private error?: (e: any) => void,\n              private complete?: () => void) {\n  }\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new DoSubscriber(subscriber, this.nextOrObserver, this.error, this.complete));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass DoSubscriber<T> extends Subscriber<T> {\n\n  private safeSubscriber: Subscriber<T>;\n\n  constructor(destination: Subscriber<T>,\n              nextOrObserver?: PartialObserver<T> | ((x: T) => void),\n              error?: (e: any) => void,\n              complete?: () => void) {\n    super(destination);\n\n    const safeSubscriber = new Subscriber<T>(nextOrObserver, error, complete);\n    safeSubscriber.syncErrorThrowable = true;\n    this.add(safeSubscriber);\n    this.safeSubscriber = safeSubscriber;\n  }\n\n  protected _next(value: T): void {\n    const { safeSubscriber } = this;\n    safeSubscriber.next(value);\n    if (safeSubscriber.syncErrorThrown) {\n      this.destination.error(safeSubscriber.syncErrorValue);\n    } else {\n      this.destination.next(value);\n    }\n  }\n\n  protected _error(err: any): void {\n    const { safeSubscriber } = this;\n    safeSubscriber.error(err);\n    if (safeSubscriber.syncErrorThrown) {\n      this.destination.error(safeSubscriber.syncErrorValue);\n    } else {\n      this.destination.error(err);\n    }\n  }\n\n  protected _complete(): void {\n    const { safeSubscriber } = this;\n    safeSubscriber.complete();\n    if (safeSubscriber.syncErrorThrown) {\n      this.destination.error(safeSubscriber.syncErrorValue);\n    } else {\n      this.destination.complete();\n    }\n  }\n}\n","import { Operator } from '../Operator';\nimport { Observable, SubscribableOrPromise } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription, TeardownLogic } from '../Subscription';\n\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\nexport interface ThrottleConfig {\n  leading?: boolean;\n  trailing?: boolean;\n}\n\nexport const defaultThrottleConfig: ThrottleConfig = {\n  leading: true,\n  trailing: false\n};\n\n/**\n * Emits a value from the source Observable, then ignores subsequent source\n * values for a duration determined by another Observable, then repeats this\n * process.\n *\n * <span class=\"informal\">It's like {@link throttleTime}, but the silencing\n * duration is determined by a second Observable.</span>\n *\n * <img src=\"./img/throttle.png\" width=\"100%\">\n *\n * `throttle` emits the source Observable values on the output Observable\n * when its internal timer is disabled, and ignores source values when the timer\n * is enabled. Initially, the timer is disabled. As soon as the first source\n * value arrives, it is forwarded to the output Observable, and then the timer\n * is enabled by calling the `durationSelector` function with the source value,\n * which returns the \"duration\" Observable. When the duration Observable emits a\n * value or completes, the timer is disabled, and this process repeats for the\n * next source value.\n *\n * @example <caption>Emit clicks at a rate of at most one click per second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.throttle(ev => Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link audit}\n * @see {@link debounce}\n * @see {@link delayWhen}\n * @see {@link sample}\n * @see {@link throttleTime}\n *\n * @param {function(value: T): SubscribableOrPromise} durationSelector A function\n * that receives a value from the source Observable, for computing the silencing\n * duration for each source value, returned as an Observable or a Promise.\n * @param {Object} config a configuration object to define `leading` and `trailing` behavior. Defaults\n * to `{ leading: true, trailing: false }`.\n * @return {Observable<T>} An Observable that performs the throttle operation to\n * limit the rate of emissions from the source.\n * @method throttle\n * @owner Observable\n */\nexport function throttle<T>(durationSelector: (value: T) => SubscribableOrPromise<number>,\n                            config: ThrottleConfig = defaultThrottleConfig): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new ThrottleOperator(durationSelector, config.leading, config.trailing));\n}\n\nclass ThrottleOperator<T> implements Operator<T, T> {\n  constructor(private durationSelector: (value: T) => SubscribableOrPromise<number>,\n              private leading: boolean,\n              private trailing: boolean) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(\n      new ThrottleSubscriber(subscriber, this.durationSelector, this.leading, this.trailing)\n    );\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc\n * @ignore\n * @extends {Ignored}\n */\nclass ThrottleSubscriber<T, R> extends OuterSubscriber<T, R> {\n  private throttled: Subscription;\n  private _trailingValue: T;\n  private _hasTrailingValue = false;\n\n  constructor(protected destination: Subscriber<T>,\n              private durationSelector: (value: T) => SubscribableOrPromise<number>,\n              private _leading: boolean,\n              private _trailing: boolean) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    if (this.throttled) {\n      if (this._trailing) {\n        this._hasTrailingValue = true;\n        this._trailingValue = value;\n      }\n    } else {\n      const duration = this.tryDurationSelector(value);\n      if (duration) {\n        this.add(this.throttled = subscribeToResult(this, duration));\n      }\n      if (this._leading) {\n        this.destination.next(value);\n        if (this._trailing) {\n          this._hasTrailingValue = true;\n          this._trailingValue = value;\n        }\n      }\n    }\n  }\n\n  private tryDurationSelector(value: T): SubscribableOrPromise<any> {\n    try {\n      return this.durationSelector(value);\n    } catch (err) {\n      this.destination.error(err);\n      return null;\n    }\n  }\n\n  protected _unsubscribe() {\n    const { throttled, _trailingValue, _hasTrailingValue, _trailing } = this;\n\n    this._trailingValue = null;\n    this._hasTrailingValue = false;\n\n    if (throttled) {\n      this.remove(throttled);\n      this.throttled = null;\n      throttled.unsubscribe();\n    }\n  }\n\n  private _sendTrailing() {\n    const { destination, throttled, _trailing, _trailingValue, _hasTrailingValue } = this;\n    if (throttled && _trailing && _hasTrailingValue) {\n      destination.next(_trailingValue);\n      this._trailingValue = null;\n      this._hasTrailingValue = false;\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this._sendTrailing();\n    this._unsubscribe();\n  }\n\n  notifyComplete(): void {\n    this._sendTrailing();\n    this._unsubscribe();\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { IScheduler } from '../Scheduler';\nimport { Subscription, TeardownLogic } from '../Subscription';\nimport { async } from '../scheduler/async';\nimport { Observable } from '../Observable';\nimport { ThrottleConfig, defaultThrottleConfig } from './throttle';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Emits a value from the source Observable, then ignores subsequent source\n * values for `duration` milliseconds, then repeats this process.\n *\n * <span class=\"informal\">Lets a value pass, then ignores source values for the\n * next `duration` milliseconds.</span>\n *\n * <img src=\"./img/throttleTime.png\" width=\"100%\">\n *\n * `throttleTime` emits the source Observable values on the output Observable\n * when its internal timer is disabled, and ignores source values when the timer\n * is enabled. Initially, the timer is disabled. As soon as the first source\n * value arrives, it is forwarded to the output Observable, and then the timer\n * is enabled. After `duration` milliseconds (or the time unit determined\n * internally by the optional `scheduler`) has passed, the timer is disabled,\n * and this process repeats for the next source value. Optionally takes a\n * {@link IScheduler} for managing timers.\n *\n * @example <caption>Emit clicks at a rate of at most one click per second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.throttleTime(1000);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link auditTime}\n * @see {@link debounceTime}\n * @see {@link delay}\n * @see {@link sampleTime}\n * @see {@link throttle}\n *\n * @param {number} duration Time to wait before emitting another value after\n * emitting the last value, measured in milliseconds or the time unit determined\n * internally by the optional `scheduler`.\n * @param {Scheduler} [scheduler=async] The {@link IScheduler} to use for\n * managing the timers that handle the throttling.\n * @return {Observable<T>} An Observable that performs the throttle operation to\n * limit the rate of emissions from the source.\n * @method throttleTime\n * @owner Observable\n */\nexport function throttleTime<T>(duration: number,\n                                scheduler: IScheduler = async,\n                                config: ThrottleConfig = defaultThrottleConfig): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new ThrottleTimeOperator(duration, scheduler, config.leading, config.trailing));\n}\n\nclass ThrottleTimeOperator<T> implements Operator<T, T> {\n  constructor(private duration: number,\n              private scheduler: IScheduler,\n              private leading: boolean,\n              private trailing: boolean) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(\n      new ThrottleTimeSubscriber(subscriber, this.duration, this.scheduler, this.leading, this.trailing)\n    );\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass ThrottleTimeSubscriber<T> extends Subscriber<T> {\n  private throttled: Subscription;\n  private _hasTrailingValue: boolean = false;\n  private _trailingValue: T = null;\n\n  constructor(destination: Subscriber<T>,\n              private duration: number,\n              private scheduler: IScheduler,\n              private leading: boolean,\n              private trailing: boolean) {\n    super(destination);\n  }\n\n  protected _next(value: T) {\n    if (this.throttled) {\n      if (this.trailing) {\n        this._trailingValue = value;\n        this._hasTrailingValue = true;\n      }\n    } else {\n      this.add(this.throttled = this.scheduler.schedule(dispatchNext, this.duration, { subscriber: this }));\n      if (this.leading) {\n        this.destination.next(value);\n      }\n    }\n  }\n\n  clearThrottle() {\n    const throttled = this.throttled;\n    if (throttled) {\n      if (this.trailing && this._hasTrailingValue) {\n        this.destination.next(this._trailingValue);\n        this._trailingValue = null;\n        this._hasTrailingValue = false;\n      }\n      throttled.unsubscribe();\n      this.remove(throttled);\n      this.throttled = null;\n    }\n  }\n}\n\ninterface DispatchArg<T> {\n  subscriber: ThrottleTimeSubscriber<T>;\n}\n\nfunction dispatchNext<T>(arg: DispatchArg<T>) {\n  const { subscriber } = arg;\n  subscriber.clearThrottle();\n}\n","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { IScheduler } from '../Scheduler';\nimport { async } from '../scheduler/async';\nimport { OperatorFunction } from '../interfaces';\n\nexport function timeInterval<T>(scheduler: IScheduler = async): OperatorFunction<T, TimeInterval<T>> {\n  return (source: Observable<T>) => source.lift(new TimeIntervalOperator(scheduler));\n}\n\nexport class TimeInterval<T> {\n  constructor(public value: T, public interval: number) {\n\n  }\n};\n\nclass TimeIntervalOperator<T> implements Operator<T, TimeInterval<T>> {\n  constructor(private scheduler: IScheduler) {\n\n  }\n\n  call(observer: Subscriber<TimeInterval<T>>, source: any): any {\n    return source.subscribe(new TimeIntervalSubscriber(observer, this.scheduler));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass TimeIntervalSubscriber<T> extends Subscriber<T> {\n  private lastTime: number = 0;\n\n  constructor(destination: Subscriber<TimeInterval<T>>, private scheduler: IScheduler) {\n    super(destination);\n\n    this.lastTime = scheduler.now();\n  }\n\n  protected _next(value: T) {\n    let now = this.scheduler.now();\n    let span = now - this.lastTime;\n    this.lastTime = now;\n\n    this.destination.next(new TimeInterval(value, span));\n  }\n}\n","/**\r\n * An error thrown when duetime elapses.\r\n *\r\n * @see {@link timeout}\r\n *\r\n * @class TimeoutError\r\n */\r\nexport class TimeoutError extends Error {\r\n  constructor() {\r\n    const err: any = super('Timeout has occurred');\r\n    (<any> this).name = err.name = 'TimeoutError';\r\n    (<any> this).stack = err.stack;\r\n    (<any> this).message = err.message;\r\n  }\r\n}\r\n","import { Action } from '../scheduler/Action';\nimport { async } from '../scheduler/async';\nimport { isDate } from '../util/isDate';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { IScheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\nimport { TimeoutError } from '../util/TimeoutError';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n *\n * Errors if Observable does not emit a value in given time span.\n *\n * <span class=\"informal\">Timeouts on Observable that doesn't emit values fast enough.</span>\n *\n * <img src=\"./img/timeout.png\" width=\"100%\">\n *\n * `timeout` operator accepts as an argument either a number or a Date.\n *\n * If number was provided, it returns an Observable that behaves like a source\n * Observable, unless there is a period of time where there is no value emitted.\n * So if you provide `100` as argument and first value comes after 50ms from\n * the moment of subscription, this value will be simply re-emitted by the resulting\n * Observable. If however after that 100ms passes without a second value being emitted,\n * stream will end with an error and source Observable will be unsubscribed.\n * These checks are performed throughout whole lifecycle of Observable - from the moment\n * it was subscribed to, until it completes or errors itself. Thus every value must be\n * emitted within specified period since previous value.\n *\n * If provided argument was Date, returned Observable behaves differently. It throws\n * if Observable did not complete before provided Date. This means that periods between\n * emission of particular values do not matter in this case. If Observable did not complete\n * before provided Date, source Observable will be unsubscribed. Other than that, resulting\n * stream behaves just as source Observable.\n *\n * `timeout` accepts also a Scheduler as a second parameter. It is used to schedule moment (or moments)\n * when returned Observable will check if source stream emitted value or completed.\n *\n * @example <caption>Check if ticks are emitted within certain timespan</caption>\n * const seconds = Rx.Observable.interval(1000);\n *\n * seconds.timeout(1100) // Let's use bigger timespan to be safe,\n *                       // since `interval` might fire a bit later then scheduled.\n * .subscribe(\n *     value => console.log(value), // Will emit numbers just as regular `interval` would.\n *     err => console.log(err) // Will never be called.\n * );\n *\n * seconds.timeout(900).subscribe(\n *     value => console.log(value), // Will never be called.\n *     err => console.log(err) // Will emit error before even first value is emitted,\n *                             // since it did not arrive within 900ms period.\n * );\n *\n * @example <caption>Use Date to check if Observable completed</caption>\n * const seconds = Rx.Observable.interval(1000);\n *\n * seconds.timeout(new Date(\"December 17, 2020 03:24:00\"))\n * .subscribe(\n *     value => console.log(value), // Will emit values as regular `interval` would\n *                                  // until December 17, 2020 at 03:24:00.\n *     err => console.log(err) // On December 17, 2020 at 03:24:00 it will emit an error,\n *                             // since Observable did not complete by then.\n * );\n *\n * @see {@link timeoutWith}\n *\n * @param {number|Date} due Number specifying period within which Observable must emit values\n *                          or Date specifying before when Observable should complete\n * @param {Scheduler} [scheduler] Scheduler controlling when timeout checks occur.\n * @return {Observable<T>} Observable that mirrors behaviour of source, unless timeout checks fail.\n * @method timeout\n * @owner Observable\n */\nexport function timeout<T>(due: number | Date,\n                           scheduler: IScheduler = async): MonoTypeOperatorFunction<T> {\n  const absoluteTimeout = isDate(due);\n  const waitFor = absoluteTimeout ? (+due - scheduler.now()) : Math.abs(<number>due);\n  return (source: Observable<T>) => source.lift(new TimeoutOperator(waitFor, absoluteTimeout, scheduler, new TimeoutError()));\n}\n\nclass TimeoutOperator<T> implements Operator<T, T> {\n  constructor(private waitFor: number,\n              private absoluteTimeout: boolean,\n              private scheduler: IScheduler,\n              private errorInstance: TimeoutError) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new TimeoutSubscriber<T>(\n      subscriber, this.absoluteTimeout, this.waitFor, this.scheduler, this.errorInstance\n    ));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass TimeoutSubscriber<T> extends Subscriber<T> {\n\n  private action: Action<TimeoutSubscriber<T>> = null;\n\n  constructor(destination: Subscriber<T>,\n              private absoluteTimeout: boolean,\n              private waitFor: number,\n              private scheduler: IScheduler,\n              private errorInstance: TimeoutError) {\n    super(destination);\n    this.scheduleTimeout();\n  }\n\n  private static dispatchTimeout<T>(subscriber: TimeoutSubscriber<T>): void {\n    subscriber.error(subscriber.errorInstance);\n  }\n\n  private scheduleTimeout(): void {\n    const { action } = this;\n    if (action) {\n      // Recycle the action if we've already scheduled one. All the production\n      // Scheduler Actions mutate their state/delay time and return themeselves.\n      // VirtualActions are immutable, so they create and return a clone. In this\n      // case, we need to set the action reference to the most recent VirtualAction,\n      // to ensure that's the one we clone from next time.\n      this.action = (<Action<TimeoutSubscriber<T>>> action.schedule(this, this.waitFor));\n    } else {\n      this.add(this.action = (<Action<TimeoutSubscriber<T>>> this.scheduler.schedule(\n        TimeoutSubscriber.dispatchTimeout, this.waitFor, this\n      )));\n    }\n  }\n\n  protected _next(value: T): void {\n    if (!this.absoluteTimeout) {\n      this.scheduleTimeout();\n    }\n    super._next(value);\n  }\n\n  protected _unsubscribe() {\n    this.action = null;\n    this.scheduler = null;\n    this.errorInstance = null;\n  }\n}\n","import { Action } from '../scheduler/Action';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { IScheduler } from '../Scheduler';\nimport { async } from '../scheduler/async';\nimport { TeardownLogic } from '../Subscription';\nimport { Observable, ObservableInput } from '../Observable';\nimport { isDate } from '../util/isDate';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OperatorFunction, MonoTypeOperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function timeoutWith<T>(due: number | Date, withObservable: ObservableInput<T>, scheduler?: IScheduler): MonoTypeOperatorFunction<T>;\nexport function timeoutWith<T, R>(due: number | Date, withObservable: ObservableInput<R>, scheduler?: IScheduler): OperatorFunction<T, T | R>;\n/* tslint:enable:max-line-length */\n\n/**\n *\n * Errors if Observable does not emit a value in given time span, in case of which\n * subscribes to the second Observable.\n *\n * <span class=\"informal\">It's a version of `timeout` operator that let's you specify fallback Observable.</span>\n *\n * <img src=\"./img/timeoutWith.png\" width=\"100%\">\n *\n * `timeoutWith` is a variation of `timeout` operator. It behaves exactly the same,\n * still accepting as a first argument either a number or a Date, which control - respectively -\n * when values of source Observable should be emitted or when it should complete.\n *\n * The only difference is that it accepts a second, required parameter. This parameter\n * should be an Observable which will be subscribed when source Observable fails any timeout check.\n * So whenever regular `timeout` would emit an error, `timeoutWith` will instead start re-emitting\n * values from second Observable. Note that this fallback Observable is not checked for timeouts\n * itself, so it can emit values and complete at arbitrary points in time. From the moment of a second\n * subscription, Observable returned from `timeoutWith` simply mirrors fallback stream. When that\n * stream completes, it completes as well.\n *\n * Scheduler, which in case of `timeout` is provided as as second argument, can be still provided\n * here - as a third, optional parameter. It still is used to schedule timeout checks and -\n * as a consequence - when second Observable will be subscribed, since subscription happens\n * immediately after failing check.\n *\n * @example <caption>Add fallback observable</caption>\n * const seconds = Rx.Observable.interval(1000);\n * const minutes = Rx.Observable.interval(60 * 1000);\n *\n * seconds.timeoutWith(900, minutes)\n *     .subscribe(\n *         value => console.log(value), // After 900ms, will start emitting `minutes`,\n *                                      // since first value of `seconds` will not arrive fast enough.\n *         err => console.log(err) // Would be called after 900ms in case of `timeout`,\n *                                 // but here will never be called.\n *     );\n *\n * @param {number|Date} due Number specifying period within which Observable must emit values\n *                          or Date specifying before when Observable should complete\n * @param {Observable<T>} withObservable Observable which will be subscribed if source fails timeout check.\n * @param {Scheduler} [scheduler] Scheduler controlling when timeout checks occur.\n * @return {Observable<T>} Observable that mirrors behaviour of source or, when timeout check fails, of an Observable\n *                          passed as a second parameter.\n * @method timeoutWith\n * @owner Observable\n */\nexport function timeoutWith<T, R>(due: number | Date,\n                                  withObservable: ObservableInput<R>,\n                                  scheduler: IScheduler = async): OperatorFunction<T, T | R> {\n  return (source: Observable<T>) => {\n    let absoluteTimeout = isDate(due);\n    let waitFor = absoluteTimeout ? (+due - scheduler.now()) : Math.abs(<number>due);\n    return source.lift(new TimeoutWithOperator(waitFor, absoluteTimeout, withObservable, scheduler));\n  };\n}\n\nclass TimeoutWithOperator<T> implements Operator<T, T> {\n  constructor(private waitFor: number,\n              private absoluteTimeout: boolean,\n              private withObservable: ObservableInput<any>,\n              private scheduler: IScheduler) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new TimeoutWithSubscriber(\n      subscriber, this.absoluteTimeout, this.waitFor, this.withObservable, this.scheduler\n    ));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass TimeoutWithSubscriber<T, R> extends OuterSubscriber<T, R> {\n\n  private action: Action<TimeoutWithSubscriber<T, R>> = null;\n\n  constructor(destination: Subscriber<T>,\n              private absoluteTimeout: boolean,\n              private waitFor: number,\n              private withObservable: ObservableInput<any>,\n              private scheduler: IScheduler) {\n    super(destination);\n    this.scheduleTimeout();\n  }\n\n  private static dispatchTimeout<T, R>(subscriber: TimeoutWithSubscriber<T, R>): void {\n    const { withObservable } = subscriber;\n    (<any> subscriber)._unsubscribeAndRecycle();\n    subscriber.add(subscribeToResult(subscriber, withObservable));\n  }\n\n  private scheduleTimeout(): void {\n    const { action } = this;\n    if (action) {\n      // Recycle the action if we've already scheduled one. All the production\n      // Scheduler Actions mutate their state/delay time and return themeselves.\n      // VirtualActions are immutable, so they create and return a clone. In this\n      // case, we need to set the action reference to the most recent VirtualAction,\n      // to ensure that's the one we clone from next time.\n      this.action = (<Action<TimeoutWithSubscriber<T, R>>> action.schedule(this, this.waitFor));\n    } else {\n      this.add(this.action = (<Action<TimeoutWithSubscriber<T, R>>> this.scheduler.schedule(\n        TimeoutWithSubscriber.dispatchTimeout, this.waitFor, this\n      )));\n    }\n  }\n\n  protected _next(value: T): void {\n    if (!this.absoluteTimeout) {\n      this.scheduleTimeout();\n    }\n    super._next(value);\n  }\n\n  protected _unsubscribe() {\n    this.action = null;\n    this.scheduler = null;\n    this.withObservable = null;\n  }\n}\n","import { Observable } from '../Observable';\nimport { OperatorFunction } from '../interfaces';\nimport { Subject } from '../Subject';\nimport { Subscriber } from '../Subscriber';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { Operator } from '../Operator';\n\n/**\n * Branch out the source Observable values as a nested Observable whenever\n * `windowBoundaries` emits.\n *\n * <span class=\"informal\">It's like {@link buffer}, but emits a nested Observable\n * instead of an array.</span>\n *\n * <img src=\"./img/window.png\" width=\"100%\">\n *\n * Returns an Observable that emits windows of items it collects from the source\n * Observable. The output Observable emits connected, non-overlapping\n * windows. It emits the current window and opens a new one whenever the\n * Observable `windowBoundaries` emits an item. Because each window is an\n * Observable, the output is a higher-order Observable.\n *\n * @example <caption>In every window of 1 second each, emit at most 2 click events</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var interval = Rx.Observable.interval(1000);\n * var result = clicks.window(interval)\n *   .map(win => win.take(2)) // each window has at most 2 emissions\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @see {@link windowCount}\n * @see {@link windowTime}\n * @see {@link windowToggle}\n * @see {@link windowWhen}\n * @see {@link buffer}\n *\n * @param {Observable<any>} windowBoundaries An Observable that completes the\n * previous window and starts a new window.\n * @return {Observable<Observable<T>>} An Observable of windows, which are\n * Observables emitting values of the source Observable.\n * @method window\n * @owner Observable\n */\nexport function window<T>(windowBoundaries: Observable<any>): OperatorFunction<T, Observable<T>> {\n  return function windowOperatorFunction(source: Observable<T>) {\n    return source.lift(new WindowOperator(windowBoundaries));\n  };\n}\n\nclass WindowOperator<T> implements Operator<T, Observable<T>> {\n\n  constructor(private windowBoundaries: Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<Observable<T>>, source: any): any {\n    const windowSubscriber = new WindowSubscriber(subscriber);\n    const sourceSubscription = source.subscribe(windowSubscriber);\n    if (!sourceSubscription.closed) {\n      windowSubscriber.add(subscribeToResult(windowSubscriber, this.windowBoundaries));\n    }\n    return sourceSubscription;\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass WindowSubscriber<T> extends OuterSubscriber<T, any> {\n\n  private window: Subject<T> = new Subject<T>();\n\n  constructor(destination: Subscriber<Observable<T>>) {\n    super(destination);\n    destination.next(this.window);\n  }\n\n  notifyNext(outerValue: T, innerValue: any,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, any>): void {\n    this.openWindow();\n  }\n\n  notifyError(error: any, innerSub: InnerSubscriber<T, any>): void {\n    this._error(error);\n  }\n\n  notifyComplete(innerSub: InnerSubscriber<T, any>): void {\n    this._complete();\n  }\n\n  protected _next(value: T): void {\n    this.window.next(value);\n  }\n\n  protected _error(err: any): void {\n    this.window.error(err);\n    this.destination.error(err);\n  }\n\n  protected _complete(): void {\n    this.window.complete();\n    this.destination.complete();\n  }\n\n  protected _unsubscribe() {\n    this.window = null;\n  }\n\n  private openWindow(): void  {\n    const prevWindow = this.window;\n    if (prevWindow) {\n      prevWindow.complete();\n    }\n    const destination = this.destination;\n    const newWindow = this.window = new Subject<T>();\n    destination.next(newWindow);\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { Subject } from '../Subject';\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Branch out the source Observable values as a nested Observable with each\n * nested Observable emitting at most `windowSize` values.\n *\n * <span class=\"informal\">It's like {@link bufferCount}, but emits a nested\n * Observable instead of an array.</span>\n *\n * <img src=\"./img/windowCount.png\" width=\"100%\">\n *\n * Returns an Observable that emits windows of items it collects from the source\n * Observable. The output Observable emits windows every `startWindowEvery`\n * items, each containing no more than `windowSize` items. When the source\n * Observable completes or encounters an error, the output Observable emits\n * the current window and propagates the notification from the source\n * Observable. If `startWindowEvery` is not provided, then new windows are\n * started immediately at the start of the source and when each window completes\n * with size `windowSize`.\n *\n * @example <caption>Ignore every 3rd click event, starting from the first one</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.windowCount(3)\n *   .map(win => win.skip(1)) // skip first of every 3 clicks\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @example <caption>Ignore every 3rd click event, starting from the third one</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.windowCount(2, 3)\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @see {@link window}\n * @see {@link windowTime}\n * @see {@link windowToggle}\n * @see {@link windowWhen}\n * @see {@link bufferCount}\n *\n * @param {number} windowSize The maximum number of values emitted by each\n * window.\n * @param {number} [startWindowEvery] Interval at which to start a new window.\n * For example if `startWindowEvery` is `2`, then a new window will be started\n * on every other value from the source. A new window is started at the\n * beginning of the source by default.\n * @return {Observable<Observable<T>>} An Observable of windows, which in turn\n * are Observable of values.\n * @method windowCount\n * @owner Observable\n */\nexport function windowCount<T>(windowSize: number,\n                               startWindowEvery: number = 0): OperatorFunction<T, Observable<T>> {\n  return function windowCountOperatorFunction(source: Observable<T>) {\n    return source.lift(new WindowCountOperator<T>(windowSize, startWindowEvery));\n  };\n}\n\nclass WindowCountOperator<T> implements Operator<T, Observable<T>> {\n\n  constructor(private windowSize: number,\n              private startWindowEvery: number) {\n  }\n\n  call(subscriber: Subscriber<Observable<T>>, source: any): any {\n    return source.subscribe(new WindowCountSubscriber(subscriber, this.windowSize, this.startWindowEvery));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass WindowCountSubscriber<T> extends Subscriber<T> {\n  private windows: Subject<T>[] = [ new Subject<T>() ];\n  private count: number = 0;\n\n  constructor(protected destination: Subscriber<Observable<T>>,\n              private windowSize: number,\n              private startWindowEvery: number) {\n    super(destination);\n    destination.next(this.windows[0]);\n  }\n\n  protected _next(value: T) {\n    const startWindowEvery = (this.startWindowEvery > 0) ? this.startWindowEvery : this.windowSize;\n    const destination = this.destination;\n    const windowSize = this.windowSize;\n    const windows = this.windows;\n    const len = windows.length;\n\n    for (let i = 0; i < len && !this.closed; i++) {\n      windows[i].next(value);\n    }\n    const c = this.count - windowSize + 1;\n    if (c >= 0 && c % startWindowEvery === 0 && !this.closed) {\n      windows.shift().complete();\n    }\n    if (++this.count % startWindowEvery === 0 && !this.closed) {\n      const window = new Subject<T>();\n      windows.push(window);\n      destination.next(window);\n    }\n  }\n\n  protected _error(err: any) {\n    const windows = this.windows;\n    if (windows) {\n      while (windows.length > 0 && !this.closed) {\n        windows.shift().error(err);\n      }\n    }\n    this.destination.error(err);\n  }\n\n  protected _complete() {\n    const windows = this.windows;\n    if (windows) {\n      while (windows.length > 0 && !this.closed) {\n        windows.shift().complete();\n      }\n    }\n    this.destination.complete();\n  }\n\n  protected _unsubscribe() {\n    this.count = 0;\n    this.windows = null;\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable, SubscribableOrPromise } from '../Observable';\nimport { Subscription } from '../Subscription';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Buffers the source Observable values starting from an emission from\n * `openings` and ending when the output of `closingSelector` emits.\n *\n * <span class=\"informal\">Collects values from the past as an array. Starts\n * collecting only when `opening` emits, and calls the `closingSelector`\n * function to get an Observable that tells when to close the buffer.</span>\n *\n * <img src=\"./img/bufferToggle.png\" width=\"100%\">\n *\n * Buffers values from the source by opening the buffer via signals from an\n * Observable provided to `openings`, and closing and sending the buffers when\n * a Subscribable or Promise returned by the `closingSelector` function emits.\n *\n * @example <caption>Every other second, emit the click events from the next 500ms</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var openings = Rx.Observable.interval(1000);\n * var buffered = clicks.bufferToggle(openings, i =>\n *   i % 2 ? Rx.Observable.interval(500) : Rx.Observable.empty()\n * );\n * buffered.subscribe(x => console.log(x));\n *\n * @see {@link buffer}\n * @see {@link bufferCount}\n * @see {@link bufferTime}\n * @see {@link bufferWhen}\n * @see {@link windowToggle}\n *\n * @param {SubscribableOrPromise<O>} openings A Subscribable or Promise of notifications to start new\n * buffers.\n * @param {function(value: O): SubscribableOrPromise} closingSelector A function that takes\n * the value emitted by the `openings` observable and returns a Subscribable or Promise,\n * which, when it emits, signals that the associated buffer should be emitted\n * and cleared.\n * @return {Observable<T[]>} An observable of arrays of buffered values.\n * @method bufferToggle\n * @owner Observable\n */\nexport function bufferToggle<T, O>(\n  openings: SubscribableOrPromise<O>,\n  closingSelector: (value: O) => SubscribableOrPromise<any>\n): OperatorFunction<T, T[]> {\n  return function bufferToggleOperatorFunction(source: Observable<T>) {\n    return source.lift(new BufferToggleOperator<T, O>(openings, closingSelector));\n  };\n}\n\nclass BufferToggleOperator<T, O> implements Operator<T, T[]> {\n\n  constructor(private openings: SubscribableOrPromise<O>,\n              private closingSelector: (value: O) => SubscribableOrPromise<any>) {\n  }\n\n  call(subscriber: Subscriber<T[]>, source: any): any {\n    return source.subscribe(new BufferToggleSubscriber(subscriber, this.openings, this.closingSelector));\n  }\n}\n\ninterface BufferContext<T> {\n  buffer: T[];\n  subscription: Subscription;\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass BufferToggleSubscriber<T, O> extends OuterSubscriber<T, O> {\n  private contexts: Array<BufferContext<T>> = [];\n\n  constructor(destination: Subscriber<T[]>,\n              private openings: SubscribableOrPromise<O>,\n              private closingSelector: (value: O) => SubscribableOrPromise<any> | void) {\n    super(destination);\n    this.add(subscribeToResult(this, openings));\n  }\n\n  protected _next(value: T): void {\n    const contexts = this.contexts;\n    const len = contexts.length;\n    for (let i = 0; i < len; i++) {\n      contexts[i].buffer.push(value);\n    }\n  }\n\n  protected _error(err: any): void {\n    const contexts = this.contexts;\n    while (contexts.length > 0) {\n      const context = contexts.shift();\n      context.subscription.unsubscribe();\n      context.buffer = null;\n      context.subscription = null;\n    }\n    this.contexts = null;\n    super._error(err);\n  }\n\n  protected _complete(): void {\n    const contexts = this.contexts;\n    while (contexts.length > 0) {\n      const context = contexts.shift();\n      this.destination.next(context.buffer);\n      context.subscription.unsubscribe();\n      context.buffer = null;\n      context.subscription = null;\n    }\n    this.contexts = null;\n    super._complete();\n  }\n\n  notifyNext(outerValue: any, innerValue: O,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, O>): void {\n    outerValue ? this.closeBuffer(outerValue) : this.openBuffer(innerValue);\n  }\n\n  notifyComplete(innerSub: InnerSubscriber<T, O>): void {\n    this.closeBuffer((<any> innerSub).context);\n  }\n\n  private openBuffer(value: O): void {\n    try {\n      const closingSelector = this.closingSelector;\n      const closingNotifier = closingSelector.call(this, value);\n      if (closingNotifier) {\n        this.trySubscribe(closingNotifier);\n      }\n    } catch (err) {\n      this._error(err);\n    }\n  }\n\n  private closeBuffer(context: BufferContext<T>): void {\n    const contexts = this.contexts;\n\n    if (contexts && context) {\n      const { buffer, subscription } = context;\n      this.destination.next(buffer);\n      contexts.splice(contexts.indexOf(context), 1);\n      this.remove(subscription);\n      subscription.unsubscribe();\n    }\n  }\n\n  private trySubscribe(closingNotifier: any): void {\n    const contexts = this.contexts;\n\n    const buffer: Array<T> = [];\n    const subscription = new Subscription();\n    const context = { buffer, subscription };\n    contexts.push(context);\n\n    const innerSubscription = subscribeToResult(this, closingNotifier, <any>context);\n\n    if (!innerSubscription || innerSubscription.closed) {\n      this.closeBuffer(context);\n    } else {\n      (<any> innerSubscription).context = context;\n\n      this.add(innerSubscription);\n      subscription.add(innerSubscription);\n    }\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { Subscription } from '../Subscription';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Buffers the source Observable values, using a factory function of closing\n * Observables to determine when to close, emit, and reset the buffer.\n *\n * <span class=\"informal\">Collects values from the past as an array. When it\n * starts collecting values, it calls a function that returns an Observable that\n * tells when to close the buffer and restart collecting.</span>\n *\n * <img src=\"./img/bufferWhen.png\" width=\"100%\">\n *\n * Opens a buffer immediately, then closes the buffer when the observable\n * returned by calling `closingSelector` function emits a value. When it closes\n * the buffer, it immediately opens a new buffer and repeats the process.\n *\n * @example <caption>Emit an array of the last clicks every [1-5] random seconds</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var buffered = clicks.bufferWhen(() =>\n *   Rx.Observable.interval(1000 + Math.random() * 4000)\n * );\n * buffered.subscribe(x => console.log(x));\n *\n * @see {@link buffer}\n * @see {@link bufferCount}\n * @see {@link bufferTime}\n * @see {@link bufferToggle}\n * @see {@link windowWhen}\n *\n * @param {function(): Observable} closingSelector A function that takes no\n * arguments and returns an Observable that signals buffer closure.\n * @return {Observable<T[]>} An observable of arrays of buffered values.\n * @method bufferWhen\n * @owner Observable\n */\nexport function bufferWhen<T>(closingSelector: () => Observable<any>): OperatorFunction<T, T[]> {\n  return function (source: Observable<T>) {\n    return source.lift(new BufferWhenOperator(closingSelector));\n  };\n}\n\nclass BufferWhenOperator<T> implements Operator<T, T[]> {\n\n  constructor(private closingSelector: () => Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<T[]>, source: any): any {\n    return source.subscribe(new BufferWhenSubscriber(subscriber, this.closingSelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass BufferWhenSubscriber<T> extends OuterSubscriber<T, any> {\n  private buffer: T[];\n  private subscribing: boolean = false;\n  private closingSubscription: Subscription;\n\n  constructor(destination: Subscriber<T[]>, private closingSelector: () => Observable<any>) {\n    super(destination);\n    this.openBuffer();\n  }\n\n  protected _next(value: T) {\n    this.buffer.push(value);\n  }\n\n  protected _complete() {\n    const buffer = this.buffer;\n    if (buffer) {\n      this.destination.next(buffer);\n    }\n    super._complete();\n  }\n\n  protected _unsubscribe() {\n    this.buffer = null;\n    this.subscribing = false;\n  }\n\n  notifyNext(outerValue: T, innerValue: any,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, any>): void {\n    this.openBuffer();\n  }\n\n  notifyComplete(): void {\n    if (this.subscribing) {\n      this.complete();\n    } else {\n      this.openBuffer();\n    }\n  }\n\n  openBuffer() {\n\n    let { closingSubscription } = this;\n\n    if (closingSubscription) {\n      this.remove(closingSubscription);\n      closingSubscription.unsubscribe();\n    }\n\n    const buffer = this.buffer;\n    if (this.buffer) {\n      this.destination.next(buffer);\n    }\n\n    this.buffer = [];\n\n    const closingNotifier = tryCatch(this.closingSelector)();\n\n    if (closingNotifier === errorObject) {\n      this.error(errorObject.e);\n    } else {\n      closingSubscription = new Subscription();\n      this.closingSubscription = closingSubscription;\n      this.add(closingSubscription);\n      this.subscribing = true;\n      closingSubscription.add(subscribeToResult(this, closingNotifier));\n      this.subscribing = false;\n    }\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable, ObservableInput } from '../Observable';\n\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Catches errors on the observable to be handled by returning a new observable or throwing an error.\n *\n * <img src=\"./img/catch.png\" width=\"100%\">\n *\n * @example <caption>Continues with a different Observable when there's an error</caption>\n *\n * Observable.of(1, 2, 3, 4, 5)\n *   .map(n => {\n * \t   if (n == 4) {\n * \t     throw 'four!';\n *     }\n *\t   return n;\n *   })\n *   .catch(err => Observable.of('I', 'II', 'III', 'IV', 'V'))\n *   .subscribe(x => console.log(x));\n *   // 1, 2, 3, I, II, III, IV, V\n *\n * @example <caption>Retries the caught source Observable again in case of error, similar to retry() operator</caption>\n *\n * Observable.of(1, 2, 3, 4, 5)\n *   .map(n => {\n * \t   if (n === 4) {\n * \t     throw 'four!';\n *     }\n * \t   return n;\n *   })\n *   .catch((err, caught) => caught)\n *   .take(30)\n *   .subscribe(x => console.log(x));\n *   // 1, 2, 3, 1, 2, 3, ...\n *\n * @example <caption>Throws a new error when the source Observable throws an error</caption>\n *\n * Observable.of(1, 2, 3, 4, 5)\n *   .map(n => {\n *     if (n == 4) {\n *       throw 'four!';\n *     }\n *     return n;\n *   })\n *   .catch(err => {\n *     throw 'error in source. Details: ' + err;\n *   })\n *   .subscribe(\n *     x => console.log(x),\n *     err => console.log(err)\n *   );\n *   // 1, 2, 3, error in source. Details: four!\n *\n * @param {function} selector a function that takes as arguments `err`, which is the error, and `caught`, which\n *  is the source observable, in case you'd like to \"retry\" that observable by returning it again. Whatever observable\n *  is returned by the `selector` will be used to continue the observable chain.\n * @return {Observable} An observable that originates from either the source or the observable returned by the\n *  catch `selector` function.\n * @name catchError\n */\nexport function catchError<T, R>(selector: (err: any, caught: Observable<T>) => ObservableInput<R>): OperatorFunction<T, T | R> {\n  return function catchErrorOperatorFunction(source: Observable<T>): Observable<T | R> {\n    const operator = new CatchOperator(selector);\n    const caught = source.lift(operator);\n    return (operator.caught = caught as Observable<T>);\n  };\n}\n\nclass CatchOperator<T, R> implements Operator<T, T | R> {\n  caught: Observable<T>;\n\n  constructor(private selector: (err: any, caught: Observable<T>) => ObservableInput<T | R>) {\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new CatchSubscriber(subscriber, this.selector, this.caught));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass CatchSubscriber<T, R> extends OuterSubscriber<T, T | R> {\n  constructor(destination: Subscriber<any>,\n              private selector: (err: any, caught: Observable<T>) => ObservableInput<T | R>,\n              private caught: Observable<T>) {\n    super(destination);\n  }\n\n  // NOTE: overriding `error` instead of `_error` because we don't want\n  // to have this flag this subscriber as `isStopped`. We can mimic the\n  // behavior of the RetrySubscriber (from the `retry` operator), where\n  // we unsubscribe from our source chain, reset our Subscriber flags,\n  // then subscribe to the selector result.\n  error(err: any) {\n    if (!this.isStopped) {\n      let result: any;\n      try {\n        result = this.selector(err, this.caught);\n      } catch (err2) {\n        super.error(err2);\n        return;\n      }\n      this._unsubscribeAndRecycle();\n      this.add(subscribeToResult(this, result));\n    }\n  }\n}\n","import { Observable, ObservableInput } from '../Observable';\nimport { ArrayObservable } from '../observable/ArrayObservable';\nimport { isArray } from '../util/isArray';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OperatorFunction } from '../interfaces';\n\nconst none = {};\n\n/* tslint:disable:max-line-length */\nexport function combineLatest<T, R>(project: (v1: T) => R): OperatorFunction<T, R>;\nexport function combineLatest<T, T2, R>(v2: ObservableInput<T2>, project: (v1: T, v2: T2) => R): OperatorFunction<T, R>;\nexport function combineLatest<T, T2, T3, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, project: (v1: T, v2: T2, v3: T3) => R): OperatorFunction<T, R>;\nexport function combineLatest<T, T2, T3, T4, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, project: (v1: T, v2: T2, v3: T3, v4: T4) => R): OperatorFunction<T, R>;\nexport function combineLatest<T, T2, T3, T4, T5, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5) => R): OperatorFunction<T, R>;\nexport function combineLatest<T, T2, T3, T4, T5, T6, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6) => R): OperatorFunction<T, R> ;\nexport function combineLatest<T, T2>(v2: ObservableInput<T2>): OperatorFunction<T, [T, T2]>;\nexport function combineLatest<T, T2, T3>(v2: ObservableInput<T2>, v3: ObservableInput<T3>): OperatorFunction<T, [T, T2, T3]>;\nexport function combineLatest<T, T2, T3, T4>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>): OperatorFunction<T, [T, T2, T3, T4]>;\nexport function combineLatest<T, T2, T3, T4, T5>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>): OperatorFunction<T, [T, T2, T3, T4, T5]>;\nexport function combineLatest<T, T2, T3, T4, T5, T6>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>): OperatorFunction<T, [T, T2, T3, T4, T5, T6]> ;\nexport function combineLatest<T, R>(...observables: Array<ObservableInput<T> | ((...values: Array<T>) => R)>): OperatorFunction<T, R>;\nexport function combineLatest<T, R>(array: ObservableInput<T>[]): OperatorFunction<T, Array<T>>;\nexport function combineLatest<T, TOther, R>(array: ObservableInput<TOther>[], project: (v1: T, ...values: Array<TOther>) => R): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Combines multiple Observables to create an Observable whose values are\n * calculated from the latest values of each of its input Observables.\n *\n * <span class=\"informal\">Whenever any input Observable emits a value, it\n * computes a formula using the latest values from all the inputs, then emits\n * the output of that formula.</span>\n *\n * <img src=\"./img/combineLatest.png\" width=\"100%\">\n *\n * `combineLatest` combines the values from this Observable with values from\n * Observables passed as arguments. This is done by subscribing to each\n * Observable, in order, and collecting an array of each of the most recent\n * values any time any of the input Observables emits, then either taking that\n * array and passing it as arguments to an optional `project` function and\n * emitting the return value of that, or just emitting the array of recent\n * values directly if there is no `project` function.\n *\n * @example <caption>Dynamically calculate the Body-Mass Index from an Observable of weight and one for height</caption>\n * var weight = Rx.Observable.of(70, 72, 76, 79, 75);\n * var height = Rx.Observable.of(1.76, 1.77, 1.78);\n * var bmi = weight.combineLatest(height, (w, h) => w / (h * h));\n * bmi.subscribe(x => console.log('BMI is ' + x));\n *\n * // With output to console:\n * // BMI is 24.212293388429753\n * // BMI is 23.93948099205209\n * // BMI is 23.671253629592222\n *\n * @see {@link combineAll}\n * @see {@link merge}\n * @see {@link withLatestFrom}\n *\n * @param {ObservableInput} other An input Observable to combine with the source\n * Observable. More than one input Observables may be given as argument.\n * @param {function} [project] An optional function to project the values from\n * the combined latest values into a new value on the output Observable.\n * @return {Observable} An Observable of projected values from the most recent\n * values from each input Observable, or an array of the most recent values from\n * each input Observable.\n * @method combineLatest\n * @owner Observable\n */\nexport function combineLatest<T, R>(...observables: Array<ObservableInput<any> |\n                                                    Array<ObservableInput<any>> |\n                                                    ((...values: Array<any>) => R)>): OperatorFunction<T, R> {\n  let project: (...values: Array<any>) => R = null;\n  if (typeof observables[observables.length - 1] === 'function') {\n    project = <(...values: Array<any>) => R>observables.pop();\n  }\n\n  // if the first and only other argument besides the resultSelector is an array\n  // assume it's been called with `combineLatest([obs1, obs2, obs3], project)`\n  if (observables.length === 1 && isArray(observables[0])) {\n    observables = (<any>observables[0]).slice();\n  }\n\n  return (source: Observable<T>) => source.lift.call(new ArrayObservable([source, ...observables]), new CombineLatestOperator(project));\n}\n\nexport class CombineLatestOperator<T, R> implements Operator<T, R> {\n  constructor(private project?: (...values: Array<any>) => R) {\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new CombineLatestSubscriber(subscriber, this.project));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class CombineLatestSubscriber<T, R> extends OuterSubscriber<T, R> {\n  private active: number = 0;\n  private values: any[] = [];\n  private observables: any[] = [];\n  private toRespond: number;\n\n  constructor(destination: Subscriber<R>, private project?: (...values: Array<any>) => R) {\n    super(destination);\n  }\n\n  protected _next(observable: any) {\n    this.values.push(none);\n    this.observables.push(observable);\n  }\n\n  protected _complete() {\n    const observables = this.observables;\n    const len = observables.length;\n    if (len === 0) {\n      this.destination.complete();\n    } else {\n      this.active = len;\n      this.toRespond = len;\n      for (let i = 0; i < len; i++) {\n        const observable = observables[i];\n        this.add(subscribeToResult(this, observable, observable, i));\n      }\n    }\n  }\n\n  notifyComplete(unused: Subscriber<R>): void {\n    if ((this.active -= 1) === 0) {\n      this.destination.complete();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    const values = this.values;\n    const oldVal = values[outerIndex];\n    const toRespond = !this.toRespond\n      ? 0\n      : oldVal === none ? --this.toRespond : this.toRespond;\n    values[outerIndex] = innerValue;\n\n    if (toRespond === 0) {\n      if (this.project) {\n        this._tryProject(values);\n      } else {\n        this.destination.next(values.slice());\n      }\n    }\n  }\n\n  private _tryProject(values: any[]) {\n    let result: any;\n    try {\n      result = this.project.apply(this, values);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.destination.next(result);\n  }\n}\n","import { root } from '../util/root';\nimport { IScheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { iterator as Symbol_iterator } from '../symbol/iterator';\nimport { TeardownLogic } from '../Subscription';\nimport { Subscriber } from '../Subscriber';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class IteratorObservable<T> extends Observable<T> {\n  private iterator: any;\n\n  static create<T>(iterator: any, scheduler?: IScheduler): IteratorObservable<T> {\n    return new IteratorObservable(iterator, scheduler);\n  }\n\n  static dispatch(state: any) {\n\n    const { index, hasError, iterator, subscriber } = state;\n\n    if (hasError) {\n      subscriber.error(state.error);\n      return;\n    }\n\n    let result = iterator.next();\n    if (result.done) {\n      subscriber.complete();\n      return;\n    }\n\n    subscriber.next(result.value);\n    state.index = index + 1;\n\n    if (subscriber.closed) {\n      if (typeof iterator.return === 'function') {\n        iterator.return();\n      }\n      return;\n    }\n\n    (<any> this).schedule(state);\n  }\n\n  constructor(iterator: any, private scheduler?: IScheduler) {\n    super();\n\n    if (iterator == null) {\n      throw new Error('iterator cannot be null.');\n    }\n\n    this.iterator = getIterator(iterator);\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): TeardownLogic {\n\n    let index = 0;\n    const { iterator, scheduler } = this;\n\n    if (scheduler) {\n      return scheduler.schedule(IteratorObservable.dispatch, 0, {\n        index, iterator, subscriber\n      });\n    } else {\n      do {\n        let result = iterator.next();\n        if (result.done) {\n          subscriber.complete();\n          break;\n        } else {\n          subscriber.next(result.value);\n        }\n        if (subscriber.closed) {\n          if (typeof iterator.return === 'function') {\n            iterator.return();\n          }\n          break;\n        }\n      } while (true);\n    }\n  }\n}\n\nclass StringIterator {\n  constructor(private str: string,\n              private idx: number = 0,\n              private len: number = str.length) {\n  }\n  [Symbol_iterator]() { return (this); }\n  next() {\n    return this.idx < this.len ? {\n        done: false,\n        value: this.str.charAt(this.idx++)\n    } : {\n        done: true,\n        value: undefined\n    };\n  }\n}\n\nclass ArrayIterator {\n  constructor(private arr: Array<any>,\n              private idx: number = 0,\n              private len: number = toLength(arr)) {\n  }\n  [Symbol_iterator]() { return this; }\n  next() {\n    return this.idx < this.len ? {\n        done: false,\n        value: this.arr[this.idx++]\n    } : {\n        done: true,\n        value: undefined\n    };\n  }\n}\n\nfunction getIterator(obj: any) {\n  const i = obj[Symbol_iterator];\n  if (!i && typeof obj === 'string') {\n    return new StringIterator(obj);\n  }\n  if (!i && obj.length !== undefined) {\n    return new ArrayIterator(obj);\n  }\n  if (!i) {\n    throw new TypeError('object is not iterable');\n  }\n  return obj[Symbol_iterator]();\n}\n\nconst maxSafeInteger = Math.pow(2, 53) - 1;\n\nfunction toLength(o: any) {\n  let len = +o.length;\n  if (isNaN(len)) {\n      return 0;\n  }\n  if (len === 0 || !numberIsFinite(len)) {\n      return len;\n  }\n  len = sign(len) * Math.floor(Math.abs(len));\n  if (len <= 0) {\n      return 0;\n  }\n  if (len > maxSafeInteger) {\n      return maxSafeInteger;\n  }\n  return len;\n}\n\nfunction numberIsFinite(value: any) {\n  return typeof value === 'number' && root.isFinite(value);\n}\n\nfunction sign(value: any) {\n  let valueAsNumber = +value;\n  if (valueAsNumber === 0) {\n    return valueAsNumber;\n  }\n  if (isNaN(valueAsNumber)) {\n    return valueAsNumber;\n  }\n  return valueAsNumber < 0 ? -1 : 1;\n}\n","import { IScheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { ScalarObservable } from './ScalarObservable';\nimport { EmptyObservable } from './EmptyObservable';\nimport { Subscriber } from '../Subscriber';\nimport { TeardownLogic } from '../Subscription';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class ArrayLikeObservable<T> extends Observable<T> {\n\n  static create<T>(arrayLike: ArrayLike<T>, scheduler?: IScheduler): Observable<T> {\n    const length = arrayLike.length;\n    if (length === 0) {\n      return new EmptyObservable<T>();\n    } else if (length === 1) {\n      return new ScalarObservable<T>(<any>arrayLike[0], scheduler);\n    } else {\n      return new ArrayLikeObservable(arrayLike, scheduler);\n    }\n  }\n\n  static dispatch(state: any) {\n    const { arrayLike, index, length, subscriber } = state;\n\n    if (subscriber.closed) {\n      return;\n    }\n\n    if (index >= length) {\n      subscriber.complete();\n      return;\n    }\n\n    subscriber.next(arrayLike[index]);\n\n    state.index = index + 1;\n\n    (<any> this).schedule(state);\n  }\n\n  // value used if Array has one value and _isScalar\n  private value: any;\n\n  constructor(private arrayLike: ArrayLike<T>, private scheduler?: IScheduler) {\n    super();\n    if (!scheduler && arrayLike.length === 1) {\n      this._isScalar = true;\n      this.value = arrayLike[0];\n    }\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): TeardownLogic {\n    let index = 0;\n    const { arrayLike, scheduler } = this;\n    const length = arrayLike.length;\n\n    if (scheduler) {\n      return scheduler.schedule(ArrayLikeObservable.dispatch, 0, {\n        arrayLike, index, length, subscriber\n      });\n    } else {\n      for (let i = 0; i < length && !subscriber.closed; i++) {\n        subscriber.next(arrayLike[i]);\n      }\n      subscriber.complete();\n    }\n  }\n}\n","import { PartialObserver } from './Observer';\nimport { Observable } from './Observable';\n\n/**\n * Represents a push-based event or value that an {@link Observable} can emit.\n * This class is particularly useful for operators that manage notifications,\n * like {@link materialize}, {@link dematerialize}, {@link observeOn}, and\n * others. Besides wrapping the actual delivered value, it also annotates it\n * with metadata of, for instance, what type of push message it is (`next`,\n * `error`, or `complete`).\n *\n * @see {@link materialize}\n * @see {@link dematerialize}\n * @see {@link observeOn}\n *\n * @class Notification<T>\n */\nexport class Notification<T> {\n  hasValue: boolean;\n\n  constructor(public kind: string, public value?: T, public error?: any) {\n    this.hasValue = kind === 'N';\n  }\n\n  /**\n   * Delivers to the given `observer` the value wrapped by this Notification.\n   * @param {Observer} observer\n   * @return\n   */\n  observe(observer: PartialObserver<T>): any {\n    switch (this.kind) {\n      case 'N':\n        return observer.next && observer.next(this.value);\n      case 'E':\n        return observer.error && observer.error(this.error);\n      case 'C':\n        return observer.complete && observer.complete();\n    }\n  }\n\n  /**\n   * Given some {@link Observer} callbacks, deliver the value represented by the\n   * current Notification to the correctly corresponding callback.\n   * @param {function(value: T): void} next An Observer `next` callback.\n   * @param {function(err: any): void} [error] An Observer `error` callback.\n   * @param {function(): void} [complete] An Observer `complete` callback.\n   * @return {any}\n   */\n  do(next: (value: T) => void, error?: (err: any) => void, complete?: () => void): any {\n    const kind = this.kind;\n    switch (kind) {\n      case 'N':\n        return next && next(this.value);\n      case 'E':\n        return error && error(this.error);\n      case 'C':\n        return complete && complete();\n    }\n  }\n\n  /**\n   * Takes an Observer or its individual callback functions, and calls `observe`\n   * or `do` methods accordingly.\n   * @param {Observer|function(value: T): void} nextOrObserver An Observer or\n   * the `next` callback.\n   * @param {function(err: any): void} [error] An Observer `error` callback.\n   * @param {function(): void} [complete] An Observer `complete` callback.\n   * @return {any}\n   */\n  accept(nextOrObserver: PartialObserver<T> | ((value: T) => void), error?: (err: any) => void, complete?: () => void) {\n    if (nextOrObserver && typeof (<PartialObserver<T>>nextOrObserver).next === 'function') {\n      return this.observe(<PartialObserver<T>>nextOrObserver);\n    } else {\n      return this.do(<(value: T) => void>nextOrObserver, error, complete);\n    }\n  }\n\n  /**\n   * Returns a simple Observable that just delivers the notification represented\n   * by this Notification instance.\n   * @return {any}\n   */\n  toObservable(): Observable<T> {\n    const kind = this.kind;\n    switch (kind) {\n      case 'N':\n        return Observable.of(this.value);\n      case 'E':\n        return Observable.throw(this.error);\n      case 'C':\n        return Observable.empty<T>();\n    }\n    throw new Error('unexpected notification kind value');\n  }\n\n  private static completeNotification: Notification<any> = new Notification('C');\n  private static undefinedValueNotification: Notification<any> = new Notification('N', undefined);\n\n  /**\n   * A shortcut to create a Notification instance of the type `next` from a\n   * given value.\n   * @param {T} value The `next` value.\n   * @return {Notification<T>} The \"next\" Notification representing the\n   * argument.\n   */\n  static createNext<T>(value: T): Notification<T> {\n    if (typeof value !== 'undefined') {\n      return new Notification('N', value);\n    }\n    return Notification.undefinedValueNotification;\n  }\n\n  /**\n   * A shortcut to create a Notification instance of the type `error` from a\n   * given error.\n   * @param {any} [err] The `error` error.\n   * @return {Notification<T>} The \"error\" Notification representing the\n   * argument.\n   */\n  static createError<T>(err?: any): Notification<T> {\n    return new Notification('E', undefined, err);\n  }\n\n  /**\n   * A shortcut to create a Notification instance of the type `complete`.\n   * @return {Notification<any>} The valueless \"complete\" Notification.\n   */\n  static createComplete(): Notification<any> {\n    return Notification.completeNotification;\n  }\n}\n","import { Observable } from '../Observable';\nimport { IScheduler } from '../Scheduler';\nimport { Operator } from '../Operator';\nimport { PartialObserver } from '../Observer';\nimport { Subscriber } from '../Subscriber';\nimport { Notification } from '../Notification';\nimport { TeardownLogic } from '../Subscription';\nimport { Action } from '../scheduler/Action';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n *\n * Re-emits all notifications from source Observable with specified scheduler.\n *\n * <span class=\"informal\">Ensure a specific scheduler is used, from outside of an Observable.</span>\n *\n * `observeOn` is an operator that accepts a scheduler as a first parameter, which will be used to reschedule\n * notifications emitted by the source Observable. It might be useful, if you do not have control over\n * internal scheduler of a given Observable, but want to control when its values are emitted nevertheless.\n *\n * Returned Observable emits the same notifications (nexted values, complete and error events) as the source Observable,\n * but rescheduled with provided scheduler. Note that this doesn't mean that source Observables internal\n * scheduler will be replaced in any way. Original scheduler still will be used, but when the source Observable emits\n * notification, it will be immediately scheduled again - this time with scheduler passed to `observeOn`.\n * An anti-pattern would be calling `observeOn` on Observable that emits lots of values synchronously, to split\n * that emissions into asynchronous chunks. For this to happen, scheduler would have to be passed into the source\n * Observable directly (usually into the operator that creates it). `observeOn` simply delays notifications a\n * little bit more, to ensure that they are emitted at expected moments.\n *\n * As a matter of fact, `observeOn` accepts second parameter, which specifies in milliseconds with what delay notifications\n * will be emitted. The main difference between {@link delay} operator and `observeOn` is that `observeOn`\n * will delay all notifications - including error notifications - while `delay` will pass through error\n * from source Observable immediately when it is emitted. In general it is highly recommended to use `delay` operator\n * for any kind of delaying of values in the stream, while using `observeOn` to specify which scheduler should be used\n * for notification emissions in general.\n *\n * @example <caption>Ensure values in subscribe are called just before browser repaint.</caption>\n * const intervals = Rx.Observable.interval(10); // Intervals are scheduled\n *                                               // with async scheduler by default...\n *\n * intervals\n * .observeOn(Rx.Scheduler.animationFrame)       // ...but we will observe on animationFrame\n * .subscribe(val => {                           // scheduler to ensure smooth animation.\n *   someDiv.style.height = val + 'px';\n * });\n *\n * @see {@link delay}\n *\n * @param {IScheduler} scheduler Scheduler that will be used to reschedule notifications from source Observable.\n * @param {number} [delay] Number of milliseconds that states with what delay every notification should be rescheduled.\n * @return {Observable<T>} Observable that emits the same notifications as the source Observable,\n * but with provided scheduler.\n *\n * @method observeOn\n * @owner Observable\n */\nexport function observeOn<T>(scheduler: IScheduler, delay: number = 0): MonoTypeOperatorFunction<T> {\n  return function observeOnOperatorFunction(source: Observable<T>): Observable<T> {\n    return source.lift(new ObserveOnOperator(scheduler, delay));\n  };\n}\n\nexport class ObserveOnOperator<T> implements Operator<T, T> {\n  constructor(private scheduler: IScheduler, private delay: number = 0) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new ObserveOnSubscriber(subscriber, this.scheduler, this.delay));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class ObserveOnSubscriber<T> extends Subscriber<T> {\n  static dispatch(this: Action<ObserveOnMessage>, arg: ObserveOnMessage) {\n    const { notification, destination } = arg;\n    notification.observe(destination);\n    this.unsubscribe();\n  }\n\n  constructor(destination: Subscriber<T>,\n              private scheduler: IScheduler,\n              private delay: number = 0) {\n    super(destination);\n  }\n\n  private scheduleMessage(notification: Notification<any>): void {\n    this.add(this.scheduler.schedule(\n      ObserveOnSubscriber.dispatch,\n      this.delay,\n      new ObserveOnMessage(notification, this.destination)\n    ));\n  }\n\n  protected _next(value: T): void {\n    this.scheduleMessage(Notification.createNext(value));\n  }\n\n  protected _error(err: any): void {\n    this.scheduleMessage(Notification.createError(err));\n  }\n\n  protected _complete(): void {\n    this.scheduleMessage(Notification.createComplete());\n  }\n}\n\nexport class ObserveOnMessage {\n  constructor(public notification: Notification<any>,\n              public destination: PartialObserver<any>) {\n  }\n}\n","import { isArray } from '../util/isArray';\nimport { isArrayLike } from '../util/isArrayLike';\nimport { isPromise } from '../util/isPromise';\nimport { PromiseObservable } from './PromiseObservable';\nimport { IteratorObservable } from'./IteratorObservable';\nimport { ArrayObservable } from './ArrayObservable';\nimport { ArrayLikeObservable } from './ArrayLikeObservable';\n\nimport { IScheduler } from '../Scheduler';\nimport { iterator as Symbol_iterator } from '../symbol/iterator';\nimport { Observable, ObservableInput } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { ObserveOnSubscriber } from '../operators/observeOn';\nimport { observable as Symbol_observable } from '../symbol/observable';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class FromObservable<T> extends Observable<T> {\n  constructor(private ish: ObservableInput<T>, private scheduler?: IScheduler) {\n    super(null);\n  }\n\n  static create<T>(ish: ObservableInput<T>, scheduler?: IScheduler): Observable<T>;\n  static create<T, R>(ish: ArrayLike<T>, scheduler?: IScheduler): Observable<R>;\n\n  /**\n   * Creates an Observable from an Array, an array-like object, a Promise, an\n   * iterable object, or an Observable-like object.\n   *\n   * <span class=\"informal\">Converts almost anything to an Observable.</span>\n   *\n   * <img src=\"./img/from.png\" width=\"100%\">\n   *\n   * Convert various other objects and data types into Observables. `from`\n   * converts a Promise or an array-like or an\n   * [iterable](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#iterable)\n   * object into an Observable that emits the items in that promise or array or\n   * iterable. A String, in this context, is treated as an array of characters.\n   * Observable-like objects (contains a function named with the ES2015 Symbol\n   * for Observable) can also be converted through this operator.\n   *\n   * @example <caption>Converts an array to an Observable</caption>\n   * var array = [10, 20, 30];\n   * var result = Rx.Observable.from(array);\n   * result.subscribe(x => console.log(x));\n   *\n   * // Results in the following:\n   * // 10 20 30\n   *\n   * @example <caption>Convert an infinite iterable (from a generator) to an Observable</caption>\n   * function* generateDoubles(seed) {\n   *   var i = seed;\n   *   while (true) {\n   *     yield i;\n   *     i = 2 * i; // double it\n   *   }\n   * }\n   *\n   * var iterator = generateDoubles(3);\n   * var result = Rx.Observable.from(iterator).take(10);\n   * result.subscribe(x => console.log(x));\n   *\n   * // Results in the following:\n   * // 3 6 12 24 48 96 192 384 768 1536\n   *\n   * @see {@link create}\n   * @see {@link fromEvent}\n   * @see {@link fromEventPattern}\n   * @see {@link fromPromise}\n   *\n   * @param {ObservableInput<T>} ish A subscribable object, a Promise, an\n   * Observable-like, an Array, an iterable or an array-like object to be\n   * converted.\n   * @param {Scheduler} [scheduler] The scheduler on which to schedule the\n   * emissions of values.\n   * @return {Observable<T>} The Observable whose values are originally from the\n   * input object that was converted.\n   * @static true\n   * @name from\n   * @owner Observable\n   */\n  static create<T>(ish: ObservableInput<T>, scheduler?: IScheduler): Observable<T> {\n    if (ish != null) {\n      if (typeof ish[Symbol_observable] === 'function') {\n        if (ish instanceof Observable && !scheduler) {\n          return ish;\n        }\n        return new FromObservable<T>(ish, scheduler);\n      } else if (isArray(ish)) {\n        return new ArrayObservable<T>(ish, scheduler);\n      } else if (isPromise<T>(ish)) {\n        return new PromiseObservable<T>(ish, scheduler);\n      } else if (typeof ish[Symbol_iterator] === 'function' || typeof ish === 'string') {\n        return new IteratorObservable<T>(ish, scheduler);\n      } else if (isArrayLike(ish)) {\n        return new ArrayLikeObservable(ish, scheduler);\n      }\n    }\n\n    throw new TypeError((ish !== null && typeof ish || ish) + ' is not observable');\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>) {\n    const ish = this.ish;\n    const scheduler = this.scheduler;\n    if (scheduler == null) {\n      return ish[Symbol_observable]().subscribe(subscriber);\n    } else {\n      return ish[Symbol_observable]().subscribe(new ObserveOnSubscriber(subscriber, scheduler, 0));\n    }\n  }\n}\n","import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Observer } from '../Observer';\nimport { Subscriber } from '../Subscriber';\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Counts the number of emissions on the source and emits that number when the\n * source completes.\n *\n * <span class=\"informal\">Tells how many values were emitted, when the source\n * completes.</span>\n *\n * <img src=\"./img/count.png\" width=\"100%\">\n *\n * `count` transforms an Observable that emits values into an Observable that\n * emits a single value that represents the number of values emitted by the\n * source Observable. If the source Observable terminates with an error, `count`\n * will pass this error notification along without emitting a value first. If\n * the source Observable does not terminate at all, `count` will neither emit\n * a value nor terminate. This operator takes an optional `predicate` function\n * as argument, in which case the output emission will represent the number of\n * source values that matched `true` with the `predicate`.\n *\n * @example <caption>Counts how many seconds have passed before the first click happened</caption>\n * var seconds = Rx.Observable.interval(1000);\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var secondsBeforeClick = seconds.takeUntil(clicks);\n * var result = secondsBeforeClick.count();\n * result.subscribe(x => console.log(x));\n *\n * @example <caption>Counts how many odd numbers are there between 1 and 7</caption>\n * var numbers = Rx.Observable.range(1, 7);\n * var result = numbers.count(i => i % 2 === 1);\n * result.subscribe(x => console.log(x));\n *\n * // Results in:\n * // 4\n *\n * @see {@link max}\n * @see {@link min}\n * @see {@link reduce}\n *\n * @param {function(value: T, i: number, source: Observable<T>): boolean} [predicate] A\n * boolean function to select what values are to be counted. It is provided with\n * arguments of:\n * - `value`: the value from the source Observable.\n * - `index`: the (zero-based) \"index\" of the value from the source Observable.\n * - `source`: the source Observable instance itself.\n * @return {Observable} An Observable of one number that represents the count as\n * described above.\n * @method count\n * @owner Observable\n */\nexport function count<T>(predicate?: (value: T, index: number, source: Observable<T>) => boolean): OperatorFunction<T, number> {\n  return (source: Observable<T>) => source.lift(new CountOperator(predicate, source));\n}\n\nclass CountOperator<T> implements Operator<T, number> {\n  constructor(private predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n              private source?: Observable<T>) {\n  }\n\n  call(subscriber: Subscriber<number>, source: any): any {\n    return source.subscribe(new CountSubscriber(subscriber, this.predicate, this.source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass CountSubscriber<T> extends Subscriber<T> {\n  private count: number = 0;\n  private index: number = 0;\n\n  constructor(destination: Observer<number>,\n              private predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n              private source?: Observable<T>) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    if (this.predicate) {\n      this._tryPredicate(value);\n    } else {\n      this.count++;\n    }\n  }\n\n  private _tryPredicate(value: T) {\n    let result: any;\n\n    try {\n      result = this.predicate(value, this.index++, this.source);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n\n    if (result) {\n      this.count++;\n    }\n  }\n\n  protected _complete(): void {\n    this.destination.next(this.count);\n    this.destination.complete();\n  }\n}\n","import { Operator } from '../Operator';\nimport { Observable, SubscribableOrPromise } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription, TeardownLogic } from '../Subscription';\n\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Emits a value from the source Observable only after a particular time span\n * determined by another Observable has passed without another source emission.\n *\n * <span class=\"informal\">It's like {@link debounceTime}, but the time span of\n * emission silence is determined by a second Observable.</span>\n *\n * <img src=\"./img/debounce.png\" width=\"100%\">\n *\n * `debounce` delays values emitted by the source Observable, but drops previous\n * pending delayed emissions if a new value arrives on the source Observable.\n * This operator keeps track of the most recent value from the source\n * Observable, and spawns a duration Observable by calling the\n * `durationSelector` function. The value is emitted only when the duration\n * Observable emits a value or completes, and if no other value was emitted on\n * the source Observable since the duration Observable was spawned. If a new\n * value appears before the duration Observable emits, the previous value will\n * be dropped and will not be emitted on the output Observable.\n *\n * Like {@link debounceTime}, this is a rate-limiting operator, and also a\n * delay-like operator since output emissions do not necessarily occur at the\n * same time as they did on the source Observable.\n *\n * @example <caption>Emit the most recent click after a burst of clicks</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.debounce(() => Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link audit}\n * @see {@link debounceTime}\n * @see {@link delayWhen}\n * @see {@link throttle}\n *\n * @param {function(value: T): SubscribableOrPromise} durationSelector A function\n * that receives a value from the source Observable, for computing the timeout\n * duration for each source value, returned as an Observable or a Promise.\n * @return {Observable} An Observable that delays the emissions of the source\n * Observable by the specified duration Observable returned by\n * `durationSelector`, and may drop some values if they occur too frequently.\n * @method debounce\n * @owner Observable\n */\nexport function debounce<T>(durationSelector: (value: T) => SubscribableOrPromise<number>): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new DebounceOperator(durationSelector));\n}\n\nclass DebounceOperator<T> implements Operator<T, T> {\n  constructor(private durationSelector: (value: T) => SubscribableOrPromise<number>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new DebounceSubscriber(subscriber, this.durationSelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass DebounceSubscriber<T, R> extends OuterSubscriber<T, R> {\n  private value: T;\n  private hasValue: boolean = false;\n  private durationSubscription: Subscription = null;\n\n  constructor(destination: Subscriber<R>,\n              private durationSelector: (value: T) => SubscribableOrPromise<number>) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    try {\n      const result = this.durationSelector.call(this, value);\n\n      if (result) {\n        this._tryNext(value, result);\n      }\n    } catch (err) {\n      this.destination.error(err);\n    }\n  }\n\n  protected _complete(): void {\n    this.emitValue();\n    this.destination.complete();\n  }\n\n  private _tryNext(value: T, duration: SubscribableOrPromise<number>): void {\n    let subscription = this.durationSubscription;\n    this.value = value;\n    this.hasValue = true;\n    if (subscription) {\n      subscription.unsubscribe();\n      this.remove(subscription);\n    }\n\n    subscription = subscribeToResult(this, duration);\n    if (!subscription.closed) {\n      this.add(this.durationSubscription = subscription);\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.emitValue();\n  }\n\n  notifyComplete(): void {\n    this.emitValue();\n  }\n\n  emitValue(): void {\n    if (this.hasValue) {\n      const value = this.value;\n      const subscription = this.durationSubscription;\n      if (subscription) {\n        this.durationSubscription = null;\n        subscription.unsubscribe();\n        this.remove(subscription);\n      }\n      this.value = null;\n      this.hasValue = false;\n      super._next(value);\n    }\n  }\n}\n","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { IScheduler } from '../Scheduler';\nimport { Subscription, TeardownLogic } from '../Subscription';\nimport { async } from '../scheduler/async';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Emits a value from the source Observable only after a particular time span\n * has passed without another source emission.\n *\n * <span class=\"informal\">It's like {@link delay}, but passes only the most\n * recent value from each burst of emissions.</span>\n *\n * <img src=\"./img/debounceTime.png\" width=\"100%\">\n *\n * `debounceTime` delays values emitted by the source Observable, but drops\n * previous pending delayed emissions if a new value arrives on the source\n * Observable. This operator keeps track of the most recent value from the\n * source Observable, and emits that only when `dueTime` enough time has passed\n * without any other value appearing on the source Observable. If a new value\n * appears before `dueTime` silence occurs, the previous value will be dropped\n * and will not be emitted on the output Observable.\n *\n * This is a rate-limiting operator, because it is impossible for more than one\n * value to be emitted in any time window of duration `dueTime`, but it is also\n * a delay-like operator since output emissions do not occur at the same time as\n * they did on the source Observable. Optionally takes a {@link IScheduler} for\n * managing timers.\n *\n * @example <caption>Emit the most recent click after a burst of clicks</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.debounceTime(1000);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link auditTime}\n * @see {@link debounce}\n * @see {@link delay}\n * @see {@link sampleTime}\n * @see {@link throttleTime}\n *\n * @param {number} dueTime The timeout duration in milliseconds (or the time\n * unit determined internally by the optional `scheduler`) for the window of\n * time required to wait for emission silence before emitting the most recent\n * source value.\n * @param {Scheduler} [scheduler=async] The {@link IScheduler} to use for\n * managing the timers that handle the timeout for each value.\n * @return {Observable} An Observable that delays the emissions of the source\n * Observable by the specified `dueTime`, and may drop some values if they occur\n * too frequently.\n * @method debounceTime\n * @owner Observable\n */\nexport function debounceTime<T>(dueTime: number, scheduler: IScheduler = async): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new DebounceTimeOperator(dueTime, scheduler));\n}\n\nclass DebounceTimeOperator<T> implements Operator<T, T> {\n  constructor(private dueTime: number, private scheduler: IScheduler) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new DebounceTimeSubscriber(subscriber, this.dueTime, this.scheduler));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass DebounceTimeSubscriber<T> extends Subscriber<T> {\n  private debouncedSubscription: Subscription = null;\n  private lastValue: T = null;\n  private hasValue: boolean = false;\n\n  constructor(destination: Subscriber<T>,\n              private dueTime: number,\n              private scheduler: IScheduler) {\n    super(destination);\n  }\n\n  protected _next(value: T) {\n    this.clearDebounce();\n    this.lastValue = value;\n    this.hasValue = true;\n    this.add(this.debouncedSubscription = this.scheduler.schedule(dispatchNext, this.dueTime, this));\n  }\n\n  protected _complete() {\n    this.debouncedNext();\n    this.destination.complete();\n  }\n\n  debouncedNext(): void {\n    this.clearDebounce();\n\n    if (this.hasValue) {\n      this.destination.next(this.lastValue);\n      this.lastValue = null;\n      this.hasValue = false;\n    }\n  }\n\n  private clearDebounce(): void {\n    const debouncedSubscription = this.debouncedSubscription;\n\n    if (debouncedSubscription !== null) {\n      this.remove(debouncedSubscription);\n      debouncedSubscription.unsubscribe();\n      this.debouncedSubscription = null;\n    }\n  }\n}\n\nfunction dispatchNext(subscriber: DebounceTimeSubscriber<any>) {\n  subscriber.debouncedNext();\n}\n","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { OperatorFunction, MonoTypeOperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function defaultIfEmpty<T>(defaultValue?: T): MonoTypeOperatorFunction<T>;\nexport function defaultIfEmpty<T, R>(defaultValue?: R): OperatorFunction<T, T | R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Emits a given value if the source Observable completes without emitting any\n * `next` value, otherwise mirrors the source Observable.\n *\n * <span class=\"informal\">If the source Observable turns out to be empty, then\n * this operator will emit a default value.</span>\n *\n * <img src=\"./img/defaultIfEmpty.png\" width=\"100%\">\n *\n * `defaultIfEmpty` emits the values emitted by the source Observable or a\n * specified default value if the source Observable is empty (completes without\n * having emitted any `next` value).\n *\n * @example <caption>If no clicks happen in 5 seconds, then emit \"no clicks\"</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var clicksBeforeFive = clicks.takeUntil(Rx.Observable.interval(5000));\n * var result = clicksBeforeFive.defaultIfEmpty('no clicks');\n * result.subscribe(x => console.log(x));\n *\n * @see {@link empty}\n * @see {@link last}\n *\n * @param {any} [defaultValue=null] The default value used if the source\n * Observable is empty.\n * @return {Observable} An Observable that emits either the specified\n * `defaultValue` if the source Observable emits no items, or the values emitted\n * by the source Observable.\n * @method defaultIfEmpty\n * @owner Observable\n */\nexport function defaultIfEmpty<T, R>(defaultValue: R = null): OperatorFunction<T, T | R> {\n  return (source: Observable<T>) => source.lift(new DefaultIfEmptyOperator(defaultValue)) as Observable<T | R>;\n}\n\nclass DefaultIfEmptyOperator<T, R> implements Operator<T, T | R> {\n\n  constructor(private defaultValue: R) {\n  }\n\n  call(subscriber: Subscriber<T | R>, source: any): any {\n    return source.subscribe(new DefaultIfEmptySubscriber(subscriber, this.defaultValue));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass DefaultIfEmptySubscriber<T, R> extends Subscriber<T> {\n  private isEmpty: boolean = true;\n\n  constructor(destination: Subscriber<T | R>, private defaultValue: R) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    this.isEmpty = false;\n    this.destination.next(value);\n  }\n\n  protected _complete(): void {\n    if (this.isEmpty) {\n      this.destination.next(this.defaultValue);\n    }\n    this.destination.complete();\n  }\n}","import { async } from '../scheduler/async';\nimport { isDate } from '../util/isDate';\nimport { Operator } from '../Operator';\nimport { IScheduler } from '../Scheduler';\nimport { Subscriber } from '../Subscriber';\nimport { Action } from '../scheduler/Action';\nimport { Notification } from '../Notification';\nimport { Observable } from '../Observable';\nimport { PartialObserver } from '../Observer';\nimport { TeardownLogic } from '../Subscription';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Delays the emission of items from the source Observable by a given timeout or\n * until a given Date.\n *\n * <span class=\"informal\">Time shifts each item by some specified amount of\n * milliseconds.</span>\n *\n * <img src=\"./img/delay.png\" width=\"100%\">\n *\n * If the delay argument is a Number, this operator time shifts the source\n * Observable by that amount of time expressed in milliseconds. The relative\n * time intervals between the values are preserved.\n *\n * If the delay argument is a Date, this operator time shifts the start of the\n * Observable execution until the given date occurs.\n *\n * @example <caption>Delay each click by one second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var delayedClicks = clicks.delay(1000); // each click emitted after 1 second\n * delayedClicks.subscribe(x => console.log(x));\n *\n * @example <caption>Delay all clicks until a future date happens</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var date = new Date('March 15, 2050 12:00:00'); // in the future\n * var delayedClicks = clicks.delay(date); // click emitted only after that date\n * delayedClicks.subscribe(x => console.log(x));\n *\n * @see {@link debounceTime}\n * @see {@link delayWhen}\n *\n * @param {number|Date} delay The delay duration in milliseconds (a `number`) or\n * a `Date` until which the emission of the source items is delayed.\n * @param {Scheduler} [scheduler=async] The IScheduler to use for\n * managing the timers that handle the time-shift for each item.\n * @return {Observable} An Observable that delays the emissions of the source\n * Observable by the specified timeout or Date.\n * @method delay\n * @owner Observable\n */\nexport function delay<T>(delay: number|Date,\n                         scheduler: IScheduler = async): MonoTypeOperatorFunction<T> {\n  const absoluteDelay = isDate(delay);\n  const delayFor = absoluteDelay ? (+delay - scheduler.now()) : Math.abs(<number>delay);\n  return (source: Observable<T>) => source.lift(new DelayOperator(delayFor, scheduler));\n}\n\nclass DelayOperator<T> implements Operator<T, T> {\n  constructor(private delay: number,\n              private scheduler: IScheduler) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new DelaySubscriber(subscriber, this.delay, this.scheduler));\n  }\n}\n\ninterface DelayState<T> {\n  source: DelaySubscriber<T>;\n  destination: PartialObserver<T>;\n  scheduler: IScheduler;\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass DelaySubscriber<T> extends Subscriber<T> {\n  private queue: Array<DelayMessage<T>> = [];\n  private active: boolean = false;\n  private errored: boolean = false;\n\n  private static dispatch<T>(this: Action<DelayState<T>>, state: DelayState<T>): void {\n    const source = state.source;\n    const queue = source.queue;\n    const scheduler = state.scheduler;\n    const destination = state.destination;\n\n    while (queue.length > 0 && (queue[0].time - scheduler.now()) <= 0) {\n      queue.shift().notification.observe(destination);\n    }\n\n    if (queue.length > 0) {\n      const delay = Math.max(0, queue[0].time - scheduler.now());\n      this.schedule(state, delay);\n    } else {\n      source.active = false;\n    }\n  }\n\n  constructor(destination: Subscriber<T>,\n              private delay: number,\n              private scheduler: IScheduler) {\n    super(destination);\n  }\n\n  private _schedule(scheduler: IScheduler): void {\n    this.active = true;\n    this.add(scheduler.schedule<DelayState<T>>(DelaySubscriber.dispatch, this.delay, {\n      source: this, destination: this.destination, scheduler: scheduler\n    }));\n  }\n\n  private scheduleNotification(notification: Notification<T>): void {\n    if (this.errored === true) {\n      return;\n    }\n\n    const scheduler = this.scheduler;\n    const message = new DelayMessage(scheduler.now() + this.delay, notification);\n    this.queue.push(message);\n\n    if (this.active === false) {\n      this._schedule(scheduler);\n    }\n  }\n\n  protected _next(value: T) {\n    this.scheduleNotification(Notification.createNext(value));\n  }\n\n  protected _error(err: any) {\n    this.errored = true;\n    this.queue = [];\n    this.destination.error(err);\n  }\n\n  protected _complete() {\n    this.scheduleNotification(Notification.createComplete());\n  }\n}\n\nclass DelayMessage<T> {\n  constructor(public readonly time: number,\n              public readonly notification: Notification<T>) {\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { Subscription, TeardownLogic } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Delays the emission of items from the source Observable by a given time span\n * determined by the emissions of another Observable.\n *\n * <span class=\"informal\">It's like {@link delay}, but the time span of the\n * delay duration is determined by a second Observable.</span>\n *\n * <img src=\"./img/delayWhen.png\" width=\"100%\">\n *\n * `delayWhen` time shifts each emitted value from the source Observable by a\n * time span determined by another Observable. When the source emits a value,\n * the `delayDurationSelector` function is called with the source value as\n * argument, and should return an Observable, called the \"duration\" Observable.\n * The source value is emitted on the output Observable only when the duration\n * Observable emits a value or completes.\n *\n * Optionally, `delayWhen` takes a second argument, `subscriptionDelay`, which\n * is an Observable. When `subscriptionDelay` emits its first value or\n * completes, the source Observable is subscribed to and starts behaving like\n * described in the previous paragraph. If `subscriptionDelay` is not provided,\n * `delayWhen` will subscribe to the source Observable as soon as the output\n * Observable is subscribed.\n *\n * @example <caption>Delay each click by a random amount of time, between 0 and 5 seconds</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var delayedClicks = clicks.delayWhen(event =>\n *   Rx.Observable.interval(Math.random() * 5000)\n * );\n * delayedClicks.subscribe(x => console.log(x));\n *\n * @see {@link debounce}\n * @see {@link delay}\n *\n * @param {function(value: T): Observable} delayDurationSelector A function that\n * returns an Observable for each value emitted by the source Observable, which\n * is then used to delay the emission of that item on the output Observable\n * until the Observable returned from this function emits a value.\n * @param {Observable} subscriptionDelay An Observable that triggers the\n * subscription to the source Observable once it emits any value.\n * @return {Observable} An Observable that delays the emissions of the source\n * Observable by an amount of time specified by the Observable returned by\n * `delayDurationSelector`.\n * @method delayWhen\n * @owner Observable\n */\nexport function delayWhen<T>(delayDurationSelector: (value: T) => Observable<any>,\n                             subscriptionDelay?: Observable<any>): MonoTypeOperatorFunction<T> {\n  if (subscriptionDelay) {\n    return (source: Observable<T>) =>\n      new SubscriptionDelayObservable(source, subscriptionDelay)\n        .lift(new DelayWhenOperator(delayDurationSelector));\n  }\n  return (source: Observable<T>) => source.lift(new DelayWhenOperator(delayDurationSelector));\n}\n\nclass DelayWhenOperator<T> implements Operator<T, T> {\n  constructor(private delayDurationSelector: (value: T) => Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new DelayWhenSubscriber(subscriber, this.delayDurationSelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass DelayWhenSubscriber<T, R> extends OuterSubscriber<T, R> {\n  private completed: boolean = false;\n  private delayNotifierSubscriptions: Array<Subscription> = [];\n  private values: Array<T> = [];\n\n  constructor(destination: Subscriber<T>,\n              private delayDurationSelector: (value: T) => Observable<any>) {\n    super(destination);\n  }\n\n  notifyNext(outerValue: T, innerValue: any,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.destination.next(outerValue);\n    this.removeSubscription(innerSub);\n    this.tryComplete();\n  }\n\n  notifyError(error: any, innerSub: InnerSubscriber<T, R>): void {\n    this._error(error);\n  }\n\n  notifyComplete(innerSub: InnerSubscriber<T, R>): void {\n    const value = this.removeSubscription(innerSub);\n    if (value) {\n      this.destination.next(value);\n    }\n    this.tryComplete();\n  }\n\n  protected _next(value: T): void {\n    try {\n      const delayNotifier = this.delayDurationSelector(value);\n      if (delayNotifier) {\n        this.tryDelay(delayNotifier, value);\n      }\n    } catch (err) {\n      this.destination.error(err);\n    }\n  }\n\n  protected _complete(): void {\n    this.completed = true;\n    this.tryComplete();\n  }\n\n  private removeSubscription(subscription: InnerSubscriber<T, R>): T {\n    subscription.unsubscribe();\n\n    const subscriptionIdx = this.delayNotifierSubscriptions.indexOf(subscription);\n    let value: T = null;\n\n    if (subscriptionIdx !== -1) {\n      value = this.values[subscriptionIdx];\n      this.delayNotifierSubscriptions.splice(subscriptionIdx, 1);\n      this.values.splice(subscriptionIdx, 1);\n    }\n\n    return value;\n  }\n\n  private tryDelay(delayNotifier: Observable<any>, value: T): void {\n    const notifierSubscription = subscribeToResult(this, delayNotifier, value);\n\n    if (notifierSubscription && !notifierSubscription.closed) {\n      this.add(notifierSubscription);\n      this.delayNotifierSubscriptions.push(notifierSubscription);\n    }\n\n    this.values.push(value);\n  }\n\n  private tryComplete(): void {\n    if (this.completed && this.delayNotifierSubscriptions.length === 0) {\n      this.destination.complete();\n    }\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SubscriptionDelayObservable<T> extends Observable<T> {\n  constructor(protected source: Observable<T>, private subscriptionDelay: Observable<any>) {\n    super();\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>) {\n    this.subscriptionDelay.subscribe(new SubscriptionDelaySubscriber(subscriber, this.source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SubscriptionDelaySubscriber<T> extends Subscriber<T> {\n  private sourceSubscribed: boolean = false;\n\n  constructor(private parent: Subscriber<T>, private source: Observable<T>) {\n    super();\n  }\n\n  protected _next(unused: any) {\n    this.subscribeToSource();\n  }\n\n  protected _error(err: any) {\n    this.unsubscribe();\n    this.parent.error(err);\n  }\n\n  protected _complete() {\n    this.subscribeToSource();\n  }\n\n  private subscribeToSource(): void {\n    if (!this.sourceSubscribed) {\n      this.sourceSubscribed = true;\n      this.unsubscribe();\n      this.source.subscribe(this.parent);\n    }\n  }\n}\n","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Notification } from '../Notification';\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Converts an Observable of {@link Notification} objects into the emissions\n * that they represent.\n *\n * <span class=\"informal\">Unwraps {@link Notification} objects as actual `next`,\n * `error` and `complete` emissions. The opposite of {@link materialize}.</span>\n *\n * <img src=\"./img/dematerialize.png\" width=\"100%\">\n *\n * `dematerialize` is assumed to operate an Observable that only emits\n * {@link Notification} objects as `next` emissions, and does not emit any\n * `error`. Such Observable is the output of a `materialize` operation. Those\n * notifications are then unwrapped using the metadata they contain, and emitted\n * as `next`, `error`, and `complete` on the output Observable.\n *\n * Use this operator in conjunction with {@link materialize}.\n *\n * @example <caption>Convert an Observable of Notifications to an actual Observable</caption>\n * var notifA = new Rx.Notification('N', 'A');\n * var notifB = new Rx.Notification('N', 'B');\n * var notifE = new Rx.Notification('E', void 0,\n *   new TypeError('x.toUpperCase is not a function')\n * );\n * var materialized = Rx.Observable.of(notifA, notifB, notifE);\n * var upperCase = materialized.dematerialize();\n * upperCase.subscribe(x => console.log(x), e => console.error(e));\n *\n * // Results in:\n * // A\n * // B\n * // TypeError: x.toUpperCase is not a function\n *\n * @see {@link Notification}\n * @see {@link materialize}\n *\n * @return {Observable} An Observable that emits items and notifications\n * embedded in Notification objects emitted by the source Observable.\n * @method dematerialize\n * @owner Observable\n */\nexport function dematerialize<T>(): OperatorFunction<Notification<T>, T> {\n  return function dematerializeOperatorFunction(source: Observable<Notification<T>>) {\n    return source.lift(new DeMaterializeOperator());\n  };\n}\n\nclass DeMaterializeOperator<T extends Notification<any>, R> implements Operator<T, R> {\n  call(subscriber: Subscriber<any>, source: any): any {\n    return source.subscribe(new DeMaterializeSubscriber(subscriber));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass DeMaterializeSubscriber<T extends Notification<any>> extends Subscriber<T> {\n  constructor(destination: Subscriber<any>) {\n    super(destination);\n  }\n\n  protected _next(value: T) {\n    value.observe(this.destination);\n  }\n}\n","import { root } from './root';\n\nexport interface ISetCtor {\n  new<T>(): ISet<T>;\n}\n\nexport interface ISet<T> {\n  add(value: T): void;\n  has(value: T): boolean;\n  size: number;\n  clear(): void;\n}\n\nexport function minimalSetImpl<T>(): ISetCtor {\n  // THIS IS NOT a full impl of Set, this is just the minimum\n  // bits of functionality we need for this library.\n  return class MinimalSet<T> implements ISet<T> {\n    private _values: T[] = [];\n\n    add(value: T): void {\n      if (!this.has(value)) {\n        this._values.push(value);\n      }\n    }\n\n    has(value: T): boolean {\n      return this._values.indexOf(value) !== -1;\n    }\n\n    get size(): number {\n      return this._values.length;\n    }\n\n    clear(): void {\n      this._values.length = 0;\n    }\n  };\n}\n\nexport const Set: ISetCtor = root.Set || minimalSetImpl();","import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { TeardownLogic } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { ISet, Set } from '../util/Set';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Returns an Observable that emits all items emitted by the source Observable that are distinct by comparison from previous items.\n *\n * If a keySelector function is provided, then it will project each value from the source observable into a new value that it will\n * check for equality with previously projected values. If a keySelector function is not provided, it will use each value from the\n * source observable directly with an equality check against previous values.\n *\n * In JavaScript runtimes that support `Set`, this operator will use a `Set` to improve performance of the distinct value checking.\n *\n * In other runtimes, this operator will use a minimal implementation of `Set` that relies on an `Array` and `indexOf` under the\n * hood, so performance will degrade as more values are checked for distinction. Even in newer browsers, a long-running `distinct`\n * use might result in memory leaks. To help alleviate this in some scenarios, an optional `flushes` parameter is also provided so\n * that the internal `Set` can be \"flushed\", basically clearing it of values.\n *\n * @example <caption>A simple example with numbers</caption>\n * Observable.of(1, 1, 2, 2, 2, 1, 2, 3, 4, 3, 2, 1)\n *   .distinct()\n *   .subscribe(x => console.log(x)); // 1, 2, 3, 4\n *\n * @example <caption>An example using a keySelector function</caption>\n * interface Person {\n *    age: number,\n *    name: string\n * }\n *\n * Observable.of<Person>(\n *     { age: 4, name: 'Foo'},\n *     { age: 7, name: 'Bar'},\n *     { age: 5, name: 'Foo'})\n *     .distinct((p: Person) => p.name)\n *     .subscribe(x => console.log(x));\n *\n * // displays:\n * // { age: 4, name: 'Foo' }\n * // { age: 7, name: 'Bar' }\n *\n * @see {@link distinctUntilChanged}\n * @see {@link distinctUntilKeyChanged}\n *\n * @param {function} [keySelector] Optional function to select which value you want to check as distinct.\n * @param {Observable} [flushes] Optional Observable for flushing the internal HashSet of the operator.\n * @return {Observable} An Observable that emits items from the source Observable with distinct values.\n * @method distinct\n * @owner Observable\n */\nexport function distinct<T, K>(keySelector?: (value: T) => K,\n                               flushes?: Observable<any>): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new DistinctOperator(keySelector, flushes));\n}\n\nclass DistinctOperator<T, K> implements Operator<T, T> {\n  constructor(private keySelector: (value: T) => K, private flushes: Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new DistinctSubscriber(subscriber, this.keySelector, this.flushes));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class DistinctSubscriber<T, K> extends OuterSubscriber<T, T> {\n  private values: ISet<K> = new Set<K>();\n\n  constructor(destination: Subscriber<T>, private keySelector: (value: T) => K, flushes: Observable<any>) {\n    super(destination);\n\n    if (flushes) {\n      this.add(subscribeToResult(this, flushes));\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: T,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, T>): void {\n    this.values.clear();\n  }\n\n  notifyError(error: any, innerSub: InnerSubscriber<T, T>): void {\n    this._error(error);\n  }\n\n  protected _next(value: T): void {\n    if (this.keySelector) {\n      this._useKeySelector(value);\n    } else {\n      this._finalizeNext(value, value);\n    }\n  }\n\n  private _useKeySelector(value: T): void {\n    let key: K;\n    const { destination } = this;\n    try {\n      key = this.keySelector(value);\n    } catch (err) {\n      destination.error(err);\n      return;\n    }\n    this._finalizeNext(key, value);\n  }\n\n  private _finalizeNext(key: K|T, value: T) {\n    const { values } = this;\n    if (!values.has(<K>key)) {\n      values.add(<K>key);\n      this.destination.next(value);\n    }\n  }\n\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function distinctUntilChanged<T>(compare?: (x: T, y: T) => boolean): MonoTypeOperatorFunction<T>;\nexport function distinctUntilChanged<T, K>(compare: (x: K, y: K) => boolean, keySelector: (x: T) => K): MonoTypeOperatorFunction<T>;\n/* tslint:enable:max-line-length */\n\n/**\n * Returns an Observable that emits all items emitted by the source Observable that are distinct by comparison from the previous item.\n *\n * If a comparator function is provided, then it will be called for each item to test for whether or not that value should be emitted.\n *\n * If a comparator function is not provided, an equality check is used by default.\n *\n * @example <caption>A simple example with numbers</caption>\n * Observable.of(1, 1, 2, 2, 2, 1, 1, 2, 3, 3, 4)\n *   .distinctUntilChanged()\n *   .subscribe(x => console.log(x)); // 1, 2, 1, 2, 3, 4\n *\n * @example <caption>An example using a compare function</caption>\n * interface Person {\n *    age: number,\n *    name: string\n * }\n *\n * Observable.of<Person>(\n *     { age: 4, name: 'Foo'},\n *     { age: 7, name: 'Bar'},\n *     { age: 5, name: 'Foo'})\n *     { age: 6, name: 'Foo'})\n *     .distinctUntilChanged((p: Person, q: Person) => p.name === q.name)\n *     .subscribe(x => console.log(x));\n *\n * // displays:\n * // { age: 4, name: 'Foo' }\n * // { age: 7, name: 'Bar' }\n * // { age: 5, name: 'Foo' }\n *\n * @see {@link distinct}\n * @see {@link distinctUntilKeyChanged}\n *\n * @param {function} [compare] Optional comparison function called to test if an item is distinct from the previous item in the source.\n * @return {Observable} An Observable that emits items from the source Observable with distinct values.\n * @method distinctUntilChanged\n * @owner Observable\n */\nexport function distinctUntilChanged<T, K>(compare?: (x: K, y: K) => boolean, keySelector?: (x: T) => K): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new DistinctUntilChangedOperator<T, K>(compare, keySelector));\n}\n\nclass DistinctUntilChangedOperator<T, K> implements Operator<T, T> {\n  constructor(private compare: (x: K, y: K) => boolean,\n              private keySelector: (x: T) => K) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new DistinctUntilChangedSubscriber(subscriber, this.compare, this.keySelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass DistinctUntilChangedSubscriber<T, K> extends Subscriber<T> {\n  private key: K;\n  private hasKey: boolean = false;\n\n  constructor(destination: Subscriber<T>,\n              compare: (x: K, y: K) => boolean,\n              private keySelector: (x: T) => K) {\n    super(destination);\n    if (typeof compare === 'function') {\n      this.compare = compare;\n    }\n  }\n\n  private compare(x: any, y: any): boolean {\n    return x === y;\n  }\n\n  protected _next(value: T): void {\n\n    const keySelector = this.keySelector;\n    let key: any = value;\n\n    if (keySelector) {\n      key = tryCatch(this.keySelector)(value);\n      if (key === errorObject) {\n        return this.destination.error(errorObject.e);\n      }\n    }\n\n    let result: any = false;\n\n    if (this.hasKey) {\n      result = tryCatch(this.compare)(this.key, key);\n      if (result === errorObject) {\n        return this.destination.error(errorObject.e);\n      }\n    } else {\n      this.hasKey = true;\n    }\n\n    if (Boolean(result) === false) {\n      this.key = key;\n      this.destination.next(value);\n    }\n  }\n}\n","/**\n * An error thrown when an element was queried at a certain index of an\n * Observable, but no such index or position exists in that sequence.\n *\n * @see {@link elementAt}\n * @see {@link take}\n * @see {@link takeLast}\n *\n * @class ArgumentOutOfRangeError\n */\nexport class ArgumentOutOfRangeError extends Error {\n  constructor() {\n    const err: any = super('argument out of range');\n    (<any> this).name = err.name = 'ArgumentOutOfRangeError';\n    (<any> this).stack = err.stack;\n    (<any> this).message = err.message;\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { ArgumentOutOfRangeError } from '../util/ArgumentOutOfRangeError';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Emits the single value at the specified `index` in a sequence of emissions\n * from the source Observable.\n *\n * <span class=\"informal\">Emits only the i-th value, then completes.</span>\n *\n * <img src=\"./img/elementAt.png\" width=\"100%\">\n *\n * `elementAt` returns an Observable that emits the item at the specified\n * `index` in the source Observable, or a default value if that `index` is out\n * of range and the `default` argument is provided. If the `default` argument is\n * not given and the `index` is out of range, the output Observable will emit an\n * `ArgumentOutOfRangeError` error.\n *\n * @example <caption>Emit only the third click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.elementAt(2);\n * result.subscribe(x => console.log(x));\n *\n * // Results in:\n * // click 1 = nothing\n * // click 2 = nothing\n * // click 3 = MouseEvent object logged to console\n *\n * @see {@link first}\n * @see {@link last}\n * @see {@link skip}\n * @see {@link single}\n * @see {@link take}\n *\n * @throws {ArgumentOutOfRangeError} When using `elementAt(i)`, it delivers an\n * ArgumentOutOrRangeError to the Observer's `error` callback if `i < 0` or the\n * Observable has completed before emitting the i-th `next` notification.\n *\n * @param {number} index Is the number `i` for the i-th source emission that has\n * happened since the subscription, starting from the number `0`.\n * @param {T} [defaultValue] The default value returned for missing indices.\n * @return {Observable} An Observable that emits a single item, if it is found.\n * Otherwise, will emit the default value if given. If not, then emits an error.\n * @method elementAt\n * @owner Observable\n */\nexport function elementAt<T>(index: number, defaultValue?: T): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new ElementAtOperator(index, defaultValue));\n}\n\nclass ElementAtOperator<T> implements Operator<T, T> {\n\n  constructor(private index: number, private defaultValue?: T) {\n    if (index < 0) {\n      throw new ArgumentOutOfRangeError;\n    }\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new ElementAtSubscriber(subscriber, this.index, this.defaultValue));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass ElementAtSubscriber<T> extends Subscriber<T> {\n\n  constructor(destination: Subscriber<T>, private index: number, private defaultValue?: T) {\n    super(destination);\n  }\n\n  protected _next(x: T) {\n    if (this.index-- === 0) {\n      this.destination.next(x);\n      this.destination.complete();\n    }\n  }\n\n  protected _complete() {\n    const destination = this.destination;\n    if (this.index >= 0) {\n      if (typeof this.defaultValue !== 'undefined') {\n        destination.next(this.defaultValue);\n      } else {\n        destination.error(new ArgumentOutOfRangeError);\n      }\n    }\n    destination.complete();\n  }\n}\n","import { Operator } from '../Operator';\nimport { Observer } from '../Observer';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Returns an Observable that emits whether or not every item of the source satisfies the condition specified.\n *\n * @example <caption>A simple example emitting true if all elements are less than 5, false otherwise</caption>\n *  Observable.of(1, 2, 3, 4, 5, 6)\n *     .every(x => x < 5)\n *     .subscribe(x => console.log(x)); // -> false\n *\n * @param {function} predicate A function for determining if an item meets a specified condition.\n * @param {any} [thisArg] Optional object to use for `this` in the callback.\n * @return {Observable} An Observable of booleans that determines if all items of the source Observable meet the condition specified.\n * @method every\n * @owner Observable\n */\nexport function every<T>(predicate: (value: T, index: number, source: Observable<T>) => boolean,\n                         thisArg?: any): OperatorFunction<T, boolean> {\n  return (source: Observable<T>) => source.lift(new EveryOperator(predicate, thisArg, source));\n}\n\nclass EveryOperator<T> implements Operator<T, boolean> {\n  constructor(private predicate: (value: T, index: number, source: Observable<T>) => boolean,\n              private thisArg?: any,\n              private source?: Observable<T>) {\n  }\n\n  call(observer: Subscriber<boolean>, source: any): any {\n    return source.subscribe(new EverySubscriber(observer, this.predicate, this.thisArg, this.source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass EverySubscriber<T> extends Subscriber<T> {\n  private index: number = 0;\n\n  constructor(destination: Observer<boolean>,\n              private predicate: (value: T, index: number, source: Observable<T>) => boolean,\n              private thisArg: any,\n              private source?: Observable<T>) {\n    super(destination);\n    this.thisArg = thisArg || this;\n  }\n\n  private notifyComplete(everyValueMatch: boolean): void {\n    this.destination.next(everyValueMatch);\n    this.destination.complete();\n  }\n\n  protected _next(value: T): void {\n    let result = false;\n    try {\n      result = this.predicate.call(this.thisArg, value, this.index++, this.source);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n\n    if (!result) {\n      this.notifyComplete(false);\n    }\n  }\n\n  protected _complete(): void {\n    this.notifyComplete(true);\n  }\n}\n","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription, TeardownLogic } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Converts a higher-order Observable into a first-order Observable by dropping\n * inner Observables while the previous inner Observable has not yet completed.\n *\n * <span class=\"informal\">Flattens an Observable-of-Observables by dropping the\n * next inner Observables while the current inner is still executing.</span>\n *\n * <img src=\"./img/exhaust.png\" width=\"100%\">\n *\n * `exhaust` subscribes to an Observable that emits Observables, also known as a\n * higher-order Observable. Each time it observes one of these emitted inner\n * Observables, the output Observable begins emitting the items emitted by that\n * inner Observable. So far, it behaves like {@link mergeAll}. However,\n * `exhaust` ignores every new inner Observable if the previous Observable has\n * not yet completed. Once that one completes, it will accept and flatten the\n * next inner Observable and repeat this process.\n *\n * @example <caption>Run a finite timer for each click, only if there is no currently active timer</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var higherOrder = clicks.map((ev) => Rx.Observable.interval(1000).take(5));\n * var result = higherOrder.exhaust();\n * result.subscribe(x => console.log(x));\n *\n * @see {@link combineAll}\n * @see {@link concatAll}\n * @see {@link switch}\n * @see {@link mergeAll}\n * @see {@link exhaustMap}\n * @see {@link zipAll}\n *\n * @return {Observable} An Observable that takes a source of Observables and propagates the first observable\n * exclusively until it completes before subscribing to the next.\n * @method exhaust\n * @owner Observable\n */\nexport function exhaust<T>(): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new SwitchFirstOperator<T>());\n}\n\nclass SwitchFirstOperator<T> implements Operator<T, T> {\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new SwitchFirstSubscriber(subscriber));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SwitchFirstSubscriber<T> extends OuterSubscriber<T, T> {\n  private hasCompleted: boolean = false;\n  private hasSubscription: boolean = false;\n\n  constructor(destination: Subscriber<T>) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    if (!this.hasSubscription) {\n      this.hasSubscription = true;\n      this.add(subscribeToResult(this, value));\n    }\n  }\n\n  protected _complete(): void {\n    this.hasCompleted = true;\n    if (!this.hasSubscription) {\n      this.destination.complete();\n    }\n  }\n\n  notifyComplete(innerSub: Subscription): void {\n    this.remove(innerSub);\n    this.hasSubscription = false;\n    if (this.hasCompleted) {\n      this.destination.complete();\n    }\n  }\n}\n","import { Operator } from '../Operator';\nimport { Observable, ObservableInput } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function exhaustMap<T, R>(project: (value: T, index: number) => ObservableInput<R>): OperatorFunction<T, R>;\nexport function exhaustMap<T, I, R>(project: (value: T, index: number) => ObservableInput<I>, resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Projects each source value to an Observable which is merged in the output\n * Observable only if the previous projected Observable has completed.\n *\n * <span class=\"informal\">Maps each value to an Observable, then flattens all of\n * these inner Observables using {@link exhaust}.</span>\n *\n * <img src=\"./img/exhaustMap.png\" width=\"100%\">\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an (so-called \"inner\") Observable. When it projects a source value to\n * an Observable, the output Observable begins emitting the items emitted by\n * that projected Observable. However, `exhaustMap` ignores every new projected\n * Observable if the previous projected Observable has not yet completed. Once\n * that one completes, it will accept and flatten the next projected Observable\n * and repeat this process.\n *\n * @example <caption>Run a finite timer for each click, only if there is no currently active timer</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.exhaustMap((ev) => Rx.Observable.interval(1000).take(5));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link concatMap}\n * @see {@link exhaust}\n * @see {@link mergeMap}\n * @see {@link switchMap}\n *\n * @param {function(value: T, ?index: number): ObservableInput} project A function\n * that, when applied to an item emitted by the source Observable, returns an\n * Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @return {Observable} An Observable containing projected Observables\n * of each item of the source, ignoring projected Observables that start before\n * their preceding Observable has completed.\n * @method exhaustMap\n * @owner Observable\n */\nexport function exhaustMap<T, I, R>(\n  project: (value: T, index: number) => ObservableInput<I>,\n  resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R\n  ): OperatorFunction<T, R> {\n    return (source: Observable<T>) => source.lift(new SwitchFirstMapOperator(project, resultSelector));\n  }\n\nclass SwitchFirstMapOperator<T, I, R> implements Operator<T, R> {\n  constructor(private project: (value: T, index: number) => ObservableInput<I>,\n              private resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R) {\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new SwitchFirstMapSubscriber(subscriber, this.project, this.resultSelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SwitchFirstMapSubscriber<T, I, R> extends OuterSubscriber<T, I> {\n  private hasSubscription: boolean = false;\n  private hasCompleted: boolean = false;\n  private index: number = 0;\n\n  constructor(destination: Subscriber<R>,\n              private project: (value: T, index: number) => ObservableInput<I>,\n              private resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    if (!this.hasSubscription) {\n      this.tryNext(value);\n    }\n  }\n\n  private tryNext(value: T): void {\n    const index = this.index++;\n    const destination = this.destination;\n    try {\n      const result = this.project(value, index);\n      this.hasSubscription = true;\n      this.add(subscribeToResult(this, result, value, index));\n    } catch (err) {\n      destination.error(err);\n    }\n  }\n\n  protected _complete(): void {\n    this.hasCompleted = true;\n    if (!this.hasSubscription) {\n      this.destination.complete();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: I,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, I>): void {\n    const { resultSelector, destination } = this;\n    if (resultSelector) {\n      this.trySelectResult(outerValue, innerValue, outerIndex, innerIndex);\n    } else {\n      destination.next(innerValue);\n    }\n  }\n\n  private trySelectResult(outerValue: T, innerValue: I,\n                          outerIndex: number, innerIndex: number): void {\n    const { resultSelector, destination } = this;\n    try {\n      const result = resultSelector(outerValue, innerValue, outerIndex, innerIndex);\n      destination.next(result);\n    } catch (err) {\n      destination.error(err);\n    }\n  }\n\n  notifyError(err: any): void {\n    this.destination.error(err);\n  }\n\n  notifyComplete(innerSub: Subscription): void {\n    this.remove(innerSub);\n\n    this.hasSubscription = false;\n    if (this.hasCompleted) {\n      this.destination.complete();\n    }\n  }\n}\n","import { Observable } from '../Observable';\nimport { IScheduler } from '../Scheduler';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\nimport { Subscription } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { MonoTypeOperatorFunction, OperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function expand<T>(project: (value: T, index: number) => Observable<T>, concurrent?: number, scheduler?: IScheduler): MonoTypeOperatorFunction<T>;\nexport function expand<T, R>(project: (value: T, index: number) => Observable<R>, concurrent?: number, scheduler?: IScheduler): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Recursively projects each source value to an Observable which is merged in\n * the output Observable.\n *\n * <span class=\"informal\">It's similar to {@link mergeMap}, but applies the\n * projection function to every source value as well as every output value.\n * It's recursive.</span>\n *\n * <img src=\"./img/expand.png\" width=\"100%\">\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an Observable, and then merging those resulting Observables and\n * emitting the results of this merger. *Expand* will re-emit on the output\n * Observable every source value. Then, each output value is given to the\n * `project` function which returns an inner Observable to be merged on the\n * output Observable. Those output values resulting from the projection are also\n * given to the `project` function to produce new output values. This is how\n * *expand* behaves recursively.\n *\n * @example <caption>Start emitting the powers of two on every click, at most 10 of them</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var powersOfTwo = clicks\n *   .mapTo(1)\n *   .expand(x => Rx.Observable.of(2 * x).delay(1000))\n *   .take(10);\n * powersOfTwo.subscribe(x => console.log(x));\n *\n * @see {@link mergeMap}\n * @see {@link mergeScan}\n *\n * @param {function(value: T, index: number) => Observable} project A function\n * that, when applied to an item emitted by the source or the output Observable,\n * returns an Observable.\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n * Observables being subscribed to concurrently.\n * @param {Scheduler} [scheduler=null] The IScheduler to use for subscribing to\n * each projected inner Observable.\n * @return {Observable} An Observable that emits the source values and also\n * result of applying the projection function to each value emitted on the\n * output Observable and and merging the results of the Observables obtained\n * from this transformation.\n * @method expand\n * @owner Observable\n */\nexport function expand<T, R>(project: (value: T, index: number) => Observable<R>,\n                             concurrent: number = Number.POSITIVE_INFINITY,\n                             scheduler: IScheduler = undefined): OperatorFunction<T, R> {\n  concurrent = (concurrent || 0) < 1 ? Number.POSITIVE_INFINITY : concurrent;\n\n  return (source: Observable<T>) => source.lift(new ExpandOperator(project, concurrent, scheduler));\n}\n\nexport class ExpandOperator<T, R> implements Operator<T, R> {\n  constructor(private project: (value: T, index: number) => Observable<R>,\n              private concurrent: number,\n              private scheduler: IScheduler) {\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new ExpandSubscriber(subscriber, this.project, this.concurrent, this.scheduler));\n  }\n}\n\ninterface DispatchArg<T, R> {\n  subscriber: ExpandSubscriber<T, R>;\n  result: Observable<R>;\n  value: any;\n  index: number;\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class ExpandSubscriber<T, R> extends OuterSubscriber<T, R> {\n  private index: number = 0;\n  private active: number = 0;\n  private hasCompleted: boolean = false;\n  private buffer: any[];\n\n  constructor(destination: Subscriber<R>,\n              private project: (value: T, index: number) => Observable<R>,\n              private concurrent: number,\n              private scheduler: IScheduler) {\n    super(destination);\n    if (concurrent < Number.POSITIVE_INFINITY) {\n      this.buffer = [];\n    }\n  }\n\n  private static dispatch<T, R>(arg: DispatchArg<T, R>): void {\n    const {subscriber, result, value, index} = arg;\n    subscriber.subscribeToProjection(result, value, index);\n  }\n\n  protected _next(value: any): void {\n    const destination = this.destination;\n\n    if (destination.closed) {\n      this._complete();\n      return;\n    }\n\n    const index = this.index++;\n    if (this.active < this.concurrent) {\n      destination.next(value);\n      let result = tryCatch(this.project)(value, index);\n      if (result === errorObject) {\n        destination.error(errorObject.e);\n      } else if (!this.scheduler) {\n        this.subscribeToProjection(result, value, index);\n      } else {\n        const state: DispatchArg<T, R> = { subscriber: this, result, value, index };\n        this.add(this.scheduler.schedule(ExpandSubscriber.dispatch, 0, state));\n      }\n    } else {\n      this.buffer.push(value);\n    }\n  }\n\n  private subscribeToProjection(result: any, value: T, index: number): void {\n    this.active++;\n    this.add(subscribeToResult<T, R>(this, result, value, index));\n  }\n\n  protected _complete(): void {\n    this.hasCompleted = true;\n    if (this.hasCompleted && this.active === 0) {\n      this.destination.complete();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this._next(innerValue);\n  }\n\n  notifyComplete(innerSub: Subscription): void {\n    const buffer = this.buffer;\n    this.remove(innerSub);\n    this.active--;\n    if (buffer && buffer.length > 0) {\n      this._next(buffer.shift());\n    }\n    if (this.hasCompleted && this.active === 0) {\n      this.destination.complete();\n    }\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\nimport { OperatorFunction, MonoTypeOperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function filter<T, S extends T>(predicate: (value: T, index: number) => value is S,\n                                       thisArg?: any): OperatorFunction<T, S>;\nexport function filter<T>(predicate: (value: T, index: number) => boolean,\n                          thisArg?: any): MonoTypeOperatorFunction<T>;\n/* tslint:enable:max-line-length */\n\n/**\n * Filter items emitted by the source Observable by only emitting those that\n * satisfy a specified predicate.\n *\n * <span class=\"informal\">Like\n * [Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter),\n * it only emits a value from the source if it passes a criterion function.</span>\n *\n * <img src=\"./img/filter.png\" width=\"100%\">\n *\n * Similar to the well-known `Array.prototype.filter` method, this operator\n * takes values from the source Observable, passes them through a `predicate`\n * function and only emits those values that yielded `true`.\n *\n * @example <caption>Emit only click events whose target was a DIV element</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var clicksOnDivs = clicks.filter(ev => ev.target.tagName === 'DIV');\n * clicksOnDivs.subscribe(x => console.log(x));\n *\n * @see {@link distinct}\n * @see {@link distinctUntilChanged}\n * @see {@link distinctUntilKeyChanged}\n * @see {@link ignoreElements}\n * @see {@link partition}\n * @see {@link skip}\n *\n * @param {function(value: T, index: number): boolean} predicate A function that\n * evaluates each value emitted by the source Observable. If it returns `true`,\n * the value is emitted, if `false` the value is not passed to the output\n * Observable. The `index` parameter is the number `i` for the i-th source\n * emission that has happened since the subscription, starting from the number\n * `0`.\n * @param {any} [thisArg] An optional argument to determine the value of `this`\n * in the `predicate` function.\n * @return {Observable} An Observable of values from the source that were\n * allowed by the `predicate` function.\n * @method filter\n * @owner Observable\n */\nexport function filter<T>(predicate: (value: T, index: number) => boolean,\n                          thisArg?: any): MonoTypeOperatorFunction<T> {\n  return function filterOperatorFunction(source: Observable<T>): Observable<T> {\n    return source.lift(new FilterOperator(predicate, thisArg));\n  };\n}\n\nclass FilterOperator<T> implements Operator<T, T> {\n  constructor(private predicate: (value: T, index: number) => boolean,\n              private thisArg?: any) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new FilterSubscriber(subscriber, this.predicate, this.thisArg));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass FilterSubscriber<T> extends Subscriber<T> {\n\n  count: number = 0;\n\n  constructor(destination: Subscriber<T>,\n              private predicate: (value: T, index: number) => boolean,\n              private thisArg: any) {\n    super(destination);\n  }\n\n  // the try catch block below is left specifically for\n  // optimization and perf reasons. a tryCatcher is not necessary here.\n  protected _next(value: T) {\n    let result: any;\n    try {\n      result = this.predicate.call(this.thisArg, value, this.count++);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    if (result) {\n      this.destination.next(value);\n    }\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription, TeardownLogic } from '../Subscription';\nimport { Observable } from '../Observable';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Returns an Observable that mirrors the source Observable, but will call a specified function when\n * the source terminates on complete or error.\n * @param {function} callback Function to be called when source terminates.\n * @return {Observable} An Observable that mirrors the source, but will call the specified function on termination.\n * @method finally\n * @owner Observable\n */\nexport function finalize<T>(callback: () => void): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new FinallyOperator(callback));\n}\n\nclass FinallyOperator<T> implements Operator<T, T> {\n  constructor(private callback: () => void) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new FinallySubscriber(subscriber, this.callback));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass FinallySubscriber<T> extends Subscriber<T> {\n  constructor(destination: Subscriber<T>, callback: () => void) {\n    super(destination);\n    this.add(new Subscription(callback));\n  }\n}\n","import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { OperatorFunction, MonoTypeOperatorFunction } from '../interfaces';\n\nexport function find<T, S extends T>(predicate: (value: T, index: number, source: Observable<T>) => value is S,\n                                     thisArg?: any): OperatorFunction<T, S>;\nexport function find<T, S extends T>(predicate: (value: T, index: number) => value is S,\n                                     thisArg?: any): OperatorFunction<T, S>;\nexport function find<T>(predicate: (value: T, index: number, source: Observable<T>) => boolean,\n                        thisArg?: any): MonoTypeOperatorFunction<T>;\nexport function find<T>(predicate: (value: T, index: number) => boolean,\n                        thisArg?: any): MonoTypeOperatorFunction<T>;\n/**\n * Emits only the first value emitted by the source Observable that meets some\n * condition.\n *\n * <span class=\"informal\">Finds the first value that passes some test and emits\n * that.</span>\n *\n * <img src=\"./img/find.png\" width=\"100%\">\n *\n * `find` searches for the first item in the source Observable that matches the\n * specified condition embodied by the `predicate`, and returns the first\n * occurrence in the source. Unlike {@link first}, the `predicate` is required\n * in `find`, and does not emit an error if a valid value is not found.\n *\n * @example <caption>Find and emit the first click that happens on a DIV element</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.find(ev => ev.target.tagName === 'DIV');\n * result.subscribe(x => console.log(x));\n *\n * @see {@link filter}\n * @see {@link first}\n * @see {@link findIndex}\n * @see {@link take}\n *\n * @param {function(value: T, index: number, source: Observable<T>): boolean} predicate\n * A function called with each item to test for condition matching.\n * @param {any} [thisArg] An optional argument to determine the value of `this`\n * in the `predicate` function.\n * @return {Observable<T>} An Observable of the first item that matches the\n * condition.\n * @method find\n * @owner Observable\n */\nexport function find<T>(predicate: (value: T, index: number, source: Observable<T>) => boolean,\n                        thisArg?: any): MonoTypeOperatorFunction<T> {\n  if (typeof predicate !== 'function') {\n    throw new TypeError('predicate is not a function');\n  }\n  return (source: Observable<T>) => source.lift(new FindValueOperator(predicate, source, false, thisArg));\n}\n\nexport class FindValueOperator<T> implements Operator<T, T> {\n  constructor(private predicate: (value: T, index: number, source: Observable<T>) => boolean,\n              private source: Observable<T>,\n              private yieldIndex: boolean,\n              private thisArg?: any) {\n  }\n\n  call(observer: Subscriber<T>, source: any): any {\n    return source.subscribe(new FindValueSubscriber(observer, this.predicate, this.source, this.yieldIndex, this.thisArg));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class FindValueSubscriber<T> extends Subscriber<T> {\n  private index: number = 0;\n\n  constructor(destination: Subscriber<T>,\n              private predicate: (value: T, index: number, source: Observable<T>) => boolean,\n              private source: Observable<T>,\n              private yieldIndex: boolean,\n              private thisArg?: any) {\n    super(destination);\n  }\n\n  private notifyComplete(value: any): void {\n    const destination = this.destination;\n\n    destination.next(value);\n    destination.complete();\n  }\n\n  protected _next(value: T): void {\n    const { predicate, thisArg } = this;\n    const index = this.index++;\n    try {\n      const result = predicate.call(thisArg || this, value, index, this.source);\n      if (result) {\n        this.notifyComplete(this.yieldIndex ? index : value);\n      }\n    } catch (err) {\n      this.destination.error(err);\n    }\n  }\n\n  protected _complete(): void {\n    this.notifyComplete(this.yieldIndex ? -1 : undefined);\n  }\n}\n","/**\n * An error thrown when an Observable or a sequence was queried but has no\n * elements.\n *\n * @see {@link first}\n * @see {@link last}\n * @see {@link single}\n *\n * @class EmptyError\n */\nexport class EmptyError extends Error {\n  constructor() {\n    const err: any = super('no elements in sequence');\n    (<any> this).name = err.name = 'EmptyError';\n    (<any> this).stack = err.stack;\n    (<any> this).message = err.message;\n  }\n}\n","import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { EmptyError } from '../util/EmptyError';\nimport { OperatorFunction, MonoTypeOperatorFunction } from '../interfaces';\n/* tslint:disable:max-line-length */\nexport function first<T, S extends T>(predicate: (value: T, index: number, source: Observable<T>) => value is S): OperatorFunction<T, S>;\nexport function first<T, S extends T, R>(predicate: (value: T | S, index: number, source: Observable<T>) => value is S,\n                                         resultSelector: (value: S, index: number) => R, defaultValue?: R): OperatorFunction<T, R>;\nexport function first<T, S extends T>(predicate: (value: T, index: number, source: Observable<T>) => value is S,\n                                      resultSelector: void,\n                                      defaultValue?: S): OperatorFunction<T, S>;\nexport function first<T>(predicate?: (value: T, index: number, source: Observable<T>) => boolean): MonoTypeOperatorFunction<T>;\nexport function first<T, R>(predicate: (value: T, index: number, source: Observable<T>) => boolean,\n                            resultSelector?: (value: T, index: number) => R,\n                            defaultValue?: R): OperatorFunction<T, R>;\nexport function first<T>(predicate: (value: T, index: number, source: Observable<T>) => boolean,\n                         resultSelector: void,\n                         defaultValue?: T): MonoTypeOperatorFunction<T>;\n\n/**\n * Emits only the first value (or the first value that meets some condition)\n * emitted by the source Observable.\n *\n * <span class=\"informal\">Emits only the first value. Or emits only the first\n * value that passes some test.</span>\n *\n * <img src=\"./img/first.png\" width=\"100%\">\n *\n * If called with no arguments, `first` emits the first value of the source\n * Observable, then completes. If called with a `predicate` function, `first`\n * emits the first value of the source that matches the specified condition. It\n * may also take a `resultSelector` function to produce the output value from\n * the input value, and a `defaultValue` to emit in case the source completes\n * before it is able to emit a valid value. Throws an error if `defaultValue`\n * was not provided and a matching element is not found.\n *\n * @example <caption>Emit only the first click that happens on the DOM</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.first();\n * result.subscribe(x => console.log(x));\n *\n * @example <caption>Emits the first click that happens on a DIV</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.first(ev => ev.target.tagName === 'DIV');\n * result.subscribe(x => console.log(x));\n *\n * @see {@link filter}\n * @see {@link find}\n * @see {@link take}\n *\n * @throws {EmptyError} Delivers an EmptyError to the Observer's `error`\n * callback if the Observable completes before any `next` notification was sent.\n *\n * @param {function(value: T, index: number, source: Observable<T>): boolean} [predicate]\n * An optional function called with each item to test for condition matching.\n * @param {function(value: T, index: number): R} [resultSelector] A function to\n * produce the value on the output Observable based on the values\n * and the indices of the source Observable. The arguments passed to this\n * function are:\n * - `value`: the value that was emitted on the source.\n * - `index`: the \"index\" of the value from the source.\n * @param {R} [defaultValue] The default value emitted in case no valid value\n * was found on the source.\n * @return {Observable<T|R>} An Observable of the first item that matches the\n * condition.\n * @method first\n * @owner Observable\n */\nexport function first<T, R>(predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n                            resultSelector?: ((value: T, index: number) => R) | void,\n                            defaultValue?: R): OperatorFunction<T, T | R> {\n  return (source: Observable<T>) => source.lift(new FirstOperator(predicate, resultSelector, defaultValue, source));\n}\n\nclass FirstOperator<T, R> implements Operator<T, R> {\n  constructor(private predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n              private resultSelector?: ((value: T, index: number) => R) | void,\n              private defaultValue?: any,\n              private source?: Observable<T>) {\n  }\n\n  call(observer: Subscriber<R>, source: any): any {\n    return source.subscribe(new FirstSubscriber(observer, this.predicate, this.resultSelector, this.defaultValue, this.source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass FirstSubscriber<T, R> extends Subscriber<T> {\n  private index: number = 0;\n  private hasCompleted: boolean = false;\n  private _emitted: boolean = false;\n\n  constructor(destination: Subscriber<R>,\n              private predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n              private resultSelector?: ((value: T, index: number) => R) | void,\n              private defaultValue?: any,\n              private source?: Observable<T>) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    const index = this.index++;\n    if (this.predicate) {\n      this._tryPredicate(value, index);\n    } else {\n      this._emit(value, index);\n    }\n  }\n\n  private _tryPredicate(value: T, index: number) {\n    let result: any;\n    try {\n      result = this.predicate(value, index, this.source);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    if (result) {\n      this._emit(value, index);\n    }\n  }\n\n  private _emit(value: any, index: number) {\n    if (this.resultSelector) {\n      this._tryResultSelector(value, index);\n      return;\n    }\n    this._emitFinal(value);\n  }\n\n  private _tryResultSelector(value: T, index: number) {\n    let result: any;\n    try {\n      result = (<any>this).resultSelector(value, index);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this._emitFinal(result);\n  }\n\n  private _emitFinal(value: any) {\n    const destination = this.destination;\n    if (!this._emitted) {\n      this._emitted = true;\n      destination.next(value);\n      destination.complete();\n      this.hasCompleted = true;\n    }\n  }\n\n  protected _complete(): void {\n    const destination = this.destination;\n    if (!this.hasCompleted && typeof this.defaultValue !== 'undefined') {\n      destination.next(this.defaultValue);\n      destination.complete();\n    } else if (!this.hasCompleted) {\n      destination.error(new EmptyError);\n    }\n  }\n}\n","export class MapPolyfill {\n  public size = 0;\n  private _values: any[] = [];\n  private _keys: any[] = [];\n\n  get(key: any) {\n    const i = this._keys.indexOf(key);\n    return i === -1 ? undefined : this._values[i];\n  }\n\n  set(key: any, value: any) {\n    const i = this._keys.indexOf(key);\n    if (i === -1) {\n      this._keys.push(key);\n      this._values.push(value);\n      this.size++;\n    } else {\n      this._values[i] = value;\n    }\n    return this;\n  }\n\n  delete(key: any): boolean {\n    const i = this._keys.indexOf(key);\n    if (i === -1) { return false; }\n    this._values.splice(i, 1);\n    this._keys.splice(i, 1);\n    this.size--;\n    return true;\n  }\n\n  clear(): void {\n    this._keys.length = 0;\n    this._values.length = 0;\n    this.size = 0;\n  }\n\n  forEach(cb: Function, thisArg: any): void {\n    for (let i = 0; i < this.size; i++) {\n      cb.call(thisArg, this._values[i], this._keys[i]);\n    }\n  }\n}","import { root } from './root';\nimport { MapPolyfill } from './MapPolyfill';\n\nexport const Map = root.Map || (() => MapPolyfill)();","export class FastMap {\n  private values: Object = {};\n\n  delete(key: string): boolean {\n    this.values[key] = null;\n    return true;\n  }\n\n  set(key: string, value: any): FastMap {\n    this.values[key] = value;\n    return this;\n  }\n\n  get(key: string): any {\n    return this.values[key];\n  }\n\n  forEach(cb: (value: any, key: any) => void, thisArg?: any): void {\n    const values = this.values;\n    for (let key in values) {\n      if (values.hasOwnProperty(key) && values[key] !== null) {\n        cb.call(thisArg, values[key], key);\n      }\n    }\n  }\n\n  clear(): void {\n    this.values = {};\n  }\n}","import { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subject } from '../Subject';\nimport { Map } from '../util/Map';\nimport { FastMap } from '../util/FastMap';\nimport { OperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function groupBy<T, K>(keySelector: (value: T) => K): OperatorFunction<T, GroupedObservable<K, T>>;\nexport function groupBy<T, K>(keySelector: (value: T) => K, elementSelector: void, durationSelector: (grouped: GroupedObservable<K, T>) => Observable<any>): OperatorFunction<T, GroupedObservable<K, T>>;\nexport function groupBy<T, K, R>(keySelector: (value: T) => K, elementSelector?: (value: T) => R, durationSelector?: (grouped: GroupedObservable<K, R>) => Observable<any>): OperatorFunction<T, GroupedObservable<K, R>>;\nexport function groupBy<T, K, R>(keySelector: (value: T) => K, elementSelector?: (value: T) => R, durationSelector?: (grouped: GroupedObservable<K, R>) => Observable<any>, subjectSelector?: () => Subject<R>): OperatorFunction<T, GroupedObservable<K, R>>;\n/* tslint:enable:max-line-length */\n\n/**\n * Groups the items emitted by an Observable according to a specified criterion,\n * and emits these grouped items as `GroupedObservables`, one\n * {@link GroupedObservable} per group.\n *\n * <img src=\"./img/groupBy.png\" width=\"100%\">\n *\n * @example <caption>Group objects by id and return as array</caption>\n * Observable.of<Obj>({id: 1, name: 'aze1'},\n *                    {id: 2, name: 'sf2'},\n *                    {id: 2, name: 'dg2'},\n *                    {id: 1, name: 'erg1'},\n *                    {id: 1, name: 'df1'},\n *                    {id: 2, name: 'sfqfb2'},\n *                    {id: 3, name: 'qfs3'},\n *                    {id: 2, name: 'qsgqsfg2'}\n *     )\n *     .groupBy(p => p.id)\n *     .flatMap( (group$) => group$.reduce((acc, cur) => [...acc, cur], []))\n *     .subscribe(p => console.log(p));\n *\n * // displays:\n * // [ { id: 1, name: 'aze1' },\n * //   { id: 1, name: 'erg1' },\n * //   { id: 1, name: 'df1' } ]\n * //\n * // [ { id: 2, name: 'sf2' },\n * //   { id: 2, name: 'dg2' },\n * //   { id: 2, name: 'sfqfb2' },\n * //   { id: 2, name: 'qsgqsfg2' } ]\n * //\n * // [ { id: 3, name: 'qfs3' } ]\n *\n * @example <caption>Pivot data on the id field</caption>\n * Observable.of<Obj>({id: 1, name: 'aze1'},\n *                    {id: 2, name: 'sf2'},\n *                    {id: 2, name: 'dg2'},\n *                    {id: 1, name: 'erg1'},\n *                    {id: 1, name: 'df1'},\n *                    {id: 2, name: 'sfqfb2'},\n *                    {id: 3, name: 'qfs1'},\n *                    {id: 2, name: 'qsgqsfg2'}\n *                   )\n *     .groupBy(p => p.id, p => p.name)\n *     .flatMap( (group$) => group$.reduce((acc, cur) => [...acc, cur], [\"\" + group$.key]))\n *     .map(arr => ({'id': parseInt(arr[0]), 'values': arr.slice(1)}))\n *     .subscribe(p => console.log(p));\n *\n * // displays:\n * // { id: 1, values: [ 'aze1', 'erg1', 'df1' ] }\n * // { id: 2, values: [ 'sf2', 'dg2', 'sfqfb2', 'qsgqsfg2' ] }\n * // { id: 3, values: [ 'qfs1' ] }\n *\n * @param {function(value: T): K} keySelector A function that extracts the key\n * for each item.\n * @param {function(value: T): R} [elementSelector] A function that extracts the\n * return element for each item.\n * @param {function(grouped: GroupedObservable<K,R>): Observable<any>} [durationSelector]\n * A function that returns an Observable to determine how long each group should\n * exist.\n * @return {Observable<GroupedObservable<K,R>>} An Observable that emits\n * GroupedObservables, each of which corresponds to a unique key value and each\n * of which emits those items from the source Observable that share that key\n * value.\n * @method groupBy\n * @owner Observable\n */\nexport function groupBy<T, K, R>(keySelector: (value: T) => K,\n                                 elementSelector?: ((value: T) => R) | void,\n                                 durationSelector?: (grouped: GroupedObservable<K, R>) => Observable<any>,\n                                 subjectSelector?: () => Subject<R>): OperatorFunction<T, GroupedObservable<K, R>> {\n  return (source: Observable<T>) =>\n    source.lift(new GroupByOperator(keySelector, elementSelector, durationSelector, subjectSelector));\n}\n\nexport interface RefCountSubscription {\n  count: number;\n  unsubscribe: () => void;\n  closed: boolean;\n  attemptedToUnsubscribe: boolean;\n}\n\nclass GroupByOperator<T, K, R> implements Operator<T, GroupedObservable<K, R>> {\n  constructor(private keySelector: (value: T) => K,\n              private elementSelector?: ((value: T) => R) | void,\n              private durationSelector?: (grouped: GroupedObservable<K, R>) => Observable<any>,\n              private subjectSelector?: () => Subject<R>) {\n  }\n\n  call(subscriber: Subscriber<GroupedObservable<K, R>>, source: any): any {\n    return source.subscribe(new GroupBySubscriber(\n      subscriber, this.keySelector, this.elementSelector, this.durationSelector, this.subjectSelector\n    ));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass GroupBySubscriber<T, K, R> extends Subscriber<T> implements RefCountSubscription {\n  private groups: Map<K, Subject<T|R>> = null;\n  public attemptedToUnsubscribe: boolean = false;\n  public count: number = 0;\n\n  constructor(destination: Subscriber<GroupedObservable<K, R>>,\n              private keySelector: (value: T) => K,\n              private elementSelector?: ((value: T) => R) | void,\n              private durationSelector?: (grouped: GroupedObservable<K, R>) => Observable<any>,\n              private subjectSelector?: () => Subject<R>) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    let key: K;\n    try {\n      key = this.keySelector(value);\n    } catch (err) {\n      this.error(err);\n      return;\n    }\n\n    this._group(value, key);\n  }\n\n  private _group(value: T, key: K) {\n    let groups = this.groups;\n\n    if (!groups) {\n      groups = this.groups = typeof key === 'string' ? new FastMap() : new Map();\n    }\n\n    let group = groups.get(key);\n\n    let element: R;\n    if (this.elementSelector) {\n      try {\n        element = this.elementSelector(value);\n      } catch (err) {\n        this.error(err);\n      }\n    } else {\n      element = <any>value;\n    }\n\n    if (!group) {\n      group = this.subjectSelector ? this.subjectSelector() : new Subject<R>();\n      groups.set(key, group);\n      const groupedObservable = new GroupedObservable(key, group, this);\n      this.destination.next(groupedObservable);\n      if (this.durationSelector) {\n        let duration: any;\n        try {\n          duration = this.durationSelector(new GroupedObservable<K, R>(key, <Subject<R>>group));\n        } catch (err) {\n          this.error(err);\n          return;\n        }\n        this.add(duration.subscribe(new GroupDurationSubscriber(key, group, this)));\n      }\n    }\n\n    if (!group.closed) {\n      group.next(element);\n    }\n  }\n\n  protected _error(err: any): void {\n    const groups = this.groups;\n    if (groups) {\n      groups.forEach((group, key) => {\n        group.error(err);\n      });\n\n      groups.clear();\n    }\n    this.destination.error(err);\n  }\n\n  protected _complete(): void {\n    const groups = this.groups;\n    if (groups) {\n      groups.forEach((group, key) => {\n        group.complete();\n      });\n\n      groups.clear();\n    }\n    this.destination.complete();\n  }\n\n  removeGroup(key: K): void {\n    this.groups.delete(key);\n  }\n\n  unsubscribe() {\n    if (!this.closed) {\n      this.attemptedToUnsubscribe = true;\n      if (this.count === 0) {\n        super.unsubscribe();\n      }\n    }\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass GroupDurationSubscriber<K, T> extends Subscriber<T> {\n  constructor(private key: K,\n              private group: Subject<T>,\n              private parent: GroupBySubscriber<any, K, T>) {\n    super(group);\n  }\n\n  protected _next(value: T): void {\n    this.complete();\n  }\n\n  protected _unsubscribe() {\n    const { parent, key } = this;\n    this.key = this.parent = null;\n    if (parent) {\n      parent.removeGroup(key);\n    }\n  }\n}\n\n/**\n * An Observable representing values belonging to the same group represented by\n * a common key. The values emitted by a GroupedObservable come from the source\n * Observable. The common key is available as the field `key` on a\n * GroupedObservable instance.\n *\n * @class GroupedObservable<K, T>\n */\nexport class GroupedObservable<K, T> extends Observable<T> {\n  constructor(public key: K,\n              private groupSubject: Subject<T>,\n              private refCountSubscription?: RefCountSubscription) {\n    super();\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>) {\n    const subscription = new Subscription();\n    const {refCountSubscription, groupSubject} = this;\n    if (refCountSubscription && !refCountSubscription.closed) {\n      subscription.add(new InnerRefCountSubscription(refCountSubscription));\n    }\n    subscription.add(groupSubject.subscribe(subscriber));\n    return subscription;\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass InnerRefCountSubscription extends Subscription {\n  constructor(private parent: RefCountSubscription) {\n    super();\n    parent.count++;\n  }\n\n  unsubscribe() {\n    const parent = this.parent;\n    if (!parent.closed && !this.closed) {\n      super.unsubscribe();\n      parent.count -= 1;\n      if (parent.count === 0 && parent.attemptedToUnsubscribe) {\n        parent.unsubscribe();\n      }\n    }\n  }\n}\n","import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { noop } from '../util/noop';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Ignores all items emitted by the source Observable and only passes calls of `complete` or `error`.\n *\n * <img src=\"./img/ignoreElements.png\" width=\"100%\">\n *\n * @return {Observable} An empty Observable that only calls `complete`\n * or `error`, based on which one is called by the source Observable.\n * @method ignoreElements\n * @owner Observable\n */\nexport function ignoreElements<T>(): MonoTypeOperatorFunction<T> {\n  return function ignoreElementsOperatorFunction(source: Observable<T>) {\n    return source.lift(new IgnoreElementsOperator());\n  };\n}\n\nclass IgnoreElementsOperator<T, R> implements Operator<T, R> {\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new IgnoreElementsSubscriber(subscriber));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass IgnoreElementsSubscriber<T> extends Subscriber<T> {\n  protected _next(unused: T): void {\n    noop();\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { OperatorFunction } from '../interfaces';\n\nexport function isEmpty<T>(): OperatorFunction<T, boolean> {\n  return (source: Observable<T>) => source.lift(new IsEmptyOperator());\n}\n\nclass IsEmptyOperator implements Operator<any, boolean> {\n  call (observer: Subscriber<boolean>, source: any): any {\n    return source.subscribe(new IsEmptySubscriber(observer));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass IsEmptySubscriber extends Subscriber<any> {\n  constructor(destination: Subscriber<boolean>) {\n    super(destination);\n  }\n\n  private notifyComplete(isEmpty: boolean): void {\n    const destination = this.destination;\n\n    destination.next(isEmpty);\n    destination.complete();\n  }\n\n  protected _next(value: boolean) {\n    this.notifyComplete(false);\n  }\n\n  protected _complete() {\n    this.notifyComplete(true);\n  }\n}\n","import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { EmptyError } from '../util/EmptyError';\nimport { OperatorFunction, MonoTypeOperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function last<T, S extends T>(predicate: (value: T, index: number, source: Observable<T>) => value is S): OperatorFunction<T, S>;\nexport function last<T, S extends T, R>(predicate: (value: T | S, index: number, source: Observable<T>) => value is S,\n                                        resultSelector: (value: S, index: number) => R, defaultValue?: R): OperatorFunction<T, R>;\nexport function last<T, S extends T>(predicate: (value: T, index: number, source: Observable<T>) => value is S,\n                                     resultSelector: void,\n                                     defaultValue?: S): OperatorFunction<T, S>;\nexport function last<T>(predicate?: (value: T, index: number, source: Observable<T>) => boolean): MonoTypeOperatorFunction<T>;\nexport function last<T, R>(predicate: (value: T, index: number, source: Observable<T>) => boolean,\n                           resultSelector?: (value: T, index: number) => R,\n                           defaultValue?: R): OperatorFunction<T, R>;\nexport function last<T>(predicate: (value: T, index: number, source: Observable<T>) => boolean,\n                        resultSelector: void,\n                        defaultValue?: T): MonoTypeOperatorFunction<T>;\n/* tslint:enable:max-line-length */\n\n/**\n * Returns an Observable that emits only the last item emitted by the source Observable.\n * It optionally takes a predicate function as a parameter, in which case, rather than emitting\n * the last item from the source Observable, the resulting Observable will emit the last item\n * from the source Observable that satisfies the predicate.\n *\n * <img src=\"./img/last.png\" width=\"100%\">\n *\n * @throws {EmptyError} Delivers an EmptyError to the Observer's `error`\n * callback if the Observable completes before any `next` notification was sent.\n * @param {function} predicate - The condition any source emitted item has to satisfy.\n * @return {Observable} An Observable that emits only the last item satisfying the given condition\n * from the source, or an NoSuchElementException if no such items are emitted.\n * @throws - Throws if no items that match the predicate are emitted by the source Observable.\n * @method last\n * @owner Observable\n */\nexport function last<T, R>(predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n                           resultSelector?: ((value: T, index: number) => R) | void,\n                           defaultValue?: R): OperatorFunction<T, T | R> {\n  return (source: Observable<T>) => source.lift(new LastOperator(predicate, resultSelector, defaultValue, source));\n}\n\nclass LastOperator<T, R> implements Operator<T, R> {\n  constructor(private predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n              private resultSelector?: ((value: T, index: number) => R) | void,\n              private defaultValue?: any,\n              private source?: Observable<T>) {\n  }\n\n  call(observer: Subscriber<R>, source: any): any {\n    return source.subscribe(new LastSubscriber(observer, this.predicate, this.resultSelector, this.defaultValue, this.source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass LastSubscriber<T, R> extends Subscriber<T> {\n  private lastValue: T | R;\n  private hasValue: boolean = false;\n  private index: number = 0;\n\n  constructor(destination: Subscriber<R>,\n              private predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n              private resultSelector?: ((value: T, index: number) => R) | void,\n              private defaultValue?: any,\n              private source?: Observable<T>) {\n    super(destination);\n    if (typeof defaultValue !== 'undefined') {\n      this.lastValue = defaultValue;\n      this.hasValue = true;\n    }\n  }\n\n  protected _next(value: T): void {\n    const index = this.index++;\n    if (this.predicate) {\n      this._tryPredicate(value, index);\n    } else {\n      if (this.resultSelector) {\n        this._tryResultSelector(value, index);\n        return;\n      }\n      this.lastValue = value;\n      this.hasValue = true;\n    }\n  }\n\n  private _tryPredicate(value: T, index: number) {\n    let result: any;\n    try {\n      result = this.predicate(value, index, this.source);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    if (result) {\n      if (this.resultSelector) {\n        this._tryResultSelector(value, index);\n        return;\n      }\n      this.lastValue = value;\n      this.hasValue = true;\n    }\n  }\n\n  private _tryResultSelector(value: T, index: number) {\n    let result: any;\n    try {\n      result = (<any>this).resultSelector(value, index);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.lastValue = result;\n    this.hasValue = true;\n  }\n\n  protected _complete(): void {\n    const destination = this.destination;\n    if (this.hasValue) {\n      destination.next(this.lastValue);\n      destination.complete();\n    } else {\n      destination.error(new EmptyError);\n    }\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Emits the given constant value on the output Observable every time the source\n * Observable emits a value.\n *\n * <span class=\"informal\">Like {@link map}, but it maps every source value to\n * the same output value every time.</span>\n *\n * <img src=\"./img/mapTo.png\" width=\"100%\">\n *\n * Takes a constant `value` as argument, and emits that whenever the source\n * Observable emits a value. In other words, ignores the actual source value,\n * and simply uses the emission moment to know when to emit the given `value`.\n *\n * @example <caption>Map every click to the string 'Hi'</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var greetings = clicks.mapTo('Hi');\n * greetings.subscribe(x => console.log(x));\n *\n * @see {@link map}\n *\n * @param {any} value The value to map each source value to.\n * @return {Observable} An Observable that emits the given `value` every time\n * the source Observable emits something.\n * @method mapTo\n * @owner Observable\n */\nexport function mapTo<T, R>(value: R): OperatorFunction<T, R> {\n  return (source: Observable<T>) => source.lift(new MapToOperator(value));\n}\n\nclass MapToOperator<T, R> implements Operator<T, R> {\n\n  value: R;\n\n  constructor(value: R) {\n    this.value = value;\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new MapToSubscriber(subscriber, this.value));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass MapToSubscriber<T, R> extends Subscriber<T> {\n\n  value: R;\n\n  constructor(destination: Subscriber<R>, value: R) {\n    super(destination);\n    this.value = value;\n  }\n\n  protected _next(x: T) {\n    this.destination.next(this.value);\n  }\n}","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Notification } from '../Notification';\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Represents all of the notifications from the source Observable as `next`\n * emissions marked with their original types within {@link Notification}\n * objects.\n *\n * <span class=\"informal\">Wraps `next`, `error` and `complete` emissions in\n * {@link Notification} objects, emitted as `next` on the output Observable.\n * </span>\n *\n * <img src=\"./img/materialize.png\" width=\"100%\">\n *\n * `materialize` returns an Observable that emits a `next` notification for each\n * `next`, `error`, or `complete` emission of the source Observable. When the\n * source Observable emits `complete`, the output Observable will emit `next` as\n * a Notification of type \"complete\", and then it will emit `complete` as well.\n * When the source Observable emits `error`, the output will emit `next` as a\n * Notification of type \"error\", and then `complete`.\n *\n * This operator is useful for producing metadata of the source Observable, to\n * be consumed as `next` emissions. Use it in conjunction with\n * {@link dematerialize}.\n *\n * @example <caption>Convert a faulty Observable to an Observable of Notifications</caption>\n * var letters = Rx.Observable.of('a', 'b', 13, 'd');\n * var upperCase = letters.map(x => x.toUpperCase());\n * var materialized = upperCase.materialize();\n * materialized.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // - Notification {kind: \"N\", value: \"A\", error: undefined, hasValue: true}\n * // - Notification {kind: \"N\", value: \"B\", error: undefined, hasValue: true}\n * // - Notification {kind: \"E\", value: undefined, error: TypeError:\n * //   x.toUpperCase is not a function at MapSubscriber.letters.map.x\n * //   [as project] (http://1…, hasValue: false}\n *\n * @see {@link Notification}\n * @see {@link dematerialize}\n *\n * @return {Observable<Notification<T>>} An Observable that emits\n * {@link Notification} objects that wrap the original emissions from the source\n * Observable with metadata.\n * @method materialize\n * @owner Observable\n */\nexport function materialize<T>(): OperatorFunction<T, Notification<T>> {\n  return function materializeOperatorFunction(source: Observable<T>) {\n    return source.lift(new MaterializeOperator());\n  };\n}\n\nclass MaterializeOperator<T> implements Operator<T, Notification<T>> {\n  call(subscriber: Subscriber<Notification<T>>, source: any): any {\n    return source.subscribe(new MaterializeSubscriber(subscriber));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass MaterializeSubscriber<T> extends Subscriber<T> {\n  constructor(destination: Subscriber<Notification<T>>) {\n    super(destination);\n  }\n\n  protected _next(value: T) {\n    this.destination.next(Notification.createNext(value));\n  }\n\n  protected _error(err: any) {\n    const destination = this.destination;\n    destination.next(Notification.createError(err));\n    destination.complete();\n  }\n\n  protected _complete() {\n    const destination = this.destination;\n    destination.next(Notification.createComplete());\n    destination.complete();\n  }\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {FormErrorExamples as Examples} from './error_examples';\nexport class TemplateDrivenErrors {\n/**\n * @return {?}\n */\nstatic modelParentException(): void {\n    throw new Error(`\n      ngModel cannot be used to register form controls with a parent formGroup directive.  Try using\n      formGroup's partner directive \"formControlName\" instead.  Example:\n\n      ${Examples.formControlName}\n\n      Or, if you'd like to avoid registering this form control, indicate that it's standalone in ngModelOptions:\n\n      Example:\n\n      ${Examples.ngModelWithFormGroup}`);\n  }\n/**\n * @return {?}\n */\nstatic formGroupNameException(): void {\n    throw new Error(`\n      ngModel cannot be used to register form controls with a parent formGroupName or formArrayName directive.\n\n      Option 1: Use formControlName instead of ngModel (reactive strategy):\n\n      ${Examples.formGroupName}\n\n      Option 2:  Update ngModel's parent be ngModelGroup (template-driven strategy):\n\n      ${Examples.ngModelGroup}`);\n  }\n/**\n * @return {?}\n */\nstatic missingNameException() {\n    throw new Error(\n        `If ngModel is used within a form tag, either the name attribute must be set or the form\n      control must be defined as 'standalone' in ngModelOptions.\n\n      Example 1: <input [(ngModel)]=\"person.firstName\" name=\"first\">\n      Example 2: <input [(ngModel)]=\"person.firstName\" [ngModelOptions]=\"{standalone: true}\">`);\n  }\n/**\n * @return {?}\n */\nstatic modelGroupParentException() {\n    throw new Error(`\n      ngModelGroup cannot be used with a parent formGroup directive.\n\n      Option 1: Use formGroupName instead of ngModelGroup (reactive strategy):\n\n      ${Examples.formGroupName}\n\n      Option 2:  Use a regular form tag instead of the formGroup directive (template-driven strategy):\n\n      ${Examples.ngModelGroup}`);\n  }\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Directive, Host, Inject, Input, OnDestroy, OnInit, Optional, Self, SkipSelf, forwardRef} from '@angular/core';\n\nimport {NG_ASYNC_VALIDATORS, NG_VALIDATORS} from '../validators';\n\nimport {AbstractFormGroupDirective} from './abstract_form_group_directive';\nimport {ControlContainer} from './control_container';\nimport {NgForm} from './ng_form';\nimport {TemplateDrivenErrors} from './template_driven_errors';\n\nexport const /** @type {?} */ modelGroupProvider: any = {\n  provide: ControlContainer,\n  useExisting: forwardRef(() => NgModelGroup)\n};\n/**\n * \\@whatItDoes Creates and binds a {\\@link FormGroup} instance to a DOM element.\n * \n * \\@howToUse \n * \n * This directive can only be used as a child of {\\@link NgForm} (or in other words,\n * within `<form>` tags).\n * \n * Use this directive if you'd like to create a sub-group within a form. This can\n * come in handy if you want to validate a sub-group of your form separately from\n * the rest of your form, or if some values in your domain model make more sense to\n * consume together in a nested object.\n * \n * Pass in the name you'd like this sub-group to have and it will become the key\n * for the sub-group in the form's full value. You can also export the directive into\n * a local template variable using `ngModelGroup` (ex: `#myGroup=\"ngModelGroup\"`).\n * \n * {\\@example forms/ts/ngModelGroup/ng_model_group_example.ts region='Component'}\n * \n * * **npm package**: `\\@angular/forms`\n * \n * * **NgModule**: `FormsModule`\n * \n * \\@stable\n */\nexport class NgModelGroup extends AbstractFormGroupDirective implements OnInit, OnDestroy {\n   name: string;\n/**\n * @param {?} parent\n * @param {?} validators\n * @param {?} asyncValidators\n */\nconstructor(\n        parent: ControlContainer,\n         validators: any[],\n         asyncValidators: any[]) {\n    super();\n    this._parent = parent;\n    this._validators = validators;\n    this._asyncValidators = asyncValidators;\n  }\n/**\n * \\@internal\n * @return {?}\n */\n_checkParentType(): void {\n    if (!(this._parent instanceof NgModelGroup) && !(this._parent instanceof NgForm)) {\n      TemplateDrivenErrors.modelGroupParentException();\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{selector: '[ngModelGroup]', providers: [modelGroupProvider], exportAs: 'ngModelGroup'}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ControlContainer, decorators: [{ type: Host }, { type: SkipSelf }, ]},\n{type: Array, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [NG_VALIDATORS, ] }, ]},\n{type: Array, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [NG_ASYNC_VALIDATORS, ] }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'name': [{ type: Input, args: ['ngModelGroup', ] },],\n};\n}\n\nfunction NgModelGroup_tsickle_Closure_declarations() {\n/** @type {?} */\nNgModelGroup.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nNgModelGroup.ctorParameters;\n/** @type {?} */\nNgModelGroup.propDecorators;\n/** @type {?} */\nNgModelGroup.prototype.name;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Directive, EventEmitter, Host, Inject, Input, OnChanges, OnDestroy, Optional, Output, Self, SimpleChanges, forwardRef} from '@angular/core';\n\nimport {FormControl} from '../model';\nimport {NG_ASYNC_VALIDATORS, NG_VALIDATORS} from '../validators';\n\nimport {AbstractFormGroupDirective} from './abstract_form_group_directive';\nimport {ControlContainer} from './control_container';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from './control_value_accessor';\nimport {NgControl} from './ng_control';\nimport {NgForm} from './ng_form';\nimport {NgModelGroup} from './ng_model_group';\nimport {composeAsyncValidators, composeValidators, controlPath, isPropertyUpdated, selectValueAccessor, setUpControl} from './shared';\nimport {TemplateDrivenErrors} from './template_driven_errors';\nimport {AsyncValidator, AsyncValidatorFn, Validator, ValidatorFn} from './validators';\n\nexport const /** @type {?} */ formControlBinding: any = {\n  provide: NgControl,\n  useExisting: forwardRef(() => NgModel)\n};\n/**\n * `ngModel` forces an additional change detection run when its inputs change:\n * E.g.:\n * ```\n * <div>{{myModel.valid}}</div>\n * <input [(ngModel)]=\"myValue\" #myModel=\"ngModel\">\n * ```\n * I.e. `ngModel` can export itself on the element and then be used in the template.\n * Normally, this would result in expressions before the `input` that use the exported directive\n * to have and old value as they have been\n * dirty checked before. As this is a very common case for `ngModel`, we added this second change\n * detection run.\n * \n * Notes:\n * - this is just one extra run no matter how many `ngModel` have been changed.\n * - this is a general problem when using `exportAs` for directives!\n */\nconst resolvedPromise = Promise.resolve(null);\n/**\n * \\@whatItDoes Creates a {\\@link FormControl} instance from a domain model and binds it\n * to a form control element.\n * \n * The {\\@link FormControl} instance will track the value, user interaction, and\n * validation status of the control and keep the view synced with the model. If used\n * within a parent form, the directive will also register itself with the form as a child\n * control.\n * \n * \\@howToUse \n * \n * This directive can be used by itself or as part of a larger form. All you need is the\n * `ngModel` selector to activate it.\n * \n * It accepts a domain model as an optional {\\@link Input}. If you have a one-way binding\n * to `ngModel` with `[]` syntax, changing the value of the domain model in the component\n * class will set the value in the view. If you have a two-way binding with `[()]` syntax\n * (also known as 'banana-box syntax'), the value in the UI will always be synced back to\n * the domain model in your class as well.\n * \n * If you wish to inspect the properties of the associated {\\@link FormControl} (like\n * validity state), you can also export the directive into a local template variable using\n * `ngModel` as the key (ex: `#myVar=\"ngModel\"`). You can then access the control using the\n * directive's `control` property, but most properties you'll need (like `valid` and `dirty`)\n * will fall through to the control anyway, so you can access them directly. You can see a\n * full list of properties directly available in {\\@link AbstractControlDirective}.\n * \n * The following is an example of a simple standalone control using `ngModel`:\n * \n * {\\@example forms/ts/simpleNgModel/simple_ng_model_example.ts region='Component'}\n * \n * When using the `ngModel` within `<form>` tags, you'll also need to supply a `name` attribute\n * so that the control can be registered with the parent form under that name.\n * \n * It's worth noting that in the context of a parent form, you often can skip one-way or\n * two-way binding because the parent form will sync the value for you. You can access\n * its properties by exporting it into a local template variable using `ngForm` (ex:\n * `#f=\"ngForm\"`). Then you can pass it where it needs to go on submit.\n * \n * If you do need to populate initial values into your form, using a one-way binding for\n * `ngModel` tends to be sufficient as long as you use the exported form's value rather\n * than the domain model's value on submit.\n * \n * Take a look at an example of using `ngModel` within a form:\n * \n * {\\@example forms/ts/simpleForm/simple_form_example.ts region='Component'}\n * \n * To see `ngModel` examples with different form control types, see:\n * \n * * Radio buttons: {\\@link RadioControlValueAccessor}\n * * Selects: {\\@link SelectControlValueAccessor}\n * \n * **npm package**: `\\@angular/forms`\n * \n * **NgModule**: `FormsModule`\n * \n *  \\@stable\n */\nexport class NgModel extends NgControl implements OnChanges,\n    OnDestroy {\n/**\n * \\@internal\n */\n_control = new FormControl();\n/**\n * \\@internal\n */\n_registered = false;\n  viewModel: any;\n\n   name: string;\n   isDisabled: boolean;\n   model: any;\n   options: {name?: string, standalone?: boolean};\n\n   update = new EventEmitter();\n/**\n * @param {?} parent\n * @param {?} validators\n * @param {?} asyncValidators\n * @param {?} valueAccessors\n */\nconstructor(  parent: ControlContainer,\n                 validators: Array<Validator|ValidatorFn>,\n                 asyncValidators: Array<AsyncValidator|AsyncValidatorFn>,\n                \n              valueAccessors: ControlValueAccessor[]) {\n                super();\n                this._parent = parent;\n                this._rawValidators = validators || [];\n                this._rawAsyncValidators = asyncValidators || [];\n                this.valueAccessor = selectValueAccessor(this, valueAccessors);\n              }\n/**\n * @param {?} changes\n * @return {?}\n */\nngOnChanges(changes: SimpleChanges) {\n                this._checkForErrors();\n                if (!this._registered) this._setUpControl();\n                if ('isDisabled' in changes) {\n                  this._updateDisabled(changes);\n                }\n\n                if (isPropertyUpdated(changes, this.viewModel)) {\n                  this._updateValue(this.model);\n                  this.viewModel = this.model;\n                }\n              }\n/**\n * @return {?}\n */\nngOnDestroy(): void { this.formDirective && this.formDirective.removeControl(this); }\n/**\n * @return {?}\n */\nget control(): FormControl { return this._control; }\n/**\n * @return {?}\n */\nget path(): string[] {\n                return this._parent ? controlPath(this.name, this._parent) : [this.name];\n              }\n/**\n * @return {?}\n */\nget formDirective(): any { return this._parent ? this._parent.formDirective : null; }\n/**\n * @return {?}\n */\nget validator(): ValidatorFn|null { return composeValidators(this._rawValidators); }\n/**\n * @return {?}\n */\nget asyncValidator(): AsyncValidatorFn|null {\n                return composeAsyncValidators(this._rawAsyncValidators);\n              }\n/**\n * @param {?} newValue\n * @return {?}\n */\nviewToModelUpdate(newValue: any): void {\n                this.viewModel = newValue;\n                this.update.emit(newValue);\n              }\n/**\n * @return {?}\n */\nprivate _setUpControl(): void {\n                this._isStandalone() ? this._setUpStandalone() :\n                                       this.formDirective.addControl(this);\n                this._registered = true;\n              }\n/**\n * @return {?}\n */\nprivate _isStandalone(): boolean {\n                return !this._parent || !!(this.options && this.options.standalone);\n              }\n/**\n * @return {?}\n */\nprivate _setUpStandalone(): void {\n                setUpControl(this._control, this);\n                this._control.updateValueAndValidity({emitEvent: false});\n              }\n/**\n * @return {?}\n */\nprivate _checkForErrors(): void {\n                if (!this._isStandalone()) {\n                  this._checkParentType();\n                }\n                this._checkName();\n              }\n/**\n * @return {?}\n */\nprivate _checkParentType(): void {\n                if (!(this._parent instanceof NgModelGroup) &&\n                    this._parent instanceof AbstractFormGroupDirective) {\n                  TemplateDrivenErrors.formGroupNameException();\n                } else if (\n                    !(this._parent instanceof NgModelGroup) && !(this._parent instanceof NgForm)) {\n                  TemplateDrivenErrors.modelParentException();\n                }\n              }\n/**\n * @return {?}\n */\nprivate _checkName(): void {\n                if (this.options && this.options.name) this.name = this.options.name;\n\n                if (!this._isStandalone() && !this.name) {\n                  TemplateDrivenErrors.missingNameException();\n                }\n              }\n/**\n * @param {?} value\n * @return {?}\n */\nprivate _updateValue(value: any): void {\n                resolvedPromise.then(\n                    () => { this.control.setValue(value, {emitViewToModelChange: false}); });\n              }\n/**\n * @param {?} changes\n * @return {?}\n */\nprivate _updateDisabled(changes: SimpleChanges) {\n                const /** @type {?} */ disabledValue = changes['isDisabled'].currentValue;\n\n                const /** @type {?} */ isDisabled =\n                    disabledValue === '' || (disabledValue && disabledValue !== 'false');\n\n                resolvedPromise.then(() => {\n                  if (isDisabled && !this.control.disabled) {\n                    this.control.disable();\n                  } else if (!isDisabled && this.control.disabled) {\n                    this.control.enable();\n                  }\n                });\n              }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[ngModel]:not([formControlName]):not([formControl])',\n  providers: [formControlBinding],\n  exportAs: 'ngModel'\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ControlContainer, decorators: [{ type: Optional }, { type: Host }, ]},\n{type: Array, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [NG_VALIDATORS, ] }, ]},\n{type: Array, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [NG_ASYNC_VALIDATORS, ] }, ]},\n{type: Array, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [NG_VALUE_ACCESSOR, ] }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'name': [{ type: Input },],\n'isDisabled': [{ type: Input, args: ['disabled', ] },],\n'model': [{ type: Input, args: ['ngModel', ] },],\n'options': [{ type: Input, args: ['ngModelOptions', ] },],\n'update': [{ type: Output, args: ['ngModelChange', ] },],\n};\n}\n\nfunction NgModel_tsickle_Closure_declarations() {\n/** @type {?} */\nNgModel.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nNgModel.ctorParameters;\n/** @type {?} */\nNgModel.propDecorators;\n/**\n * \\@internal\n * @type {?}\n */\nNgModel.prototype._control;\n/**\n * \\@internal\n * @type {?}\n */\nNgModel.prototype._registered;\n/** @type {?} */\nNgModel.prototype.viewModel;\n/** @type {?} */\nNgModel.prototype.name;\n/** @type {?} */\nNgModel.prototype.isDisabled;\n/** @type {?} */\nNgModel.prototype.model;\n/** @type {?} */\nNgModel.prototype.options;\n/** @type {?} */\nNgModel.prototype.update;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\n\nimport {FormErrorExamples as Examples} from './error_examples';\nexport class ReactiveErrors {\n/**\n * @return {?}\n */\nstatic controlParentException(): void {\n    throw new Error(\n        `formControlName must be used with a parent formGroup directive.  You'll want to add a formGroup\n       directive and pass it an existing FormGroup instance (you can create one in your class).\n\n      Example:\n\n      ${Examples.formControlName}`);\n  }\n/**\n * @return {?}\n */\nstatic ngModelGroupException(): void {\n    throw new Error(\n        `formControlName cannot be used with an ngModelGroup parent. It is only compatible with parents\n       that also have a \"form\" prefix: formGroupName, formArrayName, or formGroup.\n\n       Option 1:  Update the parent to be formGroupName (reactive form strategy)\n\n        ${Examples.formGroupName}\n\n        Option 2: Use ngModel instead of formControlName (template-driven strategy)\n\n        ${Examples.ngModelGroup}`);\n  }\n/**\n * @return {?}\n */\nstatic missingFormException(): void {\n    throw new Error(`formGroup expects a FormGroup instance. Please pass one in.\n\n       Example:\n\n       ${Examples.formControlName}`);\n  }\n/**\n * @return {?}\n */\nstatic groupParentException(): void {\n    throw new Error(\n        `formGroupName must be used with a parent formGroup directive.  You'll want to add a formGroup\n      directive and pass it an existing FormGroup instance (you can create one in your class).\n\n      Example:\n\n      ${Examples.formGroupName}`);\n  }\n/**\n * @return {?}\n */\nstatic arrayParentException(): void {\n    throw new Error(\n        `formArrayName must be used with a parent formGroup directive.  You'll want to add a formGroup\n       directive and pass it an existing FormGroup instance (you can create one in your class).\n\n        Example:\n\n        ${Examples.formArrayName}`);\n  }\n/**\n * @return {?}\n */\nstatic disabledAttrWarning(): void {\n    console.warn(`\n      It looks like you're using the disabled attribute with a reactive form directive. If you set disabled to true\n      when you set up this control in your component class, the disabled attribute will actually be set in the DOM for\n      you. We recommend using this approach to avoid 'changed after checked' errors.\n       \n      Example: \n      form = new FormGroup({\n        first: new FormControl({value: 'Nancy', disabled: true}, Validators.required),\n        last: new FormControl('Drew', Validators.required)\n      });\n    `);\n  }\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Directive, EventEmitter, Inject, Input, OnChanges, Optional, Output, Self, SimpleChanges, forwardRef} from '@angular/core';\n\nimport {FormControl} from '../../model';\nimport {NG_ASYNC_VALIDATORS, NG_VALIDATORS} from '../../validators';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '../control_value_accessor';\nimport {NgControl} from '../ng_control';\nimport {ReactiveErrors} from '../reactive_errors';\nimport {composeAsyncValidators, composeValidators, isPropertyUpdated, selectValueAccessor, setUpControl} from '../shared';\nimport {AsyncValidator, AsyncValidatorFn, Validator, ValidatorFn} from '../validators';\n\nexport const /** @type {?} */ formControlBinding: any = {\n  provide: NgControl,\n  useExisting: forwardRef(() => FormControlDirective)\n};\n/**\n * \\@whatItDoes Syncs a standalone {\\@link FormControl} instance to a form control element.\n * \n * In other words, this directive ensures that any values written to the {\\@link FormControl}\n * instance programmatically will be written to the DOM element (model -> view). Conversely,\n * any values written to the DOM element through user input will be reflected in the\n * {\\@link FormControl} instance (view -> model).\n * \n * \\@howToUse \n * \n * Use this directive if you'd like to create and manage a {\\@link FormControl} instance directly.\n * Simply create a {\\@link FormControl}, save it to your component class, and pass it into the\n * {\\@link FormControlDirective}.\n * \n * This directive is designed to be used as a standalone control.  Unlike {\\@link FormControlName},\n * it does not require that your {\\@link FormControl} instance be part of any parent\n * {\\@link FormGroup}, and it won't be registered to any {\\@link FormGroupDirective} that\n * exists above it.\n * \n * **Get the value**: the `value` property is always synced and available on the\n * {\\@link FormControl} instance. See a full list of available properties in\n * {\\@link AbstractControl}.\n * \n * **Set the value**: You can pass in an initial value when instantiating the {\\@link FormControl},\n * or you can set it programmatically later using {\\@link AbstractControl#setValue setValue} or\n * {\\@link AbstractControl#patchValue patchValue}.\n * \n * **Listen to value**: If you want to listen to changes in the value of the control, you can\n * subscribe to the {\\@link AbstractControl#valueChanges valueChanges} event.  You can also listen to\n * {\\@link AbstractControl#statusChanges statusChanges} to be notified when the validation status is\n * re-calculated.\n * \n * ### Example\n * \n * {\\@example forms/ts/simpleFormControl/simple_form_control_example.ts region='Component'}\n * \n * * **npm package**: `\\@angular/forms`\n * \n * * **NgModule**: `ReactiveFormsModule`\n * \n *  \\@stable\n */\nexport class FormControlDirective extends NgControl implements OnChanges {\n  viewModel: any;\n\n   form: FormControl;\n   model: any;\n   update = new EventEmitter();\n/**\n * @param {?} isDisabled\n * @return {?}\n */\nset isDisabled(isDisabled: boolean) { ReactiveErrors.disabledAttrWarning(); }\n/**\n * @param {?} validators\n * @param {?} asyncValidators\n * @param {?} valueAccessors\n */\nconstructor(   validators: Array<Validator|ValidatorFn>,\n                 asyncValidators: Array<AsyncValidator|AsyncValidatorFn>,\n                \n              valueAccessors: ControlValueAccessor[]) {\n                super();\n                this._rawValidators = validators || [];\n                this._rawAsyncValidators = asyncValidators || [];\n                this.valueAccessor = selectValueAccessor(this, valueAccessors);\n              }\n/**\n * @param {?} changes\n * @return {?}\n */\nngOnChanges(changes: SimpleChanges): void {\n                if (this._isControlChanged(changes)) {\n                  setUpControl(this.form, this);\n                  if (this.control.disabled && /** @type {?} */(( this.valueAccessor)).setDisabledState) { /** @type {?} */(( /** @type {?} */((\n                    this.valueAccessor)).setDisabledState))(true);\n                  }\n                  this.form.updateValueAndValidity({emitEvent: false});\n                }\n                if (isPropertyUpdated(changes, this.viewModel)) {\n                  this.form.setValue(this.model);\n                  this.viewModel = this.model;\n                }\n              }\n/**\n * @return {?}\n */\nget path(): string[] { return []; }\n/**\n * @return {?}\n */\nget validator(): ValidatorFn|null { return composeValidators(this._rawValidators); }\n/**\n * @return {?}\n */\nget asyncValidator(): AsyncValidatorFn|null {\n                return composeAsyncValidators(this._rawAsyncValidators);\n              }\n/**\n * @return {?}\n */\nget control(): FormControl { return this.form; }\n/**\n * @param {?} newValue\n * @return {?}\n */\nviewToModelUpdate(newValue: any): void {\n                this.viewModel = newValue;\n                this.update.emit(newValue);\n              }\n/**\n * @param {?} changes\n * @return {?}\n */\nprivate _isControlChanged(changes: {[key: string]: any}): boolean {\n                return changes.hasOwnProperty('form');\n              }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{selector: '[formControl]', providers: [formControlBinding], exportAs: 'ngForm'}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Array, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [NG_VALIDATORS, ] }, ]},\n{type: Array, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [NG_ASYNC_VALIDATORS, ] }, ]},\n{type: Array, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [NG_VALUE_ACCESSOR, ] }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'form': [{ type: Input, args: ['formControl', ] },],\n'model': [{ type: Input, args: ['ngModel', ] },],\n'update': [{ type: Output, args: ['ngModelChange', ] },],\n'isDisabled': [{ type: Input, args: ['disabled', ] },],\n};\n}\n\nfunction FormControlDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nFormControlDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nFormControlDirective.ctorParameters;\n/** @type {?} */\nFormControlDirective.propDecorators;\n/** @type {?} */\nFormControlDirective.prototype.viewModel;\n/** @type {?} */\nFormControlDirective.prototype.form;\n/** @type {?} */\nFormControlDirective.prototype.model;\n/** @type {?} */\nFormControlDirective.prototype.update;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Directive, EventEmitter, Inject, Input, OnChanges, Optional, Output, Self, SimpleChanges, forwardRef} from '@angular/core';\nimport {FormArray, FormControl, FormGroup} from '../../model';\nimport {NG_ASYNC_VALIDATORS, NG_VALIDATORS, Validators} from '../../validators';\nimport {ControlContainer} from '../control_container';\nimport {Form} from '../form_interface';\nimport {ReactiveErrors} from '../reactive_errors';\nimport {cleanUpControl, composeAsyncValidators, composeValidators, setUpControl, setUpFormContainer} from '../shared';\n\nimport {FormControlName} from './form_control_name';\nimport {FormArrayName, FormGroupName} from './form_group_name';\n\nexport const /** @type {?} */ formDirectiveProvider: any = {\n  provide: ControlContainer,\n  useExisting: forwardRef(() => FormGroupDirective)\n};\n/**\n * \\@whatItDoes Binds an existing {\\@link FormGroup} to a DOM element.\n * \n * \\@howToUse \n * \n * This directive accepts an existing {\\@link FormGroup} instance. It will then use this\n * {\\@link FormGroup} instance to match any child {\\@link FormControl}, {\\@link FormGroup},\n * and {\\@link FormArray} instances to child {\\@link FormControlName}, {\\@link FormGroupName},\n * and {\\@link FormArrayName} directives.\n * \n * **Set value**: You can set the form's initial value when instantiating the\n * {\\@link FormGroup}, or you can set it programmatically later using the {\\@link FormGroup}'s\n * {\\@link AbstractControl#setValue setValue} or {\\@link AbstractControl#patchValue patchValue}\n * methods.\n * \n * **Listen to value**: If you want to listen to changes in the value of the form, you can subscribe\n * to the {\\@link FormGroup}'s {\\@link AbstractControl#valueChanges valueChanges} event.  You can also\n * listen to its {\\@link AbstractControl#statusChanges statusChanges} event to be notified when the\n * validation status is re-calculated.\n * \n * Furthermore, you can listen to the directive's `ngSubmit` event to be notified when the user has\n * triggered a form submission. The `ngSubmit` event will be emitted with the original form\n * submission event.\n * \n * ### Example\n * \n * In this example, we create form controls for first name and last name.\n * \n * {\\@example forms/ts/simpleFormGroup/simple_form_group_example.ts region='Component'}\n * \n * **npm package**: `\\@angular/forms`\n * \n * **NgModule**: {\\@link ReactiveFormsModule}\n * \n *  \\@stable\n */\nexport class FormGroupDirective extends ControlContainer implements Form,\n    OnChanges {\nprivate _submitted: boolean = false;\nprivate _oldForm: FormGroup;\n  directives: FormControlName[] = [];\n\n   form: FormGroup = /** @type {?} */(( null));\n   ngSubmit = new EventEmitter();\n/**\n * @param {?} _validators\n * @param {?} _asyncValidators\n */\nconstructor(\nprivate _validators: any[],\nprivate _asyncValidators: any[]) {\n    super();\n  }\n/**\n * @param {?} changes\n * @return {?}\n */\nngOnChanges(changes: SimpleChanges): void {\n    this._checkFormPresent();\n    if (changes.hasOwnProperty('form')) {\n      this._updateValidators();\n      this._updateDomValue();\n      this._updateRegistrations();\n    }\n  }\n/**\n * @return {?}\n */\nget submitted(): boolean { return this._submitted; }\n/**\n * @return {?}\n */\nget formDirective(): Form { return this; }\n/**\n * @return {?}\n */\nget control(): FormGroup { return this.form; }\n/**\n * @return {?}\n */\nget path(): string[] { return []; }\n/**\n * @param {?} dir\n * @return {?}\n */\naddControl(dir: FormControlName): FormControl {\n    const /** @type {?} */ ctrl: any = this.form.get(dir.path);\n    setUpControl(ctrl, dir);\n    ctrl.updateValueAndValidity({emitEvent: false});\n    this.directives.push(dir);\n    return ctrl;\n  }\n/**\n * @param {?} dir\n * @return {?}\n */\ngetControl(dir: FormControlName): FormControl { return /** @type {?} */(( <FormControl>this.form.get(dir.path))); }\n/**\n * @param {?} dir\n * @return {?}\n */\nremoveControl(dir: FormControlName): void { remove(this.directives, dir); }\n/**\n * @param {?} dir\n * @return {?}\n */\naddFormGroup(dir: FormGroupName): void {\n    const /** @type {?} */ ctrl: any = this.form.get(dir.path);\n    setUpFormContainer(ctrl, dir);\n    ctrl.updateValueAndValidity({emitEvent: false});\n  }\n/**\n * @param {?} dir\n * @return {?}\n */\nremoveFormGroup(dir: FormGroupName): void {}\n/**\n * @param {?} dir\n * @return {?}\n */\ngetFormGroup(dir: FormGroupName): FormGroup { return /** @type {?} */(( <FormGroup>this.form.get(dir.path))); }\n/**\n * @param {?} dir\n * @return {?}\n */\naddFormArray(dir: FormArrayName): void {\n    const /** @type {?} */ ctrl: any = this.form.get(dir.path);\n    setUpFormContainer(ctrl, dir);\n    ctrl.updateValueAndValidity({emitEvent: false});\n  }\n/**\n * @param {?} dir\n * @return {?}\n */\nremoveFormArray(dir: FormArrayName): void {}\n/**\n * @param {?} dir\n * @return {?}\n */\ngetFormArray(dir: FormArrayName): FormArray { return /** @type {?} */(( <FormArray>this.form.get(dir.path))); }\n/**\n * @param {?} dir\n * @param {?} value\n * @return {?}\n */\nupdateModel(dir: FormControlName, value: any): void {\n    const /** @type {?} */ ctrl  = /** @type {?} */(( <FormControl>this.form.get(dir.path)));\n    ctrl.setValue(value);\n  }\n/**\n * @param {?} $event\n * @return {?}\n */\nonSubmit($event: Event): boolean {\n    this._submitted = true;\n    this.ngSubmit.emit($event);\n    return false;\n  }\n/**\n * @return {?}\n */\nonReset(): void { this.resetForm(); }\n/**\n * @param {?=} value\n * @return {?}\n */\nresetForm(value: any = undefined): void {\n    this.form.reset(value);\n    this._submitted = false;\n  }\n/**\n * \\@internal\n * @return {?}\n */\n_updateDomValue() {\n    this.directives.forEach(dir => {\n      const /** @type {?} */ newCtrl: any = this.form.get(dir.path);\n      if (dir._control !== newCtrl) {\n        cleanUpControl(dir._control, dir);\n        if (newCtrl) setUpControl(newCtrl, dir);\n        dir._control = newCtrl;\n      }\n    });\n\n    this.form._updateTreeValidity({emitEvent: false});\n  }\n/**\n * @return {?}\n */\nprivate _updateRegistrations() {\n    this.form._registerOnCollectionChange(() => this._updateDomValue());\n    if (this._oldForm) this._oldForm._registerOnCollectionChange(() => {});\n    this._oldForm = this.form;\n  }\n/**\n * @return {?}\n */\nprivate _updateValidators() {\n    const /** @type {?} */ sync = composeValidators(this._validators);\n    this.form.validator = Validators.compose([ /** @type {?} */((this.form.validator)), /** @type {?} */(( sync))]);\n\n    const /** @type {?} */ async = composeAsyncValidators(this._asyncValidators);\n    this.form.asyncValidator = Validators.composeAsync([ /** @type {?} */((this.form.asyncValidator)), /** @type {?} */(( async))]);\n  }\n/**\n * @return {?}\n */\nprivate _checkFormPresent() {\n    if (!this.form) {\n      ReactiveErrors.missingFormException();\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[formGroup]',\n  providers: [formDirectiveProvider],\n  host: {'(submit)': 'onSubmit($event)', '(reset)': 'onReset()'},\n  exportAs: 'ngForm'\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Array, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [NG_VALIDATORS, ] }, ]},\n{type: Array, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [NG_ASYNC_VALIDATORS, ] }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'form': [{ type: Input, args: ['formGroup', ] },],\n'ngSubmit': [{ type: Output },],\n};\n}\n\nfunction FormGroupDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nFormGroupDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nFormGroupDirective.ctorParameters;\n/** @type {?} */\nFormGroupDirective.propDecorators;\n/** @type {?} */\nFormGroupDirective.prototype._submitted;\n/** @type {?} */\nFormGroupDirective.prototype._oldForm;\n/** @type {?} */\nFormGroupDirective.prototype.directives;\n/** @type {?} */\nFormGroupDirective.prototype.form;\n/** @type {?} */\nFormGroupDirective.prototype.ngSubmit;\n/** @type {?} */\nFormGroupDirective.prototype._validators;\n/** @type {?} */\nFormGroupDirective.prototype._asyncValidators;\n}\n\n/**\n * @template T\n * @param {?} list\n * @param {?} el\n * @return {?}\n */\nfunction remove<T>(list: T[], el: T): void {\n  const /** @type {?} */ index = list.indexOf(el);\n  if (index > -1) {\n    list.splice(index, 1);\n  }\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Directive, Host, Inject, Input, OnDestroy, OnInit, Optional, Self, SkipSelf, forwardRef} from '@angular/core';\n\nimport {FormArray} from '../../model';\nimport {NG_ASYNC_VALIDATORS, NG_VALIDATORS} from '../../validators';\nimport {AbstractFormGroupDirective} from '../abstract_form_group_directive';\nimport {ControlContainer} from '../control_container';\nimport {ReactiveErrors} from '../reactive_errors';\nimport {composeAsyncValidators, composeValidators, controlPath} from '../shared';\nimport {AsyncValidatorFn, ValidatorFn} from '../validators';\n\nimport {FormGroupDirective} from './form_group_directive';\n\nexport const /** @type {?} */ formGroupNameProvider: any = {\n  provide: ControlContainer,\n  useExisting: forwardRef(() => FormGroupName)\n};\n/**\n * \\@whatItDoes Syncs a nested {\\@link FormGroup} to a DOM element.\n * \n * \\@howToUse \n * \n * This directive can only be used with a parent {\\@link FormGroupDirective} (selector:\n * `[formGroup]`).\n * \n * It accepts the string name of the nested {\\@link FormGroup} you want to link, and\n * will look for a {\\@link FormGroup} registered with that name in the parent\n * {\\@link FormGroup} instance you passed into {\\@link FormGroupDirective}.\n * \n * Nested form groups can come in handy when you want to validate a sub-group of a\n * form separately from the rest or when you'd like to group the values of certain\n * controls into their own nested object.\n * \n * **Access the group**: You can access the associated {\\@link FormGroup} using the\n * {\\@link AbstractControl#get} method. Ex: `this.form.get('name')`.\n * \n * You can also access individual controls within the group using dot syntax.\n * Ex: `this.form.get('name.first')`\n * \n * **Get the value**: the `value` property is always synced and available on the\n * {\\@link FormGroup}. See a full list of available properties in {\\@link AbstractControl}.\n * \n * **Set the value**: You can set an initial value for each child control when instantiating\n * the {\\@link FormGroup}, or you can set it programmatically later using\n * {\\@link AbstractControl#setValue setValue} or {\\@link AbstractControl#patchValue patchValue}.\n * \n * **Listen to value**: If you want to listen to changes in the value of the group, you can\n * subscribe to the {\\@link AbstractControl#valueChanges valueChanges} event.  You can also listen to\n * {\\@link AbstractControl#statusChanges statusChanges} to be notified when the validation status is\n * re-calculated.\n * \n * ### Example\n * \n * {\\@example forms/ts/nestedFormGroup/nested_form_group_example.ts region='Component'}\n * \n * * **npm package**: `\\@angular/forms`\n * \n * * **NgModule**: `ReactiveFormsModule`\n * \n * \\@stable\n */\nexport class FormGroupName extends AbstractFormGroupDirective implements OnInit, OnDestroy {\n   name: string;\n/**\n * @param {?} parent\n * @param {?} validators\n * @param {?} asyncValidators\n */\nconstructor(\n         parent: ControlContainer,\n         validators: any[],\n         asyncValidators: any[]) {\n    super();\n    this._parent = parent;\n    this._validators = validators;\n    this._asyncValidators = asyncValidators;\n  }\n/**\n * \\@internal\n * @return {?}\n */\n_checkParentType(): void {\n    if (_hasInvalidParent(this._parent)) {\n      ReactiveErrors.groupParentException();\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{selector: '[formGroupName]', providers: [formGroupNameProvider]}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ControlContainer, decorators: [{ type: Optional }, { type: Host }, { type: SkipSelf }, ]},\n{type: Array, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [NG_VALIDATORS, ] }, ]},\n{type: Array, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [NG_ASYNC_VALIDATORS, ] }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'name': [{ type: Input, args: ['formGroupName', ] },],\n};\n}\n\nfunction FormGroupName_tsickle_Closure_declarations() {\n/** @type {?} */\nFormGroupName.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nFormGroupName.ctorParameters;\n/** @type {?} */\nFormGroupName.propDecorators;\n/** @type {?} */\nFormGroupName.prototype.name;\n}\n\n\nexport const /** @type {?} */ formArrayNameProvider: any = {\n  provide: ControlContainer,\n  useExisting: forwardRef(() => FormArrayName)\n};\n/**\n * \\@whatItDoes Syncs a nested {\\@link FormArray} to a DOM element.\n * \n * \\@howToUse \n * \n * This directive is designed to be used with a parent {\\@link FormGroupDirective} (selector:\n * `[formGroup]`).\n * \n * It accepts the string name of the nested {\\@link FormArray} you want to link, and\n * will look for a {\\@link FormArray} registered with that name in the parent\n * {\\@link FormGroup} instance you passed into {\\@link FormGroupDirective}.\n * \n * Nested form arrays can come in handy when you have a group of form controls but\n * you're not sure how many there will be. Form arrays allow you to create new\n * form controls dynamically.\n * \n * **Access the array**: You can access the associated {\\@link FormArray} using the\n * {\\@link AbstractControl#get} method on the parent {\\@link FormGroup}.\n * Ex: `this.form.get('cities')`.\n * \n * **Get the value**: the `value` property is always synced and available on the\n * {\\@link FormArray}. See a full list of available properties in {\\@link AbstractControl}.\n * \n * **Set the value**: You can set an initial value for each child control when instantiating\n * the {\\@link FormArray}, or you can set the value programmatically later using the\n * {\\@link FormArray}'s {\\@link AbstractControl#setValue} or {\\@link AbstractControl#patchValue}\n * methods.\n * \n * **Listen to value**: If you want to listen to changes in the value of the array, you can\n * subscribe to the {\\@link FormArray}'s {\\@link AbstractControl#valueChanges} event.  You can also\n * listen to its {\\@link AbstractControl#statusChanges} event to be notified when the validation\n * status is re-calculated.\n * \n * **Add new controls**: You can add new controls to the {\\@link FormArray} dynamically by\n * calling its {\\@link FormArray#push} method.\n *  Ex: `this.form.get('cities').push(new FormControl());`\n * \n * ### Example\n * \n * {\\@example forms/ts/nestedFormArray/nested_form_array_example.ts region='Component'}\n * \n * * **npm package**: `\\@angular/forms`\n * \n * * **NgModule**: `ReactiveFormsModule`\n * \n * \\@stable\n */\nexport class FormArrayName extends ControlContainer implements OnInit, OnDestroy {\n/**\n * \\@internal\n */\n_parent: ControlContainer;\n/**\n * \\@internal\n */\n_validators: any[];\n/**\n * \\@internal\n */\n_asyncValidators: any[];\n\n   name: string;\n/**\n * @param {?} parent\n * @param {?} validators\n * @param {?} asyncValidators\n */\nconstructor(\n         parent: ControlContainer,\n         validators: any[],\n         asyncValidators: any[]) {\n    super();\n    this._parent = parent;\n    this._validators = validators;\n    this._asyncValidators = asyncValidators;\n  }\n/**\n * @return {?}\n */\nngOnInit(): void {\n    this._checkParentType(); /** @type {?} */((\n    this.formDirective)).addFormArray(this);\n  }\n/**\n * @return {?}\n */\nngOnDestroy(): void {\n    if (this.formDirective) {\n      this.formDirective.removeFormArray(this);\n    }\n  }\n/**\n * @return {?}\n */\nget control(): FormArray { return /** @type {?} */(( this.formDirective)).getFormArray(this); }\n/**\n * @return {?}\n */\nget formDirective(): FormGroupDirective|null {\n    return this._parent ? /** @type {?} */(( <FormGroupDirective>this._parent.formDirective)) : null;\n  }\n/**\n * @return {?}\n */\nget path(): string[] { return controlPath(this.name, this._parent); }\n/**\n * @return {?}\n */\nget validator(): ValidatorFn|null { return composeValidators(this._validators); }\n/**\n * @return {?}\n */\nget asyncValidator(): AsyncValidatorFn|null {\n    return composeAsyncValidators(this._asyncValidators);\n  }\n/**\n * @return {?}\n */\nprivate _checkParentType(): void {\n    if (_hasInvalidParent(this._parent)) {\n      ReactiveErrors.arrayParentException();\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{selector: '[formArrayName]', providers: [formArrayNameProvider]}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ControlContainer, decorators: [{ type: Optional }, { type: Host }, { type: SkipSelf }, ]},\n{type: Array, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [NG_VALIDATORS, ] }, ]},\n{type: Array, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [NG_ASYNC_VALIDATORS, ] }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'name': [{ type: Input, args: ['formArrayName', ] },],\n};\n}\n\nfunction FormArrayName_tsickle_Closure_declarations() {\n/** @type {?} */\nFormArrayName.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nFormArrayName.ctorParameters;\n/** @type {?} */\nFormArrayName.propDecorators;\n/**\n * \\@internal\n * @type {?}\n */\nFormArrayName.prototype._parent;\n/**\n * \\@internal\n * @type {?}\n */\nFormArrayName.prototype._validators;\n/**\n * \\@internal\n * @type {?}\n */\nFormArrayName.prototype._asyncValidators;\n/** @type {?} */\nFormArrayName.prototype.name;\n}\n\n/**\n * @param {?} parent\n * @return {?}\n */\nfunction _hasInvalidParent(parent: ControlContainer): boolean {\n  return !(parent instanceof FormGroupName) && !(parent instanceof FormGroupDirective) &&\n      !(parent instanceof FormArrayName);\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Directive, EventEmitter, Host, Inject, Input, OnChanges, OnDestroy, Optional, Output, Self, SimpleChanges, SkipSelf, forwardRef} from '@angular/core';\n\nimport {FormControl} from '../../model';\nimport {NG_ASYNC_VALIDATORS, NG_VALIDATORS} from '../../validators';\nimport {AbstractFormGroupDirective} from '../abstract_form_group_directive';\nimport {ControlContainer} from '../control_container';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '../control_value_accessor';\nimport {NgControl} from '../ng_control';\nimport {ReactiveErrors} from '../reactive_errors';\nimport {composeAsyncValidators, composeValidators, controlPath, isPropertyUpdated, selectValueAccessor} from '../shared';\nimport {AsyncValidator, AsyncValidatorFn, Validator, ValidatorFn} from '../validators';\n\nimport {FormGroupDirective} from './form_group_directive';\nimport {FormArrayName, FormGroupName} from './form_group_name';\n\nexport const /** @type {?} */ controlNameBinding: any = {\n  provide: NgControl,\n  useExisting: forwardRef(() => FormControlName)\n};\n/**\n * \\@whatItDoes Syncs a {\\@link FormControl} in an existing {\\@link FormGroup} to a form control\n * element by name.\n * \n * In other words, this directive ensures that any values written to the {\\@link FormControl}\n * instance programmatically will be written to the DOM element (model -> view). Conversely,\n * any values written to the DOM element through user input will be reflected in the\n * {\\@link FormControl} instance (view -> model).\n * \n * \\@howToUse \n * \n * This directive is designed to be used with a parent {\\@link FormGroupDirective} (selector:\n * `[formGroup]`).\n * \n * It accepts the string name of the {\\@link FormControl} instance you want to\n * link, and will look for a {\\@link FormControl} registered with that name in the\n * closest {\\@link FormGroup} or {\\@link FormArray} above it.\n * \n * **Access the control**: You can access the {\\@link FormControl} associated with\n * this directive by using the {\\@link AbstractControl#get get} method.\n * Ex: `this.form.get('first');`\n * \n * **Get value**: the `value` property is always synced and available on the {\\@link FormControl}.\n * See a full list of available properties in {\\@link AbstractControl}.\n * \n *  **Set value**: You can set an initial value for the control when instantiating the\n *  {\\@link FormControl}, or you can set it programmatically later using\n *  {\\@link AbstractControl#setValue setValue} or {\\@link AbstractControl#patchValue patchValue}.\n * \n * **Listen to value**: If you want to listen to changes in the value of the control, you can\n * subscribe to the {\\@link AbstractControl#valueChanges valueChanges} event.  You can also listen to\n * {\\@link AbstractControl#statusChanges statusChanges} to be notified when the validation status is\n * re-calculated.\n * \n * ### Example\n * \n * In this example, we create form controls for first name and last name.\n * \n * {\\@example forms/ts/simpleFormGroup/simple_form_group_example.ts region='Component'}\n * \n * To see `formControlName` examples with different form control types, see:\n * \n * * Radio buttons: {\\@link RadioControlValueAccessor}\n * * Selects: {\\@link SelectControlValueAccessor}\n * \n * **npm package**: `\\@angular/forms`\n * \n * **NgModule**: {\\@link ReactiveFormsModule}\n * \n *  \\@stable\n */\nexport class FormControlName extends NgControl implements OnChanges, OnDestroy {\nprivate _added = false;\n/**\n * \\@internal\n */\nviewModel: any;\n/**\n * \\@internal\n */\n_control: FormControl;\n\n   name: string;\n\n  // TODO(kara):  Replace ngModel with reactive API\n   model: any;\n   update = new EventEmitter();\n/**\n * @param {?} isDisabled\n * @return {?}\n */\nset isDisabled(isDisabled: boolean) { ReactiveErrors.disabledAttrWarning(); }\n/**\n * @param {?} parent\n * @param {?} validators\n * @param {?} asyncValidators\n * @param {?} valueAccessors\n */\nconstructor(\n         parent: ControlContainer,\n         validators: Array<Validator|ValidatorFn>,\n         asyncValidators:\n          Array<AsyncValidator|AsyncValidatorFn>,\n         valueAccessors: ControlValueAccessor[]) {\n    super();\n    this._parent = parent;\n    this._rawValidators = validators || [];\n    this._rawAsyncValidators = asyncValidators || [];\n    this.valueAccessor = selectValueAccessor(this, valueAccessors);\n  }\n/**\n * @param {?} changes\n * @return {?}\n */\nngOnChanges(changes: SimpleChanges) {\n    if (!this._added) this._setUpControl();\n    if (isPropertyUpdated(changes, this.viewModel)) {\n      this.viewModel = this.model;\n      this.formDirective.updateModel(this, this.model);\n    }\n  }\n/**\n * @return {?}\n */\nngOnDestroy(): void {\n    if (this.formDirective) {\n      this.formDirective.removeControl(this);\n    }\n  }\n/**\n * @param {?} newValue\n * @return {?}\n */\nviewToModelUpdate(newValue: any): void {\n    this.viewModel = newValue;\n    this.update.emit(newValue);\n  }\n/**\n * @return {?}\n */\nget path(): string[] { return controlPath(this.name, /** @type {?} */(( this._parent))); }\n/**\n * @return {?}\n */\nget formDirective(): any { return this._parent ? this._parent.formDirective : null; }\n/**\n * @return {?}\n */\nget validator(): ValidatorFn|null { return composeValidators(this._rawValidators); }\n/**\n * @return {?}\n */\nget asyncValidator(): AsyncValidatorFn {\n    return /** @type {?} */(( composeAsyncValidators(this._rawAsyncValidators)));\n  }\n/**\n * @return {?}\n */\nget control(): FormControl { return this._control; }\n/**\n * @return {?}\n */\nprivate _checkParentType(): void {\n    if (!(this._parent instanceof FormGroupName) &&\n        this._parent instanceof AbstractFormGroupDirective) {\n      ReactiveErrors.ngModelGroupException();\n    } else if (\n        !(this._parent instanceof FormGroupName) && !(this._parent instanceof FormGroupDirective) &&\n        !(this._parent instanceof FormArrayName)) {\n      ReactiveErrors.controlParentException();\n    }\n  }\n/**\n * @return {?}\n */\nprivate _setUpControl() {\n    this._checkParentType();\n    this._control = this.formDirective.addControl(this);\n    if (this.control.disabled && /** @type {?} */(( this.valueAccessor)).setDisabledState) { /** @type {?} */(( /** @type {?} */((\n      this.valueAccessor)).setDisabledState))(true);\n    }\n    this._added = true;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{selector: '[formControlName]', providers: [controlNameBinding]}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ControlContainer, decorators: [{ type: Optional }, { type: Host }, { type: SkipSelf }, ]},\n{type: Array, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [NG_VALIDATORS, ] }, ]},\n{type: Array, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [NG_ASYNC_VALIDATORS, ] }, ]},\n{type: Array, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [NG_VALUE_ACCESSOR, ] }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'name': [{ type: Input, args: ['formControlName', ] },],\n'model': [{ type: Input, args: ['ngModel', ] },],\n'update': [{ type: Output, args: ['ngModelChange', ] },],\n'isDisabled': [{ type: Input, args: ['disabled', ] },],\n};\n}\n\nfunction FormControlName_tsickle_Closure_declarations() {\n/** @type {?} */\nFormControlName.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nFormControlName.ctorParameters;\n/** @type {?} */\nFormControlName.propDecorators;\n/** @type {?} */\nFormControlName.prototype._added;\n/**\n * \\@internal\n * @type {?}\n */\nFormControlName.prototype.viewModel;\n/**\n * \\@internal\n * @type {?}\n */\nFormControlName.prototype._control;\n/** @type {?} */\nFormControlName.prototype.name;\n/** @type {?} */\nFormControlName.prototype.model;\n/** @type {?} */\nFormControlName.prototype.update;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Directive, Input, OnChanges, Provider, SimpleChanges, forwardRef} from '@angular/core';\nimport {Observable} from 'rxjs/Observable';\nimport {AbstractControl} from '../model';\nimport {NG_VALIDATORS, Validators} from '../validators';\n\n/** @experimental */\nexport type ValidationErrors = {\n  [key: string]: any\n};\n\n/**\n * An interface that can be implemented by classes that can act as validators.\n *\n * ## Usage\n *\n * ```typescript\n * @Directive({\n *   selector: '[custom-validator]',\n *   providers: [{provide: NG_VALIDATORS, useExisting: CustomValidatorDirective, multi: true}]\n * })\n * class CustomValidatorDirective implements Validator {\n *   validate(c: Control): {[key: string]: any} {\n *     return {\"custom\": true};\n *   }\n * }\n * ```\n *\n * @stable\n */\nexport interface Validator {\n  validate(c: AbstractControl): ValidationErrors|null;\n  registerOnValidatorChange?(fn: () => void): void;\n}\n\n/** @experimental */\nexport interface AsyncValidator extends Validator {\n  validate(c: AbstractControl): Promise<ValidationErrors|null>|Observable<ValidationErrors|null>;\n}\n\nexport const /** @type {?} */ REQUIRED_VALIDATOR: Provider = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => RequiredValidator),\n  multi: true\n};\n\nexport const /** @type {?} */ CHECKBOX_REQUIRED_VALIDATOR: Provider = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => CheckboxRequiredValidator),\n  multi: true\n};\n/**\n * A Directive that adds the `required` validator to any controls marked with the\n * `required` attribute, via the {\\@link NG_VALIDATORS} binding.\n * \n * ### Example\n * \n * ```\n * <input name=\"fullName\" ngModel required>\n * ```\n * \n * \\@stable\n */\nexport class RequiredValidator implements Validator {\nprivate _required: boolean;\nprivate _onChange: () => void;\n/**\n * @return {?}\n */\nget required(): boolean|string { return this._required; }\n/**\n * @param {?} value\n * @return {?}\n */\nset required(value: boolean|string) {\n    this._required = value != null && value !== false && `${value}` !== 'false';\n    if (this._onChange) this._onChange();\n  }\n/**\n * @param {?} c\n * @return {?}\n */\nvalidate(c: AbstractControl): ValidationErrors|null {\n    return this.required ? Validators.required(c) : null;\n  }\n/**\n * @param {?} fn\n * @return {?}\n */\nregisterOnValidatorChange(fn: () => void): void { this._onChange = fn; }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector:\n      ':not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]',\n  providers: [REQUIRED_VALIDATOR],\n  host: {'[attr.required]': 'required ? \"\" : null'}\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'required': [{ type: Input },],\n};\n}\n\nfunction RequiredValidator_tsickle_Closure_declarations() {\n/** @type {?} */\nRequiredValidator.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nRequiredValidator.ctorParameters;\n/** @type {?} */\nRequiredValidator.propDecorators;\n/** @type {?} */\nRequiredValidator.prototype._required;\n/** @type {?} */\nRequiredValidator.prototype._onChange;\n}\n\n/**\n * A Directive that adds the `required` validator to checkbox controls marked with the\n * `required` attribute, via the {\\@link NG_VALIDATORS} binding.\n * \n * ### Example\n * \n * ```\n * <input type=\"checkbox\" name=\"active\" ngModel required>\n * ```\n * \n * \\@experimental\n */\nexport class CheckboxRequiredValidator extends RequiredValidator {\n/**\n * @param {?} c\n * @return {?}\n */\nvalidate(c: AbstractControl): ValidationErrors|null {\n    return this.required ? Validators.requiredTrue(c) : null;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector:\n      'input[type=checkbox][required][formControlName],input[type=checkbox][required][formControl],input[type=checkbox][required][ngModel]',\n  providers: [CHECKBOX_REQUIRED_VALIDATOR],\n  host: {'[attr.required]': 'required ? \"\" : null'}\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction CheckboxRequiredValidator_tsickle_Closure_declarations() {\n/** @type {?} */\nCheckboxRequiredValidator.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nCheckboxRequiredValidator.ctorParameters;\n}\n\n/**\n * Provider which adds {\\@link EmailValidator} to {\\@link NG_VALIDATORS}.\n */\nexport const EMAIL_VALIDATOR: any = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => EmailValidator),\n  multi: true\n};\n/**\n * A Directive that adds the `email` validator to controls marked with the\n * `email` attribute, via the {\\@link NG_VALIDATORS} binding.\n * \n * ### Example\n * \n * ```\n * <input type=\"email\" name=\"email\" ngModel email>\n * <input type=\"email\" name=\"email\" ngModel email=\"true\">\n * <input type=\"email\" name=\"email\" ngModel [email]=\"true\">\n * ```\n * \n * \\@experimental\n */\nexport class EmailValidator implements Validator {\nprivate _enabled: boolean;\nprivate _onChange: () => void;\n/**\n * @param {?} value\n * @return {?}\n */\nset email(value: boolean|string) {\n    this._enabled = value === '' || value === true || value === 'true';\n    if (this._onChange) this._onChange();\n  }\n/**\n * @param {?} c\n * @return {?}\n */\nvalidate(c: AbstractControl): ValidationErrors|null {\n    return this._enabled ? Validators.email(c) : null;\n  }\n/**\n * @param {?} fn\n * @return {?}\n */\nregisterOnValidatorChange(fn: () => void): void { this._onChange = fn; }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[email][formControlName],[email][formControl],[email][ngModel]',\n  providers: [EMAIL_VALIDATOR]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'email': [{ type: Input },],\n};\n}\n\nfunction EmailValidator_tsickle_Closure_declarations() {\n/** @type {?} */\nEmailValidator.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nEmailValidator.ctorParameters;\n/** @type {?} */\nEmailValidator.propDecorators;\n/** @type {?} */\nEmailValidator.prototype._enabled;\n/** @type {?} */\nEmailValidator.prototype._onChange;\n}\n\n\n/**\n * @stable\n */\nexport interface ValidatorFn { (c: AbstractControl): ValidationErrors|null; }\n\n/**\n * @stable\n */\nexport interface AsyncValidatorFn {\n  (c: AbstractControl): Promise<ValidationErrors|null>|Observable<ValidationErrors|null>;\n}\n/**\n * Provider which adds {\\@link MinLengthValidator} to {\\@link NG_VALIDATORS}.\n * \n * ## Example:\n * \n * {\\@example common/forms/ts/validators/validators.ts region='min'}\n */\nexport const MIN_LENGTH_VALIDATOR: any = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => MinLengthValidator),\n  multi: true\n};\n/**\n * A directive which installs the {\\@link MinLengthValidator} for any `formControlName`,\n * `formControl`, or control with `ngModel` that also has a `minlength` attribute.\n * \n * \\@stable\n */\nexport class MinLengthValidator implements Validator,\n    OnChanges {\nprivate _validator: ValidatorFn;\nprivate _onChange: () => void;\n\n   minlength: string;\n/**\n * @param {?} changes\n * @return {?}\n */\nngOnChanges(changes: SimpleChanges): void {\n    if ('minlength' in changes) {\n      this._createValidator();\n      if (this._onChange) this._onChange();\n    }\n  }\n/**\n * @param {?} c\n * @return {?}\n */\nvalidate(c: AbstractControl): ValidationErrors|null {\n    return this.minlength == null ? null : this._validator(c);\n  }\n/**\n * @param {?} fn\n * @return {?}\n */\nregisterOnValidatorChange(fn: () => void): void { this._onChange = fn; }\n/**\n * @return {?}\n */\nprivate _createValidator(): void {\n    this._validator = Validators.minLength(parseInt(this.minlength, 10));\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[minlength][formControlName],[minlength][formControl],[minlength][ngModel]',\n  providers: [MIN_LENGTH_VALIDATOR],\n  host: {'[attr.minlength]': 'minlength ? minlength : null'}\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'minlength': [{ type: Input },],\n};\n}\n\nfunction MinLengthValidator_tsickle_Closure_declarations() {\n/** @type {?} */\nMinLengthValidator.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMinLengthValidator.ctorParameters;\n/** @type {?} */\nMinLengthValidator.propDecorators;\n/** @type {?} */\nMinLengthValidator.prototype._validator;\n/** @type {?} */\nMinLengthValidator.prototype._onChange;\n/** @type {?} */\nMinLengthValidator.prototype.minlength;\n}\n\n/**\n * Provider which adds {\\@link MaxLengthValidator} to {\\@link NG_VALIDATORS}.\n * \n * ## Example:\n * \n * {\\@example common/forms/ts/validators/validators.ts region='max'}\n */\nexport const MAX_LENGTH_VALIDATOR: any = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => MaxLengthValidator),\n  multi: true\n};\n/**\n * A directive which installs the {\\@link MaxLengthValidator} for any `formControlName,\n * `formControl`,\n * or control with `ngModel` that also has a `maxlength` attribute.\n * \n * \\@stable\n */\nexport class MaxLengthValidator implements Validator,\n    OnChanges {\nprivate _validator: ValidatorFn;\nprivate _onChange: () => void;\n\n   maxlength: string;\n/**\n * @param {?} changes\n * @return {?}\n */\nngOnChanges(changes: SimpleChanges): void {\n    if ('maxlength' in changes) {\n      this._createValidator();\n      if (this._onChange) this._onChange();\n    }\n  }\n/**\n * @param {?} c\n * @return {?}\n */\nvalidate(c: AbstractControl): ValidationErrors|null {\n    return this.maxlength != null ? this._validator(c) : null;\n  }\n/**\n * @param {?} fn\n * @return {?}\n */\nregisterOnValidatorChange(fn: () => void): void { this._onChange = fn; }\n/**\n * @return {?}\n */\nprivate _createValidator(): void {\n    this._validator = Validators.maxLength(parseInt(this.maxlength, 10));\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[maxlength][formControlName],[maxlength][formControl],[maxlength][ngModel]',\n  providers: [MAX_LENGTH_VALIDATOR],\n  host: {'[attr.maxlength]': 'maxlength ? maxlength : null'}\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'maxlength': [{ type: Input },],\n};\n}\n\nfunction MaxLengthValidator_tsickle_Closure_declarations() {\n/** @type {?} */\nMaxLengthValidator.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMaxLengthValidator.ctorParameters;\n/** @type {?} */\nMaxLengthValidator.propDecorators;\n/** @type {?} */\nMaxLengthValidator.prototype._validator;\n/** @type {?} */\nMaxLengthValidator.prototype._onChange;\n/** @type {?} */\nMaxLengthValidator.prototype.maxlength;\n}\n\n\n\nexport const /** @type {?} */ PATTERN_VALIDATOR: any = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => PatternValidator),\n  multi: true\n};\n/**\n * A Directive that adds the `pattern` validator to any controls marked with the\n * `pattern` attribute, via the {\\@link NG_VALIDATORS} binding. Uses attribute value\n * as the regex to validate Control value against.  Follows pattern attribute\n * semantics; i.e. regex must match entire Control value.\n * \n * ### Example\n * \n * ```\n * <input [name]=\"fullName\" pattern=\"[a-zA-Z ]*\" ngModel>\n * ```\n * \\@stable\n */\nexport class PatternValidator implements Validator,\n    OnChanges {\nprivate _validator: ValidatorFn;\nprivate _onChange: () => void;\n\n   pattern: string|RegExp;\n/**\n * @param {?} changes\n * @return {?}\n */\nngOnChanges(changes: SimpleChanges): void {\n    if ('pattern' in changes) {\n      this._createValidator();\n      if (this._onChange) this._onChange();\n    }\n  }\n/**\n * @param {?} c\n * @return {?}\n */\nvalidate(c: AbstractControl): ValidationErrors|null { return this._validator(c); }\n/**\n * @param {?} fn\n * @return {?}\n */\nregisterOnValidatorChange(fn: () => void): void { this._onChange = fn; }\n/**\n * @return {?}\n */\nprivate _createValidator(): void { this._validator = Validators.pattern(this.pattern); }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[pattern][formControlName],[pattern][formControl],[pattern][ngModel]',\n  providers: [PATTERN_VALIDATOR],\n  host: {'[attr.pattern]': 'pattern ? pattern : null'}\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'pattern': [{ type: Input },],\n};\n}\n\nfunction PatternValidator_tsickle_Closure_declarations() {\n/** @type {?} */\nPatternValidator.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nPatternValidator.ctorParameters;\n/** @type {?} */\nPatternValidator.propDecorators;\n/** @type {?} */\nPatternValidator.prototype._validator;\n/** @type {?} */\nPatternValidator.prototype._onChange;\n/** @type {?} */\nPatternValidator.prototype.pattern;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Injectable} from '@angular/core';\n\nimport {AsyncValidatorFn, ValidatorFn} from './directives/validators';\nimport {AbstractControl, FormArray, FormControl, FormGroup} from './model';\n/**\n * \\@whatItDoes Creates an {\\@link AbstractControl} from a user-specified configuration.\n * \n * It is essentially syntactic sugar that shortens the `new FormGroup()`,\n * `new FormControl()`, and `new FormArray()` boilerplate that can build up in larger\n * forms.\n * \n * \\@howToUse \n * \n * To use, inject `FormBuilder` into your component class. You can then call its methods\n * directly.\n * \n * {\\@example forms/ts/formBuilder/form_builder_example.ts region='Component'}\n * \n *  * **npm package**: `\\@angular/forms`\n * \n *  * **NgModule**: {\\@link ReactiveFormsModule}\n * \n * \\@stable\n */\nexport class FormBuilder {\n/**\n * Construct a new {\\@link FormGroup} with the given map of configuration.\n * Valid keys for the `extra` parameter map are `validator` and `asyncValidator`.\n * \n * See the {\\@link FormGroup} constructor for more details.\n * @param {?} controlsConfig\n * @param {?=} extra\n * @return {?}\n */\ngroup(controlsConfig: {[key: string]: any}, extra: {[key: string]: any}|null = null): FormGroup {\n    const /** @type {?} */ controls = this._reduceControls(controlsConfig);\n    const /** @type {?} */ validator: ValidatorFn = extra != null ? extra['validator'] : null;\n    const /** @type {?} */ asyncValidator: AsyncValidatorFn = extra != null ? extra['asyncValidator'] : null;\n    return new FormGroup(controls, validator, asyncValidator);\n  }\n/**\n * Construct a new {\\@link FormControl} with the given `formState`,`validator`, and\n * `asyncValidator`.\n * \n * `formState` can either be a standalone value for the form control or an object\n * that contains both a value and a disabled status.\n * \n * @param {?} formState\n * @param {?=} validator\n * @param {?=} asyncValidator\n * @return {?}\n */\ncontrol(\n      formState: Object, validator?: ValidatorFn|ValidatorFn[]|null,\n      asyncValidator?: AsyncValidatorFn|AsyncValidatorFn[]|null): FormControl {\n    return new FormControl(formState, validator, asyncValidator);\n  }\n/**\n * Construct a {\\@link FormArray} from the given `controlsConfig` array of\n * configuration, with the given optional `validator` and `asyncValidator`.\n * @param {?} controlsConfig\n * @param {?=} validator\n * @param {?=} asyncValidator\n * @return {?}\n */\narray(\n      controlsConfig: any[], validator?: ValidatorFn|null,\n      asyncValidator?: AsyncValidatorFn|null): FormArray {\n    const /** @type {?} */ controls = controlsConfig.map(c => this._createControl(c));\n    return new FormArray(controls, validator, asyncValidator);\n  }\n/**\n * \\@internal\n * @param {?} controlsConfig\n * @return {?}\n */\n_reduceControls(controlsConfig: {[k: string]: any}): {[key: string]: AbstractControl} {\n    const /** @type {?} */ controls: {[key: string]: AbstractControl} = {};\n    Object.keys(controlsConfig).forEach(controlName => {\n      controls[controlName] = this._createControl(controlsConfig[controlName]);\n    });\n    return controls;\n  }\n/**\n * \\@internal\n * @param {?} controlConfig\n * @return {?}\n */\n_createControl(controlConfig: any): AbstractControl {\n    if (controlConfig instanceof FormControl || controlConfig instanceof FormGroup ||\n        controlConfig instanceof FormArray) {\n      return controlConfig;\n\n    } else if (Array.isArray(controlConfig)) {\n      const /** @type {?} */ value = controlConfig[0];\n      const /** @type {?} */ validator: ValidatorFn = controlConfig.length > 1 ? controlConfig[1] : null;\n      const /** @type {?} */ asyncValidator: AsyncValidatorFn = controlConfig.length > 2 ? controlConfig[2] : null;\n      return this.control(value, validator, asyncValidator);\n\n    } else {\n      return this.control(controlConfig);\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction FormBuilder_tsickle_Closure_declarations() {\n/** @type {?} */\nFormBuilder.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nFormBuilder.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Directive} from '@angular/core';\n/**\n * \\@whatItDoes Adds `novalidate` attribute to all forms by default.\n * \n * `novalidate` is used to disable browser's native form validation.\n * \n * If you want to use native validation with Angular forms, just add `ngNativeValidate` attribute:\n * \n * ```\n * <form ngNativeValidate></form>\n * ```\n * \n * \\@experimental\n */\nexport class NgNoValidate {\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'form:not([ngNoForm]):not([ngNativeValidate])',\n  host: {'novalidate': ''},\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction NgNoValidate_tsickle_Closure_declarations() {\n/** @type {?} */\nNgNoValidate.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nNgNoValidate.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {NgModule, Type} from '@angular/core';\n\nimport {CheckboxControlValueAccessor} from './directives/checkbox_value_accessor';\nimport {DefaultValueAccessor} from './directives/default_value_accessor';\nimport {NgControlStatus, NgControlStatusGroup} from './directives/ng_control_status';\nimport {NgForm} from './directives/ng_form';\nimport {NgModel} from './directives/ng_model';\nimport {NgModelGroup} from './directives/ng_model_group';\nimport {NgNoValidate} from './directives/ng_no_validate_directive';\nimport {NumberValueAccessor} from './directives/number_value_accessor';\nimport {RadioControlValueAccessor} from './directives/radio_control_value_accessor';\nimport {RangeValueAccessor} from './directives/range_value_accessor';\nimport {FormControlDirective} from './directives/reactive_directives/form_control_directive';\nimport {FormControlName} from './directives/reactive_directives/form_control_name';\nimport {FormGroupDirective} from './directives/reactive_directives/form_group_directive';\nimport {FormArrayName, FormGroupName} from './directives/reactive_directives/form_group_name';\nimport {NgSelectOption, SelectControlValueAccessor} from './directives/select_control_value_accessor';\nimport {NgSelectMultipleOption, SelectMultipleControlValueAccessor} from './directives/select_multiple_control_value_accessor';\nimport {CheckboxRequiredValidator, EmailValidator, MaxLengthValidator, MinLengthValidator, PatternValidator, RequiredValidator} from './directives/validators';\n\nexport {CheckboxControlValueAccessor} from './directives/checkbox_value_accessor';\nexport {ControlValueAccessor} from './directives/control_value_accessor';\nexport {DefaultValueAccessor} from './directives/default_value_accessor';\nexport {NgControl} from './directives/ng_control';\nexport {NgControlStatus, NgControlStatusGroup} from './directives/ng_control_status';\nexport {NgForm} from './directives/ng_form';\nexport {NgModel} from './directives/ng_model';\nexport {NgModelGroup} from './directives/ng_model_group';\nexport {NumberValueAccessor} from './directives/number_value_accessor';\nexport {RadioControlValueAccessor} from './directives/radio_control_value_accessor';\nexport {RangeValueAccessor} from './directives/range_value_accessor';\nexport {FormControlDirective} from './directives/reactive_directives/form_control_directive';\nexport {FormControlName} from './directives/reactive_directives/form_control_name';\nexport {FormGroupDirective} from './directives/reactive_directives/form_group_directive';\nexport {FormArrayName, FormGroupName} from './directives/reactive_directives/form_group_name';\nexport {NgSelectOption, SelectControlValueAccessor} from './directives/select_control_value_accessor';\nexport {NgSelectMultipleOption, SelectMultipleControlValueAccessor} from './directives/select_multiple_control_value_accessor';\n\nexport const /** @type {?} */ SHARED_FORM_DIRECTIVES: Type<any>[] = [\n  NgNoValidate,\n  NgSelectOption,\n  NgSelectMultipleOption,\n  DefaultValueAccessor,\n  NumberValueAccessor,\n  RangeValueAccessor,\n  CheckboxControlValueAccessor,\n  SelectControlValueAccessor,\n  SelectMultipleControlValueAccessor,\n  RadioControlValueAccessor,\n  NgControlStatus,\n  NgControlStatusGroup,\n  RequiredValidator,\n  MinLengthValidator,\n  MaxLengthValidator,\n  PatternValidator,\n  CheckboxRequiredValidator,\n  EmailValidator,\n];\n\nexport const /** @type {?} */ TEMPLATE_DRIVEN_DIRECTIVES: Type<any>[] = [NgModel, NgModelGroup, NgForm];\n\nexport const /** @type {?} */ REACTIVE_DRIVEN_DIRECTIVES: Type<any>[] =\n    [FormControlDirective, FormGroupDirective, FormControlName, FormGroupName, FormArrayName];\n/**\n * Internal module used for sharing directives between FormsModule and ReactiveFormsModule\n */\nexport class InternalFormsSharedModule {\nstatic decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  declarations: SHARED_FORM_DIRECTIVES,\n  exports: SHARED_FORM_DIRECTIVES,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction InternalFormsSharedModule_tsickle_Closure_declarations() {\n/** @type {?} */\nInternalFormsSharedModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nInternalFormsSharedModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {NgModule} from '@angular/core';\n\nimport {InternalFormsSharedModule, REACTIVE_DRIVEN_DIRECTIVES, TEMPLATE_DRIVEN_DIRECTIVES} from './directives';\nimport {RadioControlRegistry} from './directives/radio_control_value_accessor';\nimport {FormBuilder} from './form_builder';\n/**\n * The ng module for forms.\n * \\@stable\n */\nexport class FormsModule {\nstatic decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  declarations: TEMPLATE_DRIVEN_DIRECTIVES,\n  providers: [RadioControlRegistry],\n  exports: [InternalFormsSharedModule, TEMPLATE_DRIVEN_DIRECTIVES]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction FormsModule_tsickle_Closure_declarations() {\n/** @type {?} */\nFormsModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nFormsModule.ctorParameters;\n}\n\n/**\n * The ng module for reactive forms.\n * \\@stable\n */\nexport class ReactiveFormsModule {\nstatic decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  declarations: [REACTIVE_DRIVEN_DIRECTIVES],\n  providers: [FormBuilder, RadioControlRegistry],\n  exports: [InternalFormsSharedModule, REACTIVE_DRIVEN_DIRECTIVES]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction ReactiveFormsModule_tsickle_Closure_declarations() {\n/** @type {?} */\nReactiveFormsModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nReactiveFormsModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable, SubscribableOrPromise } from '../Observable';\nimport { Subscription, TeardownLogic } from '../Subscription';\n\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Ignores source values for a duration determined by another Observable, then\n * emits the most recent value from the source Observable, then repeats this\n * process.\n *\n * <span class=\"informal\">It's like {@link auditTime}, but the silencing\n * duration is determined by a second Observable.</span>\n *\n * <img src=\"./img/audit.png\" width=\"100%\">\n *\n * `audit` is similar to `throttle`, but emits the last value from the silenced\n * time window, instead of the first value. `audit` emits the most recent value\n * from the source Observable on the output Observable as soon as its internal\n * timer becomes disabled, and ignores source values while the timer is enabled.\n * Initially, the timer is disabled. As soon as the first source value arrives,\n * the timer is enabled by calling the `durationSelector` function with the\n * source value, which returns the \"duration\" Observable. When the duration\n * Observable emits a value or completes, the timer is disabled, then the most\n * recent source value is emitted on the output Observable, and this process\n * repeats for the next source value.\n *\n * @example <caption>Emit clicks at a rate of at most one click per second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.audit(ev => Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link auditTime}\n * @see {@link debounce}\n * @see {@link delayWhen}\n * @see {@link sample}\n * @see {@link throttle}\n *\n * @param {function(value: T): SubscribableOrPromise} durationSelector A function\n * that receives a value from the source Observable, for computing the silencing\n * duration, returned as an Observable or a Promise.\n * @return {Observable<T>} An Observable that performs rate-limiting of\n * emissions from the source Observable.\n * @method audit\n * @owner Observable\n */\nexport function audit<T>(durationSelector: (value: T) => SubscribableOrPromise<any>): MonoTypeOperatorFunction<T> {\n  return function auditOperatorFunction(source: Observable<T>) {\n    return source.lift(new AuditOperator(durationSelector));\n  };\n}\n\nclass AuditOperator<T> implements Operator<T, T> {\n  constructor(private durationSelector: (value: T) => SubscribableOrPromise<any>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new AuditSubscriber<T, T>(subscriber, this.durationSelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass AuditSubscriber<T, R> extends OuterSubscriber<T, R> {\n\n  private value: T;\n  private hasValue: boolean = false;\n  private throttled: Subscription;\n\n  constructor(destination: Subscriber<T>,\n              private durationSelector: (value: T) => SubscribableOrPromise<any>) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    this.value = value;\n    this.hasValue = true;\n    if (!this.throttled) {\n      const duration = tryCatch(this.durationSelector)(value);\n      if (duration === errorObject) {\n        this.destination.error(errorObject.e);\n      } else {\n        const innerSubscription = subscribeToResult(this, duration);\n        if (innerSubscription.closed) {\n          this.clearThrottle();\n        } else {\n          this.add(this.throttled = innerSubscription);\n        }\n      }\n    }\n  }\n\n  clearThrottle() {\n    const { value, hasValue, throttled } = this;\n    if (throttled) {\n      this.remove(throttled);\n      this.throttled = null;\n      throttled.unsubscribe();\n    }\n    if (hasValue) {\n      this.value = null;\n      this.hasValue = false;\n      this.destination.next(value);\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: R, outerIndex: number, innerIndex: number): void {\n    this.clearThrottle();\n  }\n\n  notifyComplete(): void {\n    this.clearThrottle();\n  }\n}\n","import { Scheduler } from '../Scheduler';\nimport { Subscription } from '../Subscription';\n\n/**\n * A unit of work to be executed in a {@link Scheduler}. An action is typically\n * created from within a Scheduler and an RxJS user does not need to concern\n * themselves about creating and manipulating an Action.\n *\n * ```ts\n * class Action<T> extends Subscription {\n *   new (scheduler: Scheduler, work: (state?: T) => void);\n *   schedule(state?: T, delay: number = 0): Subscription;\n * }\n * ```\n *\n * @class Action<T>\n */\nexport class Action<T> extends Subscription {\n  constructor(scheduler: Scheduler, work: (this: Action<T>, state?: T) => void) {\n    super();\n  }\n  /**\n   * Schedules this action on its parent Scheduler for execution. May be passed\n   * some context object, `state`. May happen at some point in the future,\n   * according to the `delay` parameter, if specified.\n   * @param {T} [state] Some contextual data that the `work` function uses when\n   * called by the Scheduler.\n   * @param {number} [delay] Time to wait before executing the work, where the\n   * time unit is implicit and defined by the Scheduler.\n   * @return {void}\n   */\n  public schedule(state?: T, delay: number = 0): Subscription {\n    return this;\n  }\n}\n","import { root } from '../util/root';\nimport { Action } from './Action';\nimport { Subscription } from '../Subscription';\nimport { AsyncScheduler } from './AsyncScheduler';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class AsyncAction<T> extends Action<T> {\n\n  public id: any;\n  public state: T;\n  public delay: number;\n  protected pending: boolean = false;\n\n  constructor(protected scheduler: AsyncScheduler,\n              protected work: (this: AsyncAction<T>, state?: T) => void) {\n    super(scheduler, work);\n  }\n\n  public schedule(state?: T, delay: number = 0): Subscription {\n\n    if (this.closed) {\n      return this;\n     }\n\n    // Always replace the current state with the new state.\n    this.state = state;\n\n    // Set the pending flag indicating that this action has been scheduled, or\n    // has recursively rescheduled itself.\n    this.pending = true;\n\n    const id = this.id;\n    const scheduler = this.scheduler;\n\n    //\n    // Important implementation note:\n    //\n    // Actions only execute once by default, unless rescheduled from within the\n    // scheduled callback. This allows us to implement single and repeat\n    // actions via the same code path, without adding API surface area, as well\n    // as mimic traditional recursion but across asynchronous boundaries.\n    //\n    // However, JS runtimes and timers distinguish between intervals achieved by\n    // serial `setTimeout` calls vs. a single `setInterval` call. An interval of\n    // serial `setTimeout` calls can be individually delayed, which delays\n    // scheduling the next `setTimeout`, and so on. `setInterval` attempts to\n    // guarantee the interval callback will be invoked more precisely to the\n    // interval period, regardless of load.\n    //\n    // Therefore, we use `setInterval` to schedule single and repeat actions.\n    // If the action reschedules itself with the same delay, the interval is not\n    // canceled. If the action doesn't reschedule, or reschedules with a\n    // different delay, the interval will be canceled after scheduled callback\n    // execution.\n    //\n    if (id != null) {\n      this.id = this.recycleAsyncId(scheduler, id, delay);\n    }\n\n    this.delay = delay;\n    // If this action has already an async Id, don't request a new one.\n    this.id = this.id || this.requestAsyncId(scheduler, this.id, delay);\n\n    return this;\n  }\n\n  protected requestAsyncId(scheduler: AsyncScheduler, id?: any, delay: number = 0): any {\n    return root.setInterval(scheduler.flush.bind(scheduler, this), delay);\n  }\n\n  protected recycleAsyncId(scheduler: AsyncScheduler, id: any, delay: number = 0): any {\n    // If this action is rescheduled with the same delay time, don't clear the interval id.\n    if (delay !== null && this.delay === delay && this.pending === false) {\n      return id;\n    }\n    // Otherwise, if the action's delay time is different from the current delay,\n    // or the action has been rescheduled before it's executed, clear the interval id\n    return root.clearInterval(id) && undefined || undefined;\n  }\n\n  /**\n   * Immediately executes this action and the `work` it contains.\n   * @return {any}\n   */\n  public execute(state: T, delay: number): any {\n\n    if (this.closed) {\n      return new Error('executing a cancelled action');\n    }\n\n    this.pending = false;\n    const error = this._execute(state, delay);\n    if (error) {\n      return error;\n    } else if (this.pending === false && this.id != null) {\n      // Dequeue if the action didn't reschedule itself. Don't call\n      // unsubscribe(), because the action could reschedule later.\n      // For example:\n      // ```\n      // scheduler.schedule(function doWork(counter) {\n      //   /* ... I'm a busy worker bee ... */\n      //   var originalAction = this;\n      //   /* wait 100ms before rescheduling the action */\n      //   setTimeout(function () {\n      //     originalAction.schedule(counter + 1);\n      //   }, 100);\n      // }, 1000);\n      // ```\n      this.id = this.recycleAsyncId(this.scheduler, this.id, null);\n    }\n  }\n\n  protected _execute(state: T, delay: number): any {\n    let errored: boolean = false;\n    let errorValue: any = undefined;\n    try {\n      this.work(state);\n    } catch (e) {\n      errored = true;\n      errorValue = !!e && e || new Error(e);\n    }\n    if (errored) {\n      this.unsubscribe();\n      return errorValue;\n    }\n  }\n\n  protected _unsubscribe() {\n\n    const id = this.id;\n    const scheduler = this.scheduler;\n    const actions = scheduler.actions;\n    const index = actions.indexOf(this);\n\n    this.work  = null;\n    this.state = null;\n    this.pending = false;\n    this.scheduler = null;\n\n    if (index !== -1) {\n      actions.splice(index, 1);\n    }\n\n    if (id != null) {\n      this.id = this.recycleAsyncId(scheduler, id, null);\n    }\n\n    this.delay = null;\n  }\n}\n","import { Action } from './scheduler/Action';\nimport { Subscription } from './Subscription';\n\nexport interface IScheduler {\n  now(): number;\n  schedule<T>(work: (this: Action<T>, state?: T) => void, delay?: number, state?: T): Subscription;\n}\n/**\n * An execution context and a data structure to order tasks and schedule their\n * execution. Provides a notion of (potentially virtual) time, through the\n * `now()` getter method.\n *\n * Each unit of work in a Scheduler is called an {@link Action}.\n *\n * ```ts\n * class Scheduler {\n *   now(): number;\n *   schedule(work, delay?, state?): Subscription;\n * }\n * ```\n *\n * @class Scheduler\n */\nexport class Scheduler implements IScheduler {\n\n  public static now: () => number = Date.now ? Date.now : () => +new Date();\n\n  constructor(private SchedulerAction: typeof Action,\n              now: () => number = Scheduler.now) {\n    this.now = now;\n  }\n\n  /**\n   * A getter method that returns a number representing the current time\n   * (at the time this function was called) according to the scheduler's own\n   * internal clock.\n   * @return {number} A number that represents the current time. May or may not\n   * have a relation to wall-clock time. May or may not refer to a time unit\n   * (e.g. milliseconds).\n   */\n  public now: () => number;\n\n  /**\n   * Schedules a function, `work`, for execution. May happen at some point in\n   * the future, according to the `delay` parameter, if specified. May be passed\n   * some context object, `state`, which will be passed to the `work` function.\n   *\n   * The given arguments will be processed an stored as an Action object in a\n   * queue of actions.\n   *\n   * @param {function(state: ?T): ?Subscription} work A function representing a\n   * task, or some unit of work to be executed by the Scheduler.\n   * @param {number} [delay] Time to wait before executing the work, where the\n   * time unit is implicit and defined by the Scheduler itself.\n   * @param {T} [state] Some contextual data that the `work` function uses when\n   * called by the Scheduler.\n   * @return {Subscription} A subscription in order to be able to unsubscribe\n   * the scheduled work.\n   */\n  public schedule<T>(work: (this: Action<T>, state?: T) => void, delay: number = 0, state?: T): Subscription {\n    return new this.SchedulerAction<T>(this, work).schedule(state, delay);\n  }\n}\n","import { Scheduler } from '../Scheduler';\nimport { AsyncAction } from './AsyncAction';\n\nexport class AsyncScheduler extends Scheduler {\n  public actions: Array<AsyncAction<any>> = [];\n  /**\n   * A flag to indicate whether the Scheduler is currently executing a batch of\n   * queued actions.\n   * @type {boolean}\n   */\n  public active: boolean = false;\n  /**\n   * An internal ID used to track the latest asynchronous task such as those\n   * coming from `setTimeout`, `setInterval`, `requestAnimationFrame`, and\n   * others.\n   * @type {any}\n   */\n  public scheduled: any = undefined;\n\n  public flush(action: AsyncAction<any>): void {\n\n    const {actions} = this;\n\n    if (this.active) {\n      actions.push(action);\n      return;\n    }\n\n    let error: any;\n    this.active = true;\n\n    do {\n      if (error = action.execute(action.state, action.delay)) {\n        break;\n      }\n    } while (action = actions.shift()); // exhaust the scheduler queue\n\n    this.active = false;\n\n    if (error) {\n      while (action = actions.shift()) {\n        action.unsubscribe();\n      }\n      throw error;\n    }\n  }\n}\n","import { AsyncAction } from './AsyncAction';\nimport { AsyncScheduler } from './AsyncScheduler';\n\n/**\n *\n * Async Scheduler\n *\n * <span class=\"informal\">Schedule task as if you used setTimeout(task, duration)</span>\n *\n * `async` scheduler schedules tasks asynchronously, by putting them on the JavaScript\n * event loop queue. It is best used to delay tasks in time or to schedule tasks repeating\n * in intervals.\n *\n * If you just want to \"defer\" task, that is to perform it right after currently\n * executing synchronous code ends (commonly achieved by `setTimeout(deferredTask, 0)`),\n * better choice will be the {@link asap} scheduler.\n *\n * @example <caption>Use async scheduler to delay task</caption>\n * const task = () => console.log('it works!');\n *\n * Rx.Scheduler.async.schedule(task, 2000);\n *\n * // After 2 seconds logs:\n * // \"it works!\"\n *\n *\n * @example <caption>Use async scheduler to repeat task in intervals</caption>\n * function task(state) {\n *   console.log(state);\n *   this.schedule(state + 1, 1000); // `this` references currently executing Action,\n *                                   // which we reschedule with new state and delay\n * }\n *\n * Rx.Scheduler.async.schedule(task, 3000, 0);\n *\n * // Logs:\n * // 0 after 3s\n * // 1 after 4s\n * // 2 after 5s\n * // 3 after 6s\n *\n * @static true\n * @name async\n * @owner Scheduler\n */\n\nexport const async = new AsyncScheduler(AsyncAction);\n","import { isNumeric } from '../util/isNumeric';\nimport { IScheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { async } from '../scheduler/async';\nimport { isScheduler } from '../util/isScheduler';\nimport { isDate } from '../util/isDate';\nimport { TeardownLogic } from '../Subscription';\nimport { Subscriber } from '../Subscriber';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class TimerObservable extends Observable<number> {\n\n  /**\n   * Creates an Observable that starts emitting after an `initialDelay` and\n   * emits ever increasing numbers after each `period` of time thereafter.\n   *\n   * <span class=\"informal\">Its like {@link interval}, but you can specify when\n   * should the emissions start.</span>\n   *\n   * <img src=\"./img/timer.png\" width=\"100%\">\n   *\n   * `timer` returns an Observable that emits an infinite sequence of ascending\n   * integers, with a constant interval of time, `period` of your choosing\n   * between those emissions. The first emission happens after the specified\n   * `initialDelay`. The initial delay may be a {@link Date}. By default, this\n   * operator uses the `async` IScheduler to provide a notion of time, but you\n   * may pass any IScheduler to it. If `period` is not specified, the output\n   * Observable emits only one value, `0`. Otherwise, it emits an infinite\n   * sequence.\n   *\n   * @example <caption>Emits ascending numbers, one every second (1000ms), starting after 3 seconds</caption>\n   * var numbers = Rx.Observable.timer(3000, 1000);\n   * numbers.subscribe(x => console.log(x));\n   *\n   * @example <caption>Emits one number after five seconds</caption>\n   * var numbers = Rx.Observable.timer(5000);\n   * numbers.subscribe(x => console.log(x));\n   *\n   * @see {@link interval}\n   * @see {@link delay}\n   *\n   * @param {number|Date} initialDelay The initial delay time to wait before\n   * emitting the first value of `0`.\n   * @param {number} [period] The period of time between emissions of the\n   * subsequent numbers.\n   * @param {Scheduler} [scheduler=async] The IScheduler to use for scheduling\n   * the emission of values, and providing a notion of \"time\".\n   * @return {Observable} An Observable that emits a `0` after the\n   * `initialDelay` and ever increasing numbers after each `period` of time\n   * thereafter.\n   * @static true\n   * @name timer\n   * @owner Observable\n   */\n  static create(initialDelay: number | Date = 0,\n                period?: number | IScheduler,\n                scheduler?: IScheduler): Observable<number> {\n    return new TimerObservable(initialDelay, period, scheduler);\n  }\n\n  static dispatch(state: any) {\n\n    const { index, period, subscriber } = state;\n    const action = (<any> this);\n\n    subscriber.next(index);\n\n    if (subscriber.closed) {\n      return;\n    } else if (period === -1) {\n      return subscriber.complete();\n    }\n\n    state.index = index + 1;\n    action.schedule(state, period);\n  }\n\n  private period: number = -1;\n  private dueTime: number = 0;\n  private scheduler: IScheduler;\n\n  constructor(dueTime: number | Date = 0,\n              period?: number | IScheduler,\n              scheduler?: IScheduler) {\n    super();\n\n    if (isNumeric(period)) {\n      this.period = Number(period) < 1 && 1 || Number(period);\n    } else if (isScheduler(period)) {\n      scheduler = <IScheduler> period;\n    }\n\n    if (!isScheduler(scheduler)) {\n      scheduler = async;\n    }\n\n    this.scheduler = scheduler;\n    this.dueTime = isDate(dueTime) ?\n      (+dueTime - this.scheduler.now()) :\n      (<number> dueTime);\n  }\n\n  protected _subscribe(subscriber: Subscriber<number>): TeardownLogic {\n    const index = 0;\n    const { period, dueTime, scheduler } = this;\n\n    return scheduler.schedule(TimerObservable.dispatch, dueTime, {\n      index, period, subscriber\n    });\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Buffers the source Observable values until `closingNotifier` emits.\n *\n * <span class=\"informal\">Collects values from the past as an array, and emits\n * that array only when another Observable emits.</span>\n *\n * <img src=\"./img/buffer.png\" width=\"100%\">\n *\n * Buffers the incoming Observable values until the given `closingNotifier`\n * Observable emits a value, at which point it emits the buffer on the output\n * Observable and starts a new buffer internally, awaiting the next time\n * `closingNotifier` emits.\n *\n * @example <caption>On every click, emit array of most recent interval events</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var interval = Rx.Observable.interval(1000);\n * var buffered = interval.buffer(clicks);\n * buffered.subscribe(x => console.log(x));\n *\n * @see {@link bufferCount}\n * @see {@link bufferTime}\n * @see {@link bufferToggle}\n * @see {@link bufferWhen}\n * @see {@link window}\n *\n * @param {Observable<any>} closingNotifier An Observable that signals the\n * buffer to be emitted on the output Observable.\n * @return {Observable<T[]>} An Observable of buffers, which are arrays of\n * values.\n * @method buffer\n * @owner Observable\n */\nexport function buffer<T>(closingNotifier: Observable<any>): OperatorFunction<T, T[]> {\n  return function bufferOperatorFunction(source: Observable<T>) {\n    return source.lift(new BufferOperator<T>(closingNotifier));\n  };\n}\n\nclass BufferOperator<T> implements Operator<T, T[]> {\n\n  constructor(private closingNotifier: Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<T[]>, source: any): any {\n    return source.subscribe(new BufferSubscriber(subscriber, this.closingNotifier));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass BufferSubscriber<T> extends OuterSubscriber<T, any> {\n  private buffer: T[] = [];\n\n  constructor(destination: Subscriber<T[]>, closingNotifier: Observable<any>) {\n    super(destination);\n    this.add(subscribeToResult(this, closingNotifier));\n  }\n\n  protected _next(value: T) {\n    this.buffer.push(value);\n  }\n\n  notifyNext(outerValue: T, innerValue: any,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, any>): void {\n    const buffer = this.buffer;\n    this.buffer = [];\n    this.destination.next(buffer);\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Buffers the source Observable values until the size hits the maximum\n * `bufferSize` given.\n *\n * <span class=\"informal\">Collects values from the past as an array, and emits\n * that array only when its size reaches `bufferSize`.</span>\n *\n * <img src=\"./img/bufferCount.png\" width=\"100%\">\n *\n * Buffers a number of values from the source Observable by `bufferSize` then\n * emits the buffer and clears it, and starts a new buffer each\n * `startBufferEvery` values. If `startBufferEvery` is not provided or is\n * `null`, then new buffers are started immediately at the start of the source\n * and when each buffer closes and is emitted.\n *\n * @example <caption>Emit the last two click events as an array</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var buffered = clicks.bufferCount(2);\n * buffered.subscribe(x => console.log(x));\n *\n * @example <caption>On every click, emit the last two click events as an array</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var buffered = clicks.bufferCount(2, 1);\n * buffered.subscribe(x => console.log(x));\n *\n * @see {@link buffer}\n * @see {@link bufferTime}\n * @see {@link bufferToggle}\n * @see {@link bufferWhen}\n * @see {@link pairwise}\n * @see {@link windowCount}\n *\n * @param {number} bufferSize The maximum size of the buffer emitted.\n * @param {number} [startBufferEvery] Interval at which to start a new buffer.\n * For example if `startBufferEvery` is `2`, then a new buffer will be started\n * on every other value from the source. A new buffer is started at the\n * beginning of the source by default.\n * @return {Observable<T[]>} An Observable of arrays of buffered values.\n * @method bufferCount\n * @owner Observable\n */\nexport function bufferCount<T>(bufferSize: number, startBufferEvery: number = null): OperatorFunction<T, T[]> {\n  return function bufferCountOperatorFunction(source: Observable<T>) {\n    return source.lift(new BufferCountOperator<T>(bufferSize, startBufferEvery));\n  };\n}\n\nclass BufferCountOperator<T> implements Operator<T, T[]> {\n  private subscriberClass: any;\n\n  constructor(private bufferSize: number, private startBufferEvery: number) {\n    if (!startBufferEvery || bufferSize === startBufferEvery) {\n      this.subscriberClass = BufferCountSubscriber;\n    } else {\n      this.subscriberClass = BufferSkipCountSubscriber;\n    }\n  }\n\n  call(subscriber: Subscriber<T[]>, source: any): TeardownLogic {\n    return source.subscribe(new this.subscriberClass(subscriber, this.bufferSize, this.startBufferEvery));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass BufferCountSubscriber<T> extends Subscriber<T> {\n  private buffer: T[] = [];\n\n  constructor(destination: Subscriber<T[]>, private bufferSize: number) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    const buffer = this.buffer;\n\n    buffer.push(value);\n\n    if (buffer.length == this.bufferSize) {\n      this.destination.next(buffer);\n      this.buffer = [];\n    }\n  }\n\n  protected _complete(): void {\n    const buffer = this.buffer;\n    if (buffer.length > 0) {\n      this.destination.next(buffer);\n    }\n    super._complete();\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass BufferSkipCountSubscriber<T> extends Subscriber<T> {\n  private buffers: Array<T[]> = [];\n  private count: number = 0;\n\n  constructor(destination: Subscriber<T[]>, private bufferSize: number, private startBufferEvery: number) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    const { bufferSize, startBufferEvery, buffers, count } = this;\n\n    this.count++;\n    if (count % startBufferEvery === 0) {\n      buffers.push([]);\n    }\n\n    for (let i = buffers.length; i--; ) {\n      const buffer = buffers[i];\n      buffer.push(value);\n      if (buffer.length === bufferSize) {\n        buffers.splice(i, 1);\n        this.destination.next(buffer);\n      }\n    }\n  }\n\n  protected _complete(): void {\n    const { buffers, destination } = this;\n\n    while (buffers.length > 0) {\n      let buffer = buffers.shift();\n      if (buffer.length > 0) {\n        destination.next(buffer);\n      }\n    }\n    super._complete();\n  }\n\n}\n","import { IScheduler } from '../Scheduler';\nimport { Action } from '../scheduler/Action';\nimport { Operator } from '../Operator';\nimport { async } from '../scheduler/async';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { isScheduler } from '../util/isScheduler';\nimport { OperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function bufferTime<T>(bufferTimeSpan: number, scheduler?: IScheduler): OperatorFunction<T, T[]>;\nexport function bufferTime<T>(bufferTimeSpan: number, bufferCreationInterval: number, scheduler?: IScheduler): OperatorFunction<T, T[]>;\nexport function bufferTime<T>(bufferTimeSpan: number, bufferCreationInterval: number, maxBufferSize: number, scheduler?: IScheduler): OperatorFunction<T, T[]>;\n/* tslint:enable:max-line-length */\n\n/**\n * Buffers the source Observable values for a specific time period.\n *\n * <span class=\"informal\">Collects values from the past as an array, and emits\n * those arrays periodically in time.</span>\n *\n * <img src=\"./img/bufferTime.png\" width=\"100%\">\n *\n * Buffers values from the source for a specific time duration `bufferTimeSpan`.\n * Unless the optional argument `bufferCreationInterval` is given, it emits and\n * resets the buffer every `bufferTimeSpan` milliseconds. If\n * `bufferCreationInterval` is given, this operator opens the buffer every\n * `bufferCreationInterval` milliseconds and closes (emits and resets) the\n * buffer every `bufferTimeSpan` milliseconds. When the optional argument\n * `maxBufferSize` is specified, the buffer will be closed either after\n * `bufferTimeSpan` milliseconds or when it contains `maxBufferSize` elements.\n *\n * @example <caption>Every second, emit an array of the recent click events</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var buffered = clicks.bufferTime(1000);\n * buffered.subscribe(x => console.log(x));\n *\n * @example <caption>Every 5 seconds, emit the click events from the next 2 seconds</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var buffered = clicks.bufferTime(2000, 5000);\n * buffered.subscribe(x => console.log(x));\n *\n * @see {@link buffer}\n * @see {@link bufferCount}\n * @see {@link bufferToggle}\n * @see {@link bufferWhen}\n * @see {@link windowTime}\n *\n * @param {number} bufferTimeSpan The amount of time to fill each buffer array.\n * @param {number} [bufferCreationInterval] The interval at which to start new\n * buffers.\n * @param {number} [maxBufferSize] The maximum buffer size.\n * @param {Scheduler} [scheduler=async] The scheduler on which to schedule the\n * intervals that determine buffer boundaries.\n * @return {Observable<T[]>} An observable of arrays of buffered values.\n * @method bufferTime\n * @owner Observable\n */\nexport function bufferTime<T>(bufferTimeSpan: number): OperatorFunction<T, T[]> {\n  let length: number = arguments.length;\n\n  let scheduler: IScheduler = async;\n  if (isScheduler(arguments[arguments.length - 1])) {\n    scheduler = arguments[arguments.length - 1];\n    length--;\n  }\n\n  let bufferCreationInterval: number = null;\n  if (length >= 2) {\n    bufferCreationInterval = arguments[1];\n  }\n\n  let maxBufferSize: number = Number.POSITIVE_INFINITY;\n  if (length >= 3) {\n    maxBufferSize = arguments[2];\n  }\n\n  return function bufferTimeOperatorFunction(source: Observable<T>) {\n    return source.lift(new BufferTimeOperator<T>(bufferTimeSpan, bufferCreationInterval, maxBufferSize, scheduler));\n  };\n}\n\nclass BufferTimeOperator<T> implements Operator<T, T[]> {\n  constructor(private bufferTimeSpan: number,\n              private bufferCreationInterval: number,\n              private maxBufferSize: number,\n              private scheduler: IScheduler) {\n  }\n\n  call(subscriber: Subscriber<T[]>, source: any): any {\n    return source.subscribe(new BufferTimeSubscriber(\n      subscriber, this.bufferTimeSpan, this.bufferCreationInterval, this.maxBufferSize, this.scheduler\n    ));\n  }\n}\n\nclass Context<T> {\n  buffer: T[] = [];\n  closeAction: Subscription;\n}\n\ntype CreationState<T> = {\n  bufferTimeSpan: number;\n  bufferCreationInterval: number,\n  subscriber: BufferTimeSubscriber<T>;\n  scheduler: IScheduler;\n};\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass BufferTimeSubscriber<T> extends Subscriber<T> {\n  private contexts: Array<Context<T>> = [];\n  private timespanOnly: boolean;\n\n  constructor(destination: Subscriber<T[]>,\n              private bufferTimeSpan: number,\n              private bufferCreationInterval: number,\n              private maxBufferSize: number,\n              private scheduler: IScheduler) {\n    super(destination);\n    const context = this.openContext();\n    this.timespanOnly = bufferCreationInterval == null || bufferCreationInterval < 0;\n    if (this.timespanOnly) {\n      const timeSpanOnlyState = { subscriber: this, context, bufferTimeSpan };\n      this.add(context.closeAction = scheduler.schedule(dispatchBufferTimeSpanOnly, bufferTimeSpan, timeSpanOnlyState));\n    } else {\n      const closeState = { subscriber: this, context };\n      const creationState: CreationState<T> = { bufferTimeSpan, bufferCreationInterval, subscriber: this, scheduler };\n      this.add(context.closeAction = scheduler.schedule(dispatchBufferClose, bufferTimeSpan, closeState));\n      this.add(scheduler.schedule(dispatchBufferCreation, bufferCreationInterval, creationState));\n    }\n  }\n\n  protected _next(value: T) {\n    const contexts = this.contexts;\n    const len = contexts.length;\n    let filledBufferContext: Context<T>;\n    for (let i = 0; i < len; i++) {\n      const context = contexts[i];\n      const buffer = context.buffer;\n      buffer.push(value);\n      if (buffer.length == this.maxBufferSize) {\n        filledBufferContext = context;\n      }\n    }\n\n    if (filledBufferContext) {\n      this.onBufferFull(filledBufferContext);\n    }\n  }\n\n  protected _error(err: any) {\n    this.contexts.length = 0;\n    super._error(err);\n  }\n\n  protected _complete() {\n    const { contexts, destination } = this;\n    while (contexts.length > 0) {\n      const context = contexts.shift();\n      destination.next(context.buffer);\n    }\n    super._complete();\n  }\n\n  protected _unsubscribe() {\n    this.contexts = null;\n  }\n\n  protected onBufferFull(context: Context<T>) {\n    this.closeContext(context);\n    const closeAction = context.closeAction;\n    closeAction.unsubscribe();\n    this.remove(closeAction);\n\n    if (!this.closed && this.timespanOnly) {\n      context = this.openContext();\n      const bufferTimeSpan = this.bufferTimeSpan;\n      const timeSpanOnlyState = { subscriber: this, context, bufferTimeSpan };\n      this.add(context.closeAction = this.scheduler.schedule(dispatchBufferTimeSpanOnly, bufferTimeSpan, timeSpanOnlyState));\n    }\n  }\n\n  openContext(): Context<T> {\n    const context: Context<T> = new Context<T>();\n    this.contexts.push(context);\n    return context;\n  }\n\n  closeContext(context: Context<T>) {\n    this.destination.next(context.buffer);\n    const contexts = this.contexts;\n\n    const spliceIndex = contexts ? contexts.indexOf(context) : -1;\n    if (spliceIndex >= 0) {\n      contexts.splice(contexts.indexOf(context), 1);\n    }\n  }\n}\n\nfunction dispatchBufferTimeSpanOnly(this: Action<any>, state: any) {\n  const subscriber: BufferTimeSubscriber<any> = state.subscriber;\n\n  const prevContext = state.context;\n  if (prevContext) {\n    subscriber.closeContext(prevContext);\n  }\n\n  if (!subscriber.closed) {\n    state.context = subscriber.openContext();\n    state.context.closeAction = this.schedule(state, state.bufferTimeSpan);\n  }\n}\n\ninterface DispatchArg<T> {\n  subscriber: BufferTimeSubscriber<T>;\n  context: Context<T>;\n}\n\nfunction dispatchBufferCreation<T>(this: Action<CreationState<T>>, state: CreationState<T>) {\n  const { bufferCreationInterval, bufferTimeSpan, subscriber, scheduler } = state;\n  const context = subscriber.openContext();\n  const action = <Action<CreationState<T>>>this;\n  if (!subscriber.closed) {\n    subscriber.add(context.closeAction = scheduler.schedule<DispatchArg<T>>(dispatchBufferClose, bufferTimeSpan, { subscriber, context }));\n    action.schedule(state, bufferCreationInterval);\n  }\n}\n\nfunction dispatchBufferClose<T>(arg: DispatchArg<T>) {\n  const { subscriber, context } = arg;\n  subscriber.closeContext(context);\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Directive, ElementRef, Renderer2, forwardRef} from '@angular/core';\n\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from './control_value_accessor';\n\nexport const /** @type {?} */ NUMBER_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => NumberValueAccessor),\n  multi: true\n};\n/**\n * The accessor for writing a number value and listening to changes that is used by the\n * {\\@link NgModel}, {\\@link FormControlDirective}, and {\\@link FormControlName} directives.\n * \n *  ### Example\n *  ```\n *  <input type=\"number\" [(ngModel)]=\"age\">\n *  ```\n */\nexport class NumberValueAccessor implements ControlValueAccessor {\n  onChange = (_: any) => {};\n  onTouched = () => {};\n/**\n * @param {?} _renderer\n * @param {?} _elementRef\n */\nconstructor(private _renderer: Renderer2,\nprivate _elementRef: ElementRef) {}\n/**\n * @param {?} value\n * @return {?}\n */\nwriteValue(value: number): void {\n    // The value needs to be normalized for IE9, otherwise it is set to 'null' when null\n    const /** @type {?} */ normalizedValue = value == null ? '' : value;\n    this._renderer.setProperty(this._elementRef.nativeElement, 'value', normalizedValue);\n  }\n/**\n * @param {?} fn\n * @return {?}\n */\nregisterOnChange(fn: (_: number|null) => void): void {\n    this.onChange = (value) => { fn(value == '' ? null : parseFloat(value)); };\n  }\n/**\n * @param {?} fn\n * @return {?}\n */\nregisterOnTouched(fn: () => void): void { this.onTouched = fn; }\n/**\n * @param {?} isDisabled\n * @return {?}\n */\nsetDisabledState(isDisabled: boolean): void {\n    this._renderer.setProperty(this._elementRef.nativeElement, 'disabled', isDisabled);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector:\n      'input[type=number][formControlName],input[type=number][formControl],input[type=number][ngModel]',\n  host: {\n    '(change)': 'onChange($event.target.value)',\n    '(input)': 'onChange($event.target.value)',\n    '(blur)': 'onTouched()'\n  },\n  providers: [NUMBER_VALUE_ACCESSOR]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Renderer2, },\n{type: ElementRef, },\n];\n}\n\nfunction NumberValueAccessor_tsickle_Closure_declarations() {\n/** @type {?} */\nNumberValueAccessor.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nNumberValueAccessor.ctorParameters;\n/** @type {?} */\nNumberValueAccessor.prototype.onChange;\n/** @type {?} */\nNumberValueAccessor.prototype.onTouched;\n/** @type {?} */\nNumberValueAccessor.prototype._renderer;\n/** @type {?} */\nNumberValueAccessor.prototype._elementRef;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\n\nimport {AbstractControlDirective} from './abstract_control_directive';\nimport {ControlContainer} from './control_container';\nimport {ControlValueAccessor} from './control_value_accessor';\nimport {AsyncValidator, AsyncValidatorFn, Validator, ValidatorFn} from './validators';\n/**\n * @return {?}\n */\nfunction unimplemented(): any {\n  throw new Error('unimplemented');\n}\n/**\n * A base class that all control directive extend.\n * It binds a {\\@link FormControl} object to a DOM element.\n * \n * Used internally by Angular forms.\n * \n * \\@stable\n * @abstract\n */\nexport abstract class NgControl extends AbstractControlDirective {\n/**\n * \\@internal\n */\n_parent: ControlContainer|null = null;\n  name: string|null = null;\n  valueAccessor: ControlValueAccessor|null = null;\n/**\n * \\@internal\n */\n_rawValidators: Array<Validator|ValidatorFn> = [];\n/**\n * \\@internal\n */\n_rawAsyncValidators: Array<AsyncValidator|AsyncValidatorFn> = [];\n/**\n * @return {?}\n */\nget validator(): ValidatorFn|null { return /** @type {?} */(( <ValidatorFn>unimplemented())); }\n/**\n * @return {?}\n */\nget asyncValidator(): AsyncValidatorFn|null { return /** @type {?} */(( <AsyncValidatorFn>unimplemented())); }\n/**\n * @abstract\n * @param {?} newValue\n * @return {?}\n */\nviewToModelUpdate(newValue: any) {}\n}\n\nfunction NgControl_tsickle_Closure_declarations() {\n/**\n * \\@internal\n * @type {?}\n */\nNgControl.prototype._parent;\n/** @type {?} */\nNgControl.prototype.name;\n/** @type {?} */\nNgControl.prototype.valueAccessor;\n/**\n * \\@internal\n * @type {?}\n */\nNgControl.prototype._rawValidators;\n/**\n * \\@internal\n * @type {?}\n */\nNgControl.prototype._rawAsyncValidators;\n}\n\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Directive, ElementRef, Injectable, Injector, Input, OnDestroy, OnInit, Renderer2, forwardRef} from '@angular/core';\n\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from './control_value_accessor';\nimport {NgControl} from './ng_control';\n\nexport const /** @type {?} */ RADIO_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => RadioControlValueAccessor),\n  multi: true\n};\n/**\n * Internal class used by Angular to uncheck radio buttons with the matching name.\n */\nexport class RadioControlRegistry {\nprivate _accessors: any[] = [];\n/**\n * @param {?} control\n * @param {?} accessor\n * @return {?}\n */\nadd(control: NgControl, accessor: RadioControlValueAccessor) {\n    this._accessors.push([control, accessor]);\n  }\n/**\n * @param {?} accessor\n * @return {?}\n */\nremove(accessor: RadioControlValueAccessor) {\n    for (let /** @type {?} */ i = this._accessors.length - 1; i >= 0; --i) {\n      if (this._accessors[i][1] === accessor) {\n        this._accessors.splice(i, 1);\n        return;\n      }\n    }\n  }\n/**\n * @param {?} accessor\n * @return {?}\n */\nselect(accessor: RadioControlValueAccessor) {\n    this._accessors.forEach((c) => {\n      if (this._isSameGroup(c, accessor) && c[1] !== accessor) {\n        c[1].fireUncheck(accessor.value);\n      }\n    });\n  }\n/**\n * @param {?} controlPair\n * @param {?} accessor\n * @return {?}\n */\nprivate _isSameGroup(\n      controlPair: [NgControl, RadioControlValueAccessor],\n      accessor: RadioControlValueAccessor): boolean {\n    if (!controlPair[0].control) return false;\n    return controlPair[0]._parent === accessor._control._parent &&\n        controlPair[1].name === accessor.name;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction RadioControlRegistry_tsickle_Closure_declarations() {\n/** @type {?} */\nRadioControlRegistry.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nRadioControlRegistry.ctorParameters;\n/** @type {?} */\nRadioControlRegistry.prototype._accessors;\n}\n\n/**\n * \\@whatItDoes Writes radio control values and listens to radio control changes.\n * \n * Used by {\\@link NgModel}, {\\@link FormControlDirective}, and {\\@link FormControlName}\n * to keep the view synced with the {\\@link FormControl} model.\n * \n * \\@howToUse \n * \n * If you have imported the {\\@link FormsModule} or the {\\@link ReactiveFormsModule}, this\n * value accessor will be active on any radio control that has a form directive. You do\n * **not** need to add a special selector to activate it.\n * \n * ### How to use radio buttons with form directives\n * \n * To use radio buttons in a template-driven form, you'll want to ensure that radio buttons\n * in the same group have the same `name` attribute.  Radio buttons with different `name`\n * attributes do not affect each other.\n * \n * {\\@example forms/ts/radioButtons/radio_button_example.ts region='TemplateDriven'}\n * \n * When using radio buttons in a reactive form, radio buttons in the same group should have the\n * same `formControlName`. You can also add a `name` attribute, but it's optional.\n * \n * {\\@example forms/ts/reactiveRadioButtons/reactive_radio_button_example.ts region='Reactive'}\n * \n *  * **npm package**: `\\@angular/forms`\n * \n *  \\@stable\n */\nexport class RadioControlValueAccessor implements ControlValueAccessor,\n    OnDestroy, OnInit {\n/**\n * \\@internal\n */\n_state: boolean;\n/**\n * \\@internal\n */\n_control: NgControl;\n/**\n * \\@internal\n */\n_fn: Function;\n  onChange = () => {};\n  onTouched = () => {};\n\n   name: string;\n   formControlName: string;\n   value: any;\n/**\n * @param {?} _renderer\n * @param {?} _elementRef\n * @param {?} _registry\n * @param {?} _injector\n */\nconstructor(\nprivate _renderer: Renderer2,\nprivate _elementRef: ElementRef,\nprivate _registry: RadioControlRegistry,\nprivate _injector: Injector) {}\n/**\n * @return {?}\n */\nngOnInit(): void {\n    this._control = this._injector.get(NgControl);\n    this._checkName();\n    this._registry.add(this._control, this);\n  }\n/**\n * @return {?}\n */\nngOnDestroy(): void { this._registry.remove(this); }\n/**\n * @param {?} value\n * @return {?}\n */\nwriteValue(value: any): void {\n    this._state = value === this.value;\n    this._renderer.setProperty(this._elementRef.nativeElement, 'checked', this._state);\n  }\n/**\n * @param {?} fn\n * @return {?}\n */\nregisterOnChange(fn: (_: any) => {}): void {\n    this._fn = fn;\n    this.onChange = () => {\n      fn(this.value);\n      this._registry.select(this);\n    };\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nfireUncheck(value: any): void { this.writeValue(value); }\n/**\n * @param {?} fn\n * @return {?}\n */\nregisterOnTouched(fn: () => {}): void { this.onTouched = fn; }\n/**\n * @param {?} isDisabled\n * @return {?}\n */\nsetDisabledState(isDisabled: boolean): void {\n    this._renderer.setProperty(this._elementRef.nativeElement, 'disabled', isDisabled);\n  }\n/**\n * @return {?}\n */\nprivate _checkName(): void {\n    if (this.name && this.formControlName && this.name !== this.formControlName) {\n      this._throwNameError();\n    }\n    if (!this.name && this.formControlName) this.name = this.formControlName;\n  }\n/**\n * @return {?}\n */\nprivate _throwNameError(): void {\n    throw new Error(`\n      If you define both a name and a formControlName attribute on your radio button, their values\n      must match. Ex: <input type=\"radio\" formControlName=\"food\" name=\"food\">\n    `);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector:\n      'input[type=radio][formControlName],input[type=radio][formControl],input[type=radio][ngModel]',\n  host: {'(change)': 'onChange()', '(blur)': 'onTouched()'},\n  providers: [RADIO_VALUE_ACCESSOR]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Renderer2, },\n{type: ElementRef, },\n{type: RadioControlRegistry, },\n{type: Injector, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'name': [{ type: Input },],\n'formControlName': [{ type: Input },],\n'value': [{ type: Input },],\n};\n}\n\nfunction RadioControlValueAccessor_tsickle_Closure_declarations() {\n/** @type {?} */\nRadioControlValueAccessor.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nRadioControlValueAccessor.ctorParameters;\n/** @type {?} */\nRadioControlValueAccessor.propDecorators;\n/**\n * \\@internal\n * @type {?}\n */\nRadioControlValueAccessor.prototype._state;\n/**\n * \\@internal\n * @type {?}\n */\nRadioControlValueAccessor.prototype._control;\n/**\n * \\@internal\n * @type {?}\n */\nRadioControlValueAccessor.prototype._fn;\n/** @type {?} */\nRadioControlValueAccessor.prototype.onChange;\n/** @type {?} */\nRadioControlValueAccessor.prototype.onTouched;\n/** @type {?} */\nRadioControlValueAccessor.prototype.name;\n/** @type {?} */\nRadioControlValueAccessor.prototype.formControlName;\n/** @type {?} */\nRadioControlValueAccessor.prototype.value;\n/** @type {?} */\nRadioControlValueAccessor.prototype._renderer;\n/** @type {?} */\nRadioControlValueAccessor.prototype._elementRef;\n/** @type {?} */\nRadioControlValueAccessor.prototype._registry;\n/** @type {?} */\nRadioControlValueAccessor.prototype._injector;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Directive, ElementRef, Provider, Renderer2, forwardRef} from '@angular/core';\n\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from './control_value_accessor';\n\nexport const /** @type {?} */ RANGE_VALUE_ACCESSOR: Provider = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => RangeValueAccessor),\n  multi: true\n};\n/**\n * The accessor for writing a range value and listening to changes that is used by the\n * {\\@link NgModel}, {\\@link FormControlDirective}, and {\\@link FormControlName} directives.\n * \n *  ### Example\n *  ```\n *  <input type=\"range\" [(ngModel)]=\"age\" >\n *  ```\n */\nexport class RangeValueAccessor implements ControlValueAccessor {\n  onChange = (_: any) => {};\n  onTouched = () => {};\n/**\n * @param {?} _renderer\n * @param {?} _elementRef\n */\nconstructor(private _renderer: Renderer2,\nprivate _elementRef: ElementRef) {}\n/**\n * @param {?} value\n * @return {?}\n */\nwriteValue(value: any): void {\n    this._renderer.setProperty(this._elementRef.nativeElement, 'value', parseFloat(value));\n  }\n/**\n * @param {?} fn\n * @return {?}\n */\nregisterOnChange(fn: (_: number|null) => void): void {\n    this.onChange = (value) => { fn(value == '' ? null : parseFloat(value)); };\n  }\n/**\n * @param {?} fn\n * @return {?}\n */\nregisterOnTouched(fn: () => void): void { this.onTouched = fn; }\n/**\n * @param {?} isDisabled\n * @return {?}\n */\nsetDisabledState(isDisabled: boolean): void {\n    this._renderer.setProperty(this._elementRef.nativeElement, 'disabled', isDisabled);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector:\n      'input[type=range][formControlName],input[type=range][formControl],input[type=range][ngModel]',\n  host: {\n    '(change)': 'onChange($event.target.value)',\n    '(input)': 'onChange($event.target.value)',\n    '(blur)': 'onTouched()'\n  },\n  providers: [RANGE_VALUE_ACCESSOR]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Renderer2, },\n{type: ElementRef, },\n];\n}\n\nfunction RangeValueAccessor_tsickle_Closure_declarations() {\n/** @type {?} */\nRangeValueAccessor.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nRangeValueAccessor.ctorParameters;\n/** @type {?} */\nRangeValueAccessor.prototype.onChange;\n/** @type {?} */\nRangeValueAccessor.prototype.onTouched;\n/** @type {?} */\nRangeValueAccessor.prototype._renderer;\n/** @type {?} */\nRangeValueAccessor.prototype._elementRef;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Directive, ElementRef, Host, Input, OnDestroy, Optional, Provider, Renderer2, forwardRef, ɵlooseIdentical as looseIdentical} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from './control_value_accessor';\n\nexport const /** @type {?} */ SELECT_VALUE_ACCESSOR: Provider = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => SelectControlValueAccessor),\n  multi: true\n};\n/**\n * @param {?} id\n * @param {?} value\n * @return {?}\n */\nfunction _buildValueString(id: string | null, value: any): string {\n  if (id == null) return `${value}`;\n  if (value && typeof value === 'object') value = 'Object';\n  return `${id}: ${value}`.slice(0, 50);\n}\n/**\n * @param {?} valueString\n * @return {?}\n */\nfunction _extractId(valueString: string): string {\n  return valueString.split(':')[0];\n}\n/**\n * \\@whatItDoes Writes values and listens to changes on a select element.\n * \n * Used by {\\@link NgModel}, {\\@link FormControlDirective}, and {\\@link FormControlName}\n * to keep the view synced with the {\\@link FormControl} model.\n * \n * \\@howToUse \n * \n * If you have imported the {\\@link FormsModule} or the {\\@link ReactiveFormsModule}, this\n * value accessor will be active on any select control that has a form directive. You do\n * **not** need to add a special selector to activate it.\n * \n * ### How to use select controls with form directives\n * \n * To use a select in a template-driven form, simply add an `ngModel` and a `name`\n * attribute to the main `<select>` tag.\n * \n * If your option values are simple strings, you can bind to the normal `value` property\n * on the option.  If your option values happen to be objects (and you'd like to save the\n * selection in your form as an object), use `ngValue` instead:\n * \n * {\\@example forms/ts/selectControl/select_control_example.ts region='Component'}\n * \n * In reactive forms, you'll also want to add your form directive (`formControlName` or\n * `formControl`) on the main `<select>` tag. Like in the former example, you have the\n * choice of binding to the  `value` or `ngValue` property on the select's options.\n * \n * {\\@example forms/ts/reactiveSelectControl/reactive_select_control_example.ts region='Component'}\n * \n * ### Caveat: Option selection\n * \n * Angular uses object identity to select option. It's possible for the identities of items\n * to change while the data does not. This can happen, for example, if the items are produced\n * from an RPC to the server, and that RPC is re-run. Even if the data hasn't changed, the\n * second response will produce objects with different identities.\n * \n * To customize the default option comparison algorithm, `<select>` supports `compareWith` input.\n * `compareWith` takes a **function** which has two arguments: `option1` and `option2`.\n * If `compareWith` is given, Angular selects option by the return value of the function.\n * \n * #### Syntax\n * \n * ```\n * <select [compareWith]=\"compareFn\"  [(ngModel)]=\"selectedCountries\">\n *     <option *ngFor=\"let country of countries\" [ngValue]=\"country\">\n *         {{country.name}}\n *     </option>\n * </select>\n * \n * compareFn(c1: Country, c2: Country): boolean {\n *     return c1 && c2 ? c1.id === c2.id : c1 === c2;\n * }\n * ```\n * \n * Note: We listen to the 'change' event because 'input' events aren't fired\n * for selects in Firefox and IE:\n * https://bugzilla.mozilla.org/show_bug.cgi?id=1024350\n * https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/4660045/\n * \n * * **npm package**: `\\@angular/forms`\n * \n * \\@stable\n */\nexport class SelectControlValueAccessor implements ControlValueAccessor {\n  value: any;\n/**\n * \\@internal\n */\n_optionMap: Map<string, any> = new Map<string, any>();\n/**\n * \\@internal\n */\n_idCounter: number = 0;\n\n  onChange = (_: any) => {};\n  onTouched = () => {};\n/**\n * @param {?} fn\n * @return {?}\n */\nset compareWith(fn: (o1: any, o2: any) => boolean) {\n    if (typeof fn !== 'function') {\n      throw new Error(`compareWith must be a function, but received ${JSON.stringify(fn)}`);\n    }\n    this._compareWith = fn;\n  }\nprivate _compareWith: (o1: any, o2: any) => boolean = looseIdentical;\n/**\n * @param {?} _renderer\n * @param {?} _elementRef\n */\nconstructor(private _renderer: Renderer2,\nprivate _elementRef: ElementRef) {}\n/**\n * @param {?} value\n * @return {?}\n */\nwriteValue(value: any): void {\n    this.value = value;\n    const /** @type {?} */ id: string|null = this._getOptionId(value);\n    if (id == null) {\n      this._renderer.setProperty(this._elementRef.nativeElement, 'selectedIndex', -1);\n    }\n    const /** @type {?} */ valueString = _buildValueString(id, value);\n    this._renderer.setProperty(this._elementRef.nativeElement, 'value', valueString);\n  }\n/**\n * @param {?} fn\n * @return {?}\n */\nregisterOnChange(fn: (value: any) => any): void {\n    this.onChange = (valueString: string) => {\n      this.value = this._getOptionValue(valueString);\n      fn(this.value);\n    };\n  }\n/**\n * @param {?} fn\n * @return {?}\n */\nregisterOnTouched(fn: () => any): void { this.onTouched = fn; }\n/**\n * @param {?} isDisabled\n * @return {?}\n */\nsetDisabledState(isDisabled: boolean): void {\n    this._renderer.setProperty(this._elementRef.nativeElement, 'disabled', isDisabled);\n  }\n/**\n * \\@internal\n * @return {?}\n */\n_registerOption(): string { return (this._idCounter++).toString(); }\n/**\n * \\@internal\n * @param {?} value\n * @return {?}\n */\n_getOptionId(value: any): string|null {\n    for (const /** @type {?} */ id of Array.from(this._optionMap.keys())) {\n      if (this._compareWith(this._optionMap.get(id), value)) return id;\n    }\n    return null;\n  }\n/**\n * \\@internal\n * @param {?} valueString\n * @return {?}\n */\n_getOptionValue(valueString: string): any {\n    const /** @type {?} */ id: string = _extractId(valueString);\n    return this._optionMap.has(id) ? this._optionMap.get(id) : valueString;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector:\n      'select:not([multiple])[formControlName],select:not([multiple])[formControl],select:not([multiple])[ngModel]',\n  host: {'(change)': 'onChange($event.target.value)', '(blur)': 'onTouched()'},\n  providers: [SELECT_VALUE_ACCESSOR]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Renderer2, },\n{type: ElementRef, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'compareWith': [{ type: Input },],\n};\n}\n\nfunction SelectControlValueAccessor_tsickle_Closure_declarations() {\n/** @type {?} */\nSelectControlValueAccessor.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nSelectControlValueAccessor.ctorParameters;\n/** @type {?} */\nSelectControlValueAccessor.propDecorators;\n/** @type {?} */\nSelectControlValueAccessor.prototype.value;\n/**\n * \\@internal\n * @type {?}\n */\nSelectControlValueAccessor.prototype._optionMap;\n/**\n * \\@internal\n * @type {?}\n */\nSelectControlValueAccessor.prototype._idCounter;\n/** @type {?} */\nSelectControlValueAccessor.prototype.onChange;\n/** @type {?} */\nSelectControlValueAccessor.prototype.onTouched;\n/** @type {?} */\nSelectControlValueAccessor.prototype._compareWith;\n/** @type {?} */\nSelectControlValueAccessor.prototype._renderer;\n/** @type {?} */\nSelectControlValueAccessor.prototype._elementRef;\n}\n\n/**\n * \\@whatItDoes Marks `<option>` as dynamic, so Angular can be notified when options change.\n * \n * \\@howToUse \n * \n * See docs for {\\@link SelectControlValueAccessor} for usage examples.\n * \n * \\@stable\n */\nexport class NgSelectOption implements OnDestroy {\n  id: string;\n/**\n * @param {?} _element\n * @param {?} _renderer\n * @param {?} _select\n */\nconstructor(\nprivate _element: ElementRef,\nprivate _renderer: Renderer2,\nprivate _select: SelectControlValueAccessor) {\n    if (this._select) this.id = this._select._registerOption();\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nset ngValue(value: any) {\n    if (this._select == null) return;\n    this._select._optionMap.set(this.id, value);\n    this._setElementValue(_buildValueString(this.id, value));\n    this._select.writeValue(this._select.value);\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nset value(value: any) {\n    this._setElementValue(value);\n    if (this._select) this._select.writeValue(this._select.value);\n  }\n/**\n * \\@internal\n * @param {?} value\n * @return {?}\n */\n_setElementValue(value: string): void {\n    this._renderer.setProperty(this._element.nativeElement, 'value', value);\n  }\n/**\n * @return {?}\n */\nngOnDestroy(): void {\n    if (this._select) {\n      this._select._optionMap.delete(this.id);\n      this._select.writeValue(this._select.value);\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{selector: 'option'}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: Renderer2, },\n{type: SelectControlValueAccessor, decorators: [{ type: Optional }, { type: Host }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'ngValue': [{ type: Input, args: ['ngValue', ] },],\n'value': [{ type: Input, args: ['value', ] },],\n};\n}\n\nfunction NgSelectOption_tsickle_Closure_declarations() {\n/** @type {?} */\nNgSelectOption.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nNgSelectOption.ctorParameters;\n/** @type {?} */\nNgSelectOption.propDecorators;\n/** @type {?} */\nNgSelectOption.prototype.id;\n/** @type {?} */\nNgSelectOption.prototype._element;\n/** @type {?} */\nNgSelectOption.prototype._renderer;\n/** @type {?} */\nNgSelectOption.prototype._select;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Directive, ElementRef, Host, Input, OnDestroy, Optional, Provider, Renderer2, forwardRef, ɵlooseIdentical as looseIdentical} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from './control_value_accessor';\n\nexport const /** @type {?} */ SELECT_MULTIPLE_VALUE_ACCESSOR: Provider = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => SelectMultipleControlValueAccessor),\n  multi: true\n};\n/**\n * @param {?} id\n * @param {?} value\n * @return {?}\n */\nfunction _buildValueString(id: string, value: any): string {\n  if (id == null) return `${value}`;\n  if (typeof value === 'string') value = `'${value}'`;\n  if (value && typeof value === 'object') value = 'Object';\n  return `${id}: ${value}`.slice(0, 50);\n}\n/**\n * @param {?} valueString\n * @return {?}\n */\nfunction _extractId(valueString: string): string {\n  return valueString.split(':')[0];\n}\n\n/** Mock interface for HTML Options */\ninterface HTMLOption {\n  value: string;\n  selected: boolean;\n}\n/**\n * Mock interface for HTMLCollection\n * @abstract\n */\nabstract class HTMLCollection {\n  length: number;\n/**\n * @abstract\n * @param {?} _\n * @return {?}\n */\nitem(_: number) {}\n}\n\nfunction HTMLCollection_tsickle_Closure_declarations() {\n/** @type {?} */\nHTMLCollection.prototype.length;\n}\n\n/**\n * The accessor for writing a value and listening to changes on a select element.\n * \n *  ### Caveat: Options selection\n * \n * Angular uses object identity to select options. It's possible for the identities of items\n * to change while the data does not. This can happen, for example, if the items are produced\n * from an RPC to the server, and that RPC is re-run. Even if the data hasn't changed, the\n * second response will produce objects with different identities.\n * \n * To customize the default option comparison algorithm, `<select multiple>` supports `compareWith`\n * input. `compareWith` takes a **function** which has two arguments: `option1` and `option2`.\n * If `compareWith` is given, Angular selects options by the return value of the function.\n * \n * #### Syntax\n * \n * ```\n * <select multiple [compareWith]=\"compareFn\"  [(ngModel)]=\"selectedCountries\">\n *     <option *ngFor=\"let country of countries\" [ngValue]=\"country\">\n *         {{country.name}}\n *     </option>\n * </select>\n * \n * compareFn(c1: Country, c2: Country): boolean {\n *     return c1 && c2 ? c1.id === c2.id : c1 === c2;\n * }\n * ```\n * \n * \\@stable\n */\nexport class SelectMultipleControlValueAccessor implements ControlValueAccessor {\n  value: any;\n/**\n * \\@internal\n */\n_optionMap: Map<string, NgSelectMultipleOption> = new Map<string, NgSelectMultipleOption>();\n/**\n * \\@internal\n */\n_idCounter: number = 0;\n\n  onChange = (_: any) => {};\n  onTouched = () => {};\n/**\n * @param {?} fn\n * @return {?}\n */\nset compareWith(fn: (o1: any, o2: any) => boolean) {\n    if (typeof fn !== 'function') {\n      throw new Error(`compareWith must be a function, but received ${JSON.stringify(fn)}`);\n    }\n    this._compareWith = fn;\n  }\nprivate _compareWith: (o1: any, o2: any) => boolean = looseIdentical;\n/**\n * @param {?} _renderer\n * @param {?} _elementRef\n */\nconstructor(private _renderer: Renderer2,\nprivate _elementRef: ElementRef) {}\n/**\n * @param {?} value\n * @return {?}\n */\nwriteValue(value: any): void {\n    this.value = value;\n    let /** @type {?} */ optionSelectedStateSetter: (opt: NgSelectMultipleOption, o: any) => void;\n    if (Array.isArray(value)) {\n      // convert values to ids\n      const /** @type {?} */ ids = value.map((v) => this._getOptionId(v));\n      optionSelectedStateSetter = (opt, o) => { opt._setSelected(ids.indexOf(o.toString()) > -1); };\n    } else {\n      optionSelectedStateSetter = (opt, o) => { opt._setSelected(false); };\n    }\n    this._optionMap.forEach(optionSelectedStateSetter);\n  }\n/**\n * @param {?} fn\n * @return {?}\n */\nregisterOnChange(fn: (value: any) => any): void {\n    this.onChange = (_: any) => {\n      const /** @type {?} */ selected: Array<any> = [];\n      if (_.hasOwnProperty('selectedOptions')) {\n        const /** @type {?} */ options: HTMLCollection = _.selectedOptions;\n        for (let /** @type {?} */ i = 0; i < options.length; i++) {\n          const /** @type {?} */ opt: any = options.item(i);\n          const /** @type {?} */ val: any = this._getOptionValue(opt.value);\n          selected.push(val);\n        }\n      }\n      // Degrade on IE\n      else {\n        const /** @type {?} */ options: HTMLCollection = /** @type {?} */(( <HTMLCollection>_.options));\n        for (let /** @type {?} */ i = 0; i < options.length; i++) {\n          const /** @type {?} */ opt: HTMLOption = options.item(i);\n          if (opt.selected) {\n            const /** @type {?} */ val: any = this._getOptionValue(opt.value);\n            selected.push(val);\n          }\n        }\n      }\n      this.value = selected;\n      fn(selected);\n    };\n  }\n/**\n * @param {?} fn\n * @return {?}\n */\nregisterOnTouched(fn: () => any): void { this.onTouched = fn; }\n/**\n * @param {?} isDisabled\n * @return {?}\n */\nsetDisabledState(isDisabled: boolean): void {\n    this._renderer.setProperty(this._elementRef.nativeElement, 'disabled', isDisabled);\n  }\n/**\n * \\@internal\n * @param {?} value\n * @return {?}\n */\n_registerOption(value: NgSelectMultipleOption): string {\n    const /** @type {?} */ id: string = (this._idCounter++).toString();\n    this._optionMap.set(id, value);\n    return id;\n  }\n/**\n * \\@internal\n * @param {?} value\n * @return {?}\n */\n_getOptionId(value: any): string|null {\n    for (const /** @type {?} */ id of Array.from(this._optionMap.keys())) {\n      if (this._compareWith( /** @type {?} */((this._optionMap.get(id)))._value, value)) return id;\n    }\n    return null;\n  }\n/**\n * \\@internal\n * @param {?} valueString\n * @return {?}\n */\n_getOptionValue(valueString: string): any {\n    const /** @type {?} */ id: string = _extractId(valueString);\n    return this._optionMap.has(id) ? /** @type {?} */(( this._optionMap.get(id)))._value : valueString;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector:\n      'select[multiple][formControlName],select[multiple][formControl],select[multiple][ngModel]',\n  host: {'(change)': 'onChange($event.target)', '(blur)': 'onTouched()'},\n  providers: [SELECT_MULTIPLE_VALUE_ACCESSOR]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Renderer2, },\n{type: ElementRef, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'compareWith': [{ type: Input },],\n};\n}\n\nfunction SelectMultipleControlValueAccessor_tsickle_Closure_declarations() {\n/** @type {?} */\nSelectMultipleControlValueAccessor.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nSelectMultipleControlValueAccessor.ctorParameters;\n/** @type {?} */\nSelectMultipleControlValueAccessor.propDecorators;\n/** @type {?} */\nSelectMultipleControlValueAccessor.prototype.value;\n/**\n * \\@internal\n * @type {?}\n */\nSelectMultipleControlValueAccessor.prototype._optionMap;\n/**\n * \\@internal\n * @type {?}\n */\nSelectMultipleControlValueAccessor.prototype._idCounter;\n/** @type {?} */\nSelectMultipleControlValueAccessor.prototype.onChange;\n/** @type {?} */\nSelectMultipleControlValueAccessor.prototype.onTouched;\n/** @type {?} */\nSelectMultipleControlValueAccessor.prototype._compareWith;\n/** @type {?} */\nSelectMultipleControlValueAccessor.prototype._renderer;\n/** @type {?} */\nSelectMultipleControlValueAccessor.prototype._elementRef;\n}\n\n/**\n * Marks `<option>` as dynamic, so Angular can be notified when options change.\n * \n * ### Example\n * \n * ```\n * <select multiple name=\"city\" ngModel>\n *   <option *ngFor=\"let c of cities\" [value]=\"c\"></option>\n * </select>\n * ```\n */\nexport class NgSelectMultipleOption implements OnDestroy {\n  id: string;\n/**\n * \\@internal\n */\n_value: any;\n/**\n * @param {?} _element\n * @param {?} _renderer\n * @param {?} _select\n */\nconstructor(\nprivate _element: ElementRef,\nprivate _renderer: Renderer2,\nprivate _select: SelectMultipleControlValueAccessor) {\n    if (this._select) {\n      this.id = this._select._registerOption(this);\n    }\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nset ngValue(value: any) {\n    if (this._select == null) return;\n    this._value = value;\n    this._setElementValue(_buildValueString(this.id, value));\n    this._select.writeValue(this._select.value);\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nset value(value: any) {\n    if (this._select) {\n      this._value = value;\n      this._setElementValue(_buildValueString(this.id, value));\n      this._select.writeValue(this._select.value);\n    } else {\n      this._setElementValue(value);\n    }\n  }\n/**\n * \\@internal\n * @param {?} value\n * @return {?}\n */\n_setElementValue(value: string): void {\n    this._renderer.setProperty(this._element.nativeElement, 'value', value);\n  }\n/**\n * \\@internal\n * @param {?} selected\n * @return {?}\n */\n_setSelected(selected: boolean) {\n    this._renderer.setProperty(this._element.nativeElement, 'selected', selected);\n  }\n/**\n * @return {?}\n */\nngOnDestroy(): void {\n    if (this._select) {\n      this._select._optionMap.delete(this.id);\n      this._select.writeValue(this._select.value);\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{selector: 'option'}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: Renderer2, },\n{type: SelectMultipleControlValueAccessor, decorators: [{ type: Optional }, { type: Host }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'ngValue': [{ type: Input, args: ['ngValue', ] },],\n'value': [{ type: Input, args: ['value', ] },],\n};\n}\n\nfunction NgSelectMultipleOption_tsickle_Closure_declarations() {\n/** @type {?} */\nNgSelectMultipleOption.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nNgSelectMultipleOption.ctorParameters;\n/** @type {?} */\nNgSelectMultipleOption.propDecorators;\n/** @type {?} */\nNgSelectMultipleOption.prototype.id;\n/**\n * \\@internal\n * @type {?}\n */\nNgSelectMultipleOption.prototype._value;\n/** @type {?} */\nNgSelectMultipleOption.prototype._element;\n/** @type {?} */\nNgSelectMultipleOption.prototype._renderer;\n/** @type {?} */\nNgSelectMultipleOption.prototype._select;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {ɵlooseIdentical as looseIdentical} from '@angular/core';\nimport {FormArray, FormControl, FormGroup} from '../model';\nimport {Validators} from '../validators';\nimport {AbstractControlDirective} from './abstract_control_directive';\nimport {AbstractFormGroupDirective} from './abstract_form_group_directive';\nimport {CheckboxControlValueAccessor} from './checkbox_value_accessor';\nimport {ControlContainer} from './control_container';\nimport {ControlValueAccessor} from './control_value_accessor';\nimport {DefaultValueAccessor} from './default_value_accessor';\nimport {NgControl} from './ng_control';\nimport {normalizeAsyncValidator, normalizeValidator} from './normalize_validator';\nimport {NumberValueAccessor} from './number_value_accessor';\nimport {RadioControlValueAccessor} from './radio_control_value_accessor';\nimport {RangeValueAccessor} from './range_value_accessor';\nimport {FormArrayName} from './reactive_directives/form_group_name';\nimport {SelectControlValueAccessor} from './select_control_value_accessor';\nimport {SelectMultipleControlValueAccessor} from './select_multiple_control_value_accessor';\nimport {AsyncValidator, AsyncValidatorFn, Validator, ValidatorFn} from './validators';\n/**\n * @param {?} name\n * @param {?} parent\n * @return {?}\n */\nexport function controlPath(name: string, parent: ControlContainer): string[] {\n  return [... /** @type {?} */((parent.path)), name];\n}\n/**\n * @param {?} control\n * @param {?} dir\n * @return {?}\n */\nexport function setUpControl(control: FormControl, dir: NgControl): void {\n  if (!control) _throwError(dir, 'Cannot find control with');\n  if (!dir.valueAccessor) _throwError(dir, 'No value accessor for form control with');\n\n  control.validator = Validators.compose([ /** @type {?} */((control.validator)), dir.validator]);\n  control.asyncValidator = Validators.composeAsync([ /** @type {?} */((control.asyncValidator)), dir.asyncValidator]); /** @type {?} */((\n  dir.valueAccessor)).writeValue(control.value); /** @type {?} */((\n\n  // view -> model\n  dir.valueAccessor)).registerOnChange((newValue: any) => {\n    dir.viewToModelUpdate(newValue);\n    control.markAsDirty();\n    control.setValue(newValue, {emitModelToViewChange: false});\n  }); /** @type {?} */((\n\n  // touched\n  dir.valueAccessor)).registerOnTouched(() => control.markAsTouched());\n\n  control.registerOnChange((newValue: any, emitModelEvent: boolean) => { /** @type {?} */((\n    // control -> view\n    dir.valueAccessor)).writeValue(newValue);\n\n    // control -> ngModel\n    if (emitModelEvent) dir.viewToModelUpdate(newValue);\n  });\n\n  if ( /** @type {?} */((dir.valueAccessor)).setDisabledState) {\n    control.registerOnDisabledChange(\n        (isDisabled: boolean) => { /** @type {?} */(( /** @type {?} */(( dir.valueAccessor)).setDisabledState))(isDisabled); });\n  }\n\n  // re-run validation when validator binding changes, e.g. minlength=3 -> minlength=4\n  dir._rawValidators.forEach((validator: Validator | ValidatorFn) => {\n    if (( /** @type {?} */((<Validator>validator))).registerOnValidatorChange) /** @type {?} */((\n      ( /** @type {?} */((<Validator>validator))).registerOnValidatorChange))(() => control.updateValueAndValidity());\n  });\n\n  dir._rawAsyncValidators.forEach((validator: AsyncValidator | AsyncValidatorFn) => {\n    if (( /** @type {?} */((<Validator>validator))).registerOnValidatorChange) /** @type {?} */((\n      ( /** @type {?} */((<Validator>validator))).registerOnValidatorChange))(() => control.updateValueAndValidity());\n  });\n}\n/**\n * @param {?} control\n * @param {?} dir\n * @return {?}\n */\nexport function cleanUpControl(control: FormControl, dir: NgControl) { /** @type {?} */((\n  dir.valueAccessor)).registerOnChange(() => _noControlError(dir)); /** @type {?} */((\n  dir.valueAccessor)).registerOnTouched(() => _noControlError(dir));\n\n  dir._rawValidators.forEach((validator: any) => {\n    if (validator.registerOnValidatorChange) {\n      validator.registerOnValidatorChange(null);\n    }\n  });\n\n  dir._rawAsyncValidators.forEach((validator: any) => {\n    if (validator.registerOnValidatorChange) {\n      validator.registerOnValidatorChange(null);\n    }\n  });\n\n  if (control) control._clearChangeFns();\n}\n/**\n * @param {?} control\n * @param {?} dir\n * @return {?}\n */\nexport function setUpFormContainer(\n    control: FormGroup | FormArray, dir: AbstractFormGroupDirective | FormArrayName) {\n  if (control == null) _throwError(dir, 'Cannot find control with');\n  control.validator = Validators.compose([control.validator, dir.validator]);\n  control.asyncValidator = Validators.composeAsync([control.asyncValidator, dir.asyncValidator]);\n}\n/**\n * @param {?} dir\n * @return {?}\n */\nfunction _noControlError(dir: NgControl) {\n  return _throwError(dir, 'There is no FormControl instance attached to form control element with');\n}\n/**\n * @param {?} dir\n * @param {?} message\n * @return {?}\n */\nfunction _throwError(dir: AbstractControlDirective, message: string): void {\n  let /** @type {?} */ messageEnd: string;\n  if ( /** @type {?} */((dir.path)).length > 1) {\n    messageEnd = `path: '${ /** @type {?} */((dir.path)).join(' -> ')}'`;\n  } else if ( /** @type {?} */((dir.path))[0]) {\n    messageEnd = `name: '${dir.path}'`;\n  } else {\n    messageEnd = 'unspecified name attribute';\n  }\n  throw new Error(`${message} ${messageEnd}`);\n}\n/**\n * @param {?} validators\n * @return {?}\n */\nexport function composeValidators(validators: Array<Validator|Function>): ValidatorFn|null {\n  return validators != null ? Validators.compose(validators.map(normalizeValidator)) : null;\n}\n/**\n * @param {?} validators\n * @return {?}\n */\nexport function composeAsyncValidators(validators: Array<Validator|Function>): AsyncValidatorFn|\n    null {\n  return validators != null ? Validators.composeAsync(validators.map(normalizeAsyncValidator)) :\n                              null;\n}\n/**\n * @param {?} changes\n * @param {?} viewModel\n * @return {?}\n */\nexport function isPropertyUpdated(changes: {[key: string]: any}, viewModel: any): boolean {\n  if (!changes.hasOwnProperty('model')) return false;\n  const /** @type {?} */ change = changes['model'];\n\n  if (change.isFirstChange()) return true;\n  return !looseIdentical(viewModel, change.currentValue);\n}\n\nconst /** @type {?} */ BUILTIN_ACCESSORS = [\n  CheckboxControlValueAccessor,\n  RangeValueAccessor,\n  NumberValueAccessor,\n  SelectControlValueAccessor,\n  SelectMultipleControlValueAccessor,\n  RadioControlValueAccessor,\n];\n/**\n * @param {?} valueAccessor\n * @return {?}\n */\nexport function isBuiltInAccessor(valueAccessor: ControlValueAccessor): boolean {\n  return BUILTIN_ACCESSORS.some(a => valueAccessor.constructor === a);\n}\n/**\n * @param {?} dir\n * @param {?} valueAccessors\n * @return {?}\n */\nexport function selectValueAccessor(\n    dir: NgControl, valueAccessors: ControlValueAccessor[]): ControlValueAccessor|null {\n  if (!valueAccessors) return null;\n\n  let /** @type {?} */ defaultAccessor: ControlValueAccessor|undefined = undefined;\n  let /** @type {?} */ builtinAccessor: ControlValueAccessor|undefined = undefined;\n  let /** @type {?} */ customAccessor: ControlValueAccessor|undefined = undefined;\n  valueAccessors.forEach((v: ControlValueAccessor) => {\n    if (v.constructor === DefaultValueAccessor) {\n      defaultAccessor = v;\n\n    } else if (isBuiltInAccessor(v)) {\n      if (builtinAccessor)\n        _throwError(dir, 'More than one built-in value accessor matches form control with');\n      builtinAccessor = v;\n\n    } else {\n      if (customAccessor)\n        _throwError(dir, 'More than one custom value accessor matches form control with');\n      customAccessor = v;\n    }\n  });\n\n  if (customAccessor) return customAccessor;\n  if (builtinAccessor) return builtinAccessor;\n  if (defaultAccessor) return defaultAccessor;\n\n  _throwError(dir, 'No valid value accessor for form control with');\n  return null;\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {OnDestroy, OnInit} from '@angular/core';\n\nimport {FormGroup} from '../model';\n\nimport {ControlContainer} from './control_container';\nimport {Form} from './form_interface';\nimport {composeAsyncValidators, composeValidators, controlPath} from './shared';\nimport {AsyncValidatorFn, ValidatorFn} from './validators';\n/**\n * This is a base class for code shared between {\\@link NgModelGroup} and {\\@link FormGroupName}.\n * \n * \\@stable\n */\nexport class AbstractFormGroupDirective extends ControlContainer implements OnInit, OnDestroy {\n/**\n * \\@internal\n */\n_parent: ControlContainer;\n/**\n * \\@internal\n */\n_validators: any[];\n/**\n * \\@internal\n */\n_asyncValidators: any[];\n/**\n * @return {?}\n */\nngOnInit(): void {\n    this._checkParentType(); /** @type {?} */((\n    this.formDirective)).addFormGroup(this);\n  }\n/**\n * @return {?}\n */\nngOnDestroy(): void {\n    if (this.formDirective) {\n      this.formDirective.removeFormGroup(this);\n    }\n  }\n/**\n * Get the {\\@link FormGroup} backing this binding.\n * @return {?}\n */\nget control(): FormGroup { return /** @type {?} */(( this.formDirective)).getFormGroup(this); }\n/**\n * Get the path to this control group.\n * @return {?}\n */\nget path(): string[] { return controlPath(this.name, this._parent); }\n/**\n * Get the {\\@link Form} to which this group belongs.\n * @return {?}\n */\nget formDirective(): Form|null { return this._parent ? this._parent.formDirective : null; }\n/**\n * @return {?}\n */\nget validator(): ValidatorFn|null { return composeValidators(this._validators); }\n/**\n * @return {?}\n */\nget asyncValidator(): AsyncValidatorFn|null {\n    return composeAsyncValidators(this._asyncValidators);\n  }\n/**\n * \\@internal\n * @return {?}\n */\n_checkParentType(): void {}\n}\n\nfunction AbstractFormGroupDirective_tsickle_Closure_declarations() {\n/**\n * \\@internal\n * @type {?}\n */\nAbstractFormGroupDirective.prototype._parent;\n/**\n * \\@internal\n * @type {?}\n */\nAbstractFormGroupDirective.prototype._validators;\n/**\n * \\@internal\n * @type {?}\n */\nAbstractFormGroupDirective.prototype._asyncValidators;\n}\n\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Directive, Self} from '@angular/core';\n\nimport {AbstractControlDirective} from './abstract_control_directive';\nimport {ControlContainer} from './control_container';\nimport {NgControl} from './ng_control';\nexport class AbstractControlStatus {\nprivate _cd: AbstractControlDirective;\n/**\n * @param {?} cd\n */\nconstructor(cd: AbstractControlDirective) { this._cd = cd; }\n/**\n * @return {?}\n */\nget ngClassUntouched(): boolean { return this._cd.control ? this._cd.control.untouched : false; }\n/**\n * @return {?}\n */\nget ngClassTouched(): boolean { return this._cd.control ? this._cd.control.touched : false; }\n/**\n * @return {?}\n */\nget ngClassPristine(): boolean { return this._cd.control ? this._cd.control.pristine : false; }\n/**\n * @return {?}\n */\nget ngClassDirty(): boolean { return this._cd.control ? this._cd.control.dirty : false; }\n/**\n * @return {?}\n */\nget ngClassValid(): boolean { return this._cd.control ? this._cd.control.valid : false; }\n/**\n * @return {?}\n */\nget ngClassInvalid(): boolean { return this._cd.control ? this._cd.control.invalid : false; }\n/**\n * @return {?}\n */\nget ngClassPending(): boolean { return this._cd.control ? this._cd.control.pending : false; }\n}\n\nfunction AbstractControlStatus_tsickle_Closure_declarations() {\n/** @type {?} */\nAbstractControlStatus.prototype._cd;\n}\n\n\nexport const /** @type {?} */ ngControlStatusHost = {\n  '[class.ng-untouched]': 'ngClassUntouched',\n  '[class.ng-touched]': 'ngClassTouched',\n  '[class.ng-pristine]': 'ngClassPristine',\n  '[class.ng-dirty]': 'ngClassDirty',\n  '[class.ng-valid]': 'ngClassValid',\n  '[class.ng-invalid]': 'ngClassInvalid',\n  '[class.ng-pending]': 'ngClassPending',\n};\n/**\n * Directive automatically applied to Angular form controls that sets CSS classes\n * based on control status. The following classes are applied as the properties\n * become true:\n * \n * * ng-valid\n * * ng-invalid\n * * ng-pending\n * * ng-pristine\n * * ng-dirty\n * * ng-untouched\n * * ng-touched\n * \n * \\@stable\n */\nexport class NgControlStatus extends AbstractControlStatus {\n/**\n * @param {?} cd\n */\nconstructor( cd: NgControl) { super(cd); }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{selector: '[formControlName],[ngModel],[formControl]', host: ngControlStatusHost}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: NgControl, decorators: [{ type: Self }, ]},\n];\n}\n\nfunction NgControlStatus_tsickle_Closure_declarations() {\n/** @type {?} */\nNgControlStatus.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nNgControlStatus.ctorParameters;\n}\n\n/**\n * Directive automatically applied to Angular form groups that sets CSS classes\n * based on control status (valid/invalid/dirty/etc).\n * \n * \\@stable\n */\nexport class NgControlStatusGroup extends AbstractControlStatus {\n/**\n * @param {?} cd\n */\nconstructor( cd: ControlContainer) { super(cd); }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector:\n      '[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]',\n  host: ngControlStatusHost\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ControlContainer, decorators: [{ type: Self }, ]},\n];\n}\n\nfunction NgControlStatusGroup_tsickle_Closure_declarations() {\n/** @type {?} */\nNgControlStatusGroup.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nNgControlStatusGroup.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {EventEmitter} from '@angular/core';\nimport {Observable} from 'rxjs/Observable';\nimport {composeAsyncValidators, composeValidators} from './directives/shared';\nimport {AsyncValidatorFn, ValidationErrors, ValidatorFn} from './directives/validators';\nimport {toObservable} from './validators';\n/**\n * Indicates that a FormControl is valid, i.e. that no errors exist in the input value.\n */\nexport const VALID = 'VALID';\n/**\n * Indicates that a FormControl is invalid, i.e. that an error exists in the input value.\n */\nexport const INVALID = 'INVALID';\n/**\n * Indicates that a FormControl is pending, i.e. that async validation is occurring and\n * errors are not yet available for the input value.\n */\nexport const PENDING = 'PENDING';\n/**\n * Indicates that a FormControl is disabled, i.e. that the control is exempt from ancestor\n * calculations of validity or value.\n */\nexport const DISABLED = 'DISABLED';\n/**\n * @param {?} control\n * @param {?} path\n * @param {?} delimiter\n * @return {?}\n */\nfunction _find(control: AbstractControl, path: Array<string|number>| string, delimiter: string) {\n  if (path == null) return null;\n\n  if (!(path instanceof Array)) {\n    path = ( /** @type {?} */((<string>path))).split(delimiter);\n  }\n  if (path instanceof Array && (path.length === 0)) return null;\n\n  return ( /** @type {?} */((<Array<string|number>>path))).reduce((v: AbstractControl, name) => {\n    if (v instanceof FormGroup) {\n      return v.controls[name] || null;\n    }\n\n    if (v instanceof FormArray) {\n      return v.at( /** @type {?} */((<number>name))) || null;\n    }\n\n    return null;\n  }, control);\n}\n/**\n * @param {?=} validator\n * @return {?}\n */\nfunction coerceToValidator(validator?: ValidatorFn | ValidatorFn[] | null): ValidatorFn|null {\n  return Array.isArray(validator) ? composeValidators(validator) : validator || null;\n}\n/**\n * @param {?=} asyncValidator\n * @return {?}\n */\nfunction coerceToAsyncValidator(asyncValidator?: AsyncValidatorFn | AsyncValidatorFn[] | null):\n    AsyncValidatorFn|null {\n  return Array.isArray(asyncValidator) ? composeAsyncValidators(asyncValidator) :\n                                         asyncValidator || null;\n}\n/**\n * \\@whatItDoes This is the base class for {\\@link FormControl}, {\\@link FormGroup}, and\n * {\\@link FormArray}.\n * \n * It provides some of the shared behavior that all controls and groups of controls have, like\n * running validators, calculating status, and resetting state. It also defines the properties\n * that are shared between all sub-classes, like `value`, `valid`, and `dirty`. It shouldn't be\n * instantiated directly.\n * \n * \\@stable\n * @abstract\n */\nexport abstract class AbstractControl {\n/**\n * \\@internal\n */\n_value: any;\n/**\n * \\@internal\n */\n_onCollectionChange = () => {};\nprivate _valueChanges: EventEmitter<any>;\nprivate _statusChanges: EventEmitter<any>;\nprivate _status: string;\nprivate _errors: ValidationErrors|null;\nprivate _pristine: boolean = true;\nprivate _touched: boolean = false;\nprivate _parent: FormGroup|FormArray;\nprivate _asyncValidationSubscription: any;\n/**\n * @param {?} validator\n * @param {?} asyncValidator\n */\nconstructor(public validator: ValidatorFn|null,\npublic asyncValidator: AsyncValidatorFn|null) {}\n/**\n * The value of the control.\n * @return {?}\n */\nget value(): any { return this._value; }\n/**\n * The parent control.\n * @return {?}\n */\nget parent(): FormGroup|FormArray { return this._parent; }\n/**\n * The validation status of the control. There are four possible\n * validation statuses:\n * \n * * **VALID**:  control has passed all validation checks\n * * **INVALID**: control has failed at least one validation check\n * * **PENDING**: control is in the midst of conducting a validation check\n * * **DISABLED**: control is exempt from validation checks\n * \n * These statuses are mutually exclusive, so a control cannot be\n * both valid AND invalid or invalid AND disabled.\n * @return {?}\n */\nget status(): string { return this._status; }\n/**\n * A control is `valid` when its `status === VALID`.\n * \n * In order to have this status, the control must have passed all its\n * validation checks.\n * @return {?}\n */\nget valid(): boolean { return this._status === VALID; }\n/**\n * A control is `invalid` when its `status === INVALID`.\n * \n * In order to have this status, the control must have failed\n * at least one of its validation checks.\n * @return {?}\n */\nget invalid(): boolean { return this._status === INVALID; }\n/**\n * A control is `pending` when its `status === PENDING`.\n * \n * In order to have this status, the control must be in the\n * middle of conducting a validation check.\n * @return {?}\n */\nget pending(): boolean { return this._status == PENDING; }\n/**\n * A control is `disabled` when its `status === DISABLED`.\n * \n * Disabled controls are exempt from validation checks and\n * are not included in the aggregate value of their ancestor\n * controls.\n * @return {?}\n */\nget disabled(): boolean { return this._status === DISABLED; }\n/**\n * A control is `enabled` as long as its `status !== DISABLED`.\n * \n * In other words, it has a status of `VALID`, `INVALID`, or\n * `PENDING`.\n * @return {?}\n */\nget enabled(): boolean { return this._status !== DISABLED; }\n/**\n * Returns any errors generated by failing validation. If there\n * are no errors, it will return null.\n * @return {?}\n */\nget errors(): ValidationErrors|null { return this._errors; }\n/**\n * A control is `pristine` if the user has not yet changed\n * the value in the UI.\n * \n * Note that programmatic changes to a control's value will\n * *not* mark it dirty.\n * @return {?}\n */\nget pristine(): boolean { return this._pristine; }\n/**\n * A control is `dirty` if the user has changed the value\n * in the UI.\n * \n * Note that programmatic changes to a control's value will\n * *not* mark it dirty.\n * @return {?}\n */\nget dirty(): boolean { return !this.pristine; }\n/**\n * A control is marked `touched` once the user has triggered\n * a `blur` event on it.\n * @return {?}\n */\nget touched(): boolean { return this._touched; }\n/**\n * A control is `untouched` if the user has not yet triggered\n * a `blur` event on it.\n * @return {?}\n */\nget untouched(): boolean { return !this._touched; }\n/**\n * Emits an event every time the value of the control changes, in\n * the UI or programmatically.\n * @return {?}\n */\nget valueChanges(): Observable<any> { return this._valueChanges; }\n/**\n * Emits an event every time the validation status of the control\n * is re-calculated.\n * @return {?}\n */\nget statusChanges(): Observable<any> { return this._statusChanges; }\n/**\n * Sets the synchronous validators that are active on this control.  Calling\n * this will overwrite any existing sync validators.\n * @param {?} newValidator\n * @return {?}\n */\nsetValidators(newValidator: ValidatorFn|ValidatorFn[]|null): void {\n    this.validator = coerceToValidator(newValidator);\n  }\n/**\n * Sets the async validators that are active on this control. Calling this\n * will overwrite any existing async validators.\n * @param {?} newValidator\n * @return {?}\n */\nsetAsyncValidators(newValidator: AsyncValidatorFn|AsyncValidatorFn[]): void {\n    this.asyncValidator = coerceToAsyncValidator(newValidator);\n  }\n/**\n * Empties out the sync validator list.\n * @return {?}\n */\nclearValidators(): void { this.validator = null; }\n/**\n * Empties out the async validator list.\n * @return {?}\n */\nclearAsyncValidators(): void { this.asyncValidator = null; }\n/**\n * Marks the control as `touched`.\n * \n * This will also mark all direct ancestors as `touched` to maintain\n * the model.\n * @param {?=} opts\n * @return {?}\n */\nmarkAsTouched(opts: {onlySelf?: boolean} = {}): void {\n    this._touched = true;\n\n    if (this._parent && !opts.onlySelf) {\n      this._parent.markAsTouched(opts);\n    }\n  }\n/**\n * Marks the control as `untouched`.\n * \n * If the control has any children, it will also mark all children as `untouched`\n * to maintain the model, and re-calculate the `touched` status of all parent\n * controls.\n * @param {?=} opts\n * @return {?}\n */\nmarkAsUntouched(opts: {onlySelf?: boolean} = {}): void {\n    this._touched = false;\n\n    this._forEachChild(\n        (control: AbstractControl) => { control.markAsUntouched({onlySelf: true}); });\n\n    if (this._parent && !opts.onlySelf) {\n      this._parent._updateTouched(opts);\n    }\n  }\n/**\n * Marks the control as `dirty`.\n * \n * This will also mark all direct ancestors as `dirty` to maintain\n * the model.\n * @param {?=} opts\n * @return {?}\n */\nmarkAsDirty(opts: {onlySelf?: boolean} = {}): void {\n    this._pristine = false;\n\n    if (this._parent && !opts.onlySelf) {\n      this._parent.markAsDirty(opts);\n    }\n  }\n/**\n * Marks the control as `pristine`.\n * \n * If the control has any children, it will also mark all children as `pristine`\n * to maintain the model, and re-calculate the `pristine` status of all parent\n * controls.\n * @param {?=} opts\n * @return {?}\n */\nmarkAsPristine(opts: {onlySelf?: boolean} = {}): void {\n    this._pristine = true;\n\n    this._forEachChild((control: AbstractControl) => { control.markAsPristine({onlySelf: true}); });\n\n    if (this._parent && !opts.onlySelf) {\n      this._parent._updatePristine(opts);\n    }\n  }\n/**\n * Marks the control as `pending`.\n * @param {?=} opts\n * @return {?}\n */\nmarkAsPending(opts: {onlySelf?: boolean} = {}): void {\n    this._status = PENDING;\n\n    if (this._parent && !opts.onlySelf) {\n      this._parent.markAsPending(opts);\n    }\n  }\n/**\n * Disables the control. This means the control will be exempt from validation checks and\n * excluded from the aggregate value of any parent. Its status is `DISABLED`.\n * \n * If the control has children, all children will be disabled to maintain the model.\n * @param {?=} opts\n * @return {?}\n */\ndisable(opts: {onlySelf?: boolean, emitEvent?: boolean} = {}): void {\n    this._status = DISABLED;\n    this._errors = null;\n    this._forEachChild((control: AbstractControl) => { control.disable({onlySelf: true}); });\n    this._updateValue();\n\n    if (opts.emitEvent !== false) {\n      this._valueChanges.emit(this._value);\n      this._statusChanges.emit(this._status);\n    }\n\n    this._updateAncestors(!!opts.onlySelf);\n    this._onDisabledChange.forEach((changeFn) => changeFn(true));\n  }\n/**\n * Enables the control. This means the control will be included in validation checks and\n * the aggregate value of its parent. Its status is re-calculated based on its value and\n * its validators.\n * \n * If the control has children, all children will be enabled.\n * @param {?=} opts\n * @return {?}\n */\nenable(opts: {onlySelf?: boolean, emitEvent?: boolean} = {}): void {\n    this._status = VALID;\n    this._forEachChild((control: AbstractControl) => { control.enable({onlySelf: true}); });\n    this.updateValueAndValidity({onlySelf: true, emitEvent: opts.emitEvent});\n\n    this._updateAncestors(!!opts.onlySelf);\n    this._onDisabledChange.forEach((changeFn) => changeFn(false));\n  }\n/**\n * @param {?} onlySelf\n * @return {?}\n */\nprivate _updateAncestors(onlySelf: boolean) {\n    if (this._parent && !onlySelf) {\n      this._parent.updateValueAndValidity();\n      this._parent._updatePristine();\n      this._parent._updateTouched();\n    }\n  }\n/**\n * @param {?} parent\n * @return {?}\n */\nsetParent(parent: FormGroup|FormArray): void { this._parent = parent; }\n/**\n * Sets the value of the control. Abstract method (implemented in sub-classes).\n * @abstract\n * @param {?} value\n * @param {?=} options\n * @return {?}\n */\nsetValue(value: any, options?: Object) {}\n/**\n * Patches the value of the control. Abstract method (implemented in sub-classes).\n * @abstract\n * @param {?} value\n * @param {?=} options\n * @return {?}\n */\npatchValue(value: any, options?: Object) {}\n/**\n * Resets the control. Abstract method (implemented in sub-classes).\n * @abstract\n * @param {?=} value\n * @param {?=} options\n * @return {?}\n */\nreset(value?: any, options?: Object) {}\n/**\n * Re-calculates the value and validation status of the control.\n * \n * By default, it will also update the value and validity of its ancestors.\n * @param {?=} opts\n * @return {?}\n */\nupdateValueAndValidity(opts: {onlySelf?: boolean, emitEvent?: boolean} = {}): void {\n    this._setInitialStatus();\n    this._updateValue();\n\n    if (this.enabled) {\n      this._cancelExistingSubscription();\n      this._errors = this._runValidator();\n      this._status = this._calculateStatus();\n\n      if (this._status === VALID || this._status === PENDING) {\n        this._runAsyncValidator(opts.emitEvent);\n      }\n    }\n\n    if (opts.emitEvent !== false) {\n      this._valueChanges.emit(this._value);\n      this._statusChanges.emit(this._status);\n    }\n\n    if (this._parent && !opts.onlySelf) {\n      this._parent.updateValueAndValidity(opts);\n    }\n  }\n/**\n * \\@internal\n * @param {?=} opts\n * @return {?}\n */\n_updateTreeValidity(opts: {emitEvent?: boolean} = {emitEvent: true}) {\n    this._forEachChild((ctrl: AbstractControl) => ctrl._updateTreeValidity(opts));\n    this.updateValueAndValidity({onlySelf: true, emitEvent: opts.emitEvent});\n  }\n/**\n * @return {?}\n */\nprivate _setInitialStatus() { this._status = this._allControlsDisabled() ? DISABLED : VALID; }\n/**\n * @return {?}\n */\nprivate _runValidator(): ValidationErrors|null {\n    return this.validator ? this.validator(this) : null;\n  }\n/**\n * @param {?=} emitEvent\n * @return {?}\n */\nprivate _runAsyncValidator(emitEvent?: boolean): void {\n    if (this.asyncValidator) {\n      this._status = PENDING;\n      const /** @type {?} */ obs = toObservable(this.asyncValidator(this));\n      this._asyncValidationSubscription =\n          obs.subscribe((errors: ValidationErrors | null) => this.setErrors(errors, {emitEvent}));\n    }\n  }\n/**\n * @return {?}\n */\nprivate _cancelExistingSubscription(): void {\n    if (this._asyncValidationSubscription) {\n      this._asyncValidationSubscription.unsubscribe();\n    }\n  }\n/**\n * Sets errors on a form control.\n * \n * This is used when validations are run manually by the user, rather than automatically.\n * \n * Calling `setErrors` will also update the validity of the parent control.\n * \n * ### Example\n * \n * ```\n * const login = new FormControl(\"someLogin\");\n * login.setErrors({\n *   \"notUnique\": true\n * });\n * \n * expect(login.valid).toEqual(false);\n * expect(login.errors).toEqual({\"notUnique\": true});\n * \n * login.setValue(\"someOtherLogin\");\n * \n * expect(login.valid).toEqual(true);\n * ```\n * @param {?} errors\n * @param {?=} opts\n * @return {?}\n */\nsetErrors(errors: ValidationErrors|null, opts: {emitEvent?: boolean} = {}): void {\n    this._errors = errors;\n    this._updateControlsErrors(opts.emitEvent !== false);\n  }\n/**\n * Retrieves a child control given the control's name or path.\n * \n * Paths can be passed in as an array or a string delimited by a dot.\n * \n * To get a control nested within a `person` sub-group:\n * \n * * `this.form.get('person.name');`\n * \n * -OR-\n * \n * * `this.form.get(['person', 'name']);`\n * @param {?} path\n * @return {?}\n */\nget(path: Array<string|number>|string): AbstractControl|null { return _find(this, path, '.'); }\n/**\n * Returns error data if the control with the given path has the error specified. Otherwise\n * returns null or undefined.\n * \n * If no path is given, it checks for the error on the present control.\n * @param {?} errorCode\n * @param {?=} path\n * @return {?}\n */\ngetError(errorCode: string, path?: string[]): any {\n    const /** @type {?} */ control = path ? this.get(path) : this;\n    return control && control._errors ? control._errors[errorCode] : null;\n  }\n/**\n * Returns true if the control with the given path has the error specified. Otherwise\n * returns false.\n * \n * If no path is given, it checks for the error on the present control.\n * @param {?} errorCode\n * @param {?=} path\n * @return {?}\n */\nhasError(errorCode: string, path?: string[]): boolean { return !!this.getError(errorCode, path); }\n/**\n * Retrieves the top-level ancestor of this control.\n * @return {?}\n */\nget root(): AbstractControl {\n    let /** @type {?} */ x: AbstractControl = this;\n\n    while (x._parent) {\n      x = x._parent;\n    }\n\n    return x;\n  }\n/**\n * \\@internal\n * @param {?} emitEvent\n * @return {?}\n */\n_updateControlsErrors(emitEvent: boolean): void {\n    this._status = this._calculateStatus();\n\n    if (emitEvent) {\n      this._statusChanges.emit(this._status);\n    }\n\n    if (this._parent) {\n      this._parent._updateControlsErrors(emitEvent);\n    }\n  }\n/**\n * \\@internal\n * @return {?}\n */\n_initObservables() {\n    this._valueChanges = new EventEmitter();\n    this._statusChanges = new EventEmitter();\n  }\n/**\n * @return {?}\n */\nprivate _calculateStatus(): string {\n    if (this._allControlsDisabled()) return DISABLED;\n    if (this._errors) return INVALID;\n    if (this._anyControlsHaveStatus(PENDING)) return PENDING;\n    if (this._anyControlsHaveStatus(INVALID)) return INVALID;\n    return VALID;\n  }\n/**\n * \\@internal\n * @abstract\n * @return {?}\n */\n_updateValue() {}\n/**\n * \\@internal\n * @abstract\n * @param {?} cb\n * @return {?}\n */\n_forEachChild(cb: Function) {}\n/**\n * \\@internal\n * @abstract\n * @param {?} condition\n * @return {?}\n */\n_anyControls(condition: Function) {}\n/**\n * \\@internal\n * @abstract\n * @return {?}\n */\n_allControlsDisabled() {}\n/**\n * \\@internal\n * @param {?} status\n * @return {?}\n */\n_anyControlsHaveStatus(status: string): boolean {\n    return this._anyControls((control: AbstractControl) => control.status === status);\n  }\n/**\n * \\@internal\n * @return {?}\n */\n_anyControlsDirty(): boolean {\n    return this._anyControls((control: AbstractControl) => control.dirty);\n  }\n/**\n * \\@internal\n * @return {?}\n */\n_anyControlsTouched(): boolean {\n    return this._anyControls((control: AbstractControl) => control.touched);\n  }\n/**\n * \\@internal\n * @param {?=} opts\n * @return {?}\n */\n_updatePristine(opts: {onlySelf?: boolean} = {}): void {\n    this._pristine = !this._anyControlsDirty();\n\n    if (this._parent && !opts.onlySelf) {\n      this._parent._updatePristine(opts);\n    }\n  }\n/**\n * \\@internal\n * @param {?=} opts\n * @return {?}\n */\n_updateTouched(opts: {onlySelf?: boolean} = {}): void {\n    this._touched = this._anyControlsTouched();\n\n    if (this._parent && !opts.onlySelf) {\n      this._parent._updateTouched(opts);\n    }\n  }\n/**\n * \\@internal\n */\n_onDisabledChange: Function[] = [];\n/**\n * \\@internal\n * @param {?} formState\n * @return {?}\n */\n_isBoxedValue(formState: any): boolean {\n    return typeof formState === 'object' && formState !== null &&\n        Object.keys(formState).length === 2 && 'value' in formState && 'disabled' in formState;\n  }\n/**\n * \\@internal\n * @param {?} fn\n * @return {?}\n */\n_registerOnCollectionChange(fn: () => void): void { this._onCollectionChange = fn; }\n}\n\nfunction AbstractControl_tsickle_Closure_declarations() {\n/**\n * \\@internal\n * @type {?}\n */\nAbstractControl.prototype._value;\n/**\n * \\@internal\n * @type {?}\n */\nAbstractControl.prototype._onCollectionChange;\n/** @type {?} */\nAbstractControl.prototype._valueChanges;\n/** @type {?} */\nAbstractControl.prototype._statusChanges;\n/** @type {?} */\nAbstractControl.prototype._status;\n/** @type {?} */\nAbstractControl.prototype._errors;\n/** @type {?} */\nAbstractControl.prototype._pristine;\n/** @type {?} */\nAbstractControl.prototype._touched;\n/** @type {?} */\nAbstractControl.prototype._parent;\n/** @type {?} */\nAbstractControl.prototype._asyncValidationSubscription;\n/**\n * \\@internal\n * @type {?}\n */\nAbstractControl.prototype._onDisabledChange;\n/** @type {?} */\nAbstractControl.prototype.validator;\n/** @type {?} */\nAbstractControl.prototype.asyncValidator;\n}\n\n/**\n * \\@whatItDoes Tracks the value and validation status of an individual form control.\n * \n * It is one of the three fundamental building blocks of Angular forms, along with\n * {\\@link FormGroup} and {\\@link FormArray}.\n * \n * \\@howToUse \n * \n * When instantiating a {\\@link FormControl}, you can pass in an initial value as the\n * first argument. Example:\n * \n * ```ts\n * const ctrl = new FormControl('some value');\n * console.log(ctrl.value);     // 'some value'\n * ```\n * \n * You can also initialize the control with a form state object on instantiation,\n * which includes both the value and whether or not the control is disabled.\n * You can't use the value key without the disabled key; both are required\n * to use this way of initialization.\n * \n * ```ts\n * const ctrl = new FormControl({value: 'n/a', disabled: true});\n * console.log(ctrl.value);     // 'n/a'\n * console.log(ctrl.status);   // 'DISABLED'\n * ```\n * \n * To include a sync validator (or an array of sync validators) with the control,\n * pass it in as the second argument. Async validators are also supported, but\n * have to be passed in separately as the third arg.\n * \n * ```ts\n * const ctrl = new FormControl('', Validators.required);\n * console.log(ctrl.value);     // ''\n * console.log(ctrl.status);   // 'INVALID'\n * ```\n * \n * See its superclass, {\\@link AbstractControl}, for more properties and methods.\n * \n * * **npm package**: `\\@angular/forms`\n * \n * \\@stable\n */\nexport class FormControl extends AbstractControl {\n/**\n * \\@internal\n */\n_onChange: Function[] = [];\n/**\n * @param {?=} formState\n * @param {?=} validator\n * @param {?=} asyncValidator\n */\nconstructor(\n      formState: any = null, validator?: ValidatorFn|ValidatorFn[]|null,\n      asyncValidator?: AsyncValidatorFn|AsyncValidatorFn[]|null) {\n    super(coerceToValidator(validator), coerceToAsyncValidator(asyncValidator));\n    this._applyFormState(formState);\n    this.updateValueAndValidity({onlySelf: true, emitEvent: false});\n    this._initObservables();\n  }\n/**\n * Set the value of the form control to `value`.\n * \n * If `onlySelf` is `true`, this change will only affect the validation of this `FormControl`\n * and not its parent component. This defaults to false.\n * \n * If `emitEvent` is `true`, this\n * change will cause a `valueChanges` event on the `FormControl` to be emitted. This defaults\n * to true (as it falls through to `updateValueAndValidity`).\n * \n * If `emitModelToViewChange` is `true`, the view will be notified about the new value\n * via an `onChange` event. This is the default behavior if `emitModelToViewChange` is not\n * specified.\n * \n * If `emitViewToModelChange` is `true`, an ngModelChange event will be fired to update the\n * model.  This is the default behavior if `emitViewToModelChange` is not specified.\n * @param {?} value\n * @param {?=} options\n * @return {?}\n */\nsetValue(value: any, options: {\n    onlySelf?: boolean,\n    emitEvent?: boolean,\n    emitModelToViewChange?: boolean,\n    emitViewToModelChange?: boolean\n  } = {}): void {\n    this._value = value;\n    if (this._onChange.length && options.emitModelToViewChange !== false) {\n      this._onChange.forEach(\n          (changeFn) => changeFn(this._value, options.emitViewToModelChange !== false));\n    }\n    this.updateValueAndValidity(options);\n  }\n/**\n * Patches the value of a control.\n * \n * This function is functionally the same as {\\@link FormControl#setValue} at this level.\n * It exists for symmetry with {\\@link FormGroup#patchValue} on `FormGroups` and `FormArrays`,\n * where it does behave differently.\n * @param {?} value\n * @param {?=} options\n * @return {?}\n */\npatchValue(value: any, options: {\n    onlySelf?: boolean,\n    emitEvent?: boolean,\n    emitModelToViewChange?: boolean,\n    emitViewToModelChange?: boolean\n  } = {}): void {\n    this.setValue(value, options);\n  }\n/**\n * Resets the form control. This means by default:\n * \n * * it is marked as `pristine`\n * * it is marked as `untouched`\n * * value is set to null\n * \n * You can also reset to a specific form state by passing through a standalone\n * value or a form state object that contains both a value and a disabled state\n * (these are the only two properties that cannot be calculated).\n * \n * Ex:\n * \n * ```ts\n * this.control.reset('Nancy');\n * \n * console.log(this.control.value);  // 'Nancy'\n * ```\n * \n * OR\n * \n * ```\n * this.control.reset({value: 'Nancy', disabled: true});\n * \n * console.log(this.control.value);  // 'Nancy'\n * console.log(this.control.status);  // 'DISABLED'\n * ```\n * @param {?=} formState\n * @param {?=} options\n * @return {?}\n */\nreset(formState: any = null, options: {onlySelf?: boolean, emitEvent?: boolean} = {}): void {\n    this._applyFormState(formState);\n    this.markAsPristine(options);\n    this.markAsUntouched(options);\n    this.setValue(this._value, options);\n  }\n/**\n * \\@internal\n * @return {?}\n */\n_updateValue() {}\n/**\n * \\@internal\n * @param {?} condition\n * @return {?}\n */\n_anyControls(condition: Function): boolean { return false; }\n/**\n * \\@internal\n * @return {?}\n */\n_allControlsDisabled(): boolean { return this.disabled; }\n/**\n * Register a listener for change events.\n * @param {?} fn\n * @return {?}\n */\nregisterOnChange(fn: Function): void { this._onChange.push(fn); }\n/**\n * \\@internal\n * @return {?}\n */\n_clearChangeFns(): void {\n    this._onChange = [];\n    this._onDisabledChange = [];\n    this._onCollectionChange = () => {};\n  }\n/**\n * Register a listener for disabled events.\n * @param {?} fn\n * @return {?}\n */\nregisterOnDisabledChange(fn: (isDisabled: boolean) => void): void {\n    this._onDisabledChange.push(fn);\n  }\n/**\n * \\@internal\n * @param {?} cb\n * @return {?}\n */\n_forEachChild(cb: Function): void {}\n/**\n * @param {?} formState\n * @return {?}\n */\nprivate _applyFormState(formState: any) {\n    if (this._isBoxedValue(formState)) {\n      this._value = formState.value;\n      formState.disabled ? this.disable({onlySelf: true, emitEvent: false}) :\n                           this.enable({onlySelf: true, emitEvent: false});\n    } else {\n      this._value = formState;\n    }\n  }\n}\n\nfunction FormControl_tsickle_Closure_declarations() {\n/**\n * \\@internal\n * @type {?}\n */\nFormControl.prototype._onChange;\n}\n\n/**\n * \\@whatItDoes Tracks the value and validity state of a group of {\\@link FormControl}\n * instances.\n * \n * A `FormGroup` aggregates the values of each child {\\@link FormControl} into one object,\n * with each control name as the key.  It calculates its status by reducing the statuses\n * of its children. For example, if one of the controls in a group is invalid, the entire\n * group becomes invalid.\n * \n * `FormGroup` is one of the three fundamental building blocks used to define forms in Angular,\n * along with {\\@link FormControl} and {\\@link FormArray}.\n * \n * \\@howToUse \n * \n * When instantiating a {\\@link FormGroup}, pass in a collection of child controls as the first\n * argument. The key for each child will be the name under which it is registered.\n * \n * ### Example\n * \n * ```\n * const form = new FormGroup({\n *   first: new FormControl('Nancy', Validators.minLength(2)),\n *   last: new FormControl('Drew'),\n * });\n * \n * console.log(form.value);   // {first: 'Nancy', last; 'Drew'}\n * console.log(form.status);  // 'VALID'\n * ```\n * \n * You can also include group-level validators as the second arg, or group-level async\n * validators as the third arg. These come in handy when you want to perform validation\n * that considers the value of more than one child control.\n * \n * ### Example\n * \n * ```\n * const form = new FormGroup({\n *   password: new FormControl('', Validators.minLength(2)),\n *   passwordConfirm: new FormControl('', Validators.minLength(2)),\n * }, passwordMatchValidator);\n * \n * \n * function passwordMatchValidator(g: FormGroup) {\n *    return g.get('password').value === g.get('passwordConfirm').value\n *       ? null : {'mismatch': true};\n * }\n * ```\n * \n * * **npm package**: `\\@angular/forms`\n * \n * \\@stable\n */\nexport class FormGroup extends AbstractControl {\n/**\n * @param {?} controls\n * @param {?=} validator\n * @param {?=} asyncValidator\n */\nconstructor(\npublic controls: {[key: string]: AbstractControl}, validator?: ValidatorFn|null,\n      asyncValidator?: AsyncValidatorFn|null) {\n    super(validator || null, asyncValidator || null);\n    this._initObservables();\n    this._setUpControls();\n    this.updateValueAndValidity({onlySelf: true, emitEvent: false});\n  }\n/**\n * Registers a control with the group's list of controls.\n * \n * This method does not update value or validity of the control, so for\n * most cases you'll want to use {\\@link FormGroup#addControl} instead.\n * @param {?} name\n * @param {?} control\n * @return {?}\n */\nregisterControl(name: string, control: AbstractControl): AbstractControl {\n    if (this.controls[name]) return this.controls[name];\n    this.controls[name] = control;\n    control.setParent(this);\n    control._registerOnCollectionChange(this._onCollectionChange);\n    return control;\n  }\n/**\n * Add a control to this group.\n * @param {?} name\n * @param {?} control\n * @return {?}\n */\naddControl(name: string, control: AbstractControl): void {\n    this.registerControl(name, control);\n    this.updateValueAndValidity();\n    this._onCollectionChange();\n  }\n/**\n * Remove a control from this group.\n * @param {?} name\n * @return {?}\n */\nremoveControl(name: string): void {\n    if (this.controls[name]) this.controls[name]._registerOnCollectionChange(() => {});\n    delete (this.controls[name]);\n    this.updateValueAndValidity();\n    this._onCollectionChange();\n  }\n/**\n * Replace an existing control.\n * @param {?} name\n * @param {?} control\n * @return {?}\n */\nsetControl(name: string, control: AbstractControl): void {\n    if (this.controls[name]) this.controls[name]._registerOnCollectionChange(() => {});\n    delete (this.controls[name]);\n    if (control) this.registerControl(name, control);\n    this.updateValueAndValidity();\n    this._onCollectionChange();\n  }\n/**\n * Check whether there is an enabled control with the given name in the group.\n * \n * It will return false for disabled controls. If you'd like to check for\n * existence in the group only, use {\\@link AbstractControl#get} instead.\n * @param {?} controlName\n * @return {?}\n */\ncontains(controlName: string): boolean {\n    return this.controls.hasOwnProperty(controlName) && this.controls[controlName].enabled;\n  }\n/**\n *  Sets the value of the {\\@link FormGroup}. It accepts an object that matches\n *  the structure of the group, with control names as keys.\n * \n * This method performs strict checks, so it will throw an error if you try\n * to set the value of a control that doesn't exist or if you exclude the\n * value of a control.\n * \n *  ### Example\n * \n *  ```\n *  const form = new FormGroup({\n *     first: new FormControl(),\n *     last: new FormControl()\n *  });\n *  console.log(form.value);   // {first: null, last: null}\n * \n *  form.setValue({first: 'Nancy', last: 'Drew'});\n *  console.log(form.value);   // {first: 'Nancy', last: 'Drew'}\n * \n *  ```\n * @param {?} value\n * @param {?=} options\n * @return {?}\n */\nsetValue(value: {[key: string]: any}, options: {onlySelf?: boolean, emitEvent?: boolean} = {}):\n      void {\n    this._checkAllValuesPresent(value);\n    Object.keys(value).forEach(name => {\n      this._throwIfControlMissing(name);\n      this.controls[name].setValue(value[name], {onlySelf: true, emitEvent: options.emitEvent});\n    });\n    this.updateValueAndValidity(options);\n  }\n/**\n *  Patches the value of the {\\@link FormGroup}. It accepts an object with control\n *  names as keys, and will do its best to match the values to the correct controls\n *  in the group.\n * \n *  It accepts both super-sets and sub-sets of the group without throwing an error.\n * \n *  ### Example\n * \n *  ```\n *  const form = new FormGroup({\n *     first: new FormControl(),\n *     last: new FormControl()\n *  });\n *  console.log(form.value);   // {first: null, last: null}\n * \n *  form.patchValue({first: 'Nancy'});\n *  console.log(form.value);   // {first: 'Nancy', last: null}\n * \n *  ```\n * @param {?} value\n * @param {?=} options\n * @return {?}\n */\npatchValue(value: {[key: string]: any}, options: {onlySelf?: boolean, emitEvent?: boolean} = {}):\n      void {\n    Object.keys(value).forEach(name => {\n      if (this.controls[name]) {\n        this.controls[name].patchValue(value[name], {onlySelf: true, emitEvent: options.emitEvent});\n      }\n    });\n    this.updateValueAndValidity(options);\n  }\n/**\n * Resets the {\\@link FormGroup}. This means by default:\n * \n * * The group and all descendants are marked `pristine`\n * * The group and all descendants are marked `untouched`\n * * The value of all descendants will be null or null maps\n * \n * You can also reset to a specific form state by passing in a map of states\n * that matches the structure of your form, with control names as keys. The state\n * can be a standalone value or a form state object with both a value and a disabled\n * status.\n * \n * ### Example\n * \n * ```ts\n * this.form.reset({first: 'name', last: 'last name'});\n * \n * console.log(this.form.value);  // {first: 'name', last: 'last name'}\n * ```\n * \n * - OR -\n * \n * ```\n * this.form.reset({\n *   first: {value: 'name', disabled: true},\n *   last: 'last'\n * });\n * \n * console.log(this.form.value);  // {first: 'name', last: 'last name'}\n * console.log(this.form.get('first').status);  // 'DISABLED'\n * ```\n * @param {?=} value\n * @param {?=} options\n * @return {?}\n */\nreset(value: any = {}, options: {onlySelf?: boolean, emitEvent?: boolean} = {}): void {\n    this._forEachChild((control: AbstractControl, name: string) => {\n      control.reset(value[name], {onlySelf: true, emitEvent: options.emitEvent});\n    });\n    this.updateValueAndValidity(options);\n    this._updatePristine(options);\n    this._updateTouched(options);\n  }\n/**\n * The aggregate value of the {\\@link FormGroup}, including any disabled controls.\n * \n * If you'd like to include all values regardless of disabled status, use this method.\n * Otherwise, the `value` property is the best way to get the value of the group.\n * @return {?}\n */\ngetRawValue(): any {\n    return this._reduceChildren(\n        {}, (acc: {[k: string]: AbstractControl}, control: AbstractControl, name: string) => {\n          acc[name] = control instanceof FormControl ? control.value : ( /** @type {?} */((<any>control))).getRawValue();\n          return acc;\n        });\n  }\n/**\n * \\@internal\n * @param {?} name\n * @return {?}\n */\n_throwIfControlMissing(name: string): void {\n    if (!Object.keys(this.controls).length) {\n      throw new Error(`\n        There are no form controls registered with this group yet.  If you're using ngModel,\n        you may want to check next tick (e.g. use setTimeout).\n      `);\n    }\n    if (!this.controls[name]) {\n      throw new Error(`Cannot find form control with name: ${name}.`);\n    }\n  }\n/**\n * \\@internal\n * @param {?} cb\n * @return {?}\n */\n_forEachChild(cb: (v: any, k: string) => void): void {\n    Object.keys(this.controls).forEach(k => cb(this.controls[k], k));\n  }\n/**\n * \\@internal\n * @return {?}\n */\n_setUpControls(): void {\n    this._forEachChild((control: AbstractControl) => {\n      control.setParent(this);\n      control._registerOnCollectionChange(this._onCollectionChange);\n    });\n  }\n/**\n * \\@internal\n * @return {?}\n */\n_updateValue(): void { this._value = this._reduceValue(); }\n/**\n * \\@internal\n * @param {?} condition\n * @return {?}\n */\n_anyControls(condition: Function): boolean {\n    let /** @type {?} */ res = false;\n    this._forEachChild((control: AbstractControl, name: string) => {\n      res = res || (this.contains(name) && condition(control));\n    });\n    return res;\n  }\n/**\n * \\@internal\n * @return {?}\n */\n_reduceValue() {\n    return this._reduceChildren(\n        {}, (acc: {[k: string]: AbstractControl}, control: AbstractControl, name: string) => {\n          if (control.enabled || this.disabled) {\n            acc[name] = control.value;\n          }\n          return acc;\n        });\n  }\n/**\n * \\@internal\n * @param {?} initValue\n * @param {?} fn\n * @return {?}\n */\n_reduceChildren(initValue: any, fn: Function) {\n    let /** @type {?} */ res = initValue;\n    this._forEachChild(\n        (control: AbstractControl, name: string) => { res = fn(res, control, name); });\n    return res;\n  }\n/**\n * \\@internal\n * @return {?}\n */\n_allControlsDisabled(): boolean {\n    for (const /** @type {?} */ controlName of Object.keys(this.controls)) {\n      if (this.controls[controlName].enabled) {\n        return false;\n      }\n    }\n    return Object.keys(this.controls).length > 0 || this.disabled;\n  }\n/**\n * \\@internal\n * @param {?} value\n * @return {?}\n */\n_checkAllValuesPresent(value: any): void {\n    this._forEachChild((control: AbstractControl, name: string) => {\n      if (value[name] === undefined) {\n        throw new Error(`Must supply a value for form control with name: '${name}'.`);\n      }\n    });\n  }\n}\n\nfunction FormGroup_tsickle_Closure_declarations() {\n/** @type {?} */\nFormGroup.prototype.controls;\n}\n\n/**\n * \\@whatItDoes Tracks the value and validity state of an array of {\\@link FormControl},\n * {\\@link FormGroup} or {\\@link FormArray} instances.\n * \n * A `FormArray` aggregates the values of each child {\\@link FormControl} into an array.\n * It calculates its status by reducing the statuses of its children. For example, if one of\n * the controls in a `FormArray` is invalid, the entire array becomes invalid.\n * \n * `FormArray` is one of the three fundamental building blocks used to define forms in Angular,\n * along with {\\@link FormControl} and {\\@link FormGroup}.\n * \n * \\@howToUse \n * \n * When instantiating a {\\@link FormArray}, pass in an array of child controls as the first\n * argument.\n * \n * ### Example\n * \n * ```\n * const arr = new FormArray([\n *   new FormControl('Nancy', Validators.minLength(2)),\n *   new FormControl('Drew'),\n * ]);\n * \n * console.log(arr.value);   // ['Nancy', 'Drew']\n * console.log(arr.status);  // 'VALID'\n * ```\n * \n * You can also include array-level validators as the second arg, or array-level async\n * validators as the third arg. These come in handy when you want to perform validation\n * that considers the value of more than one child control.\n * \n * ### Adding or removing controls\n * \n * To change the controls in the array, use the `push`, `insert`, or `removeAt` methods\n * in `FormArray` itself. These methods ensure the controls are properly tracked in the\n * form's hierarchy. Do not modify the array of `AbstractControl`s used to instantiate\n * the `FormArray` directly, as that will result in strange and unexpected behavior such\n * as broken change detection.\n * \n * * **npm package**: `\\@angular/forms`\n * \n * \\@stable\n */\nexport class FormArray extends AbstractControl {\n/**\n * @param {?} controls\n * @param {?=} validator\n * @param {?=} asyncValidator\n */\nconstructor(\npublic controls: AbstractControl[], validator?: ValidatorFn|null,\n      asyncValidator?: AsyncValidatorFn|null) {\n    super(validator || null, asyncValidator || null);\n    this._initObservables();\n    this._setUpControls();\n    this.updateValueAndValidity({onlySelf: true, emitEvent: false});\n  }\n/**\n * Get the {\\@link AbstractControl} at the given `index` in the array.\n * @param {?} index\n * @return {?}\n */\nat(index: number): AbstractControl { return this.controls[index]; }\n/**\n * Insert a new {\\@link AbstractControl} at the end of the array.\n * @param {?} control\n * @return {?}\n */\npush(control: AbstractControl): void {\n    this.controls.push(control);\n    this._registerControl(control);\n    this.updateValueAndValidity();\n    this._onCollectionChange();\n  }\n/**\n * Insert a new {\\@link AbstractControl} at the given `index` in the array.\n * @param {?} index\n * @param {?} control\n * @return {?}\n */\ninsert(index: number, control: AbstractControl): void {\n    this.controls.splice(index, 0, control);\n\n    this._registerControl(control);\n    this.updateValueAndValidity();\n    this._onCollectionChange();\n  }\n/**\n * Remove the control at the given `index` in the array.\n * @param {?} index\n * @return {?}\n */\nremoveAt(index: number): void {\n    if (this.controls[index]) this.controls[index]._registerOnCollectionChange(() => {});\n    this.controls.splice(index, 1);\n    this.updateValueAndValidity();\n    this._onCollectionChange();\n  }\n/**\n * Replace an existing control.\n * @param {?} index\n * @param {?} control\n * @return {?}\n */\nsetControl(index: number, control: AbstractControl): void {\n    if (this.controls[index]) this.controls[index]._registerOnCollectionChange(() => {});\n    this.controls.splice(index, 1);\n\n    if (control) {\n      this.controls.splice(index, 0, control);\n      this._registerControl(control);\n    }\n\n    this.updateValueAndValidity();\n    this._onCollectionChange();\n  }\n/**\n * Length of the control array.\n * @return {?}\n */\nget length(): number { return this.controls.length; }\n/**\n *  Sets the value of the {\\@link FormArray}. It accepts an array that matches\n *  the structure of the control.\n * \n * This method performs strict checks, so it will throw an error if you try\n * to set the value of a control that doesn't exist or if you exclude the\n * value of a control.\n * \n *  ### Example\n * \n *  ```\n *  const arr = new FormArray([\n *     new FormControl(),\n *     new FormControl()\n *  ]);\n *  console.log(arr.value);   // [null, null]\n * \n *  arr.setValue(['Nancy', 'Drew']);\n *  console.log(arr.value);   // ['Nancy', 'Drew']\n *  ```\n * @param {?} value\n * @param {?=} options\n * @return {?}\n */\nsetValue(value: any[], options: {onlySelf?: boolean, emitEvent?: boolean} = {}): void {\n    this._checkAllValuesPresent(value);\n    value.forEach((newValue: any, index: number) => {\n      this._throwIfControlMissing(index);\n      this.at(index).setValue(newValue, {onlySelf: true, emitEvent: options.emitEvent});\n    });\n    this.updateValueAndValidity(options);\n  }\n/**\n *  Patches the value of the {\\@link FormArray}. It accepts an array that matches the\n *  structure of the control, and will do its best to match the values to the correct\n *  controls in the group.\n * \n *  It accepts both super-sets and sub-sets of the array without throwing an error.\n * \n *  ### Example\n * \n *  ```\n *  const arr = new FormArray([\n *     new FormControl(),\n *     new FormControl()\n *  ]);\n *  console.log(arr.value);   // [null, null]\n * \n *  arr.patchValue(['Nancy']);\n *  console.log(arr.value);   // ['Nancy', null]\n *  ```\n * @param {?} value\n * @param {?=} options\n * @return {?}\n */\npatchValue(value: any[], options: {onlySelf?: boolean, emitEvent?: boolean} = {}): void {\n    value.forEach((newValue: any, index: number) => {\n      if (this.at(index)) {\n        this.at(index).patchValue(newValue, {onlySelf: true, emitEvent: options.emitEvent});\n      }\n    });\n    this.updateValueAndValidity(options);\n  }\n/**\n * Resets the {\\@link FormArray}. This means by default:\n * \n * * The array and all descendants are marked `pristine`\n * * The array and all descendants are marked `untouched`\n * * The value of all descendants will be null or null maps\n * \n * You can also reset to a specific form state by passing in an array of states\n * that matches the structure of the control. The state can be a standalone value\n * or a form state object with both a value and a disabled status.\n * \n * ### Example\n * \n * ```ts\n * this.arr.reset(['name', 'last name']);\n * \n * console.log(this.arr.value);  // ['name', 'last name']\n * ```\n * \n * - OR -\n * \n * ```\n * this.arr.reset([\n *   {value: 'name', disabled: true},\n *   'last'\n * ]);\n * \n * console.log(this.arr.value);  // ['name', 'last name']\n * console.log(this.arr.get(0).status);  // 'DISABLED'\n * ```\n * @param {?=} value\n * @param {?=} options\n * @return {?}\n */\nreset(value: any = [], options: {onlySelf?: boolean, emitEvent?: boolean} = {}): void {\n    this._forEachChild((control: AbstractControl, index: number) => {\n      control.reset(value[index], {onlySelf: true, emitEvent: options.emitEvent});\n    });\n    this.updateValueAndValidity(options);\n    this._updatePristine(options);\n    this._updateTouched(options);\n  }\n/**\n * The aggregate value of the array, including any disabled controls.\n * \n * If you'd like to include all values regardless of disabled status, use this method.\n * Otherwise, the `value` property is the best way to get the value of the array.\n * @return {?}\n */\ngetRawValue(): any[] {\n    return this.controls.map((control: AbstractControl) => {\n      return control instanceof FormControl ? control.value : ( /** @type {?} */((<any>control))).getRawValue();\n    });\n  }\n/**\n * \\@internal\n * @param {?} index\n * @return {?}\n */\n_throwIfControlMissing(index: number): void {\n    if (!this.controls.length) {\n      throw new Error(`\n        There are no form controls registered with this array yet.  If you're using ngModel,\n        you may want to check next tick (e.g. use setTimeout).\n      `);\n    }\n    if (!this.at(index)) {\n      throw new Error(`Cannot find form control at index ${index}`);\n    }\n  }\n/**\n * \\@internal\n * @param {?} cb\n * @return {?}\n */\n_forEachChild(cb: Function): void {\n    this.controls.forEach((control: AbstractControl, index: number) => { cb(control, index); });\n  }\n/**\n * \\@internal\n * @return {?}\n */\n_updateValue(): void {\n    this._value = this.controls.filter((control) => control.enabled || this.disabled)\n                      .map((control) => control.value);\n  }\n/**\n * \\@internal\n * @param {?} condition\n * @return {?}\n */\n_anyControls(condition: Function): boolean {\n    return this.controls.some((control: AbstractControl) => control.enabled && condition(control));\n  }\n/**\n * \\@internal\n * @return {?}\n */\n_setUpControls(): void {\n    this._forEachChild((control: AbstractControl) => this._registerControl(control));\n  }\n/**\n * \\@internal\n * @param {?} value\n * @return {?}\n */\n_checkAllValuesPresent(value: any): void {\n    this._forEachChild((control: AbstractControl, i: number) => {\n      if (value[i] === undefined) {\n        throw new Error(`Must supply a value for form control at index: ${i}.`);\n      }\n    });\n  }\n/**\n * \\@internal\n * @return {?}\n */\n_allControlsDisabled(): boolean {\n    for (const /** @type {?} */ control of this.controls) {\n      if (control.enabled) return false;\n    }\n    return this.controls.length > 0 || this.disabled;\n  }\n/**\n * @param {?} control\n * @return {?}\n */\nprivate _registerControl(control: AbstractControl) {\n    control.setParent(this);\n    control._registerOnCollectionChange(this._onCollectionChange);\n  }\n}\n\nfunction FormArray_tsickle_Closure_declarations() {\n/** @type {?} */\nFormArray.prototype.controls;\n}\n\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Directive, EventEmitter, Inject, Optional, Self, forwardRef} from '@angular/core';\n\nimport {AbstractControl, FormControl, FormGroup} from '../model';\nimport {NG_ASYNC_VALIDATORS, NG_VALIDATORS} from '../validators';\n\nimport {ControlContainer} from './control_container';\nimport {Form} from './form_interface';\nimport {NgControl} from './ng_control';\nimport {NgModel} from './ng_model';\nimport {NgModelGroup} from './ng_model_group';\nimport {composeAsyncValidators, composeValidators, setUpControl, setUpFormContainer} from './shared';\n\nexport const /** @type {?} */ formDirectiveProvider: any = {\n  provide: ControlContainer,\n  useExisting: forwardRef(() => NgForm)\n};\n\nconst /** @type {?} */ resolvedPromise = Promise.resolve(null);\n/**\n * \\@whatItDoes Creates a top-level {\\@link FormGroup} instance and binds it to a form\n * to track aggregate form value and validation status.\n * \n * \\@howToUse \n * \n * As soon as you import the `FormsModule`, this directive becomes active by default on\n * all `<form>` tags.  You don't need to add a special selector.\n * \n * You can export the directive into a local template variable using `ngForm` as the key\n * (ex: `#myForm=\"ngForm\"`). This is optional, but useful.  Many properties from the underlying\n * {\\@link FormGroup} instance are duplicated on the directive itself, so a reference to it\n * will give you access to the aggregate value and validity status of the form, as well as\n * user interaction properties like `dirty` and `touched`.\n * \n * To register child controls with the form, you'll want to use {\\@link NgModel} with a\n * `name` attribute.  You can also use {\\@link NgModelGroup} if you'd like to create\n * sub-groups within the form.\n * \n * You can listen to the directive's `ngSubmit` event to be notified when the user has\n * triggered a form submission. The `ngSubmit` event will be emitted with the original form\n * submission event.\n * \n * In template driven forms, all `<form>` tags are automatically tagged as `NgForm`.\n * If you want to import the `FormsModule` but skip its usage in some forms,\n * for example, to use native HTML5 validation, you can add `ngNoForm` and the `<form>`\n * tags won't create an `NgForm` directive. In reactive forms, using `ngNoForm` is\n * unnecessary because the `<form>` tags are inert. In that case, you would\n * refrain from using the `formGroup` directive.\n * \n * {\\@example forms/ts/simpleForm/simple_form_example.ts region='Component'}\n * \n * * **npm package**: `\\@angular/forms`\n * \n * * **NgModule**: `FormsModule`\n * \n *  \\@stable\n */\nexport class NgForm extends ControlContainer implements Form {\nprivate _submitted: boolean = false;\n\n  form: FormGroup;\n  ngSubmit = new EventEmitter();\n/**\n * @param {?} validators\n * @param {?} asyncValidators\n */\nconstructor(\n         validators: any[],\n         asyncValidators: any[]) {\n    super();\n    this.form =\n        new FormGroup({}, composeValidators(validators), composeAsyncValidators(asyncValidators));\n  }\n/**\n * @return {?}\n */\nget submitted(): boolean { return this._submitted; }\n/**\n * @return {?}\n */\nget formDirective(): Form { return this; }\n/**\n * @return {?}\n */\nget control(): FormGroup { return this.form; }\n/**\n * @return {?}\n */\nget path(): string[] { return []; }\n/**\n * @return {?}\n */\nget controls(): {[key: string]: AbstractControl} { return this.form.controls; }\n/**\n * @param {?} dir\n * @return {?}\n */\naddControl(dir: NgModel): void {\n    resolvedPromise.then(() => {\n      const /** @type {?} */ container = this._findContainer(dir.path);\n      dir._control = /** @type {?} */(( <FormControl>container.registerControl(dir.name, dir.control)));\n      setUpControl(dir.control, dir);\n      dir.control.updateValueAndValidity({emitEvent: false});\n    });\n  }\n/**\n * @param {?} dir\n * @return {?}\n */\ngetControl(dir: NgModel): FormControl { return /** @type {?} */(( <FormControl>this.form.get(dir.path))); }\n/**\n * @param {?} dir\n * @return {?}\n */\nremoveControl(dir: NgModel): void {\n    resolvedPromise.then(() => {\n      const /** @type {?} */ container = this._findContainer(dir.path);\n      if (container) {\n        container.removeControl(dir.name);\n      }\n    });\n  }\n/**\n * @param {?} dir\n * @return {?}\n */\naddFormGroup(dir: NgModelGroup): void {\n    resolvedPromise.then(() => {\n      const /** @type {?} */ container = this._findContainer(dir.path);\n      const /** @type {?} */ group = new FormGroup({});\n      setUpFormContainer(group, dir);\n      container.registerControl(dir.name, group);\n      group.updateValueAndValidity({emitEvent: false});\n    });\n  }\n/**\n * @param {?} dir\n * @return {?}\n */\nremoveFormGroup(dir: NgModelGroup): void {\n    resolvedPromise.then(() => {\n      const /** @type {?} */ container = this._findContainer(dir.path);\n      if (container) {\n        container.removeControl(dir.name);\n      }\n    });\n  }\n/**\n * @param {?} dir\n * @return {?}\n */\ngetFormGroup(dir: NgModelGroup): FormGroup { return /** @type {?} */(( <FormGroup>this.form.get(dir.path))); }\n/**\n * @param {?} dir\n * @param {?} value\n * @return {?}\n */\nupdateModel(dir: NgControl, value: any): void {\n    resolvedPromise.then(() => {\n      const /** @type {?} */ ctrl = /** @type {?} */(( <FormControl>this.form.get( /** @type {?} */((dir.path)))));\n      ctrl.setValue(value);\n    });\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nsetValue(value: {[key: string]: any}): void { this.control.setValue(value); }\n/**\n * @param {?} $event\n * @return {?}\n */\nonSubmit($event: Event): boolean {\n    this._submitted = true;\n    this.ngSubmit.emit($event);\n    return false;\n  }\n/**\n * @return {?}\n */\nonReset(): void { this.resetForm(); }\n/**\n * @param {?=} value\n * @return {?}\n */\nresetForm(value: any = undefined): void {\n    this.form.reset(value);\n    this._submitted = false;\n  }\n/**\n * \\@internal\n * @param {?} path\n * @return {?}\n */\n_findContainer(path: string[]): FormGroup {\n    path.pop();\n    return path.length ? /** @type {?} */(( <FormGroup>this.form.get(path))) : this.form;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'form:not([ngNoForm]):not([formGroup]),ngForm,[ngForm]',\n  providers: [formDirectiveProvider],\n  host: {'(submit)': 'onSubmit($event)', '(reset)': 'onReset()'},\n  outputs: ['ngSubmit'],\n  exportAs: 'ngForm'\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Array, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [NG_VALIDATORS, ] }, ]},\n{type: Array, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [NG_ASYNC_VALIDATORS, ] }, ]},\n];\n}\n\nfunction NgForm_tsickle_Closure_declarations() {\n/** @type {?} */\nNgForm.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nNgForm.ctorParameters;\n/** @type {?} */\nNgForm.prototype._submitted;\n/** @type {?} */\nNgForm.prototype.form;\n/** @type {?} */\nNgForm.prototype.ngSubmit;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","\n/**\n * @license \n * Copyright Google Inc. All Rights Reserved.\n * \n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport const FormErrorExamples = {\n  formControlName: `\n    <div [formGroup]=\"myGroup\">\n      <input formControlName=\"firstName\">\n    </div>\n\n    In your class:\n\n    this.myGroup = new FormGroup({\n       firstName: new FormControl()\n    });`,\n\n  formGroupName: `\n    <div [formGroup]=\"myGroup\">\n       <div formGroupName=\"person\">\n          <input formControlName=\"firstName\">\n       </div>\n    </div>\n\n    In your class:\n\n    this.myGroup = new FormGroup({\n       person: new FormGroup({ firstName: new FormControl() })\n    });`,\n\n  formArrayName: `\n    <div [formGroup]=\"myGroup\">\n      <div formArrayName=\"cities\">\n        <div *ngFor=\"let city of cityArray.controls; index as i\">\n          <input [formControlName]=\"i\">\n        </div>\n      </div>\n    </div>\n\n    In your class:\n\n    this.cityArray = new FormArray([new FormControl('SF')]);\n    this.myGroup = new FormGroup({\n      cities: this.cityArray\n    });`,\n\n  ngModelGroup: `\n    <form>\n       <div ngModelGroup=\"person\">\n          <input [(ngModel)]=\"person.name\" name=\"firstName\">\n       </div>\n    </form>`,\n\n  ngModelWithFormGroup: `\n    <div [formGroup]=\"myGroup\">\n       <input formControlName=\"firstName\">\n       <input [(ngModel)]=\"showMoreControls\" [ngModelOptions]=\"{standalone: true}\">\n    </div>\n  `\n};\n"],"names":["WeUILoadmore","ctorParameters","this","t","type","activateAt","activeIndex","getAt","index","isActivated","item","propDecorators","renderer","compositionMode","WeUIFormControl","enumerable","cancelText","set","_this","search","doFocus","WeUISearchBar","_context","_thenViewRef","event","value","prototype","Renderer2","decorators","_super","call","mh","_activated","activated","WeUITabBarItem","forEachAddedItem","r","WeUITabBar","template","selector","Oh","fileURL","reset","files","_selectStrategy","Object","resolve","WeUIActionSheet","Xu","shown","defineProperty","Kl","hide","getIcon","trim","e","icon","getIconClass","n","iconCls","isArray","animate","WeUIDialog","Input","status","currentValue","WeUITopTips","setTimeout","_injector","key","getAttributeNS","message","title","show","toast","subscribe","Injectable","Layer","getBaseHref","componentRef","instance","destroy","_getComponentRootNode","rootNodes","classList","formErrors","rangelength","getTransitionEnd","dirty","messages","errors","hasOwnProperty","_form","window","len","name","onAndCancel","NgForm","WeUISwitch","WeUIToast","Subscriber","contexts","openings","__extends","length","i","next","WindowToggleSubscriber","err","context","unsubscribe","outerValue","innerValue","tryCatch","closingSelector","closingNotifier","error","Subject_1","Subscription_1","subscribeToResult","closed","notifyError","inner","destination","outerIndex","WindowSubscriber","innerSub","openWindow","prevWindow","Subject","add","subscribeToResult_1","OuterSubscriber_1","WithLatestFromSubscriber","observable","toRespond","found","_next","concat","_additionsHead","iterators","ZipSubscriber","push","_forEach","iterator_1","iterator","checkIterators","provide","hasValue","shouldComplete","args","nextResult","StaticArrayIterator","parent","ZipBufferIterator","tc","isComplete","buffer","shift","SCRIPT","Ql","hasCompleted","notifyNext","innerIndex","handleEvent","rp","sp","undefined","WeUIBadge","up","disabled","tslib_1.__extends","checked","_value","destroyView","WeUIPicker","option","_parentView","WeUIPickerGroup","init","startTime","_move","pageY","_speed","windowY","bodyHeight","startY","_destroyListeners","defaults","rowHeight","_getMin","options","xp","count","Schedule","Error","getDate","_months","get","indexOf","day","_pointer","setMonth","s","Date","end","getTime","_a","_startDate","begin","monthPicker","_updateDatePickerList","_updateMonthPickerList","Tl","datePicker","dates","nexts","month","WeUIDatePicker","fixedAtBottom","_container","_elementRef","_renderer","nativeElement","delete","preventDefault","then","changes","changed","root","WeUIInput","blur","ev","maxLen","ViewEncapsulation","None","Inject","maxlength","max","min","required","countChars","path","_el","replaceState","addClass","cls","sanitizer","_href","previousValue","noPushArrow","href","seed","result","accumulator","total","ring","idx","POSITIVE_INFINITY","uc","resultSelector","MergeMapToSubscriber","ish","_complete","notifyComplete","active","complete","acc","concurrent","Fc","OuterSubscriber","ngContentSelectors","PairwiseSubscriber","hasPrev","prev","getValue","BehaviorSubject","hasError","ObjectUnsubscribedError_1","hasNext","subscriber","AsyncSubject","QueueAction","scheduler","delay","flush","execute","Zone","id","bufferSize","windowTime","ObjectUnsubscribedError","EMPTY","SubjectSubscription","isStopped","_callbacks","_bufferSize","_windowTime","eventsCount","_events","time","subscriptions","from","hasFirst","observables","subscription","source","Subscriber_1","retries","notifications","create","retriesSubscription","subscribeToRetries","notifier","a","tryCatch_1","RetryWhenSubscriber","hasPendingMicrotasks","emitValue","_componentFactoryResolver","period","schedule","SampleTimeSubscriber","lastValue","compareTo","SequenceEqualSubscriber","_b","emit","_oneComplete","_c","_enforceNoNewChanges","b","SequenceEqualCompareToSubscriber","_error","predicate","applySingleValue","seenValue","EmptyError_1","SkipSubscriber","SkipLastSubscriber","_count","_results","some","SwitchMapSubscriber","innerSubscription","Mt","_dirty","SwitchMapToSubscriber","wl","TakeSubscriber","TakeUntilSubscriber","predicateResult","safeSubscriber","syncErrorValue","DoSubscriber","config","exports","lift","childNodes","duration","_unsubscribe","_trailingValue","throttled","_hasTrailingValue","Zt","clearThrottle","trailing","remove","TimeIntervalSubscriber","TimeInterval","span","T","TimeoutError","waitFor","TimeoutSubscriber","errorInstance","action","absoluteTimeout","TimeoutWithSubscriber","newWindow","windowSize","startWindowEvery","c","windows","windowCreationInterval","windowTimeSpan","dispatchWindowCreation","timeSpanOnlyState","WindowTimeSubscriber","closeWindow","BufferToggleSubscriber","rs","cs","BufferWhenSubscriber","subscribing","closingSubscription","CatchSubscriber","err2","_unsubscribeAndRecycle","project","u","CombineLatestSubscriber","values","none","Ns","StringIterator","done","toLength","arr","o","ArrayLikeObservable","EmptyObservable_1","dispatch","arrayLike","state","Observable_1","Notification","__tryOrUnsub","observer","do","accept","throw","__tryOrSetError","completeNotification","ObserveOnOperator","Bs","notification","createNext","ObserveOnSubscriber","createError","ObserveOnMessage","PromiseObservable_1","Rx","ArrayLikeObservable_1","observable_1","observeOn_1","durationSubscription","DebounceSubscriber","Ys","debounceTime","dueTime","DebounceTimeOperator","DebounceTimeSubscriber","clearDebounce","debouncedSubscription","queue","Ta","DelayMessage","completed","removeSubscription","subscriptionIdx","splice","delayNotifier","notifierSubscription","SubscriptionDelaySubscriber","subscribeToSource","root_1","eu","DistinctSubscriber","distinctUntilChanged","DistinctUntilChangedOperator","compare","keySelector","observers","hasKey","$a","errorObject","DistinctUntilChangedSubscriber","ArgumentOutOfRangeError","ElementAtSubscriber","defaultValue","refCount","everyValueMatch","EverySubscriber","_isComplete","SwitchFirstSubscriber","hasSubscription","connect","tryNext","SwitchFirstMapSubscriber","WorkerGlobalScope","Tu","Nu","thisArg","pure","D","FindValueSubscriber","M","yieldIndex","_emitFinal","_values","_keys","mc","parameters","cb","MapPolyfill","FastMap","durationSelector","groups","_group","Map","propMetadata","_reflect","group","element","_ownPropMetadata","GroupBySubscriber","GroupDurationSubscriber","_subscribe","groupSubject","InnerRefCountSubscription","apply","IgnoreElementsSubscriber","IsEmptySubscriber","Oc","_tryResultSelector","MapToSubscriber","x","_seed","Examples","componentRendererType","FormErrorExamples","NgModelGroup","TemplateDrivenErrors","Directive","exportAs","Xl","SkipSelf","NG_VALIDATORS","_control","_registered","_rawValidators","newValue","emitEvent","NgModel","_checkForErrors","_parent","Array","Self","CheckAndUpdateProjectedViews","cr","resolveDep","ReactiveErrors","form","factory","provider","Sp","ngOnChanges","_checkFormPresent","flags","FormGroupDirective","dir","onReset","FormGroupName","validators","composeAsyncValidators","_asyncValidators","formArrayNameProvider","Host","Optional","valueAccessors","Math","update","composeValidators","FormControlName","AbstractFormGroupDirective","_setUpControl","controlNameBinding","NG_ASYNC_VALIDATORS","sh","RequiredValidator","fn","CheckboxRequiredValidator","Validators","requiredTrue","uo","_createValidator","MaxLengthValidator","registerOnValidatorChange","parseInt","jh","_validator","PatternValidator","extra","charAt","Mo","controlConfig","control","NgNoValidate","Do","SelectMultipleControlValueAccessor","RadioControlValueAccessor","NgControlStatus","MinLengthValidator","InternalFormsSharedModule","ReactiveFormsModule","AuditSubscriber","errorObject_1","Action","work","pending","documentMode","requestAsyncId","_execute","ti","AsyncAction","si","actions","Scheduler","reduce","SchedulerAction","test","now","scheduled","AsyncScheduler","AsyncAction_1","valueAccessor","isScheduler_1","initialDelay","composeAsync","BufferCountSubscriber","BufferSkipCountSubscriber","buffers","maxBufferSize","BufferTimeSubscriber","bufferTimeSpan","timespanOnly","closeState","bufferCreationInterval","filledBufferContext","zi","closeAction","closeContext","Qi","closeBuffer","openBuffer","ts","trySubscribe","l","(input)","RadioControlRegistry","accessor","onTouched","_registry","ngOnDestroy","ya","setProperty","gu","RangeValueAccessor","(change)","_getOptionId","registerOnTouched","_i","_extractId","_optionMap","NgSelectOption","_select","ElementRef","SelectControlValueAccessor","bind","optionSelectedStateSetter","selected","selectedOptions","val","keys","valueString","token","J","NgSelectMultipleOption","BUILTIN_ACCESSORS","controlPath","_cd","AbstractControlStatus","[class.ng-untouched]","AbstractControl","_valueChanges","_updateAncestors","opts","_cancelExistingSubscription","_status","updateValueAndValidity","getError","p","EventEmitter","_allControlsDisabled","FormControl","formState","setValue","_onChange","onlySelf","enable","THROW_IF_NOT_FOUND","FormGroup","validator","controls","removeControl","setControl","forEach","_forEachChild","yn","h","xn","FormArray","insert","_registerOnCollectionChange","_throwIfControlMissing","setParent","def","nodeIndex","addFormGroup","Vn","_findContainer","ControlContainer","ngModelWithFormGroup","v"],"mappings":"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EAAAA,EAAAA,WAAAA,EAAAA,OAAAA,GAAAA,EAAAA,IAAAA,ISk7BAuD,OTl7BAvD,GAAAA,ESm7BA7nB,MTn7BA6nB,GAAAA,QAAAA,IAAAA,EAAAA,MAAAA,GAAAA,QAAAA,IAAAA,EAAAA,GAAAA,GAAAA,EAAAA,QAAAA,UAAAA,EAAAA,OAAAA,IAAAA,KAAAA,EAAAA,GAAAA,EAAAA,EAAAA,MAAAA,EAAAA,KAAAA,MAAAA,KAAAA,MAAAA,EAAAA,GAAAA,EAAAA,EAAAA,MAAAA,EAAAA,KAAAA,MAAAA,KAAAA,MAAAA,EAAAA,GAAAA,EAAAA,EAAAA,KAAAA,GAAAA,MAAAA,KAAAA,KAAAA,EAAAA,EAAAA,MAAAA,WAAAA,KAAAA,EAAAA,GAAAA,EAAAA,QAAAA,IAAAA,ESw8BAwD,ETx8BAxD,GAAAA,GAAAA,GAAAA,EAAAA,MAAAA,QAAAA,GAAAA,IAAAA,GAAAA,MAAAA,IAAAA,EAAAA,KAAAA,GAAAA,MAAAA,IAAAA,GAAAA,GAAAA,EAAAA,EAAAA,IAAAA,KAAAA,GAAAA,MAAAA,IAAAA,GAAAA,GAAAA,EAAAA,EAAAA,IAAAA,GAAAA,EAAAA,EAAAA,IAAAA,KAAAA,GAAAA,MAAAA,IAAAA,GAAAA,GAAAA,EAAAA,EAAAA,IAAAA,GAAAA,EAAAA,EAAAA,IAAAA,GAAAA,EAAAA,EAAAA,IAAAA,SSmyBArmB,ITnyBAqmB,GAAAA,GSmyBAyD,GTnyBAzD,OAAAA,GAAAA,EAAAA,EAAAA,EAAAA,EAAAA,ISo9BQ7nB,ETp9BR6nB,GSo9BAuD,GTp9BAvD,EAAAA,EAAAA,GAAAA,OSq9BAuD,KTr9BAvD,EAAAA,KAAAA,MAAAA,OAAAA,IAAAA,OAAAA,MAAAA,QAAAA,IAAAA,EAAAA,EAAAA,GSs9BA7nB,GTt9BA6nB,GSs9BAuD,ETt9BAvD,MSs9BAhiB,QTt9BAgiB,GAAAA,IAAAA,GAAAA,MAAAA,IAAAA,KAAAA,GAAAA,MAAAA,GAAAA,GAAAA,EAAAA,EAAAA,IAAAA,KAAAA,GAAAA,MAAAA,GAAAA,GAAAA,EAAAA,EAAAA,IAAAA,GAAAA,EAAAA,EAAAA,IAAAA,KAAAA,GAAAA,MAAAA,GAAAA,GAAAA,EAAAA,EAAAA,IAAAA,GAAAA,EAAAA,EAAAA,IAAAA,GAAAA,EAAAA,EAAAA,IAAAA,SAAAA,IAAAA,GAAAA,GAAAA,MAAAA,GAAAA,EAAAA,EAAAA,EAAAA,EAAAA,IAAAA,EAAAA,GSigCAqD,GTjgCArD,EAAAA,EAAAA,GAAAA,OAAAA,GAAAA,UAAAA,GAAAA,IAAAA,QAAAA,IAAAA,EAAAA,GAAAA,IAAAA,GAAAA,GAAAA,EAAAA,KAAAA,EAAAA,EAAAA,EAAAA,EAAAA,UAAAA,OSmgCAllB,ITngCAklB,GAAAA,OSmgCA0D,ETngCA1D,UAAAA,GAAAA,MAAAA,CAAAA,GAAAA,GAAAA,EAAAA,WAAAA,EAAAA,IAAAA,IAAAA,IAAAA,EAAAA,eAAAA,QAAAA,IAAAA,EAAAA,EAAAA,EAAAA,GAAAA,GAAAA,GAAAA,EAAAA,cAAAA,cAAAA,QAAAA,OAAAA,KAAAA,IAAAA,EAAAA,EAAAA,QAAAA,EAAAA,oBAAAA,ESkiCA7nB,GTliCA6nB,EAAAA,EAAAA,GAAAA,GAAAA,EAAAA,GSkiCAhc,GTliCAgc,mBAAAA,GAAAA,GAAAA,EAAAA,EAAAA,EAAAA,EAAAA,ES82BUhiB,GAsLV7E,KTpiCA6mB,GAAAA,QAAAA,IAAAA,EAAAA,GAAAA,GAAAA,GAAAA,GAAAA,EAAAA,IAAAA,GAAAA,IAAAA,KAAAA,GAAAA,EAAAA,OAAAA,CAAAA,EAAAA,OAAAA,EAAAA,IAAAA,GAAAA,EAAAA,SAAAA,eAAAA,KAAAA,ES6kCAqD,EAAA1pB,ST7kCAqmB,oBAAAA,EAAAA,KAAAA,GS6kCAtmB,GT7kCAsmB,EAAAA,OAAAA,IAAAA,EAAAA,gBSu5BS2D,QTv5BT3D,IAAAA,ESu5BUxkB,GTv5BVwkB,KAAAA,EAAAA,EAAAA,OAAAA,CAAAA,ES+kCAtmB,WT/kCAsmB,EAAAA,EAAAA,OAAAA,CAAAA,KS+kCAhc,GT/kCAgc,GAAAA,EAAAA,OAAAA,GAAAA,EAAAA,YAAAA,EAAAA,EAAAA,EAAAA,QAAAA,QAAAA,IAAAA,EAAAA,GAAAA,GAAAA,GAAAA,EAAAA,cAAAA,cAAAA,KAAAA,MAAAA,GAAAA,GAAAA,EAAAA,UAAAA,EAAAA,EAAAA,OAAAA,GAAAA,EAAAA,EAAAA,MAAAA,KAAAA,IAAAA,GAAAA,EAAAA,EAAAA,OAAAA,GAAAA,oBAAAA,KAAAA,GAAAA,EAAAA,GAAAA,GAAAA,mBAAAA,GSwmCArmB,GTxmCAqmB,GAAAA,EAAAA,QAAAA,IAAAA,GAAAA,GAAAA,GAAAA,EAAAA,MAAAA,CAAAA,GSwmCAhiB,GTxmCAgiB,GAAAA,EAAAA,IAAAA,EAAAA,CSymCAyB,GTzmCAzB,GAAAA,EAAAA,SAAAA,eAAAA,KAAAA,GAAAA,EAAAA,EAAAA,QAAAA,IAAAA,GAAAA,mBAAAA,MAAAA,QAAAA,IAAAA,EAAAA,EAAAA,GAAAA,GAAAA,GAAAA,EAAAA,cAAAA,eAAAA,EAAAA,EAAAA,EAAAA,OAAAA,IAAAA,EAAAA,GAAAA,MAAAA,IAAAA,EAAAA,EAAAA,QAAAA,GAAAA,EAAAA,EAAAA,GAAAA,GAAAA,mBAAAA,GAAAA,GAAAA,GAAAA,GAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,GAAAA,KAAAA,GAAAA,EAAAA,QAAAA,IAAAA,EAAAA,EAAAA,GAAAA,GAAAA,GAAAA,EAAAA,GAAAA,EAAAA,EAAAA,IAAAA,oBAAAA,EAAAA,aAAAA,IAAAA,EAAAA,EAAAA,EAAAA,SAAAA,WAAAA,GAAAA,EAAAA,SAAAA,YAAAA,OAAAA,IAAAA,QAAAA,IAAAA,GAAAA,GAAAA,EAAAA,EAAAA,KAAAA,SAAAA,IAAAA,QAAAA,IAAAA,EAAAA,EAAAA,GAAAA,GAAAA,EAAAA,OAAAA,EAAAA,KAAAA,GAAAA,EAAAA,OAAAA,EAAAA,EAAAA,GAAAA,QAAAA,IAAAA,EAAAA,GAAAA,GAAAA,EAAAA,OAAAA,EAAAA,EAAAA,MAAAA,EAAAA,OAAAA,EAAAA,GAAAA,QAAAA,IAAAA,EAAAA,EAAAA,GAAAA,MAAAA,IAAAA,IAAAA,EAAAA,EAAAA,GAAAA,QAAAA,IAAAA,GAAAA,MAAAA,IAAAA,IAAAA,GAAAA,QAAAA,IAAAA,EAAAA,GAAAA,MAAAA,IAAAA,IS+oCArmB,ET/oCAqmB,GAAAA,QAAAA,IAAAA,EAAAA,GAAAA,MAAAA,IAAAA,IAAAA,ES+oCA7mB,GAAAhB,QT/oCA6nB,IAAAA,GAAAA,MAAAA,IAAAA,IAAAA,EAAAA,UAAAA,QAAAA,IAAAA,EAAAA,EAAAA,EAAAA,GAAAA,MAAAA,IAAAA,IAAAA,EAAAA,ES2pCAqD,EAAA1pB,GT3pCAqmB,QAAAA,IAAAA,EAAAA,GAAAA,MAAAA,IAAAA,EAAAA,GAAAA,QS4pCApE,IT5pCAoE,EAAAA,GAAAA,IAAAA,GAAAA,GAAAA,EAAAA,EAAAA,SAAAA,GAAAA,IAAAA,EAAAA,EAAAA,MAAAA,OAAAA,IAAAA,EAAAA,OS6pCArd,GT7pCAqd,IAAAA,EAAAA,EAAAA,SAAAA,MAAAA,EAAAA,SAAAA,MAAAA,QAAAA,IAAAA,EAAAA,GAAAA,GAAAA,IAAAA,MAAAA,EAAAA,OAAAA,EAAAA,EAAAA,GAAAA,EAAAA,EAAAA,OAAAA,EAAAA,EAAAA,SAAAA,MAAAA,EAAAA,SAAAA,KAAAA,ISmrCArmB,ETnrCAqmB,QSmrCA6C,OTnrCA7C,IAAAA,GAAAA,GAAAA,EAAAA,ESmrCAxkB,ETnrCAwkB,QAAAA,OAAAA,ISorCA,CTprCAA,GAAAA,GAAAA,EAAAA,QAAAA,GAAAA,EAAAA,EAAAA,EAAAA,UAAAA,USorCA4D,GTprCA5D,EAAAA,ESorCAhb,OTprCAgb,UAAAA,EAAAA,WAAAA,GAAAA,YAAAA,EAAAA,YAAAA,GAAAA,EAAAA,YAAAA,KAAAA,GAAAA,MAAAA,GAAAA,QAAAA,IAAAA,EAAAA,EAAAA,GAAAA,MAAAA,UAAAA,GAAAA,IAAAA,MAAAA,ISgsCAtmB,EThsCAsmB,EAAAA,EAAAA,GAAAA,MAAAA,GAAAA,EAAAA,KAAAA,aAAAA,YSksCAhiB,KTlsCAgiB,QAAAA,IAAAA,ESosCAxkB,ETpsCAwkB,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,GAAAA,GAAAA,GAAAA,GAAAA,EAAAA,EAAAA,WAAAA,EAAAA,EAAAA,SAAAA,GAAAA,EAAAA,MAAAA,GAAAA,EAAAA,EAAAA,SAAAA,MAAAA,OAAAA,GSiwCA,GAAA7mB,GACAW,EADAC,ETjwCAimB,EAAAA,KAAAA,GAAAA,EAAAA,EAAAA,GAAAA,ESkwCA6D,ETlwCA7D,EAAAA,EAAAA,EAAAA,IAAAA,EAAAA,GAAAA,GAAAA,EAAAA,EAAAA,EAAAA,KAAAA,GAAAA,EAAAA,EAAAA,GAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,IAAAA,EAAAA,GAAAA,GAAAA,EAAAA,EAAAA,EAAAA,KAAAA,GAAAA,EAAAA,EAAAA,GAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,IAAAA,EAAAA,GAAAA,GAAAA,EAAAA,EAAAA,EAAAA,KAAAA,GAAAA,EAAAA,EAAAA,GAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,IAAAA,EAAAA,GAAAA,GAAAA,EAAAA,EAAAA,EAAAA,KAAAA,GAAAA,EAAAA,EAAAA,GAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,IAAAA,EAAAA,GAAAA,GAAAA,EAAAA,EAAAA,EAAAA,KAAAA,GSmxCAjf,ETnxCAif,ESmxCA8D,GTnxCA9D,EAAAA,EAAAA,ESmxCApD,ETnxCAoD,EAAAA,IAAAA,EAAAA,GAAAA,GAAAA,EAAAA,EAAAA,EAAAA,KAAAA,GAAAA,EAAAA,EAAAA,GAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,IAAAA,EAAAA,GAAAA,GAAAA,EAAAA,EAAAA,EAAAA,KAAAA,GAAAA,EAAAA,EAAAA,GAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,IAAAA,EAAAA,GAAAA,GAAAA,EAAAA,EAAAA,ESgyCA+D,KThyCA/D,GAAAA,EAAAA,ESgyCAgE,GThyCAhE,EAAAA,ESgyCAxkB,EThyCAwkB,EAAAA,EAAAA,IAAAA,EAAAA,GAAAA,GAAAA,EAAAA,EAAAA,EAAAA,KAAAA,GAAAA,EAAAA,EAAAA,GAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,IAAAA,GAAAA,EAAAA,YAAAA,GAAAA,EAAAA,EAAAA,OAAAA,MAAAA,EAAAA,OAAAA,EAAAA,WAAAA,OAAAA,EAAAA,OAAAA,EAAAA,YAAAA,EAAAA,QAAAA,IAAAA,ES2yCA7nB,ET3yCA6nB,GS2yCAuD,IT3yCAvD,GAAAA,GAAAA,GAAAA,EAAAA,EAAAA,WAAAA,EAAAA,EAAAA,SAAAA,GAAAA,EAAAA,MAAAA,GAAAA,EAAAA,EAAAA,EAAAA,EAAAA,OAAAA,IAAAA,GAAAA,EAAAA,EAAAA,EAAAA,EAAAA,MAAAA,GAAAA,EAAAA,EAAAA,GAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,GAAAA,GAAAA,OAAAA,IAAAA,EAAAA,YAAAA,GAAAA,EAAAA,EAAAA,OSuzCA+D,MTvzCA/D,EAAAA,OAAAA,EAAAA,WAAAA,OAAAA,ESwzCM7nB,OTxzCN6nB,EAAAA,YAAAA,ESyzCAuD,QAAA9qB,IAAAwrB,ETzzCAjE,GAAAA,GAAAA,IAAAA,KAAAA,EAAAA,OAAAA,ESyzCA3lB,ETzzCA2lB,EAAAA,QAAAA,QAAAA,UAAAA,EAAAA,OAAAA,IS6zCA7nB,KT7zCA6nB,MAAAA,IS6zCA5L,ET7zCA4L,EAAAA,OS6zCApD,ET7zCAoD,EAAAA,MAAAA,EAAAA,KAAAA,KAAAA,MAAAA,MAAAA,IAAAA,EAAAA,EAAAA,OAAAA,EAAAA,EAAAA,MAAAA,EAAAA,KAAAA,KAAAA,MAAAA,MAAAA,IAAAA,EAAAA,EAAAA,OAAAA,EAAAA,EAAAA,KAAAA,GAAAA,KAAAA,KAAAA,MAAAA,GAAAA,OAAAA,QAAAA,IAAAA,EAAAA,EAAAA,EAAAA,EAAAA,GAAAA,GAAAA,GAAAA,EAAAA,MAAAA,QAAAA,GAAAA,IAAAA,GAAAA,MAAAA,IAAAA,EAAAA,KSg2CArmB,GTh2CAqmB,MAAAA,IAAAA,GAAAA,GAAAA,EAAAA,EAAAA,EAAAA,EAAAA,IAAAA,KSg2CA7mB,GTh2CA6mB,MAAAA,IAAAA,GAAAA,GAAAA,EAAAA,EAAAA,EAAAA,EAAAA,IAAAA,GAAAA,EAAAA,EAAAA,EAAAA,EAAAA,IAAAA,KAAAA,GAAAA,MSk2CA0D,ITl2CA1D,GAAAA,GAAAA,EAAAA,EAAAA,EAAAA,ESk2CA3G,ITl2CA2G,GAAAA,EAAAA,EAAAA,EAAAA,EAAAA,IAAAA,GAAAA,EAAAA,EAAAA,EAAAA,EAAAA,IAAAA,SAAAA,IAAAA,GAAAA,GAAAA,GAAAA,OAAAA,GAAAA,EAAAA,EAAAA,EAAAA,EAAAA,IAAAA,EAAAA,GAAAA,GAAAA,EAAAA,EAAAA,EAAAA,EAAAA,GAAAA,OAAAA,KAAAA,EAAAA,KAAAA,MAAAA,OS+3CArmB,IT/3CAqmB,OAAAA,MS+3CA,QAAAtmB,IT/3CAsmB,ES+3CAxkB,ET/3CAwkB,EAAAA,ES+3CA7nB,GT/3CA6nB,GAAAA,GS+3CAtO,ET/3CAsO,MS+3CAhc,QT/3CAgc,GAAAA,IAAAA,GAAAA,MAAAA,IAAAA,KAAAA,GSi4CAvnB,MTj4CAunB,GAAAA,GAAAA,EAAAA,EAAAA,EAAAA,EAAAA,IAAAA,KAAAA,GAAAA,MAAAA,GAAAA,GAAAA,EAAAA,EAAAA,EAAAA,EAAAA,IAAAA,GAAAA,EAAAA,EAAAA,EAAAA,EAAAA,IAAAA,KAAAA,GAAAA,MAAAA,GAAAA,GAAAA,EAAAA,EAAAA,EAAAA,EAAAA,IAAAA,GAAAA,ESy6CArlB,ETz6CAqlB,EAAAA,ESy6CA,ITz6CAA,GAAAA,ESy6CAtmB,EAAAsK,ETz6CAgc,EAAAA,IAAAA,SAAAA,IAAAA,GAAAA,GAAAA,MAAAA,GAAAA,EAAAA,EAAAA,EAAAA,EAAAA,IAAAA,EAAAA,GAAAA,GAAAA,EAAAA,ESosCUrkB,ETpsCVqkB,EAAAA,GAAAA,OAAAA,GAAAA,UAAAA,GAAAA,IAAAA,QAAAA,IAAAA,EAAAA,ES26CAhc,EAAAsV,ET36CA0G,GAAAA,OAAAA,KAAAA,IAAAA,EAAAA,GAAAA,oBAAAA,EAAAA,EAAAA,MAAAA,MAAAA,GAAAA,KAAAA,IAAAA,GAAAA,CAAAA,GAAAA,EAAAA,QAAAA,EAAAA,KAAAA,IAAAA,GAAAA,EAAAA,QAAAA,KAAAA,IAAAA,KAAAA,KAAAA,IAAAA,EAAAA,QAAAA,gBAAAA,GAAAA,EAAAA,EAAAA,QAAAA,GAAAA,EAAAA,EAAAA,EAAAA,QAAAA,GAAAA,CAAAA,GAAAA,EAAAA,OAAAA,GSk8CA+D,ITl8CA/D,IAAAA,GSk8CAkE,GTl8CAlE,GAAAA,EAAAA,EAAAA,EAAAA,OAAAA,IAAAA,EAAAA,KAAAA,IAAAA,GAAAA,GSm8CA7nB,GTn8CA6nB,ESm8CAuD,ETn8CAvD,EAAAA,OAAAA,GAAAA,QAAAA,KAAAA,IAAAA,MAAAA,IAAAA,IAAAA,GAAAA,EAAAA,EAAAA,WAAAA,cAAAA,KAAAA,IAAAA,MAAAA,IAAAA,EAAAA,EAAAA,WAAAA,aAAAA,KAAAA,IAAAA,GAAAA,EAAAA,QAAAA,SAAAA,MAAAA,IAAAA,EAAAA,EAAAA,WAAAA,QAAAA,MAAAA,KAAAA,IAAAA,MAAAA,IAAAA,GAAAA,EAAAA,EAAAA,GAAAA,KAAAA,IAAAA,MAAAA,IAAAA,EAAAA,EAAAA,SAAAA,GAAAA,IAAAA,EAAAA,EAAAA,QAAAA,aAAAA,EAAAA,QAAAA,iBAAAA,EAAAA,IAAAA,EAAAA,CAAAA,GAAAA,GAAAA,GAAAA,EAAAA,EAAAA,UAAAA,OAAAA,KAAAA,GAAAA,SAAAA,GAAAA,EAAAA,IAAAA,EAAAA,MAAAA,EAAAA,WAAAA,GAAAA,EAAAA,UAAAA,EAAAA,GAAAA,GAAAA,EAAAA,GAAAA,GAAAA,EAAAA,EAAAA,OAAAA,GAAAA,GAAAA,EAAAA,KAAAA,SAAAA,IAAAA,EAAAA,MAAAA,GAAAA,OAAAA,KAAAA,IAAAA,IAAAA,GAAAA,EAAAA,EAAAA,KAAAA,SAAAA,SAAAA,IAAAA,EAAAA,MAAAA,GAAAA,QAAAA,IAAAA,EAAAA,EAAAA,GAAAA,GAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAAA,EAAAA,EAAAA,WAAAA,kBAAAA,KAAAA,EAAAA,EAAAA,EAAAA,SAAAA,GAAAA,IAAAA,EAAAA,EAAAA,MAAAA,OAAAA,GAAAA,QAAAA,IAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,GAAAA,GAAAA,MAAAA,EAAAA,MAAAA,CAAAA,GAAAA,GAAAA,GAAAA,EAAAA,EAAAA,OAAAA,WAAAA,aAAAA,GAAAA,EAAAA,IAAAA,QSi/CApb,ETj/CAob,OSi/CAtmB,GACAvB,GTl/CA6nB,GAAAA,EAAAA,SAAAA,GAAAA,EAAAA,EAAAA,IAAAA,IAAAA,EAAAA,SAAAA,GAAAA,EAAAA,OAAAA,EAAAA,MAAAA,CAAAA,EAAAA,KAAAA,IAAAA,GAAAA,EAAAA,UAAAA,EAAAA,aAAAA,EAAAA,aAAAA,MS2/CA+D,EAAApqB,ET3/CAqmB,SAAAA,EAAAA,EAAAA,SAAAA,GAAAA,iBAAAA,GAAAA,IAAAA,EAAAA,EAAAA,IAAAA,ES4/CAuD,ET5/CAvD,QAAAA,MAAAA,GAAAA,UAAAA,EAAAA,aAAAA,GAAAA,EAAAA,EAAAA,QAAAA,IAAAA,EAAAA,GAAAA,GAAAA,EAAAA,IAAAA,UAAAA,EAAAA,IAAAA,GAAAA,GAAAA,EAAAA,IAAAA,MAAAA,EAAAA,EAAAA,EAAAA,EAAAA,OAAAA,IAAAA,CAAAA,GAAAA,GU3EApD,EAAAuH,GV2EAnE,EAAAA,EAAAA,MAAAA,MAAAA,GAAAA,EAAAA,MAAAA,GAAAA,GAAAA,EAAAA,EAAAA,EAAAA,MAAAA,GAAAA,IAAAA,EAAAA,WAAAA,KAAAA,GAAAA,EAAAA,YAAAA,GAAAA,EAAAA,EAAAA,OAAAA,IAAAA,EAAAA,UAAAA,EAAAA,YAAAA,EAAAA,iBAAAA,GAAAA,GAAAA,EUDAthB,EVCAshB,GAAAA,EAAAA,EUDAlmB,QVCAkmB,QAAAA,IAAAA,EUIA7mB,EVJA6mB,GUIAjmB,IVJAimB,GAAAA,GAAAA,EUIA7nB,UVJA6nB,EAAAA,GAAAA,EAAAA,UAAAA,EAAAA,WAAAA,IAAAA,CAAAA,GAAAA,GAAAA,EUSAoE,IVTApE,MUSA5E,EAAAT,GVTAqF,MAAAA,GAAAA,GAAAA,EAAAA,EUDApd,EVCAod,MAAAA,GAAAA,GAAAA,EAAAA,YAAAA,QAAAA,IAAAA,EAAAA,EAAAA,GAAAA,GAAAA,GAAAA,GAAAA,EAAAA,EAAAA,IAAAA,EAAAA,CAAAA,GAAAA,GAAAA,EAAAA,QAAAA,KAAAA,GAAAA,eAAAA,EAAAA,GAAAA,QAAAA,GAAAA,EAAAA,qBAAAA,QAAAA,GAAAA,EAAAA,wBAAAA,QAAAA,GAAAA,EAAAA,kBAAAA,QAAAA,GAAAA,EAAAA,qBAAAA,OAAAA,GAAAA,EAAAA,gBAAAA,QAAAA,MAAAA,MAAAA,IAAAA,IAAAA,QAAAA,IAAAA,GAAAA,IAAAA,GAAAA,GAAAA,EAAAA,IAAAA,mBAAAA,EAAAA,QAAAA,GAAAA,IAAAA,CAAAA,GAAAA,GAAAA,EAAAA,aAAAA,GAAAA,EAAAA,MAAAA,KAAAA,GAAAA,GAAAA,EAAAA,UAAAA,EAAAA,WAAAA,EAAAA,EAAAA,GU8BAllB,EV9BAklB,IAAAA,CU8BA7kB,GV9BA6kB,GAAAA,EAAAA,IAAAA,MAAAA,EAAAA,UAAAA,EAAAA,OU8BAzb,UV9BAyb,EAAAA,QAAAA,EAAAA,MAAAA,SAAAA,KAAAA,EAAAA,MAAAA,UAAAA,GAAAA,EAAAA,GAAAA,aAAAA,EAAAA,EAAAA,OAAAA,EAAAA,EAAAA,WAAAA,EUmCAqE,YVnCArE,SAAAA,EAAAA,YAAAA,UAAAA,EAAAA,aAAAA,GAAAA,EAAAA,aAAAA,GAAAA,UAAAA,EAAAA,IAAAA,UAAAA,IAAAA,GAAAA,GAAAA,EAAAA,EAAAA,EAAAA,IAAAA,MAAAA,OAAAA,IAAAA,CAAAA,GAAAA,GAAAA,EAAAA,IAAAA,MAAAA,EAAAA,WU+CA9hB,EAAAvE,OV/CAqmB,UAAAA,EAAAA,OAAAA,GAAAA,EAAAA,GAAAA,WU+CAhG,GV/CAgG,EU+CAzb,YV/CAyb,QAAAA,IAAAA,EAAAA,GAAAA,GAAAA,GAAAA,GAAAA,EAAAA,EAAAA,UAAAA,IAAAA,EAAAA,MAAAA,CUqDA7Z,GVrDA6Z,GAAAA,MAAAA,EAAAA,IAAAA,SAAAA,EAAAA,MAAAA,CAAAA,GAAAA,GAAAA,EAAAA,OAAAA,MAAAA,GAAAA,GAAAA,EAAAA,EAAAA,UUgEA9hB,EAAAvE,UAAA2qB,EVhEAtE,WUgEAxkB,EVhEAwkB,UUgEA3lB,EVhEA2lB,GAAAA,EAAAA,EAAAA,OAAAA,WAAAA,aAAAA,WAAAA,EUkEAxF,QACAhD,EAAA+M,GAAAlB,EVnEArD,EAAAA,EAAAA,IAAAA,MAAAA,OAAAA,EAAAA,EAAAA,UAAAA,EAAAA,EAAAA,UAAAA,GAAAA,MAAAA,EAAAA,KAAAA,GAAAA,GAAAA,EAAAA,MAAAA,SU6EArmB,GV7EAqmB,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,OAAAA,IAAAA,CAAAA,GAAAA,GAAAA,EAAAA,GAAAA,MU6EA,EV7EAA,QU8EA7Z,EV9EA6Z,aAAAA,IAAAA,GU+EA7mB,EAAAqrB,EV/EAxE,KAAAA,MAAAA,KAAAA,GAAAA,EAAAA,EAAAA,GAAAA,EAAAA,EAAAA,EAAAA,UAAAA,EAAAA,GAAAA,EAAAA,mBAAAA,QAAAA,IAAAA,EAAAA,EAAAA,EAAAA,EAAAA,GAAAA,IAAAA,GAAAA,GAAAA,EAAAA,GAAAA,EAAAA,IAAAA,CAAAA,GAAAA,GAAAA,EAAAA,IAAAA,MAAAA,GAAAA,EAAAA,EAAAA,eU+FAtmB,EV/FAsmB,GU+FA7mB,IAAAhB,MV/FA6nB,GAAAA,EAAAA,KAAAA,GAAAA,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,OAAAA,EAAAA,QAAAA,WAAAA,EAAAA,QAAAA,SAAAA,mBAAAA,EAAAA,YAAAA,EUyGAtmB,SVzGAsmB,CAAAA,GAAAA,GAAAA,GAAAA,EAAAA,EAAAA,KAAAA,EAAAA,oBAAAA,EAAAA,YAAAA,EAAAA,WAAAA,GAAAA,EAAAA,EAAAA,EUiHAthB,EVjHAshB,EAAAA,WUsHAvF,EVtHAuF,GAAAA,GUsHApb,EVtHAob,YAAAA,SAAAA,EAAAA,MAAAA,IAAAA,GAAAA,GAAAA,EAAAA,cAAAA,eAAAA,EAAAA,EAAAA,EAAAA,EAAAA,OAAAA,IAAAA,CAAAA,GAAAA,GAAAA,EAAAA,GAAAA,EAAAA,GAAAA,EAAAA,IAAAA,IAAAA,GAAAA,GAAAA,EAAAA,EAAAA,EAAAA,IAAAA,MAAAA,OAAAA,EAAAA,EAAAA,GAAAA,GAAAA,GAAAA,EAAAA,SAAAA,eAAAA,IAAAA,EAAAA,IAAAA,GAAAA,GUqIA7Y,EVrIA6Y,EAAAA,EAAAA,OAAAA,IUDAyE,CVCAzE,GAAAA,GUwIAnmB,EVxIAmmB,EAAAA,IAAAA,EAAAA,EAAAA,EAAAA,IUyIAnH,MVzIAmH,OAAAA,EAAAA,EAAAA,KAAAA,EAAAA,oBAAAA,EAAAA,YAAAA,EAAAA,WAAAA,GAAAA,EAAAA,YAAAA,MAAAA,GAAAA,QAAAA,IAAAA,EAAAA,EAAAA,GAAAA,GAAAA,MAAAA,EAAAA,OAAAA,GAAAA,IAAAA,GAAAA,MAAAA,IAAAA,EAAAA,EAAAA,WAAAA,aAAAA,KAAAA,GAAAA,MAAAA,IAAAA,IAAAA,GAAAA,EAAAA,EAAAA,WAAAA,cAAAA,KAAAA,GAAAA,MAAAA,IAAAA,EAAAA,EAAAA,WAAAA,QAAAA,KAAAA,GAAAA,MAAAA,IAAAA,EAAAA,EAAAA,WAAAA,aAAAA,KAAAA,GAAAA,MAAAA,IAAAA,EAAAA,EAAAA,WAAAA,UAAAA,QAAAA,IAAAA,EAAAA,EAAAA,GAAAA,GAAAA,GAAAA,GAAAA,EAAAA,EAAAA,EAAAA,IAAAA,GAAAA,EAAAA,EAAAA,UAAAA,MAAAA,EAAAA,EAAAA,SAAAA,IAAAA,QAAAA,IAAAA,EAAAA,GAAAA,OAAAA,UAAAA,IAAAA,QAAAA,IAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,GAAAA,GAAAA,GAAAA,EAAAA,SAAAA,GAAAA,EAAAA,EAAAA,EAAAA,MAAAA,IAAAA,EAAAA,GAAAA,GAAAA,EAAAA,EAAAA,EAAAA,KAAAA,GAAAA,GAAAA,EAAAA,GAAAA,GAAAA,EAAAA,EAAAA,EAAAA,KAAAA,GAAAA,GAAAA,EAAAA,GAAAA,GAAAA,EAAAA,EAAAA,EAAAA,KAAAA,GAAAA,GAAAA,EAAAA,GAAAA,GAAAA,EAAAA,EAAAA,EAAAA,KAAAA,GAAAA,GAAAA,EAAAA,GAAAA,GAAAA,EAAAA,EAAAA,EAAAA,KAAAA,GAAAA,GAAAA,EAAAA,GAAAA,GAAAA,EAAAA,EAAAA,EAAAA,KAAAA,GAAAA,GAAAA,EAAAA,GAAAA,GAAAA,EAAAA,EAAAA,EAAAA,KAAAA,GAAAA,GAAAA,EAAAA,GAAAA,GAAAA,EAAAA,EAAAA,EAAAA,KAAAA,GAAAA,GAAAA,EAAAA,GAAAA,GAAAA,EAAAA,EAAAA,EAAAA,KAAAA,GAAAA,GAAAA,EAAAA,GAAAA,GAAAA,EAAAA,EAAAA,EAAAA,KAAAA,GAAAA,GAAAA,EAAAA,CAAAA,GAAAA,GAAAA,GAAAA,EAAAA,EAAAA,WAAAA,MAAAA,EAAAA,QAAAA,UAAAA,EAAAA,OAAAA,IAAAA,IAAAA,EAAAA,GAAAA,OAAAA,EAAAA,QAAAA,EAAAA,IAAAA,EAAAA,GAAAA,GAAAA,EAAAA,IAAAA,EAAAA,GAAAA,GAAAA,EAAAA,IAAAA,EAAAA,GAAAA,GAAAA,EAAAA,IAAAA,EAAAA,GAAAA,GAAAA,EAAAA,IAAAA,EAAAA,GAAAA,GAAAA,EAAAA,IAAAA,EAAAA,GAAAA,GAAAA,EAAAA,IAAAA,EAAAA,GAAAA,GAAAA,EAAAA,IAAAA,EAAAA,GAAAA,GAAAA,EAAAA,IAAAA,EAAAA,GAAAA,GAAAA,EAAAA,IAAAA,EAAAA,GAAAA,EAAAA,MAAAA,KAAAA,IAAAA,KAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAAA,MAAAA,GAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAAA,MAAAA,GAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAAA,MAAAA,GAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAAA,MAAAA,GAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAAA,MAAAA,GAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAAA,MAAAA,GAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAAA,MAAAA,GAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAAA,MAAAA,GAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAAA,MAAAA,GAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAAA,MAAAA,EAAAA,MAAAA,KAAAA,KAAAA,GAAAA,GAAAA,CAAAA,QAAAA,GAAAA,IAAAA,GAAAA,EAAAA,EAAAA,UAAAA,EAAAA,MAAAA,KAAAA,GAAAA,EAAAA,EAAAA,UAAAA,EAAAA,MAAAA,KAAAA,GAAAA,EAAAA,EAAAA,UAAAA,EAAAA,EAAAA,MAAAA,KAAAA,GAAAA,EAAAA,EAAAA,UAAAA,EAAAA,EWdA0E,EXcA1E,MAAAA,KAAAA,GAAAA,EAAAA,EAAAA,UAAAA,EAAAA,EAAAA,EAAAA,EAAAA,MAAAA,KAAAA,GAAAA,EAAAA,EAAAA,UAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,MAAAA,KAAAA,GAAAA,EAAAA,EAAAA,UAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,MAAAA,KAAAA,GAAAA,EAAAA,EAAAA,UAAAA,EAAAA,EAAAA,EAAAA,EAAAA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AA,KAAAA,IAAAA,KM4KArgB,IN5KAqgB,MAAAA,IAAAA,KAAAA,IAAAA,KAAAA,IAAAA,KAAAA,IAAAA,KAAAA,IAAAA,KAAAA,IAAAA,MMgLAngB,INhLAmgB,MAAAA,IAAAA,MAAAA,MAAAA,KAAAA,EAAAA,GAAAA,IAAAA,GAAAA,KAAAA,KMgLAsC,KNhLAtC,IAAAA,KAAAA,IAAAA,KAAAA,IAAAA,KAAAA,IAAAA,KAAAA,MAAAA,KAAAA,KAAAA,MAAAA,IAAAA,GAAAA,GAAAA,GMoOAngB,ENpOAmgB,GMoOAuC,INpOAvC,GAAAA,KAAAA,KMqOAngB,KAAAqhB,INrOAlB,KAAAA,IAAAA,KAAAA,IAAAA,KAAAA,IAAAA,KAAAA,IAAAA,KAAAA,IAAAA,KAAAA,IAAAA,KAAAA,IAAAA,KMwOA3e,MNxOA2e,KAAAA,GAAAA,IMwOAwC,ENxOAxC,GMwOAngB,INxOAmgB,GAAAA,KAAAA,KAAAA,KAAAA,MAAAA,KAAAA,EAAAA,GAAAA,KAAAA,IAAAA,EAAAA,GAAAA,IAAAA,IAAAA,EAAAA,GAAAA,IAAAA,EAAAA,MAAAA,KAAAA,MAAAA,EAAAA,MAAAA,EAAAA,KAAAA,GAAAA,EAAAA,KAAAA,GAAAA,GAAAA,IAAAA,EAAAA,MAAAA,KAAAA,MAAAA,EAAAA,MAAAA,EAAAA,KAAAA,IAAAA,EAAAA,KAAAA,GAAAA,GAAAA,KAAAA,GO8EAyC,KAAA9hB,KP9EAqf,MO8EArgB,IP9EAqgB,KAAAA,IAAAA,KOgFIrf,IPhFJqf,KAAAA,IOiFArf,KPjFAqf,IOiFA,KPjFAA,IAAAA,KAAAA,IAAAA,KAAAA,IAAAA,KAAAA,IAAAA,KAAAA,IAAAA,KAAAA,IAAAA,KAAAA,IAAAA,KAAAA,IAAAA,KAAAA,MAAAA,KAAAA,GAAAA,IAAAA,EAAAA,GAAAA,IAAAA,GAAAA,KAAAA,KOsFArd,KPtFAqd,MAAAA,GAAAA,IAAAA,GAAAA,EAAAA,KAAAA,GAAAA,GAAAA,IAAAA,EAAAA,KOsFA0C,KPtFA1C,MAAAA,EAAAA,KAAAA,EAAAA,IAAAA,GAAAA,EAAAA,IAAAA,KAAAA,EAAAA,KAAAA,IAAAA,EAAAA,KAAAA,IAAAA,GAAAA,IAAAA,EAAAA,IAAAA,GAAAA,EAAAA,KAAAA,KAAAA,MO0FA7c,EP1FA6c,KAAAA,EO0FUpS,IP1FVoS,GAAAA,EAAAA,IAAAA,GO4FArgB,EP5FAqgB,MAAAA,KAAAA,MAAAA,EAAAA,MAAAA,EAAAA,KAAAA,IAAAA,EAAAA,KAAAA,GAAAA,GAAAA,KAAAA,GAAAA,KAAAA,KAAAA,KAAAA,MAAAA,GAAAA,IAAAA,GAAAA,EAAAA,KAAAA,IAAAA,EAAAA,KAAAA,IAAAA,EAAAA,KAAAA,GAAAA,GAAAA,IAAAA,EAAAA,IAAAA,GAAAA,EAAAA,KAAAA,IAAAA,EAAAA,KAAAA,IAAAA,EAAAA,KAAAA,GAAAA,GAAAA,IAAAA,EAAAA,KAAAA,KAAAA,MAAAA,EAAAA,MAAAA,EAAAA,IAAAA,GAAAA,EAAAA,IAAAA,GAAAA,EAAAA,IAAAA,MAAAA,EAAAA,KAAAA,IAAAA,EAAAA,KAAAA,IAAAA,EAAAA,KAAAA,IAAAA,EAAAA,KAAAA,IAAAA,EOgHA2C,KPhHA3C,IAAAA,EAAAA,KAAAA,IAAAA,GAAAA,IAAAA,IAAAA,GAAAA,EAAAA,KAAAA,EAAAA,GAAAA,KAAAA,GAAAA,KAAAA,KAAAA,KAAAA,IAAAA,KAAAA,IAAAA,KAAAA,MAAAA,KAAAA,GAAAA,EAAAA,IAAAA,GAAAA,EAAAA,KAAAA,IAAAA,EAAAA,IAAAA,GAAAA,EAAAA,KAAAA,GAAAA,GAAAA,IAAAA,IAAAA,GAAAA,EAAAA,KAAAA,KAAAA,MAAAA,EAAAA,KAAAA,EAAAA,IAAAA,GAAAA,EAAAA,IAAAA,KAAAA,EAAAA,KAAAA,IAAAA,EAAAA,KAAAA,KAAAA,EAAAA,KAAAA,KAAAA,MAAAA,EAAAA,KAAAA,EAAAA,IAAAA,GAAAA,EAAAA,IAAAA,KAAAA,EAAAA,KAAAA,IAAAA,EAAAA,KAAAA,IAAAA,GAAAA,IAAAA,GAAAA,KAAAA,KAAAA,KAAAA,IAAAA,KAAAA,MAAAA,KAAAA,GAAAA,IAAAA,EAAAA,GAAAA,IAAAA,IAAAA,KO6HA4C,MP7HA5C,IAAAA,GAAAA,GAAAA,GAAAA,GAAAA,IAAAA,EAAAA,GAAAA,IAAAA,IAAAA,EAAAA,GAAAA,KAAAA,GAAAA,KAAAA,KAAAA,KAAAA,MAAAA,KAAAA,EAAAA,GAAAA,KAAAA,IAAAA,EAAAA,GAAAA,IAAAA,IAAAA,EAAAA,GAAAA,IAAAA,IAAAA,EAAAA,GAAAA,IAAAA,IOkIAoC,EPlIApC,GAAAA,KAAAA,GAAAA,KAAAA,KAAAA,KAAAA,MAAAA,KAAAA,GAAAA,IAAAA,IAAAA,IAAAA,GAAAA,IAAAA,GAAAA,GAAAA,IAAAA,GAAAA,KAAAA,KAAAA,MAAAA,IAAAA,MAAAA,MAAAA,KAAAA,GAAAA,EAAAA,KAAAA,GAAAA,EAAAA,KAAAA,EAAAA,GAAAA,IAAAA,IAAAA,GAAAA,EAAAA,KAAAA,GAAAA,EAAAA,KAAAA,EAAAA,GAAAA,IAAAA,IO2GA6C,GP3GA7C,EAAAA,MAAAA,KAAAA,MAAAA,EAAAA,MAAAA,EAAAA,KAAAA,GAAAA,EO6GUrgB,KAAKshB,GP7GfjB,EAAAA,MAAAA,KAAAA,MAAAA,EO6IMrgB,MP7INqgB,EAAAA,KAAAA,GAAAA,EAAAA,KO6IA8C,EP7IA9C,GAAAA,IAAAA,GAAAA,KAAAA,KAAAA,KAAAA,IAAAA,KAAAA,IAAAA,KAAAA,IAAAA,MAAAA,MAAAA,KAAAA,GAAAA,IAAAA,EAAAA,GAAAA,IAAAA,GAAAA,KAAAA,KAAAA,MAAAA,MAAAA,KAAAA,IAAAA,IAAAA,GAAAA,IAAAA,GAAAA,IAAAA,IAAAA,IAAAA,GAAAA,EAAAA,IAAAA,GAAAA,EOwJA+C,IPxJA/C,GAAAA,EAAAA,IAAAA,GAAAA,IAAAA,GAAAA,EOyJIrgB,IPzJJqgB,GAAAA,EAAAA,IAAAA,GAAAA,EAAAA,IAAAA,EO0JArgB,GP1JAqgB,IAAAA,GAAAA,KAAAA,KAAAA,KAAAA,MAAAA,KAAAA,EAAAA,GAAAA,IAAAA,IAAAA,EAAAA,GAAAA,IAAAA,IAAAA,KAAAA,MAAAA,IAAAA,GAAAA,GAAAA,GAAAA,EAAAA,GAAAA,IAAAA,IAAAA,KAAAA,MO0HArgB,IP1HAqgB,GAAAA,GAAAA,GAAAA,GAAAA,GAAAA,KAAAA,GAAAA,KAAAA,KO0HA,KP1HAA,MAAAA,KO6JA7c,GP7JA6c,KAAAA,EAAAA,GAAAA,IAAAA,IAAAA,GAAAA,KAAAA,EO8HAK,GAAAtX,IP9HAiX,IAAAA,KAAAA,MAAAA,KAAAA,GAAAA,GAAAA,GAAAA,IAAAA,GAAAA,IAAAA,GO8HAgD,IP9HAhD,GAAAA,IOsKAtgB,GPtKAsgB,KAAAA,KAAAA,KAAAA,MAAAA,KAAAA,GAAAA,EOoIAngB,IPpIAmgB,EAAAA,GAAAA,IAAAA,IAAAA,GAAAA,EAAAA,IOoIAwC,EPpIAxC,GOoIAngB,IPpIAmgB,IAAAA,GAAAA,EAAAA,KAAAA,GAAAA,EAAAA,KAAAA,IAAAA,EAAAA,KAAAA,IAAAA,EAAAA,KAAAA,IAAAA,EOqIiDngB,KAmCjDshB,GPxKAnB,IAAAA,EAAAA,GAAAA,KAAAA,GAAAA,MAAAA,GAAAA,GAAAA,KAAAA,KAAAA,MAAAA,KAAAA,GOyKAwC,IPzKAxC,EAAAA,GAAAA,IAAAA,IAAAA,GOyKA3R,IPzKA2R,EAAAA,GOyKAiD,IPzKAjD,IO0KAngB,GP1KAmgB,GAAAA,GAAAA,GAAAA,IAAAA,EAAAA,IAAAA,EO0KAngB,GP1KAmgB,MAAAA,GAAAA,IAAAA,KAAAA,KAAAA,MAAAA,KAAAA,GAAAA,EAAAA,IO4KA5f,GP5KA4f,EAAAA,KAAAA,IAAAA,IAAAA,EAAAA,GAAAA,IAAAA,GAAAA,KAAAA,KAAAA,MAAAA,MAAAA,KAAAA,EAAAA,GAAAA,KAAAA,IQpCAxc,ERoCAwc,GAAAA,IQpCAkD,GRoCAlD,KAAAA,KAAAA,KAAAA,IAAAA,MAAAA,IAAAA,KAAAA,IAAAA,MAAAA,MAAAA,KAAAA,EAAAA,GAAAA,IAAAA,IAAAA,EAAAA,GAAAA,IAAAA,GAAAA,KAAAA,KAAAA,MAAAA,MAAAA,KAAAA,EAAAA,GAAAA,KAAAA,IAAAA,GAAAA,IAAAA,GAAAA,IAAAA,EAAAA,GAAAA,MAAAA,GAAAA,GAAAA,KQoBS,KRpBTA,MAAAA,GAAAA,IAAAA,GAAAA,EAAAA,KAAAA,IAAAA,EAAAA,KAAAA,GAAAA,EAAAA,KAAAA,KAAAA,MAAAA,EAAAA,KAAAA,EAAAA,IAAAA,GAAAA,EAAAA,IAAAA,KAAAA,EAAAA,KAAAA,IAAAA,EAAAA,KAAAA,IAAAA,GAAAA,IAAAA,IAAAA,EQ4CGmD,GR5CHnD,KAAAA,GAAAA,MAAAA,GAAAA,GQ8CAjU,KAAA,KR9CAiU,IAAAA,MAAAA,MAAAA,GAAAA,IAAAA,GAAAA,EAAAA,MAAAA,KAAAA,MAAAA,EAAAA,MAAAA,EAAAA,KAAAA,IAAAA,EAAAA,KAAAA,IAAAA,IAAAA,GAAAA,EAAAA,MAAAA,KAAAA,MAAAA,EAAAA,MAAAA,EAAAA,KAAAA,IAAAA,EAAAA,KAAAA,GAAAA,GAAAA,KAAAA,EAAAA,IAAAA,GAAAA,EAAAA,KAAAA,IAAAA,IAAAA,GAAAA,EAAAA,IAAAA,GAAAA,EAAAA,KAAAA,IAAAA,IAAAA,GAAAA,EAAAA,IAAAA,EAAAA,GAAAA,IAAAA,GAAAA,KAAAA,KAAAA,KAAAA,MQkEAmD,KRlEAnD,GAAAA,EAAAA,IAAAA,GAAAA,EAAAA,IAAAA,EAAAA,GAAAA,IAAAA,GAAAA,KAAAA,KAAAA,KAAAA,MAAAA,KAAAA,EAAAA,GQkEAoD,IRlEApD,IAAAA,GQoEA3e,ERpEA2e,MAAAA,KQqEAngB,MRrEAmgB,EQqEAjX,MRrEAiX,EAAAA,KAAAA,GAAAA,EAAAA,KAAAA,GAAAA,GAAAA,IAAAA,EAAAA,MAAAA,KAAAA,MAAAA,EAAAA,MAAAA,EAAAA,KAAAA,IAAAA,EAAAA,KAAAA,GAAAA,GAAAA,KAAAA,GAAAA,KAAAA,KAAAA,KAAAA,MAAAA,KAAAA,GAAAA,IAAAA,EAAAA,GAAAA,IAAAA,IAAAA,GAAAA,EAAAA,KAAAA,KAAAA,MAAAA,EAAAA,KAAAA,EAAAA,IAAAA,GAAAA,EAAAA,IAAAA,KAAAA,EAAAA,KAAAA,IAAAA,EAAAA,KAAAA,IAAAA,GAAAA,IAAAA,IAAAA,GAAAA,IAAAA,GAAAA,EAAAA,KAAAA,KAAAA,MAAAA,EAAAA,KAAAA,EAAAA,IAAAA,GAAAA,EAAAA,IAAAA,GAAAA,IAAAA,GAAAA,EAAAA,KAAAA,KAAAA,MAAAA,EQiHA,KRjHAA,EAAAA,IAAAA,GAAAA,EAAAA,IQiHA,GRjHAA,IAAAA,GAAAA,EAAAA,MAAAA,KAAAA,MAAAA,EAAAA,MAAAA,EAAAA,KAAAA,IAAAA,EAAAA,KAAAA,GAAAA,GAAAA,KQiHA5V,GAAAiZ,KRjHArD,KAAAA,KAAAA,MAAAA,KQqHA0C,KRrHA1C,MAAAA,IAAAA,GQsHArgB,GRtHAqgB,GQsHAvR,GRtHAuR,IAAAA,EQsHAsD,GAAAC,IRtHAvD,GAAAA,KQsHAzI,KRtHAyI,KQyHAqD,MRzHArD,KAAAA,GAAAA,IAAAA,EAAAA,GQ2HAngB,IR3HAmgB,IQ2HAjX,GR3HAiX,IAAAA,GAAAA,IAAAA,GAAAA,EAAAA,MAAAA,KAAAA,MAAAA,EAAAA,MAAAA,EAAAA,KAAAA,GAAAA,EAAAA,KAAAA,GAAAA,GAAAA,IAAAA,GAAAA,KAAAA,KAAAA,KAAAA,IAAAA,KAAAA,MAAAA,KAAAA,GAAAA,EAAAA,IAAAA,GAAAA,EAAAA,KAAAA,GAAAA,GAAAA,IAAAA,IAAAA,GAAAA,EAAAA,KAAAA,KAAAA,MAAAA,EAAAA,KAAAA,EAAAA,IAAAA,GAAAA,EAAAA,IAAAA,KAAAA,EAAAA,KAAAA,IAAAA,EAAAA,KAAAA,IAAAA,GAAAA,IAAAA,IAAAA,GAAAA,EAAAA,IAAAA,GQiJA,IRjJAA,GAAAA,EAAAA,KAAAA,KAAAA,MAAAA,EAAAA,KAAAA,EAAAA,IAAAA,GAAAA,EAAAA,IAAAA,GAAAA,IAAAA,GAAAA,EAAAA,MAAAA,KAAAA,MAAAA,EAAAA,MAAAA,EAAAA,KAAAA,IAAAA,EAAAA,KAAAA,GAAAA,GAAAA,KAAAA,GAAAA,KAAAA,KAAAA,MAAAA,MAAAA,KAAAA,GAAAA,IAAAA,EAAAA,GAAAA,IAAAA,IAAAA,KAAAA,MAAAA,IAAAA,GAAAA,GAAAA,GAAAA,GAAAA,GAAAA,IAAAA,GAAAA,KAAAA,KAAAA,KAAAA,MAAAA,KAAAA,GAAAA,IAAAA,GAAAA,IAAAA,GAAAA,IAAAA,EAAAA,GAAAA,IAAAA,GAAAA,KAAAA,KAAAA,KAAAA,MAAAA,KAAAA,GAAAA,EAAAA,KAAAA,EAAAA,GAAAA,IAAAA,IAAAA,GAAAA,EAAAA,KAAAA,EAAAA,GAAAA,IAAAA,IAAAA,GAAAA,EAA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"}